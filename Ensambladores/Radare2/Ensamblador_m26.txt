xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff0
push eax
push esp
push edx
push loc.gcc2_compiled._3
push sym._init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
call 0x8048690
pop ebx
add ebx, 0x16b0
mov eax, dword [ebx + 0x58]
test eax, eax
je 0x80486a3
call eax
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 8
cmp dword [obj.completed.4], 0
jne 0x80486fd
jmp 0x80486d3
mov eax, dword [obj.p.3]
lea edx, [eax + 4]
mov dword [obj.p.3], edx
mov eax, dword [eax]
call eax
mov eax, dword [obj.p.3]
cmp dword [eax], 0
jne 0x80486c1
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x80486f3
add esp, 0xfffffff4
push obj.__EH_FRAME_BEGIN__
call sym.imp.__deregister_frame_info
mov dword [obj.completed.4], 1
leave
ret
push ebp
mov ebp, esp
sub esp, 8
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x8048729
add esp, 0xfffffff8
push obj.object.11
push obj.__EH_FRAME_BEGIN__
call sym.imp.__register_frame_info
leave
ret
jmp dword [reloc.__register_frame_info]
push ebp
mov ebp, esp
sub esp, 8
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
mov ebx, obj.__CTOR_LIST__
cmp dword [obj.__CTOR_LIST__], 0xffffffff
je 0x8048bd1
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x8048bc5
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 8
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
call 0x8048500
pop ebx
add ebx, 0x1840
call loc.gcc2_compiled.
call sym.frame_dummy
call loc.gcc2_compiled._2
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 0x848
add esp, 0xfffffffc
push 0
push 1
push 2
call sym.imp.socket
add esp, 0x10
mov eax, eax
mov dword [fildes], eax
mov word [address], 2
add esp, 0xfffffff4
push 0x4652
call sym.imp.htons
add esp, 0x10
mov eax, eax
mov edx, eax
mov word [var_82ah], dx
mov dword [var_828h], 0
add esp, 0xfffffffc
push 0x10
lea eax, [address]
push eax
mov eax, dword [fildes]
push eax
call sym.imp.bind
add esp, 0x10
add esp, 0xfffffff8
push 2
mov eax, dword [fildes]
push eax
call sym.imp.listen
add esp, 0x10
mov dword [addrlen], 0x10
add esp, 0xfffffffc
lea eax, [addrlen]
push eax
lea eax, [address]
push eax
mov eax, dword [fildes]
push eax
call sym.imp.getsockname
add esp, 0x10
mov eax, eax
test eax, eax
jne 0x8048829
add esp, 0xfffffffc
movzx eax, word [var_82ah]
add esp, 0xfffffff4
push eax
call sym.imp.ntohs
add esp, 0x10
mov eax, eax
mov edx, eax
movzx eax, dx
push eax
movzx eax, word [var_82ah]
add esp, 0xfffffff4
push eax
call sym.imp.ntohs
add esp, 0x10
mov eax, eax
mov edx, eax
movzx eax, dx
push eax
push str.listening_on_port__u0x_x_n
call sym.imp.printf
add esp, 0x10
mov dword [addrlen], 0x10
add esp, 0xfffffffc
lea eax, [addrlen]
push eax
lea eax, [var_81ch]
push eax
mov eax, dword [fildes]
push eax
call sym.imp.accept
add esp, 0x10
mov eax, eax
mov dword [var_4h], eax
add esp, 0xfffffff8
movzx eax, word [var_81ah]
add esp, 0xfffffff4
push eax
call sym.imp.ntohs
add esp, 0x10
mov eax, eax
mov edx, eax
movzx eax, dx
push eax
add esp, 0xfffffff4
mov eax, dword [var_818h]
push eax
call sym.imp.ntohl
add esp, 0x10
mov eax, eax
mov edx, eax
mov eax, edx
and eax, 0xff
push eax
add esp, 0xfffffff4
mov eax, dword [var_818h]
push eax
call sym.imp.ntohl
add esp, 0x10
mov eax, eax
mov edx, eax
mov eax, edx
shr eax, 8
mov edx, eax
movzx edx, dl
push edx
add esp, 0xfffffff4
mov eax, dword [var_818h]
push eax
call sym.imp.ntohl
add esp, 0x10
mov eax, eax
mov edx, eax
mov eax, edx
shr eax, 0x10
mov edx, eax
movzx edx, dl
push edx
add esp, 0xfffffff4
mov eax, dword [var_818h]
push eax
call sym.imp.ntohl
add esp, 0x10
mov eax, eax
mov edx, eax
mov eax, edx
shr eax, 0x18
mov edx, eax
movzx edx, dl
push edx
push str.accepted_connection_from__u._u._u._u:_u___stdout_stderr__n
call sym.imp.printf
add esp, 0x20
mov dword [addrlen], 0x10
add esp, 0xfffffffc
lea eax, [addrlen]
push eax
lea eax, [var_81ch]
push eax
mov eax, dword [fildes]
push eax
call sym.imp.accept
add esp, 0x10
mov eax, eax
mov dword [socket], eax
cmp dword [socket], 0xffffffff
je 0x8048940
cmp dword [var_4h], 0xffffffff
je 0x8048940
jmp 0x8048945
nop
lea esi, [esi]
jmp 0x8048b69
add esp, 0xfffffff8
movzx eax, word [var_81ah]
add esp, 0xfffffff4
push eax
call sym.imp.ntohs
add esp, 0x10
mov eax, eax
mov edx, eax
movzx eax, dx
push eax
add esp, 0xfffffff4
mov eax, dword [var_818h]
push eax
call sym.imp.ntohl
add esp, 0x10
mov eax, eax
mov edx, eax
mov eax, edx
and eax, 0xff
push eax
add esp, 0xfffffff4
mov eax, dword [var_818h]
push eax
call sym.imp.ntohl
add esp, 0x10
mov eax, eax
mov edx, eax
mov eax, edx
shr eax, 8
mov edx, eax
movzx edx, dl
push edx
add esp, 0xfffffff4
mov eax, dword [var_818h]
push eax
call sym.imp.ntohl
add esp, 0x10
mov eax, eax
mov edx, eax
mov eax, edx
shr eax, 0x10
mov edx, eax
movzx edx, dl
push edx
add esp, 0xfffffff4
mov eax, dword [var_818h]
push eax
call sym.imp.ntohl
add esp, 0x10
mov eax, eax
mov edx, eax
mov eax, edx
shr eax, 0x18
mov edx, eax
movzx edx, dl
push edx
push str.accepted_connection_from__u._u._u._u:_u___stdin__n
call sym.imp.printf
add esp, 0x20
add esp, 0xfffffff4
push str.now_you_can_type_commands_on_the_other_host_ntype__exit__when_you_want_to_quit_n
call sym.imp.printf
add esp, 0x10
mov byte [var_dh], 0
mov byte [buffer], 0
lea esi, [esi]
jmp 0x8048a17
jmp 0x8048b68
push 0x40
add esp, 0xfffffff4
lea eax, [buffer]
push eax
call sym.imp.strlen
add esp, 0x10
mov eax, eax
push eax
lea eax, [buffer]
push eax
mov eax, dword [socket]
push eax
call sym.imp.send
add esp, 0x10
mov eax, eax
mov dword [var_834h], eax
cmp dword [var_834h], 0xffffffff
jne 0x8048a62
add esp, 0xfffffff4
push 0x8048d0f
call sym.imp.perror
add esp, 0x10
add esp, 0xfffffff4
push 1
call sym.imp.sleep
add esp, 0x10
push 0x40
push 0x3ff
lea eax, [var_40ch]
push eax
mov eax, dword [var_4h]
push eax
call sym.imp.recv
add esp, 0x10
mov eax, eax
mov dword [var_834h], eax
cmp dword [var_834h], 0
jne 0x8048aa0
jmp 0x8048b69
nop
cmp dword [var_834h], 0xffffffff
je 0x8048b16
lea esi, [esi]
lea eax, [var_40ch]
mov edx, dword [var_834h]
mov byte [edx + eax], 0
add esp, 0xfffffff8
lea eax, [var_40ch]
push eax
push 0x8048d10
call sym.imp.printf
add esp, 0x10
push 0x40
push 0x3ff
lea eax, [var_40ch]
push eax
mov eax, dword [var_4h]
push eax
call sym.imp.recv
add esp, 0x10
mov eax, eax
mov dword [var_834h], eax
cmp dword [var_834h], 0
jg 0x8048b04
jmp 0x8048b06
jmp 0x8048ab0
add esp, 0xfffffff4
push 0x8048d13
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffffc
push 0x3fe
lea eax, [buffer]
push eax
push 0
call sym.imp.read
add esp, 0x10
mov eax, eax
mov dword [var_834h], eax
cmp dword [var_834h], 0
jge 0x8048b42
jmp 0x8048b69
mov eax, dword [var_834h]
inc eax
lea edx, [buffer]
mov byte [eax + edx], 0xa
lea eax, [buffer]
mov edx, dword [var_834h]
mov byte [edx + eax], 0
jmp 0x8048a10
nop
add esp, 0xfffffff4
mov eax, dword [fildes]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [var_4h]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [socket]
push eax
call sym.imp.close
add esp, 0x10
xor eax, eax
jmp 0x8048ba0
lea esi, [esi]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
call 0x8048be8
pop ebx
add ebx, 0x1158
nop
call loc.gcc2_compiled._1
pop ebx
leave
ret
jmp dword [reloc.ntohl]
jmp dword [reloc.close]
jmp dword [reloc.perror]
jmp dword [reloc.accept]
jmp dword [reloc.listen]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.ntohs]
jmp dword [reloc.strlen]
jmp dword [reloc.sleep]
jmp dword [reloc.printf]
jmp dword [reloc.bind]
jmp dword [reloc.getsockname]
jmp dword [reloc.send]
jmp dword [reloc.htons]
jmp dword [reloc.recv]
jmp dword [reloc.socket]
jmp dword [reloc.read]
