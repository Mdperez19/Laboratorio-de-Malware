xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff8
push eax
push esp
push edx
push fcn.0804f870
push fcn.08048e70
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
push eax
call fcn.0804e250
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov esi, dword [arg_8h]
test esi, esi
je 0x804e2d2
mov edx, dword [0x8051fc4]
mov dword [ptr], edx
cmp byte [esi], 0
je 0x804e280
push str.messages
push esi
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804e290
mov dword [0x8051fc4], 0x8050e1f
jmp 0x804e2c0
lea esi, [esi]
xor al, al
mov edi, esi
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov ebx, ecx
not ebx
push ebx
call sym.imp.malloc
mov edi, eax
add esp, 4
test edi, edi
je 0x804e2ba
push ebx
push esi
push edi
call sym.imp.memcpy
add esp, 0xc
mov dword [0x8051fc4], edi
cmp dword [ptr], str.messages
je 0x804e2d2
mov edx, dword [ptr]
push edx
call sym.imp.free
mov eax, dword [0x8051fc4]
lea esp, [var_10h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_ch]
mov ebx, dword [arg_10h]
mov esi, dword [arg_14h]
cmp dword [obj.error_one_per_line], 0
je 0x804edff
cmp dword [0x8052324], esi
jne 0x804edf3
cmp dword [0x8052320], ebx
je 0x804eed0
push ebx
mov eax, dword [0x8052320]
push eax
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x804eed0
mov dword [0x8052320], ebx
mov dword [0x8052324], esi
cmp dword [obj.error_print_progname], 0
je 0x804ee20
mov eax, dword [obj.error_print_progname]
call eax
jmp 0x804ee44
jmp 0x804ee20
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
mov eax, dword [0x805233c]
push eax
push 0x8050f02
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
test ebx, ebx
je 0x804ee5d
push esi
push ebx
push str._s:_d:_
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
lea eax, [ap]
push eax
mov edx, dword [format]
push edx
mov eax, dword [obj.stderr]
push eax
call sym.imp.vfprintf
inc dword [obj.error_message_count]
add esp, 0xc
test edi, edi
je 0x804ee97
push edi
call sym.imp.strerror
push eax
push str.:__s
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
mov eax, dword [obj.stderr]
push eax
push 0xa
call sym.imp._IO_putc
mov eax, dword [obj.stderr]
push eax
call sym.imp.fflush
add esp, 0xc
cmp dword [status], 0
je 0x804eed0
mov edx, dword [status]
push edx
call sym.imp.exit
jmp 0x804eed0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
push eax
push edx
call fcn.0804d890
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
push 5
push eax
push edx
call fcn.0804d010
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x20
push edi
push esi
push ebx
call sym.imp.__errno_location
mov edx, eax
mov edx, dword [edx]
mov dword [var_18h], edx
cmp dword [var_ch], 0
jne 0x804d040
xor eax, eax
jmp 0x804d331
lea esi, [esi]
lea edi, [edi]
cmp dword [s1], 0
jne 0x804d04e
mov eax, dword [0x8051fc4]
mov dword [s1], eax
mov eax, dword [obj._nl_domain_bindings]
mov dword [var_4h], eax
test eax, eax
je 0x804d089
mov esi, esi
mov eax, dword [var_4h]
mov eax, dword [eax + 4]
push eax
mov eax, dword [s1]
push eax
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
je 0x804d083
jl 0x804d089
mov eax, dword [var_4h]
mov eax, dword [eax]
mov dword [var_4h], eax
test eax, eax
jne 0x804d05c
cmp dword [var_4h], 0
jne 0x804d0a0
mov dword [var_ch_2], obj._nl_default_dirname
jmp 0x804d168
lea esi, [esi]
lea edi, [edi]
mov eax, dword [var_4h]
mov edx, dword [eax + 8]
cmp byte [edx], 0x2f
jne 0x804d0c0
mov dword [var_ch_2], edx
jmp 0x804d168
lea esi, [esi]
lea edi, [edi]
xor dl, dl
mov eax, dword [var_4h]
mov edi, dword [eax + 8]
mov al, dl
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov edi, ecx
not edi
mov esi, 0x1001
lea eax, [edi + 0x1004]
and al, 0xfc
sub esp, eax
mov dword [var_ch_2], esp
call sym.imp.__errno_location
mov edx, eax
mov dword [edx], 0
push esi
mov eax, dword [var_ch_2]
push eax
call sym.imp.getcwd
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804d138
call sym.imp.__errno_location
mov edx, eax
cmp dword [edx], 0x22
jne 0x804d130
add esi, 0x20
lea eax, [edi + esi + 3]
and al, 0xfc
sub esp, eax
mov dword [var_ch_2], esp
jmp 0x804d0ef
lea esi, [esi]
lea edi, [edi]
test ebx, ebx
je 0x804d2a4
mov eax, dword [var_4h]
mov eax, dword [eax + 8]
push eax
push 0x8050e40
push 0
mov eax, dword [var_ch_2]
push eax
call sym.imp.__rawmemchr
add esp, 8
mov edx, eax
push edx
call sym.imp.stpcpy
add esp, 8
mov edx, eax
push edx
call sym.imp.stpcpy
add esp, 8
mov eax, dword [var_10h]
push eax
call fcn.0804d760
mov ebx, eax
push ebx
mov eax, dword [var_10h]
push eax
call fcn.0804d820
mov dword [var_8h_2], eax
mov edi, ebx
xor al, al
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov dword [var_1ch], ecx
mov edi, dword [s1]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov edx, ecx
not edx
mov eax, dword [var_1ch]
lea edx, [eax + edx + 6]
and dl, 0xfc
add esp, 0xc
sub esp, edx
mov dword [var_10h_2], esp
push 0x8050e42
mov eax, dword [s1]
push eax
push 0x8050e40
push ebx
mov eax, dword [var_10h_2]
push eax
call sym.imp.stpcpy
add esp, 8
mov edx, eax
push edx
call sym.imp.stpcpy
add esp, 8
mov edx, eax
push edx
call sym.imp.stpcpy
add esp, 8
mov edx, eax
push edx
call sym.imp.stpcpy
mov edi, dword [var_8h_2]
xor al, al
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov eax, ecx
add eax, 3
and al, 0xfc
add esp, 8
sub esp, eax
mov dword [var_14h], esp
lea esi, [esi]
mov eax, dword [var_8h_2]
cmp byte [eax], 0
je 0x804d22d
mov eax, dword [var_8h_2]
cmp byte [eax], 0x3a
jne 0x804d225
inc eax
mov dword [var_8h_2], eax
cmp byte [eax], 0
jne 0x804d214
mov eax, dword [var_8h_2]
cmp byte [eax], 0
jne 0x804d240
mov eax, dword [var_14h]
mov byte [eax], 0x43
mov byte [eax + 1], 0
jmp 0x804d26b
lea esi, [esi]
mov edx, dword [var_14h]
jmp 0x804d260
lea esi, [esi]
lea edi, [edi]
mov eax, dword [var_8h_2]
cmp byte [eax], 0x3a
je 0x804d268
mov al, byte [eax]
mov byte [edx], al
inc dword [var_8h_2]
inc edx
mov eax, dword [var_8h_2]
cmp byte [eax], 0
jne 0x804d250
mov byte [edx], 0
mov eax, dword [var_14h]
movzx edx, byte [eax]
movzx eax, byte [0x8050e46]
sub edx, eax
jne 0x804d28c
mov eax, dword [var_14h]
movzx edx, byte [eax + 1]
movzx eax, byte [0x8050e47]
sub edx, eax
test edx, edx
je 0x804d2a4
mov esi, dword [var_14h]
mov edi, str.POSIX
mov ecx, 6
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x804d2c0
call sym.imp.__errno_location
mov edx, eax
mov eax, dword [var_18h]
mov dword [edx], eax
mov eax, dword [var_ch]
jmp 0x804d331
lea esi, [esi]
lea edi, [edi]
mov eax, dword [var_10h_2]
push eax
mov eax, dword [var_14h]
push eax
mov eax, dword [var_ch_2]
push eax
call fcn.0804d8d0
mov esi, eax
add esp, 0xc
test esi, esi
je 0x804d20c
mov eax, dword [var_ch]
push eax
push esi
call fcn.0804d340
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804d323
xor edi, edi
cmp dword [esi + ebx*4 + 0x10], 0
je 0x804d31b
mov esi, esi
mov eax, dword [var_ch]
push eax
mov eax, dword [esi + edi*4 + 0x10]
push eax
call fcn.0804d340
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804d323
inc edi
cmp dword [esi + edi*4 + 0x10], 0
jne 0x804d2fc
test ebx, ebx
je 0x804d20c
call sym.imp.__errno_location
mov edx, eax
mov eax, dword [var_18h]
mov dword [edx], eax
mov eax, ebx
lea esp, [var_2ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
push eax
push edx
push ecx
call fcn.0804d010
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [errname]
mov ebx, dword [format]
mov esi, dword [arg_10h]
cmp dword [obj.error_print_progname], 0
je 0x804ed20
mov eax, dword [obj.error_print_progname]
call eax
jmp 0x804ed44
jmp 0x804ed20
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
mov eax, dword [0x805233c]
push eax
push str._s:_
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
lea eax, [ap]
push eax
push esi
mov eax, dword [obj.stderr]
push eax
call sym.imp.vfprintf
inc dword [obj.error_message_count]
add esp, 0xc
test ebx, ebx
je 0x804ed7b
push ebx
call sym.imp.strerror
push eax
push str.:__s
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
mov eax, dword [obj.stderr]
push eax
push 0xa
call sym.imp._IO_putc
mov eax, dword [obj.stderr]
push eax
call sym.imp.fflush
add esp, 0xc
test edi, edi
je 0x804eda0
push edi
call sym.imp.exit
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
push eax
call fcn.0804d8b0
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
push eax
push 0
call fcn.0804d890
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [dirname]
mov eax, dword [arg_ch]
push eax
push edx
call fcn.0804ce00
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
cmp dword [s1], 0
je 0x804cf71
mov edx, dword [s1]
cmp byte [edx], 0
jne 0x804ce30
jmp 0x804cf71
lea esi, [esi]
xor ebx, ebx
jmp 0x804ce58
lea esi, [esi]
lea edi, [edi]
mov ebx, dword [obj._nl_domain_bindings]
test ebx, ebx
je 0x804ce58
mov esi, esi
mov eax, dword [ebx + 4]
push eax
mov edx, dword [s1]
push edx
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x804ce58
jl 0x804ce20
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804ce3c
cmp dword [s2], 0
jne 0x804ce70
mov eax, obj._nl_default_dirname
test ebx, ebx
je 0x804d004
jmp 0x804d001
test ebx, ebx
je 0x804cef0
push obj._nl_default_dirname
mov edx, dword [s2]
push edx
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804ce90
mov edi, obj._nl_default_dirname
jmp 0x804cec2
xor al, al
mov edi, dword [s2]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov esi, ecx
not esi
push esi
call sym.imp.malloc
mov edi, eax
add esp, 4
test edi, edi
je 0x804cf71
push esi
mov edx, dword [s2]
push edx
push edi
call sym.imp.memcpy
add esp, 0xc
push obj._nl_default_dirname
mov eax, dword [ebx + 8]
push eax
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x804cee0
mov eax, dword [ebx + 8]
push eax
call sym.imp.free
mov dword [ebx + 8], edi
jmp 0x804d001
nop
lea esi, [esi]
push 0xc
call sym.imp.malloc
mov esi, eax
add esp, 4
test esi, esi
je 0x804cf71
xor al, al
mov edi, dword [s1]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov ebx, ecx
not ebx
push ebx
call sym.imp.malloc
mov dword [esi + 4], eax
add esp, 4
test eax, eax
je 0x804cf71
mov eax, dword [esi + 4]
push ebx
mov edx, dword [s1]
push edx
push eax
call sym.imp.memcpy
add esp, 0xc
push obj._nl_default_dirname
mov edx, dword [s2]
push edx
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804cf50
mov dword [esi + 8], 0x8050e28
jmp 0x804cf91
xor al, al
mov edi, dword [s2]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov ebx, ecx
not ebx
push ebx
call sym.imp.malloc
mov dword [esi + 8], eax
add esp, 4
test eax, eax
jne 0x804cf80
xor eax, eax
jmp 0x804d004
nop
lea esi, [esi]
mov eax, dword [esi + 8]
push ebx
mov edx, dword [s2]
push edx
push eax
call sym.imp.memcpy
add esp, 0xc
cmp dword [obj._nl_domain_bindings], 0
je 0x804cfb3
mov eax, dword [obj._nl_domain_bindings]
mov eax, dword [eax + 4]
push eax
mov edx, dword [s1]
push edx
call sym.imp.strcmp
add esp, 8
test eax, eax
jge 0x804cfd0
mov eax, dword [obj._nl_domain_bindings]
mov dword [esi], eax
mov dword [obj._nl_domain_bindings], esi
jmp 0x804cfff
lea esi, [esi]
lea edi, [edi]
mov ebx, dword [obj._nl_domain_bindings]
cmp dword [ebx], 0
je 0x804cff9
nop
mov eax, dword [ebx]
mov eax, dword [eax + 4]
push eax
mov edx, dword [s1]
push edx
call sym.imp.strcmp
add esp, 8
test eax, eax
jle 0x804cff9
mov ebx, dword [ebx]
cmp dword [ebx], 0
jne 0x804cfdc
mov eax, dword [ebx]
mov dword [esi], eax
mov dword [ebx], esi
mov ebx, esi
mov eax, dword [ebx + 8]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
jmp dword [reloc.stpcpy]
jmp dword [reloc.strcpy]
jmp dword [reloc.printf]
jmp dword [reloc.strerror]
jmp dword [reloc.getopt_long]
jmp dword [reloc.munmap]
jmp dword [reloc.getgrgid]
jmp dword [reloc.getenv]
jmp dword [reloc.__rawmemchr]
jmp dword [reloc.__strtol_internal]
jmp dword [reloc.bsearch]
jmp dword [reloc.qsort]
jmp dword [reloc.fgets]
jmp dword [reloc.memcpy]
jmp dword [reloc.readlink]
jmp dword [reloc.feof]
jmp dword [reloc.malloc]
jmp dword [reloc.isatty]
jmp dword [reloc._obstack_newchunk]
jmp dword [reloc.readdir]
jmp dword [reloc.fflush]
jmp dword [reloc.mmap]
jmp dword [reloc.abort]
jmp dword [reloc.__lxstat]
jmp dword [reloc.strrchr]
jmp dword [reloc._obstack_begin]
jmp dword [reloc.fprintf]
jmp dword [reloc.ctime]
jmp dword [reloc.read]
jmp dword [reloc.strncmp]
jmp dword [reloc.strncpy]
jmp dword [reloc.strcasecmp]
jmp dword [reloc.realloc]
jmp dword [reloc.fnmatch]
jmp dword [reloc.time]
jmp dword [reloc.opendir]
jmp dword [reloc.strcmp]
jmp dword [reloc.getpwuid]
jmp dword [reloc.getcwd]
jmp dword [reloc.getpwnam]
jmp dword [reloc.sprintf]
jmp dword [reloc.fclose]
jmp dword [reloc.setlocale]
jmp dword [reloc.__xstat]
jmp dword [reloc.__errno_location]
jmp dword [reloc.exit]
jmp dword [reloc.__fxstat]
jmp dword [reloc.getgrnam]
jmp dword [reloc.fopen]
jmp dword [reloc._IO_putc]
jmp dword [reloc.open]
jmp dword [reloc.strchr]
jmp dword [reloc.fputs]
jmp dword [reloc.closedir]
jmp dword [reloc.close]
jmp dword [reloc.vfprintf]
jmp dword [reloc.free]
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [argv]
mov esi, dword [envp]
mov eax, dword [esi]
mov dword [0x805233c], eax
push 0x804fd9a
push 6
call sym.imp.setlocale
push 0x804fd9b
push str.fileutils
call sym.bindtextdomain
push str.fileutils
call sym.textdomain
mov dword [0x80522b0], 0
mov dword [0x80522a0], 1
mov dword [0x80522a4], 1
mov dword [0x805223c], 0
push 0
call sym.imp.time
mov dword [0x8052240], eax
push esi
push edi
call fcn.080496d0
mov ebx, eax
add esp, 0x20
cmp dword [0x80522b8], 0
je 0x8049460
push str.GNU_fileutils_3.13
cmp dword [0x8051fc0], 1
je 0x8049440
mov eax, str.vdir
cmp dword [0x8051fc0], 2
jne 0x8049445
mov eax, 0x804fdd0
jmp 0x8049445
lea esi, [esi]
lea edi, [edi]
mov eax, 0x804fdd9
push eax
push str._s____s_n
call sym.imp.printf
push 0
call sym.imp.exit
mov esi, esi
lea edi, [edi]
cmp dword [0x80522b4], 0
je 0x8049473
push 0
call fcn.0804cc00
add esp, 4
call fcn.0804f6d0
cmp dword [0x805226c], 0
je 0x8049486
call fcn.0804a7f0
xor edx, edx
mov eax, dword [0x8052250]
add eax, 0xfffffffd
cmp eax, 1
jbe 0x80494d4
cmp dword [0x8052248], 0
je 0x80494d4
cmp dword [0x8052278], 0
jne 0x80494d4
cmp dword [0x805227c], 0
jne 0x80494d4
cmp dword [0x8052268], 0
jne 0x80494d4
cmp dword [0x805225c], 0
jne 0x80494d4
cmp dword [0x8052274], 0
jne 0x80494d4
cmp dword [0x805226c], 0
je 0x80494d9
mov edx, 1
mov dword [0x80522ac], edx
cmp dword [0x8052264], 0
je 0x8049524
cmp dword [0x8052248], 0
jne 0x8049524
push sym.imp.free
push fcn.0804f3b0
push 0
push 0
push 0x80522c0
call sym.imp._obstack_begin
push sym.imp.free
push fcn.0804f3b0
push 0
push 0
push 0x80522ec
call sym.imp._obstack_begin
add esp, 0x28
mov dword [0x8052234], 0x64
push 0x2a30
call fcn.0804f3b0
mov dword [0x8052230], eax
mov dword [0x8052238], 0
call fcn.0804aeb0
add esp, 4
cmp ebx, edi
jge 0x8049578
mov dword [0x80522a0], 0
lea esi, [esi]
push 0x804fd9a
push 1
mov eax, dword [esi + ebx*4]
push eax
call fcn.0804af20
add esp, 0xc
inc ebx
cmp ebx, edi
jl 0x8049560
cmp dword [0x80522a0], 0
je 0x80495af
cmp dword [0x8052280], 0
je 0x80495a0
push 0x804fd9a
push 1
push 0x804fde5
call fcn.0804af20
add esp, 0xc
jmp 0x80495af
push 0
push 0x804fde5
call fcn.0804aaf0
add esp, 8
cmp dword [0x8052238], 0
je 0x8049610
call fcn.0804b690
cmp dword [0x8052280], 0
jne 0x80495d5
push 0
push 0x804fd9a
call fcn.0804b480
add esp, 8
cmp dword [0x8052238], 0
je 0x8049610
call fcn.0804ba30
cmp dword [0x805223c], 0
je 0x8049683
mov eax, dword [obj.stdout]
push eax
push 0xa
call sym.imp._IO_putc
add esp, 8
inc dword [0x80522bc]
jmp 0x804967a
nop
lea esi, [esi]
cmp dword [0x805223c], 0
je 0x8049683
mov eax, dword [0x805223c]
cmp dword [eax + 8], 0
jne 0x804967a
mov dword [0x80522a4], 0
jmp 0x804967a
mov ebx, dword [0x805223c]
mov eax, dword [ebx + 8]
mov dword [0x805223c], eax
mov eax, dword [ebx + 4]
push eax
mov eax, dword [ebx]
push eax
call fcn.0804ab50
mov eax, dword [ebx]
push eax
call sym.imp.free
add esp, 0xc
cmp dword [ebx + 4], 0
je 0x8049667
mov eax, dword [ebx + 4]
push eax
call sym.imp.free
add esp, 4
push ebx
call sym.imp.free
mov dword [0x80522a4], 1
add esp, 4
cmp dword [0x805223c], 0
jne 0x8049630
cmp dword [0x8052264], 0
je 0x80496b6
cmp dword [0x8052248], 0
jne 0x80496b6
push 0x80522c0
push str.__DIRED__
call fcn.080492c0
push 0x80522ec
push str.__SUBDIRED__
call fcn.080492c0
add esp, 0x10
mov eax, dword [0x80522b0]
push eax
call sym.imp.exit
pop ebx
add ebx, 0x9183
cmp dword [ebx + 0xf4], 0
je 0x8048e8e
call loc.imp.__gmon_start__
mov esi, esi
call fcn.0804f830
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, section..ctors
cmp dword [section..ctors], 0xffffffff
je 0x804f850
mov esi, esi
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x804f844
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov dword [0x8052294], 0
mov dword [0x8052290], 0
mov eax, dword [0x8051fc0]
cmp eax, 2
je 0x8049720
jg 0x8049710
cmp eax, 1
je 0x8049760
jmp 0x80497b0
lea esi, [esi]
lea edi, [edi]
cmp eax, 3
je 0x8049740
jmp 0x80497b0
lea esi, [esi]
mov dword [0x8052248], 2
mov dword [0x8052290], 1
jmp 0x80497c0
lea esi, [esi]
mov dword [0x8052248], 0
mov dword [0x8052290], 1
jmp 0x80497c0
lea esi, [esi]
lea edi, [edi]
push 1
call sym.imp.isatty
add esp, 4
test eax, eax
je 0x8049790
mov dword [0x8052248], 2
mov dword [0x8052294], 1
jmp 0x80497c0
lea esi, [esi]
lea edi, [edi]
mov dword [0x8052248], 1
mov dword [0x8052294], 0
jmp 0x80497c0
lea esi, [esi]
lea edi, [edi]
call sym.imp.abort
lea esi, [esi]
lea edi, [edi]
mov dword [0x805224c], 0
mov dword [0x8052340], 0
mov dword [0x8052250], 1
mov dword [0x8052254], 0
mov dword [0x8052258], 0
mov dword [0x805225c], 0
push str.POSIXLY_CORRECT
call sym.imp.getenv
add esp, 4
test eax, eax
sete al
and eax, 0xff
mov dword [0x8052260], eax
mov dword [0x8052268], 0
mov dword [0x8052274], 0
mov dword [0x8052278], 0
mov dword [0x805227c], 0
mov dword [0x8052280], 0
mov dword [0x8052284], 0
mov dword [0x8052288], 0
mov dword [0x805228c], 0
mov dword [0x8052298], 0
mov dword [0x80522a8], 0x50
push str.COLUMNS
call sym.imp.getenv
mov ebx, eax
add esp, 4
test ebx, ebx
je 0x8049909
push 0
lea eax, [var_4h]
push eax
push 0
push 0
push ebx
call fcn.0804f460
add esp, 0x14
test eax, eax
jne 0x80498c0
mov eax, dword [var_4h]
dec eax
cmp eax, 0x7ffffffe
ja 0x80498c0
mov eax, dword [var_4h]
mov dword [0x80522a8], eax
jmp 0x8049909
nop
lea esi, [esi]
push ebx
cmp dword [0x80521b8], 0
je 0x80498d7
mov eax, dword [0x80521bc]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x80498f7
push 5
push str.ignoring_invalid_width_in_environment_variable_COLUMNS:__s
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x80521b8], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x80521bc], eax
mov eax, dword [0x80521b8]
push eax
push 0
push 0
call sym.error
add esp, 0x10
mov dword [0x805229c], 8
push str.POSIXLY_CORRECT
call sym.imp.getenv
add esp, 4
test eax, eax
jne case.0x80499e7.0
push str.TABSIZE
call sym.imp.getenv
mov ebx, eax
add esp, 4
test ebx, ebx
je case.0x80499e7.0
push 0
lea eax, [var_4h]
push eax
push 0
push 0
push ebx
call fcn.0804f460
add esp, 0x14
test eax, eax
jne 0x8049970
mov eax, dword [var_4h]
cmp eax, 0x7fffffff
ja 0x8049970
mov dword [0x805229c], eax
jmp case.0x80499e7.0
mov esi, esi
lea edi, [edi]
push ebx
cmp dword [0x80521c0], 0
je 0x8049987
mov eax, dword [0x80521c4]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x80499a7
push 5
push str.ignoring_invalid_tab_size_in_environment_variable_TABSIZE:__s
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x80521c0], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x80521c4], eax
mov eax, dword [0x80521c0]
push eax
push 0
push 0
call sym.error
add esp, 0x10
lea esi, [esi]
push 0
push 0x804f924
push str.abcdfgiklmnopqrstuw:xABCDFGI:LNQRST:UX178
mov ecx, dword [arg_ch]
push ecx
push edi
call sym.imp.getopt_long
add esp, 0x14
cmp eax, 0xffffffff
je 0x804a210
cmp eax, 0x78
ja case.0x80499e7.1
jmp dword [eax*4 + 0x80499f0]
mov esi, esi
mov esp, 525465
mov byte [0xa2000804], al
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1615853564], ah
add al, 8
xor byte [eax - 1599076348], ah
add al, 8
xor byte [ecx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
mov al, byte [525471]
mov byte [0xa2000804], al
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1715730428], ah
add al, 8
mov esp, 525465
mov byte [0xa2000804], al
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [esi - 1643116540], bl
add al, 8
xor byte [esi - 1639970812], bl
add al, 8
add byte [edx - 1638922236], ah
add al, 8
ljmp 1186
or byte [eax - 0x62], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
sbb byte [esi - 1577056252], 4
or byte [eax + 0x8049e], dl
mov byte [0xa2000804], al
add al, 8
mov al, 158
add al, 8
loopne 134519512
add al, 8
invalid
sahf
add al, 8
add byte [edi - 1618999292], bl
add al, 8
add byte [edx - 1577056252], ah
add al, 8
nop
lahf
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
add byte [edx - 1577056252], ah
add al, 8
loopne 134519569
add al, 8
mov edx, 525470
pushfd
add al, 8
and byte [esp + eax + 77725704], bl
or byte [eax], dh
pushfd
add al, 8
mov esp, 525465
mov byte [0x9c900804], al
add al, 8
add byte [edx - 1667233788], ah
add al, 8
mov al, 156
add al, 8
rcr byte [esp + eax + 77385736], 8
loopne 134519626
add al, 8
add byte [ebp - 1659893756], bl
add al, 8
xor byte [ebp - 1656748028], bl
add al, 8
or bl, byte [esp + eax + 77418504]
or byte [eax], al
mov byte [0x9d600804], al
add al, 8
invalid
popfd
add al, 8
lea esi, [esi]
lea edi, [edi]
mov dword [0x8052284], 1
mov dword [0x8052288], 1
jmp case.0x80499e7.0
lea esi, [esi]
mov dword [0x805224c], 1
mov dword [0x8052250], 3
jmp case.0x80499e7.0
lea esi, [esi]
mov dword [0x8052280], 1
jmp case.0x80499e7.0
nop
mov dword [0x8052284], 1
mov dword [0x8052288], 1
mov dword [0x8052250], 0
cmp dword [0x8052248], 0
jne 0x8049c75
push 1
call sym.imp.isatty
add esp, 4
mov edx, 1
test eax, eax
je 0x8049c6f
mov edx, 2
mov dword [0x8052248], edx
mov dword [0x805225c], 0
mov dword [0x805226c], 0
jmp case.0x80499e7.0
mov esi, esi
mov dword [0x8052274], 1
jmp case.0x80499e7.0
nop
mov dword [0x8052260], 1
jmp case.0x80499e7.0
nop
mov dword [0x8052248], 0
jmp case.0x80499e7.0
nop
mov dword [0x8052248], 4
jmp case.0x80499e7.0
nop
mov dword [0x8052258], 1
jmp case.0x80499e7.0
nop
mov dword [0x8052248], 0
mov dword [0x8052338], 1
jmp case.0x80499e7.0
lea esi, [esi]
mov dword [0x8052268], 2
jmp case.0x80499e7.0
nop
mov dword [0x8052294], 1
mov dword [0x8052290], 0
jmp case.0x80499e7.0
lea esi, [esi]
mov dword [0x8052254], 1
jmp case.0x80499e7.0
nop
mov dword [0x805225c], 1
jmp case.0x80499e7.0
nop
mov dword [0x805224c], 2
jmp case.0x80499e7.0
nop
push 0
lea eax, [var_4h]
push eax
push 0
push 0
mov eax, dword [obj.optarg]
push eax
call fcn.0804f460
add esp, 0x14
test eax, eax
jne 0x8049d87
mov eax, dword [var_4h]
dec eax
cmp eax, 0x7ffffffe
jbe 0x8049dd5
mov eax, dword [obj.optarg]
push eax
cmp dword [0x80521c8], 0
je 0x8049da3
mov eax, dword [0x80521cc]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x8049dc3
push 5
push str.invalid_line_width:__s
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x80521c8], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x80521cc], eax
mov eax, dword [0x80521c8]
push eax
push 0
push 1
call sym.error
add esp, 0x10
mov eax, dword [var_4h]
mov dword [0x80522a8], eax
jmp case.0x80499e7.0
lea esi, [esi]
lea edi, [edi]
mov dword [0x8052248], 3
jmp case.0x80499e7.0
nop
mov dword [0x8052284], 1
jmp case.0x80499e7.0
nop
push 0x804fed8
call fcn.0804ae10
push 0x804fedb
call fcn.0804ae10
add esp, 8
jmp case.0x80499e7.0
lea esi, [esi]
mov dword [0x8052248], 2
jmp case.0x80499e7.0
nop
mov dword [0x8052264], 1
jmp case.0x80499e7.0
nop
mov dword [0x8052268], 1
jmp case.0x80499e7.0
nop
mov eax, dword [obj.optarg]
push eax
call fcn.0804ae10
add esp, 4
jmp case.0x80499e7.0
lea esi, [esi]
lea edi, [edi]
mov dword [0x8052278], 1
jmp case.0x80499e7.0
nop
mov dword [0x8052290], 0
mov dword [0x8052294], 0
jmp case.0x80499e7.0
lea esi, [esi]
mov dword [0x8052298], 1
mov dword [0x8052290], 1
mov dword [0x8052294], 0
jmp case.0x80499e7.0
lea esi, [esi]
lea edi, [edi]
mov dword [0x805227c], 1
jmp case.0x80499e7.0
nop
mov dword [0x8052250], 4
jmp case.0x80499e7.0
nop
push 0
lea eax, [var_4h]
push eax
push 0
push 0
mov eax, dword [obj.optarg]
push eax
call fcn.0804f460
add esp, 0x14
test eax, eax
jne 0x8049f22
cmp dword [var_4h], 0
jge 0x8049f70
mov eax, dword [obj.optarg]
push eax
cmp dword [0x80521d0], 0
je 0x8049f3e
mov eax, dword [0x80521d4]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x8049f5e
push 5
push str.invalid_tab_size:__s
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x80521d0], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x80521d4], eax
mov eax, dword [0x80521d0]
push eax
push 0
push 1
call sym.error
add esp, 0x10
mov eax, dword [var_4h]
mov dword [0x805229c], eax
jmp case.0x80499e7.0
lea esi, [esi]
mov dword [0x8052250], 0
jmp case.0x80499e7.0
nop
mov dword [0x8052250], 2
jmp case.0x80499e7.0
nop
mov dword [0x8052248], 1
jmp case.0x80499e7.0
nop
push 0x804fca8
mov eax, dword [obj.optarg]
push eax
call fcn.0804ebc0
mov esi, eax
add esp, 8
test esi, esi
jge 0x804a01b
push esi
mov eax, dword [obj.optarg]
push eax
cmp dword [0x80521d8], 0
je 0x8049fe6
mov eax, dword [0x80521dc]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804a006
push 5
push str.sort_type
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x80521d8], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x80521dc], eax
mov eax, dword [0x80521d8]
push eax
call fcn.0804ec80
push 1
call fcn.0804cc00
add esp, 0x10
mov eax, dword [esi*4 + 0x804fccc]
mov dword [0x8052250], eax
jmp case.0x80499e7.0
lea esi, [esi]
push 0x804fcdc
mov eax, dword [obj.optarg]
push eax
call fcn.0804ebc0
mov esi, eax
add esp, 8
test esi, esi
jge 0x804a09b
push esi
mov eax, dword [obj.optarg]
push eax
cmp dword [0x80521e0], 0
je 0x804a066
mov eax, dword [0x80521e4]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804a086
push 5
push str.time_type
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x80521e0], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x80521e4], eax
mov eax, dword [0x80521e0]
push eax
call fcn.0804ec80
push 1
call fcn.0804cc00
add esp, 0x10
mov eax, dword [esi*4 + 0x804fd14]
mov dword [0x805224c], eax
jmp case.0x80499e7.0
lea esi, [esi]
push 0x804fc2c
mov eax, dword [obj.optarg]
push eax
call fcn.0804ebc0
mov esi, eax
add esp, 8
test esi, esi
jge 0x804a11b
push esi
mov eax, dword [obj.optarg]
push eax
cmp dword [0x80521e8], 0
je 0x804a0e6
mov eax, dword [0x80521ec]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804a106
push 5
push str.format_type
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x80521e8], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x80521ec], eax
mov eax, dword [0x80521e8]
push eax
call fcn.0804ec80
push 1
call fcn.0804cc00
add esp, 0x10
mov eax, dword [esi*4 + 0x804fc8c]
mov dword [0x8052248], eax
jmp case.0x80499e7.0
lea esi, [esi]
cmp dword [obj.optarg], 0
je 0x804a1b0
push 0x804fd28
mov eax, dword [obj.optarg]
push eax
call fcn.0804ebc0
mov esi, eax
add esp, 8
test esi, esi
jge 0x804a1a4
push esi
mov eax, dword [obj.optarg]
push eax
cmp dword [0x80521f0], 0
je 0x804a16f
mov eax, dword [0x80521f4]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804a18f
push 5
push str.colorization_criterion
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x80521f0], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x80521f4], eax
mov eax, dword [0x80521f0]
push eax
call fcn.0804ec80
push 1
call fcn.0804cc00
add esp, 0x10
mov esi, dword [esi*4 + 0x804fd74]
jmp 0x804a1b5
lea esi, [esi]
mov esi, 1
xor ebx, ebx
cmp esi, 1
je 0x804a1cf
cmp esi, 2
jne 0x804a1d4
push 1
call sym.imp.isatty
add esp, 4
test eax, eax
je 0x804a1d4
mov ebx, 1
mov dword [0x805226c], ebx
test ebx, ebx
je case.0x80499e7.0
mov dword [0x805229c], 0
jmp case.0x80499e7.0
jmp case.0x80499e7.1
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push 1
call fcn.0804cc00
add esp, 4
jmp case.0x80499e7.0
nop
mov eax, dword [obj.optind]
lea esp, [var_10h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
test ebx, ebx
je 0x804cc60
mov eax, dword [0x805233c]
push eax
cmp dword [0x8052208], 0
je 0x804cc27
mov eax, dword [0x805220c]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804cc47
push 5
push str.Try___s___help_for_more_information._n
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x8052208], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x805220c], eax
mov eax, dword [0x8052208]
push eax
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0xc
jmp 0x804cd76
mov eax, dword [0x805233c]
push eax
cmp dword [0x8052210], 0
je 0x804cc7c
mov eax, dword [0x8052214]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804cc9c
push 5
push str.Usage:__s__OPTION_...__FILE_..._n
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x8052210], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x8052214], eax
mov eax, dword [0x8052210]
push eax
call sym.imp.printf
add esp, 8
cmp dword [0x8052218], 0
je 0x804ccc0
mov eax, dword [0x805221c]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804cce0
push 5
push str.List_information_about_the_FILEs__the_current_directory_by_default_._nSort_entries_alphabetically_if_none_of__cftuSUX_nor___sort._n_n___A____almost_all___________do_not_list_implied_._and_.._n___a____all__________________do_not_hide_entries_starting_with_._n___B____ignore_backups_______do_not_list_implied_entries_ending_with__n___b____escape_______________print_octal_escapes_for_nongraphic_characters_n___C_________________________list_entries_by_columns_n___c_________________________sort_by_change_time__with__l:_show_ctime_n________color_WHEN__________control_whether_color_is_used_to_distinguish_file_n_______________________________types.__WHEN_may_be__never___always__or__auto_n___D____dired________________generate_output_designed_for_Emacs_dired_mode_n___d____directory____________list_directory_entries_instead_of_contents_n___F____classify_____________append_a_character_for_typing_each_entry_n___f_________________________do_not_sort__enable__aU__disable__lst_n________formatWORD__________across__x__
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x8052218], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x805221c], eax
mov eax, dword [0x8052218]
push eax
call sym.imp.printf
add esp, 4
cmp dword [0x8052220], 0
je 0x804cd04
mov eax, dword [0x8052224]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804cd24
push 5
push str.___G____no_group_____________inhibit_display_of_group_information_n___g__________________________ignored__n___I____ignorePATTERN_______do_not_list_implied_entries_matching_shell_PATTERN_n___i____inode________________print_index_number_of_each_file_n___k____kilobytes____________use_1024_blocks__not_512_despite_POSIXLY_CORRECT_n___L____dereference__________list_entries_pointed_to_by_symbolic_links_n___l_________________________use_a_long_listing_format_n___m_________________________fill_width_with_a_comma_separated_list_of_entries_n___N____literal______________print_raw_entry_names__dont_treat_e.g._control_n_______________________________characters_specially__n___n____numeric_uid_gid______list_numeric_UIDs_and_GIDs_instead_of_names_n___o_________________________use_long_listing_format_without_group_info_n___p_________________________append_a_character_for_typing_each_entry_n___Q____quote_name___________enclose_entry_names_in_double_quotes_n___q____hide_control_chars___print___instead_of_non_graphic_ch
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x8052220], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x8052224], eax
mov eax, dword [0x8052220]
push eax
call sym.imp.printf
add esp, 4
cmp dword [0x8052228], 0
je 0x804cd48
mov eax, dword [0x805222c]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804cd68
push 5
push str.___s____size_________________print_block_size_of_each_file_n________sortWORD____________ctime__c__extension__X__none__U__size__S__n_______________________________status__c__time__t_n________timeWORD____________atime__u__access__u__use__u_n___T____tabsizeCOLS_________assume_tab_stops_at_each_COLS_instead_of_8_n___t_________________________sort_by_modification_time__with__l:_show_mtime_n___U_________________________do_not_sort__list_entries_in_directory_order_n___u_________________________sort_by_last_access_time__with__l:_show_atime_n___w____widthCOLS___________assume_screen_width_instead_of_current_value_n___x_________________________list_entries_by_lines_instead_of_by_columns_n___X_________________________sort_alphabetically_by_entry_extension_n___1_________________________list_one_file_per_line_n________help_________________display_this_help_and_exit_n________version______________output_version_information_and_exit_n_nBy_default__color_is_not_used_to_distinguish_types_of_files.__That_is_nequivalen
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x8052228], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x805222c], eax
mov eax, dword [0x8052228]
push eax
call sym.imp.printf
add esp, 4
push ebx
call sym.imp.exit
sub esp, 4
push edi
push ebx
push 0x13
push 0xd1
push 0x8051fd8
call fcn.0804f810
push 0x84
call sym.imp.malloc
mov dword [0x80523f0], eax
mov dword [0x8052360], eax
push 0x8050f44
push 0x8051fd8
call sym.imp.fopen
mov dword [0x80523f4], eax
add esp, 0x18
test eax, eax
je 0x804f7ae
xor bl, bl
nop
mov eax, dword [0x80523f4]
push eax
push 0x7e
push 0x8052370
call sym.imp.fgets
add esp, 0xc
test eax, eax
je 0x804f7a0
push 0x84
call sym.imp.malloc
mov edx, eax
mov eax, dword [0x80523f0]
mov dword [dest], eax
mov eax, dword [dest]
mov dword [eax], edx
push 0x8052370
add dword [dest], 4
mov eax, dword [dest]
push eax
call sym.imp.strcpy
mov edx, dword [0x80523f0]
lea edi, [edx + 4]
mov al, bl
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov dword [dest], ecx
mov eax, dword [dest]
mov byte [edx + eax + 2], 0
mov eax, dword [0x80523f0]
mov eax, dword [eax]
mov dword [0x80523f0], eax
add esp, 0xc
jmp 0x804f71c
mov esi, esi
lea edi, [edi]
mov eax, dword [0x80523f4]
push eax
call sym.imp.fclose
add esp, 4
mov eax, dword [0x80523f0]
mov dword [eax], 0
pop ebx
pop edi
add esp, 4
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
push str.LS_COLORS
call sym.imp.getenv
mov dword [var_ch], eax
add esp, 4
test eax, eax
je 0x804aad8
cmp byte [eax], 0
je 0x804aad8
xor edi, edi
mov al, byte [0x804ff36]
shl ax, 8
movzx dx, byte [0x804ff35]
or ax, dx
mov word [var_4h], ax
mov byte [var_2h], 0
mov eax, dword [var_ch]
push eax
call fcn.0804f420
mov dword [0x8052270], eax
mov dword [var_8h], eax
mov esi, 1
add esp, 4
lea ecx, [var_4h]
mov dword [s1], ecx
cmp esi, 2
je 0x804a930
jg 0x804a870
cmp esi, 1
je 0x804a890
jmp 0x804aa55
lea esi, [esi]
cmp esi, 3
je 0x804a980
cmp esi, 4
je 0x804aa20
jmp 0x804aa55
mov esi, esi
lea edi, [edi]
mov eax, dword [var_ch]
mov al, byte [eax]
cmp al, 0x2a
je 0x804a8c0
jg 0x804a8b0
test al, al
je 0x804aad8
jmp 0x804a910
lea esi, [esi]
lea edi, [edi]
cmp al, 0x3a
jne 0x804a910
inc dword [var_ch]
jmp 0x804aa55
lea esi, [esi]
push 0x14
call fcn.0804f3b0
mov edi, eax
mov eax, dword [0x8051fbc]
mov dword [edi + 0x10], eax
mov dword [0x8051fbc], edi
inc dword [var_ch]
mov eax, dword [var_8h]
mov dword [edi + 4], eax
add esp, 4
push 1
lea eax, [var_ch]
push eax
lea eax, [var_8h]
push eax
call fcn.0804a220
add esp, 0xc
mov dword [edi], eax
mov esi, 4
jmp 0x804a858
jmp 0x804a910
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [var_ch]
mov al, byte [eax]
mov byte [var_4h], al
inc dword [var_ch]
mov esi, 2
jmp 0x804a858
lea esi, [esi]
lea edi, [edi]
mov eax, dword [var_ch]
cmp byte [eax], 0
je 0x804aa5f
mov al, byte [eax]
mov byte [var_3h], al
inc dword [var_ch]
mov esi, 3
jmp 0x804a858
mov esi, esi
shl ebx, 3
mov eax, dword [var_8h]
mov dword [ebx + 0x8051f50], eax
push 0
lea eax, [var_ch]
push eax
lea eax, [var_8h]
push eax
call fcn.0804a220
add esp, 0xc
mov dword [ebx + 0x8051f4c], eax
mov esi, 1
jmp 0x804a9c3
nop
lea esi, [esi]
mov esi, 0xffffffff
mov eax, dword [var_ch]
inc dword [var_ch]
cmp byte [eax], 0x3d
jne 0x804aa55
xor ebx, ebx
cmp dword [0x804f894], 0
je 0x804a9c3
nop
mov eax, dword [ebx*4 + 0x804f894]
push eax
mov ecx, dword [s1]
push ecx
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x804a950
inc ebx
cmp dword [ebx*4 + 0x804f894], 0
jne 0x804a9a0
cmp esi, 0xffffffff
jne 0x804aa55
mov ecx, dword [s1]
push ecx
cmp dword [0x80521f8], 0
je 0x804a9e6
mov eax, dword [0x80521fc]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804aa06
push 5
push str.unrecognized_prefix:__s
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x80521f8], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x80521fc], eax
mov eax, dword [0x80521f8]
push eax
push 0
push 0
call sym.error
add esp, 0x10
jmp 0x804aa55
lea esi, [esi]
mov eax, dword [var_ch]
inc dword [var_ch]
cmp byte [eax], 0x3d
jne 0x804aa50
mov eax, dword [var_8h]
mov dword [edi + 0xc], eax
push 0
lea eax, [var_ch]
push eax
lea eax, [var_8h]
push eax
call fcn.0804a220
add esp, 0xc
mov dword [edi + 8], eax
mov esi, 1
jmp 0x804a858
mov esi, 0xffffffff
test esi, esi
jg 0x804a858
jge 0x804aad8
cmp dword [0x8052200], 0
je 0x804aa75
mov eax, dword [0x8052204]
cmp dword [obj._nl_msg_cat_cntr], eax
je 0x804aa95
push 5
push str.unparsable_value_for_LS_COLORS_environment_variable
push 0
call fcn.0804d010
add esp, 0xc
mov dword [0x8052200], eax
mov eax, dword [obj._nl_msg_cat_cntr]
mov dword [0x8052204], eax
mov eax, dword [0x8052200]
push eax
push 0
push 0
call sym.error
mov eax, dword [0x8052270]
push eax
call sym.imp.free
mov ebx, dword [0x8051fbc]
add esp, 0x10
test ebx, ebx
je 0x804aace
mov eax, ebx
mov ebx, dword [ebx + 0x10]
push eax
call sym.imp.free
add esp, 4
test ebx, ebx
jne 0x804aabc
mov dword [0x805226c], 0
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [size]
push ebx
call sym.imp.malloc
add esp, 4
test eax, eax
jne 0x804f3ca
push ebx
call fcn.0804f370
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
xor ebx, ebx
cmp dword [arg_8h], 0
jne 0x804f388
push 1
call sym.imp.malloc
mov ebx, eax
add esp, 4
test ebx, ebx
jne 0x804f39e
push str.Memory_exhausted
push 0
mov eax, dword [0x8051fd4]
push eax
call sym.error
mov eax, ebx
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
xor esi, esi
cmp dword [0x8052238], esi
jle 0x804af00
nop
mov eax, dword [0x8052230]
lea edx, [esi + esi*2]
lea edx, [edx + edx*8]
lea ebx, [edx*4]
mov eax, dword [eax + ebx]
push eax
call sym.imp.free
mov eax, dword [0x8052230]
add esp, 4
cmp dword [eax + ebx + 0x5c], 0
je 0x804aef7
mov eax, dword [eax + ebx + 0x5c]
push eax
call sym.imp.free
add esp, 4
inc esi
cmp dword [0x8052238], esi
jg 0x804aec0
mov dword [0x8052238], 0
mov dword [0x8052244], 4
lea esp, [var_8h]
pop ebx
pop esi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x5c
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
push ebx
call fcn.0804f7c0
add esp, 4
test eax, eax
je 0x804af40
xor eax, eax
jmp 0x804b369
mov eax, dword [0x8052238]
cmp dword [0x8052234], eax
jne 0x804af71
add eax, eax
mov dword [0x8052234], eax
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
shl eax, 2
push eax
mov eax, dword [0x8052230]
push eax
call fcn.0804f3e0
mov dword [0x8052230], eax
add esp, 8
mov eax, dword [0x8052238]
mov edx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
shl eax, 2
mov dword [edx + eax + 0x5c], 0
mov dword [edx + eax + 0x60], 0
cmp dword [arg_ch], 0
jne 0x804afa8
cmp dword [0x80522ac], 0
je 0x804b340
mov ebx, dword [arg_8h]
cmp byte [ebx], 0x2f
je 0x804afb8
mov ebx, dword [arg_10h]
cmp byte [ebx], 0
jne 0x804afc0
mov esi, dword [arg_8h]
jmp 0x804affb
lea esi, [esi]
xor al, al
mov edi, dword [arg_8h]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov edx, ecx
not edx
mov edi, dword [arg_10h]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea eax, [edx + eax + 3]
and al, 0xfc
sub esp, eax
mov esi, esp
mov ebx, dword [arg_8h]
push ebx
mov ebx, dword [arg_10h]
push ebx
push esi
call fcn.0804cba0
add esp, 0xc
cmp dword [0x8052278], 0
je 0x804b02b
mov eax, dword [0x8052238]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
shl eax, 2
add eax, dword [0x8052230]
add eax, 4
push eax
push esi
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jge 0x804b080
mov eax, dword [0x8052238]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
shl eax, 2
add eax, dword [0x8052230]
add eax, 4
push eax
push esi
push 3
call sym.imp.__lxstat
add esp, 0xc
test eax, eax
jge 0x804b080
push esi
push 0x804ff84
call sym.imp.__errno_location
mov eax, dword [eax]
push eax
push 0
call sym.error
mov dword [0x80522b0], 1
xor eax, eax
jmp 0x804b369
nop
lea esi, [esi]
mov eax, dword [0x8052238]
mov edx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
mov eax, dword [edx + eax*4 + 0x14]
and eax, 0xf000
cmp eax, 0xa000
jne 0x804b1da
cmp dword [arg_ch], 0
jne 0x804b0b8
cmp dword [0x8052248], 0
jne 0x804b1da
mov eax, dword [0x8052238]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
shl eax, 2
add eax, dword [0x8052230]
push eax
push esi
call fcn.0804b380
mov eax, dword [0x8052238]
mov edx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
mov eax, dword [edx + eax*4 + 0x5c]
push eax
push esi
call fcn.0804b3f0
mov dword [ptr], eax
add esp, 0x10
test eax, eax
je 0x804b1da
cmp dword [arg_ch], 0
je 0x804b10c
cmp dword [0x8052248], 0
jne 0x804b119
cmp dword [0x8052268], 0
je 0x804b1c8
lea eax, [var_58h]
push eax
mov ebx, dword [ptr]
push ebx
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jne 0x804b1c8
cmp dword [arg_ch], 0
je 0x804b1b0
cmp dword [0x8052248], 0
je 0x804b1b0
mov eax, dword [var_48h]
and eax, 0xf000
cmp eax, 0x4000
jne 0x804b1b0
cmp dword [0x8052280], 0
jne 0x804b17f
mov ecx, dword [arg_8h]
mov dword [arg_8h], ebx
mov eax, dword [0x8052238]
mov edx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
shl eax, 2
mov ebx, dword [edx + eax + 0x5c]
mov dword [ptr], ebx
mov dword [edx + eax + 0x5c], ecx
mov eax, dword [0x8052238]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
shl eax, 2
mov edi, eax
add edi, dword [0x8052230]
add edi, 4
lea esi, [var_58h]
cld
mov ecx, 0x16
rep movsd dword es:[edi], dword ptr [esi]
jmp 0x804b1c8
lea esi, [esi]
lea edi, [edi]
mov eax, dword [0x8052238]
mov edx, dword [0x8052230]
lea ecx, [eax + eax*2]
lea ecx, [ecx + ecx*8]
mov eax, dword [var_48h]
mov dword [edx + ecx*4 + 0x60], eax
cmp dword [ptr], 0
je 0x804b1da
mov ebx, dword [ptr]
push ebx
call sym.imp.free
add esp, 4
mov eax, dword [0x8052238]
mov ecx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
lea edx, [eax*4]
mov eax, dword [ecx + edx + 0x14]
and eax, 0xf000
cmp eax, 0xa000
jne 0x804b210
mov dword [ecx + edx + 0x68], 0
jmp 0x804b299
nop
mov eax, dword [0x8052238]
mov ecx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
lea edx, [eax*4]
mov eax, dword [ecx + edx + 0x14]
and eax, 0xf000
cmp eax, 0x4000
jne 0x804b280
cmp dword [arg_ch], 0
je 0x804b260
cmp dword [0x8052280], 0
jne 0x804b260
mov dword [ecx + edx + 0x68], 2
jmp 0x804b299
jmp 0x804b260
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [0x8052238]
mov edx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
mov dword [edx + eax*4 + 0x68], 1
jmp 0x804b299
nop
lea esi, [esi]
mov eax, dword [0x8052238]
mov edx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
mov dword [edx + eax*4 + 0x68], 3
cmp dword [0x8052260], 0
je 0x804b2d0
mov eax, dword [0x8052238]
mov edx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
mov esi, dword [edx + eax*4 + 0x38]
inc esi
mov eax, esi
shr eax, 0x1f
add eax, esi
mov esi, eax
sar esi, 1
jmp 0x804b2e5
lea esi, [esi]
lea edi, [edi]
mov eax, dword [0x8052238]
mov edx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
mov esi, dword [edx + eax*4 + 0x38]
cmp esi, 0x270f
jle 0x804b300
cmp dword [0x8052244], 4
jg 0x804b300
mov dword [0x8052244], 5
cmp esi, 0x1869f
jle 0x804b31b
cmp dword [0x8052244], 5
jg 0x804b31b
mov dword [0x8052244], 6
cmp esi, 0xf423f
jle 0x804b342
cmp dword [0x8052244], 6
jg 0x804b342
mov dword [0x8052244], 7
jmp 0x804b342
nop
lea esi, [esi]
xor esi, esi
mov ebx, dword [arg_8h]
push ebx
call fcn.0804f420
mov ecx, eax
mov eax, dword [0x8052238]
mov edx, dword [0x8052230]
lea eax, [eax + eax*2]
lea eax, [eax + eax*8]
mov dword [edx + eax*4], ecx
inc dword [0x8052238]
mov eax, esi
lea esp, [var_68h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov edi, dword [arg_ch]
push 0xc
call fcn.0804f3b0
mov esi, eax
mov eax, dword [0x805223c]
mov dword [esi + 8], eax
mov dword [0x805223c], esi
push ebx
call fcn.0804f420
mov dword [esi], eax
add esp, 8
test edi, edi
je 0x804ab30
push edi
call fcn.0804f420
mov dword [esi + 4], eax
jmp 0x804ab37
lea esi, [esi]
mov dword [esi + 4], 0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
cmp dword [0x8052250], 4
ja case.default.0x804b6a5
mov eax, dword [0x8052250]
jmp dword [eax*4 + 0x804b6b0]
mov eax, dword [0x805224c]
cmp eax, 1
je 0x804b6f0
jb 0x804b710
cmp eax, 2
je 0x804b730
jmp 0x804b750
lea esi, [esi]
lea edi, [edi]
mov eax, fcn.0804b7f0
cmp dword [0x8052254], 0
je loc.0804b7d0
mov eax, fcn.0804b810
jmp loc.0804b7d0
lea esi, [esi]
mov eax, fcn.0804b830
cmp dword [0x8052254], 0
je loc.0804b7d0
mov eax, fcn.0804b850
jmp loc.0804b7d0
lea esi, [esi]
mov eax, fcn.0804b870
cmp dword [0x8052254], 0
je loc.0804b7d0
mov eax, fcn.0804b890
jmp loc.0804b7d0
lea esi, [esi]
call sym.imp.abort
push eax
push 0x6c
mov eax, dword [0x8052238]
push eax
mov eax, dword [0x8052230]
push eax
call sym.imp.qsort
mov eax, fcn.0804b8f0
cmp dword [0x8052254], 0
je loc.0804b7d0
mov eax, fcn.0804b910
jmp loc.0804b7d0
mov eax, fcn.0804b930
cmp dword [0x8052254], 0
je loc.0804b7d0
mov eax, fcn.0804b9b0
jmp loc.0804b7d0
mov eax, fcn.0804b8b0
cmp dword [0x8052254], 0
je loc.0804b7d0
mov eax, fcn.0804b8d0
jmp loc.0804b7d0
call sym.imp.abort
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0xc
push edi
push esi
push ebx
xor dl, dl
mov edi, dword [arg_8h]
mov al, dl
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov esi, ecx
inc esi
mov dword [var_8h], esi
mov eax, dword [0x8052238]
dec eax
mov dword [var_4h], eax
js 0x804b5d5
nop
mov ecx, dword [0x8052230]
mov esi, dword [var_4h]
lea esi, [esi + esi*2]
mov dword [var_ch], esi
lea eax, [esi + esi*8]
lea edx, [eax*4]
mov esi, dword [ecx + edx + 0x68]
dec esi
cmp esi, 1
ja 0x804b5cc
cmp dword [arg_ch], 0
je 0x804b4f1
mov eax, dword [ecx + edx]
push eax
call fcn.0804b640
add esp, 4
test eax, eax
je 0x804b5cc
mov eax, dword [var_4h]
lea edx, [eax + eax*2]
lea edx, [edx + edx*8]
mov esi, dword [0x8052230]
mov edx, dword [esi + edx*4]
mov dword [var_ch], edx
cmp byte [edx], 0x2f
je 0x804b513
mov eax, dword [arg_8h]
cmp byte [eax], 0
jne 0x804b540
mov ecx, dword [0x8052230]
mov esi, dword [var_4h]
lea edx, [esi + esi*2]
lea edx, [edx + edx*8]
shl edx, 2
mov eax, dword [ecx + edx + 0x5c]
push eax
mov edx, dword [ecx + edx]
mov dword [var_ch], edx
push edx
call fcn.0804aaf0
add esp, 8
jmp 0x804b5a7
nop
lea esi, [esi]
mov esi, dword [var_4h]
lea edx, [esi + esi*2]
lea edx, [edx + edx*8]
lea ebx, [edx*4]
xor dl, dl
mov eax, dword [0x8052230]
mov edi, dword [eax + ebx]
mov al, dl
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov dword [var_ch], ecx
mov esi, dword [var_8h]
lea esi, [esi + ecx - 1]
push esi
call fcn.0804f3b0
mov edi, eax
mov eax, dword [0x8052230]
mov eax, dword [eax + ebx]
push eax
mov esi, dword [arg_8h]
push esi
push edi
call fcn.0804cba0
mov eax, dword [0x8052230]
mov ebx, dword [eax + ebx + 0x5c]
mov dword [var_ch], ebx
push ebx
push edi
call fcn.0804aaf0
push edi
call sym.imp.free
add esp, 0x1c
mov edx, dword [0x8052230]
mov esi, dword [var_4h]
lea ecx, [esi + esi*2]
lea ecx, [ecx + ecx*8]
shl ecx, 2
cmp dword [edx + ecx + 0x68], 2
jne 0x804b5cc
mov eax, dword [edx + ecx]
push eax
call sym.imp.free
add esp, 4
dec dword [var_4h]
jns 0x804b4b0
mov dword [var_4h], 0
xor ebx, ebx
cmp dword [0x8052238], ebx
jle 0x804b62b
mov esi, esi
mov edx, dword [0x8052230]
mov eax, dword [var_4h]
lea eax, [eax + eax*2]
mov dword [var_ch], eax
lea esi, [eax + eax*8]
lea ecx, [esi*4]
cmp dword [edx + ecx + 0x68], 2
je 0x804b61d
lea eax, [ebx + ebx*2]
lea eax, [eax + eax*8]
lea edi, [edx + eax*4]
lea esi, [edx + ecx]
cld
mov ecx, 0x1b
rep movsd dword es:[edi], dword ptr [esi]
inc ebx
inc dword [var_4h]
mov eax, dword [var_4h]
cmp dword [0x8052238], eax
jg 0x804b5e8
mov dword [0x8052238], ebx
lea esp, [var_18h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
cmp dword [0x8052248], 4
ja case.default.0x804ba46
mov eax, dword [0x8052248]
jmp dword [eax*4 + 0x804ba50]
xor ebx, ebx
cmp dword [0x8052238], ebx
jle case.default.0x804ba46
mov esi, esi
lea eax, [ebx + ebx*2]
lea eax, [eax + eax*8]
shl eax, 2
add eax, dword [0x8052230]
push eax
call fcn.0804c390
add esp, 4
mov eax, dword [obj.stdout]
push eax
push 0xa
call sym.imp._IO_putc
add esp, 8
inc ebx
cmp dword [0x8052238], ebx
jg 0x804ba80
jmp case.default.0x804ba46
call fcn.0804c820
jmp case.default.0x804ba46
call fcn.0804c940
jmp case.default.0x804ba46
call fcn.0804ca40
jmp case.default.0x804ba46
xor ebx, ebx
cmp dword [0x8052238], ebx
jle case.default.0x804ba46
mov esi, esi
lea eax, [ebx + ebx*2]
lea eax, [eax + eax*8]
shl eax, 2
add eax, dword [0x8052230]
push eax
call fcn.0804bb40
add esp, 4
mov eax, dword [obj.stdout]
push eax
push 0xa
call sym.imp._IO_putc
add esp, 8
inc dword [0x80522bc]
inc ebx
cmp dword [0x8052238], ebx
jg 0x804bafc
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x20
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov dword [var_20h], 0
call sym.imp.__errno_location
mov ebx, eax
mov dword [ebx], 0
push esi
call sym.imp.opendir
mov edi, eax
add esp, 4
test edi, edi
jne 0x804aba0
push esi
push 0x804ff84
mov eax, dword [ebx]
push eax
push 0
call sym.error
mov dword [0x80522b0], 1
jmp 0x804adf7
mov esi, esi
call fcn.0804aeb0
lea esi, [esi]
push edi
call sym.imp.readdir
mov ebx, eax
add esp, 4
test ebx, ebx
je 0x804abe0
push ebx
call fcn.0804ae40
add esp, 4
test eax, eax
je 0x804aba8
push esi
push 0
lea eax, [ebx + 0xb]
push eax
call fcn.0804af20
add dword [var_20h], eax
add esp, 0xc
jmp 0x804aba8
nop
lea esi, [esi]
push edi
call sym.imp.closedir
add esp, 4
test eax, eax
je 0x804ac0f
push esi
push 0x804ff84
call sym.imp.__errno_location
mov eax, dword [eax]
push eax
push 0
call sym.error
mov dword [0x80522b0], 1
add esp, 0x10
call fcn.0804b690
cmp dword [0x805227c], 0
je 0x804ac28
push 1
push esi
call fcn.0804b480
add esp, 8
cmp dword [0x80522a4], 0
je 0x804ad54
cmp dword [0x8052264], 0
je 0x804ac61
cmp dword [0x8052248], 0
jne 0x804ac61
mov eax, dword [obj.stdout]
push eax
push 0x804ff87
call sym.imp.fputs
add dword [0x80522bc], 2
add esp, 8
mov edi, dword [arg_ch]
test edi, edi
jne 0x804ac6a
mov edi, esi
cmp dword [0x8052264], 0
je 0x804acc0
cmp dword [0x8052248], 0
jne 0x804acc0
mov ebx, 0x80522ec
mov esi, 4
mov eax, dword [0x80522f8]
add eax, 4
cmp dword [0x80522fc], eax
jae 0x804aca5
push 4
push 0x80522ec
call sym.imp._obstack_newchunk
add esp, 8
test byte [ebx + 0x28], 4
jne 0x804acc0
mov eax, dword [ebx + 0xc]
push esi
push 0x80522bc
push eax
call sym.imp.memcpy
add esp, 0xc
add dword [ebx + 0xc], esi
mov eax, dword [obj.stdout]
push eax
push edi
call sym.imp.fputs
xor al, al
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
dec eax
add dword [0x80522bc], eax
add esp, 8
cmp dword [0x8052264], 0
je 0x804ad3a
cmp dword [0x8052248], 0
jne 0x804ad3a
mov ebx, 0x80522ec
mov esi, 4
mov eax, dword [0x80522f8]
add eax, 4
cmp dword [0x80522fc], eax
jae 0x804ad1f
push 4
push 0x80522ec
call sym.imp._obstack_newchunk
add esp, 8
test byte [ebx + 0x28], 4
jne 0x804ad3a
mov eax, dword [ebx + 0xc]
push esi
push 0x80522bc
push eax
call sym.imp.memcpy
add esp, 0xc
add dword [ebx + 0xc], esi
mov eax, dword [obj.stdout]
push eax
push 0x804ff8a
call sym.imp.fputs
add dword [0x80522bc], 2
add esp, 8
cmp dword [0x8052248], 0
je 0x804ad66
cmp dword [0x805225c], 0
je 0x804adcd
cmp dword [0x8052264], 0
je 0x804ad92
cmp dword [0x8052248], 0
jne 0x804ad92
mov eax, dword [obj.stdout]
push eax
push 0x804ff87
call sym.imp.fputs
add dword [0x80522bc], 2
add esp, 8
mov edx, dword [var_20h]
push edx
push str.total__u_n
lea ebx, [s]
push ebx
call sym.imp.sprintf
add esp, 0xc
mov eax, dword [obj.stdout]
push eax
push ebx
call sym.imp.fputs
xor al, al
mov edi, ebx
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
dec eax
add dword [0x80522bc], eax
add esp, 8
cmp dword [0x8052238], 0
je 0x804addb
call fcn.0804ba30
cmp dword [0x805223c], 0
je 0x804adf7
mov eax, dword [obj.stdout]
push eax
push 0xa
call sym.imp._IO_putc
inc dword [0x80522bc]
lea esp, [var_2ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov edx, dword [arg_ch]
xor eax, eax
test byte [edx + 0x28], 4
jne 0x80492da
mov eax, dword [edx + 0xc]
sub eax, dword [edx + 8]
mov esi, eax
shr esi, 2
test esi, esi
jle 0x8049379
mov ecx, edx
test byte [ecx + 0x28], 4
je 0x8049300
xor ebx, ebx
jmp 0x8049335
lea esi, [esi]
lea edi, [edi]
mov ebx, dword [ecx + 8]
cmp dword [ecx + 0xc], ebx
jne 0x804930c
or byte [ecx + 0x28], 2
mov edx, dword [ecx + 0xc]
add edx, dword [ecx + 0x18]
mov eax, dword [ecx + 0x18]
not eax
and edx, eax
mov dword [ecx + 0xc], edx
sub edx, dword [ecx + 4]
mov eax, dword [ecx + 0x10]
sub eax, dword [ecx + 4]
cmp edx, eax
jle 0x804932f
mov eax, dword [ecx + 0x10]
mov dword [ecx + 0xc], eax
mov eax, dword [ecx + 0xc]
mov dword [ecx + 8], eax
mov dword [var_4h], ebx
mov eax, dword [obj.stdout]
push eax
mov edi, dword [s]
push edi
call sym.imp.fputs
xor ebx, ebx
add esp, 8
cmp ebx, esi
jge 0x8049369
mov edi, dword [var_4h]
mov eax, dword [edi + ebx*4]
push eax
push 0x804fd94
call sym.imp.printf
add esp, 8
inc ebx
cmp ebx, esi
jl 0x8049350
mov eax, dword [obj.stdout]
push eax
push 0x804fd98
call sym.imp.fputs
lea esp, [var_10h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_10h]
mov esi, dword [arg_ch]
test esi, esi
jne 0x804f476
lea esi, [var_4h]
call sym.imp.__errno_location
mov edi, eax
mov dword [edi], 0
push 0
push ebx
push esi
mov edx, dword [arg_8h]
push edx
call sym.imp.__strtol_internal
mov ebx, eax
add esp, 0x10
cmp dword [edi], 0
je 0x804f4b0
mov eax, 3
jmp 0x804f6b7
lea esi, [esi]
lea edi, [edi]
mov edx, dword [arg_8h]
cmp dword [esi], edx
jne 0x804f4d0
mov eax, 1
jmp 0x804f6b7
jmp 0x804f4d0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp dword [s], 0
jne 0x804f4f0
mov eax, dword [esi]
cmp byte [eax], 0
je 0x804f6b0
jmp case.0x804f522.189
lea esi, [esi]
lea edi, [edi]
mov eax, dword [esi]
cmp byte [eax], 0
je 0x804f6b0
movsx eax, byte [eax]
push eax
mov edx, dword [s]
push edx
call sym.imp.strchr
test eax, eax
je 0x804f6b0
mov eax, dword [esi]
mov al, byte [eax]
add al, 0xbe
movsx eax, al
cmp eax, 0x35
ja case.0x804f522.189
jmp dword [eax*4 + 0x804f530]
lea esi, [esi]
inc eax
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0x10
test byte [eax + ecx], 0x2e
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0x40
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0x60
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0xa0
test byte [eax + ecx], 0x80
test byte [eax + ecx], 0x90
lea esi, [esi]
fld qword [0x8050f24]
push ebx
ficomp dword [esp]
add esp, 4
fnstsw ax
and ah, 0x45
cmp ah, 1
je 0x804f49a
shl ebx, 9
inc dword [esi]
jmp 0x804f6b0
lea esi, [esi]
lea edi, [edi]
fld qword [0x8050f2c]
push ebx
ficomp dword [esp]
add esp, 4
fnstsw ax
and ah, 0x45
cmp ah, 1
je 0x804f49a
shl ebx, 0xa
jmp case.0x804f522.157
fld qword [0x8050f34]
push ebx
ficomp dword [esp]
add esp, 4
fnstsw ax
and ah, 0x45
cmp ah, 1
je 0x804f49a
shl ebx, 0x14
jmp case.0x804f522.157
fld qword [0x8050f3c]
push ebx
ficomp dword [esp]
add esp, 4
fnstsw ax
and ah, 0x45
cmp ah, 1
je 0x804f49a
add ebx, ebx
jmp case.0x804f522.157
nop
mov eax, 2
jmp 0x804f6b7
mov esi, esi
lea edi, [edi]
mov edx, dword [arg_14h]
mov dword [edx], ebx
xor eax, eax
lea esp, [var_10h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
push 8
call fcn.0804f3b0
mov edx, eax
mov dword [edx], ebx
mov eax, dword [0x805228c]
mov dword [edx + 4], eax
mov dword [0x805228c], edx
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov dword [var_4h], 0xffffffff
mov dword [var_8h], 0
xor dl, dl
mov edi, dword [s2]
mov al, dl
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov esi, ecx
dec esi
xor ebx, ebx
mov eax, dword [arg_ch]
cmp dword [eax], 0
je 0x804ec51
lea esi, [esi]
push esi
mov eax, dword [s2]
push eax
mov eax, dword [arg_ch]
mov eax, dword [eax + ebx*4]
push eax
call sym.imp.strncmp
mov edx, eax
add esp, 0xc
test edx, edx
jne 0x804ec47
mov eax, dword [arg_ch]
mov edi, dword [eax + ebx*4]
xor al, al
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov eax, ecx
dec eax
cmp eax, esi
je 0x804ec60
cmp dword [var_4h], 0xffffffff
jne 0x804ec40
mov dword [var_4h], ebx
jmp 0x804ec47
lea esi, [esi]
lea edi, [edi]
mov dword [var_8h], 1
inc ebx
mov eax, dword [arg_ch]
cmp dword [eax + ebx*4], 0
jne 0x804ebf8
cmp dword [var_8h], 0
jne 0x804ec70
mov eax, dword [var_4h]
jmp 0x804ec75
lea esi, [esi]
mov eax, ebx
jmp 0x804ec75
lea esi, [esi]
lea edi, [edi]
mov eax, 0xfffffffe
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
mov eax, dword [0x805233c]
push eax
push 0x8050ed7
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0xc
cmp ebx, 0xffffffff
jne 0x804ecc0
push str.invalid
jmp 0x804ecc5
lea esi, [esi]
lea edi, [edi]
push str.ambiguous
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
push esi
push edi
push str.__s___s_n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
mov eax, dword [arg_8h]
push eax
xor dl, dl
mov edi, dword [arg_8h]
mov al, dl
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov dword [var_4h], ecx
push ecx
call fcn.0804f3b0
add esp, 4
mov edx, eax
push edx
call sym.imp.strcpy
mov edx, eax
mov edi, dword [var_8h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
mov ebx, dword [arg_ch]
mov ecx, dword [ebx]
mov edi, dword [arg_8h]
mov edi, dword [edi]
mov dword [var_4h], edi
mov dword [var_8h], 0
xor edx, edx
xor esi, esi
lea esi, [esi]
jmp dword [esi*4 + 0x804a250]
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov ebx, dword [0x805228c]
test ebx, ebx
je 0x804ae71
lea esi, [edi + 0xb]
mov esi, esi
push 4
push esi
mov eax, dword [ebx]
push eax
call sym.imp.fnmatch
add esp, 0xc
test eax, eax
je 0x804aea0
mov ebx, dword [ebx + 4]
test ebx, ebx
jne 0x804ae58
cmp dword [0x8052288], 0
jne 0x804ae96
cmp byte [edi + 0xb], 0x2e
jne 0x804ae96
cmp dword [0x8052284], 0
je 0x804aea0
cmp byte [edi + 0xc], 0
je 0x804aea0
cmp word [edi + 0xc], 0x2e
je 0x804aea0
mov eax, 1
jmp 0x804aea2
lea esi, [esi]
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push esi
push ebx
mov esi, dword [arg_ch]
xor ebx, ebx
mov eax, dword [0x8052360]
mov dword [0x80523f0], eax
cmp dword [eax], 0
je 0x804f804
nop
push esi
mov eax, dword [0x80523f0]
add eax, 4
push eax
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804f7ef
inc ebx
mov eax, dword [0x80523f0]
mov eax, dword [eax]
mov dword [0x80523f0], eax
cmp dword [eax], 0
je 0x804f804
test ebx, ebx
je 0x804f7d8
mov eax, ebx
pop ebx
pop esi
ret
push ebp
mov ebp, esp
push ebx
mov eax, dword [arg_8h]
mov ebx, dword [arg_ch]
test eax, eax
jne 0x804f400
push ebx
call fcn.0804f3b0
jmp 0x804f414
lea esi, [esi]
lea edi, [edi]
push ebx
push eax
call sym.imp.realloc
add esp, 8
test eax, eax
jne 0x804f414
push ebx
call fcn.0804f370
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ecx, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
mov edx, esi
cmp byte [edx], 0x2e
jne 0x804cbc6
cmp byte [edx + 1], 0
je 0x804cbe6
jmp 0x804cbc6
lea esi, [esi]
mov al, byte [edx]
mov byte [ecx], al
inc edx
inc ecx
cmp byte [edx], 0
jne 0x804cbc0
cmp edx, esi
jbe 0x804cbe6
cmp byte [edx - 1], 0x2f
je 0x804cbe6
mov byte [ecx], 0x2f
jmp 0x804cbe5
lea esi, [esi]
mov al, byte [ebx]
mov byte [ecx], al
inc ebx
inc ecx
cmp byte [ebx], 0
jne 0x804cbe0
mov byte [ecx], 0
lea esp, [var_8h]
pop ebx
pop esi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
add esp, 0xffffeffc
mov ebx, esp
push 0x1000
push ebx
push esi
call sym.imp.readlink
add esp, 0xc
test eax, eax
jge 0x804b3d0
push esi
push 0x804ff84
call sym.imp.__errno_location
mov eax, dword [eax]
push eax
push 0
call sym.error
mov dword [0x80522b0], 1
jmp 0x804b3dd
nop
lea esi, [esi]
mov byte [eax + ebx], 0
push ebx
call fcn.0804f420
mov dword [edi + 0x5c], eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [arg_ch]
test esi, esi
jne 0x804b410
xor eax, eax
jmp 0x804b476
jmp 0x804b410
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp byte [esi], 0x2f
je 0x804b470
push 0x2f
mov edx, dword [src]
push edx
call sym.imp.strrchr
mov edi, eax
add esp, 8
test edi, edi
je 0x804b470
mov ebx, edi
sub ebx, dword [src]
inc ebx
xor al, al
mov edi, esi
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
add eax, ebx
push eax
call fcn.0804f3b0
mov edi, eax
add esp, 4
push ebx
mov edx, dword [src]
push edx
push edi
call sym.imp.strncpy
add esp, 0xc
push esi
add ebx, edi
push ebx
call sym.imp.strcpy
mov eax, edi
jmp 0x804b476
mov esi, esi
lea edi, [edi]
push esi
call fcn.0804f420
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [s]
push 0x2f
push ebx
call sym.imp.strrchr
test eax, eax
je 0x804b656
lea ebx, [eax + 1]
cmp byte [ebx], 0x2e
jne 0x804b680
cmp byte [ebx + 1], 0
je 0x804b66d
cmp byte [ebx + 1], 0x2e
jne 0x804b680
cmp byte [ebx + 2], 0
jne 0x804b680
xor eax, eax
jmp 0x804b685
jmp 0x804b680
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, 1
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
cmp dword [0x8052274], 0
je 0x804c3b3
mov eax, dword [ebx + 0x10]
push eax
push 7
push str._lu_
call sym.imp.printf
add esp, 0xc
cmp dword [0x805225c], 0
je 0x804c3f7
cmp dword [0x8052260], 0
je 0x804c3e0
mov edx, dword [ebx + 0x38]
inc edx
mov eax, edx
shr eax, 0x1f
add eax, edx
mov edx, eax
sar edx, 1
jmp 0x804c3e3
mov esi, esi
lea edi, [edi]
mov edx, dword [ebx + 0x38]
push edx
mov eax, dword [0x8052244]
push eax
push str._u_
call sym.imp.printf
add esp, 0xc
mov eax, dword [ebx + 0x64]
push eax
mov eax, dword [ebx + 0x14]
push eax
mov eax, dword [ebx]
push eax
call fcn.0804c2e0
add esp, 0xc
cmp dword [0x8052268], 0
je 0x804c41c
mov eax, dword [ebx + 0x14]
push eax
call fcn.0804c430
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0xc
push edi
push esi
push ebx
mov dword [var_8h], 0
xor esi, esi
mov eax, dword [var_8h]
cmp dword [0x8052238], eax
jle 0x804c86b
lea esi, [esi]
lea eax, [esi + esi*2]
lea eax, [eax + eax*8]
shl eax, 2
add eax, dword [0x8052230]
push eax
call fcn.0804c6f0
mov edx, eax
add esp, 4
cmp dword [var_8h], edx
jge 0x804c862
mov dword [var_8h], edx
inc esi
cmp dword [0x8052238], esi
jg 0x804c840
add dword [var_8h], 2
mov eax, dword [0x80522a8]
cdq
idiv dword [var_8h]
mov ecx, eax
test ecx, ecx
jne 0x804c883
mov ecx, 1
mov edx, dword [0x8052238]
mov eax, edx
cdq
idiv ecx
mov dword [var_ch], eax
test edx, edx
je 0x804c899
inc eax
mov dword [var_ch], eax
mov eax, dword [0x8052238]
cdq
idiv dword [var_ch]
mov dword [var_4h], 0
jmp 0x804c923
nop
lea esi, [esi]
mov esi, dword [var_4h]
xor edi, edi
lea esi, [esi]
lea ebx, [esi + esi*2]
lea ebx, [ebx + ebx*8]
shl ebx, 2
mov eax, ebx
add eax, dword [0x8052230]
push eax
call fcn.0804c390
add ebx, dword [0x8052230]
push ebx
call fcn.0804c6f0
mov edx, eax
add esi, dword [var_ch]
add esp, 8
cmp dword [0x8052238], esi
jle 0x804c910
mov ebx, dword [var_8h]
add ebx, edi
push ebx
lea eax, [edx + edi]
push eax
call fcn.0804cb10
mov edi, ebx
add esp, 8
jmp 0x804c8b8
jmp 0x804c910
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [obj.stdout]
push eax
push 0xa
call sym.imp._IO_putc
add esp, 8
inc dword [var_4h]
mov eax, dword [var_ch]
cmp dword [var_4h], eax
jl 0x804c8b0
lea esp, [var_18h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
mov dword [var_4h], 0
xor esi, esi
cmp dword [0x8052238], esi
jle 0x804c987
mov esi, esi
lea eax, [esi + esi*2]
lea eax, [eax + eax*8]
shl eax, 2
add eax, dword [0x8052230]
push eax
call fcn.0804c6f0
mov ecx, eax
add esp, 4
cmp dword [var_4h], ecx
jge 0x804c97e
mov dword [var_4h], ecx
inc esi
cmp dword [0x8052238], esi
jg 0x804c95c
add dword [var_4h], 2
mov eax, dword [0x80522a8]
cdq
idiv dword [var_4h]
mov dword [var_8h], eax
test eax, eax
jne 0x804c9a2
mov dword [var_8h], 1
xor edi, edi
xor ecx, ecx
xor esi, esi
cmp dword [0x8052238], esi
jle 0x804ca29
test esi, esi
je 0x804c9f4
mov eax, esi
cdq
idiv dword [var_8h]
test edx, edx
jne 0x804c9e0
mov eax, dword [obj.stdout]
push eax
push 0xa
call sym.imp._IO_putc
add esp, 8
xor edi, edi
jmp 0x804c9f4
lea esi, [esi]
lea edi, [edi]
mov ebx, dword [var_4h]
add ebx, edi
push ebx
lea eax, [ecx + edi]
push eax
call fcn.0804cb10
mov edi, ebx
add esp, 8
lea eax, [esi + esi*2]
lea eax, [eax + eax*8]
lea ebx, [eax*4]
mov eax, ebx
add eax, dword [0x8052230]
push eax
call fcn.0804c390
add ebx, dword [0x8052230]
push ebx
call fcn.0804c6f0
mov ecx, eax
add esp, 8
inc esi
cmp dword [0x8052238], esi
jg 0x804c9b0
mov eax, dword [obj.stdout]
push eax
push 0xa
call sym.imp._IO_putc
lea esp, [var_14h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
xor esi, esi
xor ebx, ebx
cmp dword [0x8052238], ebx
jle 0x804caf0
mov esi, esi
mov edi, esi
lea eax, [ebx + ebx*2]
lea eax, [eax + eax*8]
shl eax, 2
add eax, dword [0x8052230]
push eax
call fcn.0804c6f0
add esi, eax
lea eax, [ebx + 1]
add esp, 4
cmp dword [0x8052238], eax
jle 0x804ca82
add esi, 2
test edi, edi
je 0x804caa0
cmp dword [0x80522a8], esi
jg 0x804caa0
mov eax, dword [obj.stdout]
push eax
push 0xa
call sym.imp._IO_putc
add esp, 8
sub esi, edi
lea eax, [ebx + ebx*2]
lea eax, [eax + eax*8]
shl eax, 2
add eax, dword [0x8052230]
push eax
call fcn.0804c390
lea eax, [ebx + 1]
add esp, 4
cmp dword [0x8052238], eax
jle 0x804cae3
mov eax, dword [obj.stdout]
push eax
push 0x2c
call sym.imp._IO_putc
add esp, 8
mov eax, dword [obj.stdout]
push eax
push 0x20
call sym.imp._IO_putc
add esp, 8
inc ebx
cmp dword [0x8052238], ebx
jg 0x804ca58
mov eax, dword [obj.stdout]
push eax
push 0xa
call sym.imp._IO_putc
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0xf8
push edi
push esi
push ebx
lea eax, [var_14h]
push eax
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x14]
push eax
call fcn.0804ef00
mov byte [var_ah], 0
add esp, 8
mov eax, dword [0x805224c]
cmp eax, 1
je 0x804bb80
jb 0x804bb90
cmp eax, 2
je 0x804bba0
jmp 0x804bbac
lea esi, [esi]
lea edi, [edi]
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x4c]
jmp 0x804bba6
nop
lea esi, [esi]
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x44]
jmp 0x804bba6
nop
lea esi, [esi]
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x3c]
mov dword [timer], eax
lea eax, [timer]
push eax
call sym.imp.ctime
add esp, 4
push eax
lea eax, [dest]
push eax
call sym.imp.strcpy
add esp, 8
cmp dword [0x8052340], 0
je 0x804bbe0
mov byte [var_24h], 0
jmp 0x804bc1a
mov esi, esi
lea edi, [edi]
mov eax, dword [timer]
add eax, 0xed4e00
cmp dword [0x8052240], eax
jg 0x804bc06
mov eax, dword [timer]
add eax, 0xfffff1f0
cmp dword [0x8052240], eax
jge 0x804bc16
lea eax, [src]
push eax
lea eax, [var_31h]
push eax
call sym.imp.strcpy
add esp, 8
mov byte [var_2ch], 0
lea esi, [s]
cmp dword [0x8052274], 0
je 0x804bc54
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x10]
push eax
push 7
push str._lu_
push esi
call sym.imp.sprintf
xor al, al
mov edi, esi
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea esi, [esi + eax - 1]
add esp, 0x10
cmp dword [0x805225c], 0
je 0x804bcaf
cmp dword [0x8052260], 0
je 0x804bc80
mov edx, dword [arg_8h]
mov ecx, dword [edx + 0x38]
inc ecx
mov eax, ecx
shr eax, 0x1f
add eax, ecx
mov ecx, eax
sar ecx, 1
jmp 0x804bc86
nop
lea esi, [esi]
mov edx, dword [arg_8h]
mov ecx, dword [edx + 0x38]
push ecx
mov eax, dword [0x8052244]
push eax
push str._u_
push esi
call sym.imp.sprintf
xor al, al
mov edi, esi
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea esi, [esi + eax - 1]
add esp, 0x10
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x18]
push eax
lea eax, [var_14h]
push eax
push str._s__3u_
push esi
call sym.imp.sprintf
xor al, al
mov edi, esi
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea esi, [esi + eax - 1]
add esp, 0x10
cmp dword [0x8052258], 0
je 0x804bd00
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x1c]
push eax
push str.__8u_
push esi
call sym.imp.sprintf
add esp, 0xc
jmp 0x804bd1b
lea esi, [esi]
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x1c]
push eax
call fcn.0804f110
push eax
push str.__8.8s_
push esi
call sym.imp.sprintf
add esp, 0x10
xor al, al
mov edi, esi
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea esi, [esi + eax - 1]
cmp dword [0x8052338], 0
jne 0x804bd8f
cmp dword [0x8052258], 0
je 0x804bd60
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x20]
push eax
push str.__8u_
push esi
call sym.imp.sprintf
add esp, 0xc
jmp 0x804bd7b
nop
lea esi, [esi]
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x20]
push eax
call fcn.0804f240
push eax
push str.__8.8s_
push esi
call sym.imp.sprintf
add esp, 0x10
xor al, al
mov edi, esi
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea esi, [esi + eax - 1]
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x14]
and eax, 0xf000
cmp eax, 0x2000
je 0x804bda8
cmp eax, 0x6000
jne 0x804bdd0
mov edx, dword [arg_8h]
movzx eax, byte [edx + 0x24]
push eax
movzx eax, byte [edx + 0x25]
push eax
push str._3u___3u_
push esi
call sym.imp.sprintf
add esp, 0x10
jmp 0x804bde5
lea esi, [esi]
lea edi, [edi]
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x30]
push eax
push str._8lu_
push esi
call sym.imp.sprintf
add esp, 0xc
xor al, al
mov edi, esi
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea esi, [esi + eax - 1]
cmp dword [0x8052340], 0
je 0x804be10
lea eax, [dest]
jmp 0x804be13
mov esi, esi
lea edi, [edi]
lea eax, [var_38h]
push eax
push 0x804ffc8
push esi
call sym.imp.sprintf
xor al, al
mov edi, esi
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea esi, [esi + eax - 1]
add esp, 0xc
cmp dword [0x8052264], 0
je 0x804be62
cmp dword [0x8052248], 0
jne 0x804be62
mov eax, dword [obj.stdout]
push eax
push 0x804ff87
call sym.imp.fputs
add dword [0x80522bc], 2
add esp, 8
mov eax, dword [obj.stdout]
push eax
lea ebx, [s]
push ebx
call sym.imp.fputs
mov eax, esi
sub eax, ebx
add dword [0x80522bc], eax
add esp, 8
cmp dword [0x8052264], 0
je 0x804bed7
cmp dword [0x8052248], 0
jne 0x804bed7
mov ebx, 0x80522c0
mov esi, 4
mov eax, dword [0x80522cc]
add eax, 4
cmp dword [0x80522d0], eax
jae 0x804bebc
push 4
push 0x80522c0
call sym.imp._obstack_newchunk
add esp, 8
test byte [ebx + 0x28], 4
jne 0x804bed7
mov eax, dword [ebx + 0xc]
push esi
push 0x80522bc
push eax
call sym.imp.memcpy
add esp, 0xc
add dword [ebx + 0xc], esi
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x64]
push eax
mov eax, dword [edx + 0x14]
push eax
mov eax, dword [edx]
push eax
call fcn.0804c2e0
add esp, 0xc
cmp dword [0x8052264], 0
je 0x804bf43
cmp dword [0x8052248], 0
jne 0x804bf43
mov ebx, 0x80522c0
mov esi, 4
mov eax, dword [0x80522cc]
add eax, 4
cmp dword [0x80522d0], eax
jae 0x804bf28
push 4
push 0x80522c0
call sym.imp._obstack_newchunk
add esp, 8
test byte [ebx + 0x28], 4
jne 0x804bf43
mov eax, dword [ebx + 0xc]
push esi
push 0x80522bc
push eax
call sym.imp.memcpy
add esp, 0xc
add dword [ebx + 0xc], esi
mov edx, dword [arg_8h]
cmp dword [edx + 0x68], 0
jne 0x804bfa0
cmp dword [edx + 0x5c], 0
je 0x804bfb5
mov eax, dword [obj.stdout]
push eax
push str.____
call sym.imp.fputs
add dword [0x80522bc], 4
add esp, 8
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x64]
dec eax
push eax
mov eax, dword [edx + 0x60]
push eax
mov eax, dword [edx + 0x5c]
push eax
call fcn.0804c2e0
add esp, 0xc
cmp dword [0x8052268], 0
je 0x804bfb5
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x60]
jmp 0x804bfaf
lea esi, [esi]
lea edi, [edi]
cmp dword [0x8052268], 0
je 0x804bfb5
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x14]
push eax
call fcn.0804c430
lea esp, [var_104h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [arg_ch]
mov bx, word [arg_8h]
movzx edi, bx
push edi
call fcn.0804ef60
mov byte [esi], al
lea eax, [esi + 1]
push eax
mov eax, ebx
and eax, 0x1c0
push eax
call fcn.0804f050
lea eax, [esi + 4]
push eax
mov eax, ebx
and eax, 0x38
shl eax, 3
push eax
call fcn.0804f050
lea eax, [esi + 7]
push eax
mov eax, ebx
and eax, 7
shl eax, 6
push eax
call fcn.0804f050
push esi
push edi
call fcn.0804f0a0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, edx
and eax, 0xf000
cmp eax, 0x6000
jne 0x804ef80
mov eax, 0x62
mov esp, ebp
pop ebp
ret
lea esi, [esi]
mov eax, edx
and eax, 0xf000
cmp eax, 0x2000
jne 0x804efa0
mov eax, 0x63
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
mov eax, edx
and eax, 0xf000
cmp eax, 0x4000
jne 0x804efc0
mov eax, 0x64
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
mov eax, edx
and eax, 0xf000
cmp eax, 0x8000
jne 0x804efe0
mov eax, 0x2d
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
mov eax, edx
and eax, 0xf000
cmp eax, 0x1000
jne 0x804f000
mov eax, 0x70
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
mov eax, edx
and eax, 0xf000
cmp eax, 0xa000
jne 0x804f020
mov eax, 0x6c
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
mov eax, edx
and eax, 0xf000
cmp eax, 0xc000
je 0x804f040
mov eax, 0x3f
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
mov eax, 0x73
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_ch]
mov ax, word [arg_8h]
test ah, 1
je 0x804f070
mov byte [edx], 0x72
jmp 0x804f073
lea esi, [esi]
lea edi, [edi]
mov byte [edx], 0x2d
test al, al
jge 0x804f080
mov byte [edx + 1], 0x77
jmp 0x804f084
lea esi, [esi]
mov byte [edx + 1], 0x2d
test al, 0x40
je 0x804f090
mov byte [edx + 2], 0x78
mov esp, ebp
pop ebp
ret
mov byte [edx + 2], 0x2d
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
mov dx, word [arg_8h]
test dh, 8
je 0x804f0c4
cmp byte [eax + 3], 0x78
je 0x804f0c0
mov byte [eax + 3], 0x53
jmp 0x804f0c4
nop
lea esi, [esi]
mov byte [eax + 3], 0x73
test dh, 4
je 0x804f0e4
cmp byte [eax + 6], 0x78
je 0x804f0e0
mov byte [eax + 6], 0x53
jmp 0x804f0e4
lea esi, [esi]
lea edi, [edi]
mov byte [eax + 6], 0x73
test dh, 2
je 0x804f104
cmp byte [eax + 9], 0x78
je 0x804f100
mov byte [eax + 9], 0x54
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
mov byte [eax + 9], 0x74
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x14
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [0x8052328]
test esi, esi
je 0x804f133
mov esi, esi
cmp dword [esi], edi
je 0x804f179
mov esi, dword [esi + 8]
test esi, esi
jne 0x804f128
push edi
call sym.imp.getpwuid
mov ebx, eax
push 0xc
call fcn.0804f3b0
mov esi, eax
mov dword [esi], edi
add esp, 8
test ebx, ebx
jne 0x804f160
push edi
push 0x8050f0e
lea ebx, [s]
push ebx
call sym.imp.sprintf
push ebx
jmp 0x804f163
nop
mov eax, dword [ebx]
push eax
call fcn.0804f420
mov dword [esi + 4], eax
mov eax, dword [0x8052328]
mov dword [esi + 8], eax
mov dword [0x8052328], esi
mov eax, dword [esi + 4]
lea esp, [var_20h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x14
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [0x8052330]
test esi, esi
je 0x804f263
mov esi, esi
cmp dword [esi], edi
je 0x804f2a9
mov esi, dword [esi + 8]
test esi, esi
jne 0x804f258
push edi
call sym.imp.getgrgid
mov ebx, eax
push 0xc
call fcn.0804f3b0
mov esi, eax
mov dword [esi], edi
add esp, 8
test ebx, ebx
jne 0x804f290
push edi
push 0x8050f0e
lea ebx, [s]
push ebx
call sym.imp.sprintf
push ebx
jmp 0x804f293
nop
mov eax, dword [ebx]
push eax
call fcn.0804f420
mov dword [esi + 4], eax
mov eax, dword [0x8052330]
mov dword [esi + 8], eax
mov dword [0x8052330], esi
mov eax, dword [esi + 4]
lea esp, [var_20h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov esi, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
cmp dword [0x805226c], 0
je 0x804c305
push eax
push edx
push esi
call fcn.0804c500
add esp, 0xc
lea eax, [var_4h]
push eax
push esi
call fcn.0804bfd0
mov ebx, eax
add esp, 8
mov eax, dword [obj.stdout]
push eax
mov eax, ebx
test ebx, ebx
jne 0x804c322
mov eax, esi
push eax
call sym.imp.fputs
mov ecx, dword [var_4h]
add dword [0x80522bc], ecx
add esp, 8
test ebx, ebx
je 0x804c341
push ebx
call sym.imp.free
add esp, 4
cmp dword [0x805226c], 0
je 0x804c37e
cmp dword [0x8051f60], 0
je 0x804c360
push 0x8051f5c
jmp 0x804c379
lea esi, [esi]
push 0x8051f4c
call fcn.0804c6b0
push 0x8051f64
call fcn.0804c6b0
push 0x8051f54
call fcn.0804c6b0
lea esp, [var_ch]
pop ebx
pop esi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
mov eax, ebx
and eax, 0xf000
cmp eax, 0x4000
jne 0x804c45b
mov eax, dword [obj.stdout]
push eax
push 0x2f
call sym.imp._IO_putc
add esp, 8
inc dword [0x80522bc]
mov eax, ebx
and eax, 0xf000
cmp eax, 0xa000
jne 0x804c47f
mov eax, dword [obj.stdout]
push eax
push 0x40
call sym.imp._IO_putc
add esp, 8
inc dword [0x80522bc]
mov eax, ebx
and eax, 0xf000
cmp eax, 0x1000
jne 0x804c4a3
mov eax, dword [obj.stdout]
push eax
push 0x7c
call sym.imp._IO_putc
add esp, 8
inc dword [0x80522bc]
mov eax, ebx
and eax, 0xf000
cmp eax, 0xc000
jne 0x804c4c7
mov eax, dword [obj.stdout]
push eax
push 0x3d
call sym.imp._IO_putc
add esp, 8
inc dword [0x80522bc]
mov eax, ebx
and eax, 0xf000
cmp eax, 0x8000
jne 0x804c4f6
cmp dword [0x8052268], 1
jne 0x804c4f6
test bl, 0x49
je 0x804c4f6
mov eax, dword [obj.stdout]
push eax
push 0x2a
call sym.imp._IO_putc
inc dword [0x80522bc]
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, 4
cmp dword [arg_10h], 0xffffffff
jne 0x804c530
cmp dword [0x8051fa8], 0
je 0x804c530
xor ebx, ebx
mov esi, 0xb
jmp 0x804c664
lea esi, [esi]
lea edi, [edi]
xor al, al
mov edi, dword [s1]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea edi, [eax - 1]
add dword [s1], edi
mov ebx, dword [0x8051fbc]
test ebx, ebx
je 0x804c580
lea esi, [esi]
cmp dword [ebx], edi
ja 0x804c571
mov eax, dword [ebx]
push eax
mov eax, dword [ebx + 4]
push eax
mov eax, dword [s1]
sub eax, dword [ebx]
push eax
call sym.imp.strncmp
add esp, 0xc
test eax, eax
je 0x804c578
mov ebx, dword [ebx + 0x10]
test ebx, ebx
jne 0x804c554
test ebx, ebx
jne 0x804c664
mov eax, dword [arg_ch]
and eax, 0xf000
cmp eax, 0x4000
jne 0x804c5a0
mov esi, 5
jmp 0x804c654
lea esi, [esi]
mov eax, dword [arg_ch]
and eax, 0xf000
cmp eax, 0xa000
jne 0x804c5e0
mov esi, 6
cmp dword [arg_10h], 0
jne 0x804c654
cmp dword [0x8051fb0], 0
je 0x804c654
mov esi, 0xc
jmp 0x804c654
lea esi, [esi]
lea edi, [edi]
mov eax, dword [arg_ch]
and eax, 0xf000
cmp eax, 0x1000
jne 0x804c600
mov esi, 7
jmp 0x804c654
lea esi, [esi]
lea edi, [edi]
mov eax, dword [arg_ch]
and eax, 0xf000
cmp eax, 0xc000
jne 0x804c620
mov esi, 8
jmp 0x804c654
lea esi, [esi]
lea edi, [edi]
mov eax, dword [arg_ch]
and eax, 0xf000
cmp eax, 0x6000
jne 0x804c640
mov esi, 9
jmp 0x804c654
lea esi, [esi]
lea edi, [edi]
mov eax, dword [arg_ch]
and eax, 0xf000
cmp eax, 0x2000
jne 0x804c654
mov esi, 0xa
cmp esi, 4
jne 0x804c664
test byte [arg_ch], 0x49
je 0x804c664
mov esi, 0xd
push 0x8051f4c
call fcn.0804c6b0
add esp, 4
test ebx, ebx
je 0x804c680
lea eax, [ebx + 8]
jmp 0x804c687
lea esi, [esi]
lea eax, [esi*8 + 0x8051f4c]
push eax
call fcn.0804c6b0
push 0x8051f54
call fcn.0804c6b0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0xc
push edi
push esi
push ebx
mov esi, dword [arg_8h]
cmp dword [0x8052298], 0
jne 0x804c020
cmp dword [0x8052290], 0
jne 0x804c020
cmp dword [0x8052294], 0
jne 0x804c020
xor al, al
mov edx, dword [arg_8h]
mov edi, edx
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
dec eax
mov ebx, dword [arg_ch]
mov dword [ebx], eax
xor eax, eax
jmp 0x804c2d2
mov esi, esi
lea edi, [edi]
xor edx, edx
mov edi, dword [arg_8h]
mov cl, byte [edi]
test cl, cl
je 0x804c0cf
mov ebx, dword [obj.__ctype_b]
mov dword [var_ch], ebx
cmp dword [0x8052290], 0
je 0x804c0a0
movzx eax, cl
cmp eax, 0xd
jg 0x804c070
cmp eax, 0xc
jge 0x804c0f0
cmp eax, 0xa
jg 0x804c085
cmp eax, 8
jl 0x804c085
jmp 0x804c0f0
jmp 0x804c070
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp eax, 0x22
je 0x804c0f0
jg 0x804c080
cmp eax, 0x20
je 0x804c0f0
jmp 0x804c085
mov esi, esi
cmp eax, 0x5c
je 0x804c0f0
movzx eax, cl
mov edi, dword [var_ch]
cmp word [edi + eax*2], 0
jl 0x804c0bb
jmp 0x804c0f0
lea esi, [esi]
lea edi, [edi]
movzx eax, cl
mov ebx, dword [var_ch]
test byte [ebx + eax*2 + 1], 0x40
jne 0x804c0bb
cmp dword [0x8052294], 0
je 0x804c0bb
mov edx, 1
test edx, edx
jne 0x804c0f0
inc dword [arg_8h]
mov edi, dword [arg_8h]
mov cl, byte [edi]
test cl, cl
jne 0x804c038
test edx, edx
jne 0x804c0f0
cmp dword [0x8052298], 0
jne 0x804c0f0
mov edi, dword [arg_8h]
sub edi, esi
mov ebx, dword [arg_ch]
mov dword [ebx], edi
xor eax, eax
jmp 0x804c2d2
lea esi, [esi]
mov dword [arg_8h], esi
xor al, al
mov edi, dword [arg_8h]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea eax, [eax*4 - 3]
push eax
call fcn.0804f3b0
mov dword [var_ch], eax
mov esi, dword [var_ch]
add esp, 4
cmp dword [0x8052298], 0
je 0x804c12a
mov byte [esi], 0x22
mov esi, dword [var_ch]
inc esi
mov ebx, dword [arg_8h]
mov cl, byte [ebx]
inc ebx
mov dword [arg_8h], ebx
test cl, cl
je 0x804c2b5
nop
cmp dword [0x8052290], 0
je 0x804c270
movzx eax, cl
cmp eax, 0xc
je 0x804c200
jg 0x804c180
cmp eax, 9
je 0x804c1f0
jg 0x804c170
cmp eax, 8
je 0x804c1d0
jmp 0x804c230
lea esi, [esi]
cmp eax, 0xa
je 0x804c1c0
jmp 0x804c230
lea esi, [esi]
cmp eax, 0x20
je 0x804c210
jg 0x804c1a0
cmp eax, 0xd
je 0x804c1e0
jmp 0x804c230
lea esi, [esi]
lea edi, [edi]
cmp eax, 0x22
je 0x804c220
cmp eax, 0x5c
jne 0x804c230
mov byte [esi], 0x5c
inc esi
mov byte [esi], 0x5c
jmp 0x804c2a3
lea esi, [esi]
mov byte [esi], 0x5c
inc esi
mov byte [esi], 0x6e
jmp 0x804c2a3
lea esi, [esi]
mov byte [esi], 0x5c
inc esi
mov byte [esi], 0x62
jmp 0x804c2a3
lea esi, [esi]
mov byte [esi], 0x5c
inc esi
mov byte [esi], 0x72
jmp 0x804c2a3
lea esi, [esi]
mov byte [esi], 0x5c
inc esi
mov byte [esi], 0x74
jmp 0x804c2a3
lea esi, [esi]
mov byte [esi], 0x5c
inc esi
mov byte [esi], 0x66
jmp 0x804c2a3
lea esi, [esi]
mov byte [esi], 0x5c
inc esi
mov byte [esi], 0x20
jmp 0x804c2a3
lea esi, [esi]
mov byte [esi], 0x5c
inc esi
mov byte [esi], 0x22
jmp 0x804c2a3
lea esi, [esi]
movzx edx, cl
mov eax, dword [obj.__ctype_b]
cmp word [eax + edx*2], 0
jge 0x804c250
mov byte [esi], cl
jmp 0x804c2a3
lea esi, [esi]
lea edi, [edi]
movzx eax, cl
push eax
push str._03o
lea ebx, [s]
push ebx
call sym.imp.sprintf
push ebx
push esi
call sym.imp.stpcpy
mov esi, eax
add esp, 0x14
jmp 0x804c2a4
movzx edx, cl
mov eax, dword [obj.__ctype_b]
test byte [eax + edx*2 + 1], 0x40
je 0x804c290
mov byte [esi], cl
jmp 0x804c2a3
lea esi, [esi]
lea edi, [edi]
cmp dword [0x8052294], 0
jne 0x804c2a0
mov byte [esi], cl
jmp 0x804c2a3
lea esi, [esi]
mov byte [esi], 0x3f
inc esi
mov edi, dword [arg_8h]
mov cl, byte [edi]
inc edi
mov dword [arg_8h], edi
test cl, cl
jne 0x804c13c
cmp dword [0x8052298], 0
je 0x804c2c2
mov byte [esi], 0x22
inc esi
mov edi, esi
sub edi, dword [var_ch]
mov ebx, dword [arg_ch]
mov dword [ebx], edi
mov byte [esi], 0
mov eax, dword [var_ch]
lea esp, [var_18h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [arg_8h]
mov esi, dword [eax + 4]
mov ebx, dword [eax]
test ebx, ebx
jle 0x804c6dc
lea esi, [esi]
movsx edx, byte [esi]
inc esi
mov eax, dword [obj.stdout]
push eax
push edx
call sym.imp._IO_putc
add esp, 8
dec ebx
test ebx, ebx
jg 0x804c6c4
lea esp, [var_8h]
pop ebx
pop esi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, dword [esi]
xor ecx, ecx
cmp dword [0x8052274], 0
je 0x804c70a
mov ecx, 8
cmp dword [0x805225c], 0
je 0x804c71a
inc ecx
add ecx, dword [0x8052244]
cmp dword [0x8052298], 0
je 0x804c7b1
add ecx, 2
jmp 0x804c7b1
nop
cmp dword [0x8052290], 0
je 0x804c7b0
movzx eax, dl
cmp eax, 0xd
jg 0x804c760
cmp eax, 0xc
jge 0x804c727
cmp eax, 0xa
jg 0x804c790
cmp eax, 8
jl 0x804c790
jmp 0x804c727
lea esi, [esi]
lea edi, [edi]
cmp eax, 0x22
je 0x804c780
jg 0x804c770
cmp eax, 0x20
je 0x804c727
jmp 0x804c790
mov esi, esi
cmp eax, 0x5c
jne 0x804c790
jmp 0x804c727
mov esi, esi
lea edi, [edi]
cmp dword [0x8052298], 0
jne 0x804c727
jmp 0x804c7b0
nop
lea esi, [esi]
and edx, 0xff
mov eax, dword [obj.__ctype_b]
test byte [eax + edx*2 + 1], 0x40
jne 0x804c7b0
add ecx, 4
jmp 0x804c7b1
mov esi, esi
lea edi, [edi]
inc ecx
mov dl, byte [ebx]
inc ebx
test dl, dl
jne 0x804c730
cmp dword [0x8052268], 0
je 0x804c814
mov edx, dword [esi + 0x14]
mov eax, edx
and eax, 0xf000
cmp eax, 0x8000
jne 0x804c7f0
cmp dword [0x8052268], 1
jne 0x804c814
test dl, 0x49
je 0x804c814
jmp 0x804c813
lea esi, [esi]
lea edi, [edi]
mov eax, edx
and eax, 0xf000
cmp eax, 0x4000
je 0x804c813
cmp eax, 0xa000
je 0x804c813
cmp eax, 0x1000
je 0x804c813
cmp eax, 0xc000
jne 0x804c814
inc ecx
mov eax, ecx
lea esp, [var_8h]
pop ebx
pop esi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
cmp ebx, esi
jge 0x804cb90
cmp dword [0x805229c], 0
jle 0x804cb70
mov eax, esi
cdq
idiv dword [0x805229c]
mov dword [var_4h], eax
lea ecx, [ebx + 1]
mov eax, ecx
cdq
idiv dword [0x805229c]
mov edi, eax
cmp dword [var_4h], edi
jle 0x804cb70
mov eax, dword [obj.stdout]
push eax
push 9
call sym.imp._IO_putc
add esp, 8
mov eax, ebx
cdq
idiv dword [0x805229c]
mov eax, dword [0x805229c]
sub eax, edx
add ebx, eax
jmp 0x804cb1f
nop
mov eax, dword [obj.stdout]
push eax
push 0x20
call sym.imp._IO_putc
add esp, 8
inc ebx
jmp 0x804cb1f
lea esi, [esi]
lea edi, [edi]
lea esp, [var_10h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
cmp eax, 6
ja case.default.0x804d76f
jmp dword [eax*4 + 0x804d780]
mov eax, str.LC_COLLATE
mov esp, ebp
pop ebp
ret
mov eax, str.LC_CTYPE
mov esp, ebp
pop ebp
ret
mov eax, str.LC_MONETARY
mov esp, ebp
pop ebp
ret
mov eax, str.LC_NUMERIC
mov esp, ebp
pop ebp
ret
mov eax, str.LC_TIME
mov esp, ebp
pop ebp
ret
mov eax, str.LC_MESSAGES
mov esp, ebp
pop ebp
ret
mov eax, str.LC_ALL
mov esp, ebp
pop ebp
ret
mov eax, str.LC_XXX
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_ch]
push str.LANGUAGE
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x804d83d
cmp byte [eax], 0
jne 0x804d87d
push str.LC_ALL
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x804d853
cmp byte [eax], 0
jne 0x804d87d
push ebx
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x804d865
cmp byte [eax], 0
jne 0x804d87d
push str.LANG
call sym.imp.getenv
test eax, eax
je 0x804d878
cmp byte [eax], 0
jne 0x804d87d
mov eax, 0x8050e46
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x24
push edi
push esi
push ebx
push 0
mov edx, dword [arg_10h]
push edx
push 0
push 0
push 0
push 0
push 0
push 0
push 0
mov edx, dword [ptr]
push edx
push 0
xor al, al
mov edi, dword [arg_8h]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
push eax
mov edx, dword [arg_8h]
push edx
push 0x8052318
call fcn.0804e3e0
mov esi, eax
add esp, 0x38
test esi, esi
je 0x804d980
cmp dword [esi + 4], 0
jne 0x804d92b
push esi
call fcn.0804dab0
add esp, 4
cmp dword [esi + 8], 0
jne 0x804daa4
xor ebx, ebx
cmp dword [esi + ebx*4 + 0x10], 0
je 0x804d965
mov esi, esi
mov eax, dword [esi + ebx*4 + 0x10]
cmp dword [eax + 4], 0
jne 0x804d953
push eax
call fcn.0804dab0
add esp, 4
mov eax, dword [esi + ebx*4 + 0x10]
cmp dword [eax + 8], 0
jne 0x804d965
inc ebx
cmp dword [esi + ebx*4 + 0x10], 0
jne 0x804d940
xor eax, eax
test ebx, ebx
jl 0x804daa6
jmp 0x804daa4
lea esi, [esi]
lea edi, [edi]
mov edx, dword [ptr]
push edx
call fcn.0804dde0
mov dword [s2], eax
add esp, 4
test eax, eax
je 0x804d9c9
xor al, al
mov edi, dword [s2]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov ebx, ecx
not ebx
push ebx
call sym.imp.malloc
mov dword [ptr], eax
add esp, 4
test eax, eax
je 0x804da47
push ebx
mov edx, dword [s2]
push edx
mov edx, dword [ptr]
push edx
call sym.imp.memcpy
add esp, 0xc
lea eax, [var_20h]
push eax
lea eax, [var_1ch]
push eax
lea eax, [var_18h]
push eax
lea eax, [var_14h]
push eax
lea eax, [var_10h]
push eax
lea eax, [var_ch]
push eax
lea eax, [var_8h]
push eax
lea eax, [var_4h]
push eax
mov edx, dword [ptr]
push edx
call fcn.0804e960
mov ecx, eax
add esp, 0x24
push 1
mov edx, dword [arg_10h]
push edx
mov eax, dword [var_20h]
push eax
mov eax, dword [var_1ch]
push eax
mov eax, dword [var_18h]
push eax
mov eax, dword [var_8h]
push eax
mov eax, dword [var_14h]
push eax
mov eax, dword [var_10h]
push eax
mov eax, dword [var_ch]
push eax
mov eax, dword [var_4h]
push eax
push ecx
xor al, al
mov edi, dword [arg_8h]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
push eax
mov edx, dword [arg_8h]
push edx
push 0x8052318
call fcn.0804e3e0
mov esi, eax
add esp, 0x38
test esi, esi
jne 0x804da50
xor eax, eax
jmp 0x804daa6
nop
lea esi, [esi]
cmp dword [esi + 4], 0
jne 0x804da5f
push esi
call fcn.0804dab0
add esp, 4
cmp dword [esi + 8], 0
jne 0x804da95
xor ebx, ebx
cmp dword [esi + ebx*4 + 0x10], 0
je 0x804da95
mov esi, esi
mov eax, dword [esi + ebx*4 + 0x10]
cmp dword [eax + 4], 0
jne 0x804da83
push eax
call fcn.0804dab0
add esp, 4
mov eax, dword [esi + ebx*4 + 0x10]
cmp dword [eax + 8], 0
jne 0x804da95
inc ebx
cmp dword [esi + ebx*4 + 0x10], 0
jne 0x804da70
cmp dword [s2], 0
je 0x804daa4
mov edx, dword [ptr]
push edx
call sym.imp.free
mov eax, esi
lea esp, [var_30h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x1c
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
cmp dword [ebx + 4], 0
jne 0x804d35b
push ebx
call fcn.0804dab0
add esp, 4
cmp dword [ebx + 8], 0
je 0x804d740
mov esi, dword [ebx + 8]
cmp dword [esi + 0x14], 2
jbe 0x804d650
cmp dword [esi + 0x18], 0
je 0x804d650
xor cl, cl
mov edi, dword [s1]
mov al, cl
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov edx, ecx
dec edx
mov dword [var_8h], edx
mov ebx, dword [s1]
xor edi, edi
cmp byte [ebx], 0
je 0x804d3c0
shl edi, 4
movsx eax, byte [ebx]
add edi, eax
inc ebx
mov ecx, edi
and ecx, 0xf0000000
je 0x804d398
mov eax, ecx
shr eax, 0x18
xor edi, eax
xor edi, ecx
jmp 0x804d398
nop
lea esi, [esi]
mov eax, edi
xor edx, edx
div dword [esi + 0x14]
mov dword [var_ch], edx
mov eax, dword [esi + 0x14]
add eax, 0xfffffffe
mov dword [var_18h], eax
mov eax, edi
xor edx, edx
div dword [var_18h]
mov ebx, edx
inc ebx
mov dword [var_10h], ebx
cmp dword [esi + 4], 0
je 0x804d420
mov eax, dword [var_ch]
mov edx, dword [esi + 0x18]
mov eax, dword [edx + eax*4]
mov dword [var_1ch], eax
mov ecx, eax
shl ecx, 0x18
and eax, 0xff00
shl eax, 8
or ecx, eax
mov edx, dword [var_1ch]
shr edx, 8
and edx, 0xff00
or ecx, edx
mov eax, dword [var_1ch]
shr eax, 0x18
mov ebx, eax
or ebx, ecx
jmp 0x804d429
nop
lea esi, [esi]
mov edx, dword [var_ch]
mov eax, dword [esi + 0x18]
mov ebx, dword [eax + edx*4]
test ebx, ebx
je 0x804d740
cmp dword [esi + 4], 0
je 0x804d470
mov eax, dword [esi + 0xc]
mov ecx, dword [eax + ebx*8 - 8]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
mov eax, ecx
shr eax, 8
and eax, 0xff00
or edx, eax
shr ecx, 0x18
or edx, ecx
cmp dword [var_8h], edx
je 0x804d480
jmp 0x804d500
lea esi, [esi]
mov eax, dword [var_8h]
mov edx, dword [esi + 0xc]
cmp dword [edx + ebx*8 - 8], eax
jne 0x804d500
mov edi, dword [esi]
cmp dword [esi + 4], 0
je 0x804d4c0
mov eax, dword [esi + 0xc]
mov ecx, dword [eax + ebx*8 - 4]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
mov eax, ecx
shr eax, 8
and eax, 0xff00
or edx, eax
shr ecx, 0x18
or edx, ecx
lea ecx, [edx + edi]
jmp 0x804d4c9
lea esi, [esi]
lea edi, [edi]
mov eax, dword [esi + 0xc]
mov ecx, edi
add ecx, dword [eax + ebx*8 - 4]
push ecx
mov edx, dword [s1]
push edx
call sym.imp.strcmp
add esp, 8
mov ecx, eax
test ecx, ecx
jne 0x804d500
mov edi, dword [esi]
cmp dword [esi + 4], 0
je 0x804d640
mov eax, dword [esi + 0x10]
mov ecx, dword [eax + ebx*8 - 4]
jmp 0x804d707
lea esi, [esi]
lea edi, [edi]
mov ecx, dword [esi + 0x14]
sub ecx, dword [var_10h]
cmp dword [var_ch], ecx
jb 0x804d510
sub dword [var_ch], ecx
jmp 0x804d516
mov eax, dword [var_10h]
add dword [var_ch], eax
cmp dword [esi + 4], 0
je 0x804d560
mov edx, dword [var_ch]
mov eax, dword [esi + 0x18]
mov edx, dword [eax + edx*4]
mov dword [var_1ch], edx
mov ecx, edx
shl ecx, 0x18
and edx, 0xff00
shl edx, 8
or ecx, edx
mov eax, dword [var_1ch]
shr eax, 8
and eax, 0xff00
or ecx, eax
mov edx, dword [var_1ch]
shr edx, 0x18
mov ebx, edx
or ebx, ecx
jmp 0x804d569
jmp 0x804d560
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [var_ch]
mov edx, dword [esi + 0x18]
mov ebx, dword [edx + eax*4]
test ebx, ebx
je 0x804d740
cmp dword [esi + 4], 0
je 0x804d5b0
mov eax, dword [esi + 0xc]
mov ecx, dword [eax + ebx*8 - 8]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
mov eax, ecx
shr eax, 8
and eax, 0xff00
or edx, eax
shr ecx, 0x18
or edx, ecx
cmp dword [var_8h], edx
je 0x804d5c0
jmp 0x804d500
lea esi, [esi]
mov edx, dword [var_8h]
mov eax, dword [esi + 0xc]
cmp dword [eax + ebx*8 - 8], edx
jne 0x804d500
mov edi, dword [esi]
cmp dword [esi + 4], 0
je 0x804d600
mov eax, dword [esi + 0xc]
mov ecx, dword [eax + ebx*8 - 4]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
mov eax, ecx
shr eax, 8
and eax, 0xff00
or edx, eax
shr ecx, 0x18
or edx, ecx
lea ecx, [edx + edi]
jmp 0x804d609
lea esi, [esi]
lea edi, [edi]
mov eax, dword [esi + 0xc]
mov ecx, edi
add ecx, dword [eax + ebx*8 - 4]
push ecx
mov eax, dword [s1]
push eax
call sym.imp.strcmp
add esp, 8
mov ecx, eax
test ecx, ecx
jne 0x804d500
mov edi, dword [esi]
cmp dword [esi + 4], 0
je 0x804d640
mov eax, dword [esi + 0x10]
mov ecx, dword [eax + ebx*8 - 4]
jmp 0x804d707
lea esi, [esi]
lea edi, [edi]
mov eax, dword [esi + 0x10]
mov ecx, edi
add ecx, dword [eax + ebx*8 - 4]
jmp 0x804d752
mov esi, esi
mov dword [var_4h], 0
mov edi, dword [esi + 8]
cmp dword [var_4h], edi
jae 0x804d750
nop
mov edx, dword [var_4h]
add edx, edi
mov ebx, edx
shr ebx, 1
mov eax, dword [esi]
mov dword [var_14h], eax
cmp dword [esi + 4], 0
je 0x804d6b0
mov eax, dword [esi + 0xc]
mov ecx, dword [eax + ebx*8 + 4]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
mov eax, ecx
shr eax, 8
and eax, 0xff00
or edx, eax
shr ecx, 0x18
or edx, ecx
mov ecx, dword [var_14h]
add ecx, edx
jmp 0x804d6ba
lea esi, [esi]
mov ecx, dword [var_14h]
mov edx, dword [esi + 0xc]
add ecx, dword [edx + ebx*8 + 4]
push ecx
mov eax, dword [s1]
push eax
call sym.imp.strcmp
add esp, 8
mov ecx, eax
test ecx, ecx
jge 0x804d6e0
mov edi, ebx
jmp 0x804d6ea
jmp 0x804d6e0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
test ecx, ecx
jle 0x804d6f3
lea edx, [ebx + 1]
mov dword [var_4h], edx
cmp dword [var_4h], edi
jb 0x804d664
cmp dword [var_4h], edi
jae 0x804d750
mov edi, dword [esi]
cmp dword [esi + 4], 0
je 0x804d730
mov eax, dword [esi + 0x10]
mov ecx, dword [eax + ebx*8 + 4]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
mov eax, ecx
shr eax, 8
and eax, 0xff00
or edx, eax
shr ecx, 0x18
or edx, ecx
lea ecx, [edx + edi]
jmp 0x804d752
mov esi, esi
mov eax, dword [esi + 0x10]
mov ecx, edi
add ecx, dword [eax + ebx*8 + 4]
jmp 0x804d752
nop
lea esi, [esi]
xor eax, eax
jmp 0x804d754
lea esi, [esi]
lea edi, [edi]
xor ecx, ecx
mov eax, ecx
lea esp, [var_28h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x64
push edi
push esi
push ebx
mov dword [var_60h], 0
mov esi, dword [arg_8h]
mov dword [esi + 4], 1
mov dword [esi + 8], 0
cmp dword [esi], 0
je 0x804ddd6
push 0
mov eax, dword [esi]
push eax
call sym.imp.open
mov dword [fildes], eax
add esp, 8
cmp eax, 0xffffffff
je 0x804ddd6
lea eax, [var_58h]
push eax
mov esi, dword [fildes]
push esi
push 3
call sym.imp.__fxstat
add esp, 0xc
test eax, eax
je 0x804db13
cmp dword [length], 0x1b
jle 0x804ddc3
push 0
mov esi, dword [fildes]
push esi
push 2
push 1
mov eax, dword [length]
push eax
push 0
call sym.imp.mmap
mov edi, eax
add esp, 0x18
cmp edi, 0xffffffff
je 0x804db50
push esi
call sym.imp.close
mov dword [var_60h], 1
jmp 0x804db95
jmp 0x804db50
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [length]
push eax
call sym.imp.malloc
mov edi, eax
add esp, 4
test edi, edi
je 0x804ddd6
mov ebx, dword [length]
mov dword [buf], edi
push ebx
mov esi, dword [buf]
push esi
mov esi, dword [fildes]
push esi
call sym.imp.read
add esp, 0xc
cmp eax, 0xffffffff
je 0x804ddc0
add dword [buf], eax
sub ebx, eax
test ebx, ebx
jg 0x804db6c
push esi
call sym.imp.close
add esp, 4
cmp dword [edi], 0x950412de
je 0x804dbd0
cmp dword [edi], 0xde120495
je 0x804dbd0
cmp dword [var_60h], 0
je 0x804dbc0
mov eax, dword [length]
push eax
push edi
call sym.imp.munmap
jmp 0x804ddd6
lea esi, [esi]
push edi
call sym.imp.free
jmp 0x804ddd6
nop
lea esi, [esi]
push 0x1c
call sym.imp.malloc
mov esi, dword [arg_8h]
mov dword [esi + 8], eax
add esp, 4
test eax, eax
je 0x804ddd6
mov ebx, eax
mov dword [ebx], edi
cmp dword [edi], 0x950412de
setne al
and eax, 0xff
mov dword [ebx + 4], eax
test eax, eax
je 0x804dc30
mov edx, dword [edi + 4]
mov ecx, edx
shl ecx, 0x18
mov eax, edx
and eax, 0xff00
shl eax, 8
or ecx, eax
mov eax, edx
shr eax, 8
and eax, 0xff00
or ecx, eax
shr edx, 0x18
mov eax, ecx
or eax, edx
jmp 0x804dc33
lea esi, [esi]
mov eax, dword [edi + 4]
test eax, eax
jne 0x804dd80
cmp dword [ebx + 4], 0
je 0x804dc70
mov edx, dword [edi + 8]
mov ecx, edx
shl ecx, 0x18
mov eax, edx
and eax, 0xff00
shl eax, 8
or ecx, eax
mov eax, edx
shr eax, 8
and eax, 0xff00
or ecx, eax
shr edx, 0x18
mov eax, ecx
or eax, edx
jmp 0x804dc73
lea esi, [esi]
mov eax, dword [edi + 8]
mov dword [ebx + 8], eax
cmp dword [ebx + 4], 0
je 0x804dcb0
mov ecx, dword [edi + 0xc]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
mov eax, ecx
shr eax, 8
and eax, 0xff00
or edx, eax
shr ecx, 0x18
or edx, ecx
lea eax, [edx + edi]
jmp 0x804dcb5
lea esi, [esi]
lea edi, [edi]
mov eax, edi
add eax, dword [edi + 0xc]
mov dword [ebx + 0xc], eax
cmp dword [ebx + 4], 0
je 0x804dcf0
mov ecx, dword [edi + 0x10]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
mov eax, ecx
shr eax, 8
and eax, 0xff00
or edx, eax
shr ecx, 0x18
or edx, ecx
lea eax, [edx + edi]
jmp 0x804dcf5
nop
lea esi, [esi]
mov eax, edi
add eax, dword [edi + 0x10]
mov dword [ebx + 0x10], eax
cmp dword [ebx + 4], 0
je 0x804dd30
mov edx, dword [edi + 0x14]
mov ecx, edx
shl ecx, 0x18
mov eax, edx
and eax, 0xff00
shl eax, 8
or ecx, eax
mov eax, edx
shr eax, 8
and eax, 0xff00
or ecx, eax
shr edx, 0x18
mov eax, ecx
or eax, edx
jmp 0x804dd33
mov esi, esi
lea edi, [edi]
mov eax, dword [edi + 0x14]
mov dword [ebx + 0x14], eax
cmp dword [ebx + 4], 0
je 0x804dd70
mov ecx, dword [edi + 0x18]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
mov eax, ecx
shr eax, 8
and eax, 0xff00
or edx, eax
shr ecx, 0x18
or edx, ecx
lea eax, [edx + edi]
jmp 0x804dd75
lea esi, [esi]
lea edi, [edi]
mov eax, edi
add eax, dword [edi + 0x18]
mov dword [ebx + 0x18], eax
jmp 0x804ddd0
lea esi, [esi]
cmp dword [var_60h], 0
je 0x804dda0
mov eax, dword [length]
push eax
push edi
call sym.imp.munmap
add esp, 8
jmp 0x804dda9
lea esi, [esi]
lea edi, [edi]
push edi
call sym.imp.free
add esp, 4
push ebx
call sym.imp.free
mov esi, dword [arg_8h]
mov dword [esi + 8], 0
jmp 0x804ddd6
nop
lea esi, [esi]
mov esi, dword [fildes]
push esi
call sym.imp.close
jmp 0x804ddd6
nop
lea esi, [esi]
inc dword [obj._nl_msg_cat_cntr]
lea esp, [var_70h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x1c
push edi
push esi
push ebx
xor bl, bl
mov edi, dword [arg_18h]
mov al, bl
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov dword [var_ch], ecx
mov esi, dword [n]
lea edx, [esi + ecx - 1]
mov eax, dword [arg_14h]
test al, 0x20
je 0x804e41f
mov edi, dword [arg_1ch]
mov al, bl
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov dword [var_ch], ecx
add edx, ecx
mov eax, dword [arg_14h]
test al, 0x10
je 0x804e439
xor al, al
mov edi, dword [arg_20h]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
add edx, eax
mov eax, dword [arg_14h]
test al, 8
je 0x804e453
xor al, al
mov edi, dword [arg_24h]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
add edx, eax
test byte [arg_14h], 0xc0
je 0x804e46c
xor al, al
mov edi, dword [arg_28h]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
add edx, eax
mov eax, dword [arg_14h]
test al, 4
je 0x804e486
xor al, al
mov edi, dword [arg_2ch]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
add edx, eax
mov eax, dword [arg_14h]
test al, 2
je 0x804e4b0
xor al, al
mov edi, dword [arg_30h]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
add eax, edx
mov dword [var_10h], eax
jmp 0x804e4b3
lea esi, [esi]
lea edi, [edi]
mov dword [var_10h], edx
mov edi, dword [arg_38h]
xor al, al
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov ebx, ecx
not ebx
lea edx, [ebx - 1]
mov eax, dword [arg_14h]
test al, 1
je 0x804e4f0
mov edi, dword [arg_34h]
xor al, al
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov edx, ebx
sub edx, ecx
add edx, dword [var_10h]
jmp 0x804e4f7
lea esi, [esi]
lea edi, [edi]
mov esi, dword [var_10h]
lea edx, [esi + edx + 2]
push edx
call sym.imp.malloc
mov ebx, eax
add esp, 4
test ebx, ebx
jne 0x804e520
xor eax, eax
jmp 0x804e86a
lea esi, [esi]
mov dword [var_4h], 0
jmp 0x804e675
lea esi, [esi]
mov eax, dword [n]
push eax
mov esi, dword [s2]
push esi
push ebx
call sym.imp.memcpy
add esp, 0xc
push 0x3a
mov eax, dword [n]
push eax
push ebx
call fcn.0804e330
mov esi, dword [n]
lea edi, [ebx + esi - 1]
mov byte [edi], 0x2f
inc edi
mov eax, dword [arg_18h]
push eax
push edi
call sym.imp.stpcpy
mov edi, eax
add esp, 0x14
mov eax, dword [arg_14h]
test al, 0x20
je 0x804e571
mov byte [edi], 0x5f
inc edi
mov esi, dword [arg_1ch]
push esi
push edi
call sym.imp.stpcpy
mov edi, eax
add esp, 8
mov eax, dword [arg_14h]
test al, 0x10
je 0x804e58b
mov byte [edi], 0x2e
inc edi
mov esi, dword [arg_20h]
push esi
push edi
call sym.imp.stpcpy
mov edi, eax
add esp, 8
mov eax, dword [arg_14h]
test al, 8
je 0x804e5a5
mov byte [edi], 0x2e
inc edi
mov esi, dword [arg_24h]
push esi
push edi
call sym.imp.stpcpy
mov edi, eax
add esp, 8
test byte [arg_14h], 0xc0
je 0x804e5ca
mov ecx, edi
inc edi
mov dl, 0x40
mov eax, dword [arg_14h]
test al, 0x40
je 0x804e5b9
mov dl, 0x2b
mov byte [ecx], dl
mov esi, dword [arg_28h]
push esi
push edi
call sym.imp.stpcpy
mov edi, eax
add esp, 8
mov eax, dword [arg_14h]
test al, 4
je 0x804e5e4
mov byte [edi], 0x2b
inc edi
mov esi, dword [arg_2ch]
push esi
push edi
call sym.imp.stpcpy
mov edi, eax
add esp, 8
mov eax, dword [arg_14h]
test al, 2
je 0x804e5fe
mov byte [edi], 0x2c
inc edi
mov esi, dword [arg_30h]
push esi
push edi
call sym.imp.stpcpy
mov edi, eax
add esp, 8
mov eax, dword [arg_14h]
test al, 1
je 0x804e618
mov byte [edi], 0x5f
inc edi
mov esi, dword [arg_34h]
push esi
push edi
call sym.imp.stpcpy
mov edi, eax
add esp, 8
mov byte [edi], 0x2f
inc edi
mov eax, dword [arg_38h]
push eax
push edi
call sym.imp.stpcpy
mov dword [var_10h], 0
mov esi, dword [arg_8h]
mov esi, dword [esi]
mov dword [var_4h], esi
add esp, 8
test esi, esi
je 0x804e675
mov eax, dword [var_4h]
cmp dword [eax], 0
je 0x804e662
push ebx
mov esi, dword [eax]
push esi
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
je 0x804e66f
jl 0x804e510
mov eax, dword [var_4h]
mov dword [var_10h], eax
mov esi, dword [var_4h]
mov esi, dword [esi + 0xc]
mov dword [var_4h], esi
test esi, esi
jne 0x804e63c
cmp dword [var_4h], 0
jne 0x804e67b
cmp dword [arg_3ch], 0
jne 0x804e690
push ebx
call sym.imp.free
jmp 0x804e867
lea esi, [esi]
lea edi, [edi]
mov eax, dword [n]
push eax
mov esi, dword [s2]
push esi
call fcn.0804e2f0
mov edi, eax
add esp, 8
mov eax, dword [arg_14h]
and eax, 0xffffaaaa
sar eax, 1
mov edx, dword [arg_14h]
and edx, 0x5555
mov ecx, eax
add ecx, edx
mov esi, ecx
and esi, 0xffffcccc
sar esi, 2
mov edx, ecx
and edx, 0x3333
mov ecx, esi
add ecx, edx
mov eax, ecx
sar eax, 4
add ecx, eax
and ecx, 0xf0f
mov esi, ecx
sar esi, 8
add ecx, esi
and ecx, 0xff
shl edi, cl
mov dword [var_ch], edi
lea eax, [edi*4 + 0x14]
push eax
call sym.imp.malloc
mov dword [var_4h], eax
add esp, 4
test eax, eax
je 0x804e506
mov esi, dword [var_4h]
mov dword [esi], ebx
xor ebx, ebx
mov eax, dword [n]
push eax
mov esi, dword [s2]
push esi
call fcn.0804e2f0
mov edx, eax
add esp, 8
cmp edx, 1
jne 0x804e734
mov eax, dword [arg_14h]
and eax, 0x18
cmp eax, 0x18
jne 0x804e739
mov ebx, 1
mov eax, dword [var_4h]
mov dword [eax + 4], ebx
mov dword [eax + 8], 0
cmp dword [var_10h], 0
jne 0x804e760
mov esi, dword [arg_8h]
mov esi, dword [esi]
mov dword [eax + 0xc], esi
mov esi, dword [arg_8h]
mov dword [esi], eax
jmp 0x804e772
nop
lea esi, [esi]
mov eax, dword [var_10h]
mov eax, dword [eax + 0xc]
mov esi, dword [var_4h]
mov dword [esi + 0xc], eax
mov eax, dword [var_10h]
mov dword [eax + 0xc], esi
mov dword [var_8h], 0
mov esi, dword [n]
push esi
mov eax, dword [s2]
push eax
call fcn.0804e2f0
add esp, 8
mov edx, eax
mov eax, dword [arg_14h]
mov dword [var_10h], eax
cmp edx, 1
jne 0x804e799
dec dword [var_10h]
cmp dword [var_10h], 0
jl 0x804e859
nop
mov eax, dword [arg_14h]
not eax
test dword [var_10h], eax
jne 0x804e850
test byte [var_10h], 0x47
je 0x804e7c2
test byte [var_10h], 0x98
jne 0x804e850
mov eax, dword [var_10h]
and eax, 0x18
cmp eax, 0x18
je 0x804e850
xor ebx, ebx
nop
push ebx
mov esi, dword [n]
push esi
mov eax, dword [s2]
push eax
call fcn.0804e380
mov ebx, eax
add esp, 0xc
test ebx, ebx
je 0x804e850
push 1
mov esi, dword [arg_38h]
push esi
mov eax, dword [arg_34h]
push eax
mov esi, dword [arg_30h]
push esi
mov eax, dword [arg_2ch]
push eax
mov esi, dword [arg_28h]
push esi
mov eax, dword [arg_24h]
push eax
mov esi, dword [arg_20h]
push esi
mov eax, dword [arg_1ch]
push eax
mov esi, dword [arg_18h]
push esi
mov eax, dword [var_10h]
push eax
mov edi, ebx
xor al, al
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov dword [var_ch], ecx
push ecx
push ebx
mov esi, dword [arg_8h]
push esi
call fcn.0804e3e0
mov edx, eax
mov eax, dword [var_8h]
mov esi, dword [var_4h]
mov dword [esi + eax*4 + 0x10], edx
inc eax
mov dword [var_8h], eax
add esp, 0x38
jmp 0x804e7d4
lea esi, [esi]
lea edi, [edi]
dec dword [var_10h]
jns 0x804e7a4
mov eax, dword [var_8h]
mov esi, dword [var_4h]
mov dword [esi + eax*4 + 0x10], 0
mov eax, dword [var_4h]
lea esp, [var_28h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
push ebx
mov ebx, dword [arg_8h]
mov esi, esi
mov dword [key], ebx
cmp dword [0x8051fc8], 0
je 0x804de20
push fcn.0804e230
push 8
mov eax, dword [0x8051fc8]
push eax
mov eax, dword [0x805231c]
push eax
lea eax, [key]
push eax
call sym.imp.bsearch
add esp, 0x14
jmp 0x804de22
lea esi, [esi]
xor eax, eax
test eax, eax
je 0x804de30
mov eax, dword [eax + 4]
jmp 0x804dea2
nop
lea esi, [esi]
xor ecx, ecx
mov esi, esi
mov eax, dword [0x8051fd0]
cmp byte [eax], 0
je 0x804de98
cmp byte [eax], 0x3a
jne 0x804de54
nop
inc dword [0x8051fd0]
mov eax, dword [0x8051fd0]
cmp byte [eax], 0x3a
je 0x804de44
mov edx, dword [0x8051fd0]
mov eax, edx
cmp byte [edx], 0
je 0x804de79
lea esi, [esi]
cmp byte [eax], 0x3a
je 0x804de79
inc dword [0x8051fd0]
mov eax, dword [0x8051fd0]
cmp byte [eax], 0
jne 0x804de64
cmp dword [0x8051fd0], edx
jbe 0x804de94
mov eax, dword [0x8051fd0]
sub eax, edx
push eax
push edx
call fcn.0804deb0
mov ecx, eax
add esp, 8
test ecx, ecx
je 0x804de34
test ecx, ecx
jne 0x804ddec
xor eax, eax
mov ebx, dword [var_ch]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edx, dword [arg_ch]
mov ecx, dword [arg_10h]
mov dword [ecx], 0
mov ecx, dword [arg_14h]
mov dword [ecx], 0
mov ecx, dword [s1]
mov dword [ecx], 0
mov ecx, dword [ptr]
mov dword [ecx], 0
mov ecx, dword [arg_20h]
mov dword [ecx], 0
mov ecx, dword [arg_24h]
mov dword [ecx], 0
mov ecx, dword [arg_28h]
mov dword [ecx], 0
xor esi, esi
xor edi, edi
mov ebx, dword [arg_8h]
mov dword [edx], ebx
jmp 0x804e9c9
lea esi, [esi]
lea edi, [edi]
mov al, byte [ebx]
add al, 0xd5
cmp al, 1
jbe 0x804e9d8
inc ebx
cmp byte [ebx], 0
je 0x804e9d8
cmp byte [ebx], 0x5f
je 0x804e9d8
cmp byte [ebx], 0x40
jne 0x804e9c0
cmp dword [edx], ebx
jne 0x804e9f0
push 0
push ebx
call sym.imp.__rawmemchr
mov ebx, eax
jmp 0x804eaa3
nop
lea esi, [esi]
cmp byte [ebx], 0x5f
jne 0x804eaa3
mov byte [ebx], 0
inc ebx
mov ecx, dword [arg_14h]
mov dword [ecx], ebx
jmp 0x804ea16
lea esi, [esi]
lea edi, [edi]
cmp byte [ebx], 0x5f
je 0x804ea2d
inc ebx
cmp byte [ebx], 0
je 0x804ea2d
cmp byte [ebx], 0x2e
je 0x804ea2d
cmp byte [ebx], 0x40
je 0x804ea2d
mov al, byte [ebx]
add al, 0xd5
cmp al, 1
ja 0x804ea10
or esi, 0x20
cmp byte [ebx], 0x2e
jne 0x804eaa3
mov edi, 1
mov byte [ebx], 0
inc ebx
mov ecx, dword [s1]
mov dword [ecx], ebx
cmp byte [ebx], 0
je 0x804ea53
cmp byte [ebx], 0x40
je 0x804ea53
inc ebx
cmp byte [ebx], 0
jne 0x804ea48
or esi, 0x10
mov ecx, dword [s1]
cmp dword [ecx], ebx
je 0x804eaa3
mov edx, dword [ecx]
cmp byte [edx], 0
je 0x804eaa3
mov eax, ebx
sub eax, dword [ecx]
push eax
push edx
call fcn.0804e880
mov ecx, dword [ptr]
mov dword [ecx], eax
add esp, 8
push eax
mov ecx, dword [s1]
mov eax, dword [ecx]
push eax
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804eaa0
mov ecx, dword [ptr]
mov eax, dword [ecx]
push eax
call sym.imp.free
jmp 0x804eaa3
mov esi, esi
lea edi, [edi]
or esi, 8
cmp byte [ebx], 0x40
je 0x804eab6
cmp edi, 1
je 0x804eb6c
cmp byte [ebx], 0x2b
jne 0x804eaee
mov edi, 2
cmp byte [ebx], 0x40
jne 0x804eac5
mov edi, 1
mov byte [ebx], 0
inc ebx
mov ecx, dword [arg_10h]
mov dword [ecx], ebx
jmp 0x804ead6
cmp byte [ebx], 0x5f
je 0x804eae8
inc ebx
cmp edi, 2
jne 0x804eae8
cmp byte [ebx], 0
je 0x804eae8
mov al, byte [ebx]
add al, 0xd5
cmp al, 1
ja 0x804ead0
or esi, 0xc0
cmp edi, 1
je 0x804eb6c
mov al, byte [ebx]
add al, 0xd5
cmp al, 1
jbe 0x804eb00
cmp byte [ebx], 0x5f
jne 0x804eb67
mov edi, 2
cmp byte [ebx], 0x2b
jne 0x804eb33
mov byte [ebx], 0
inc ebx
mov ecx, dword [arg_20h]
mov dword [ecx], ebx
jmp 0x804eb26
lea esi, [esi]
lea edi, [edi]
cmp byte [ebx], 0x5f
je 0x804eb30
inc ebx
cmp byte [ebx], 0
je 0x804eb30
cmp byte [ebx], 0x2c
jne 0x804eb20
or esi, 4
cmp byte [ebx], 0x2c
jne 0x804eb56
mov byte [ebx], 0
inc ebx
mov ecx, dword [arg_24h]
mov dword [ecx], ebx
cmp byte [ebx], 0
je 0x804eb53
mov esi, esi
cmp byte [ebx], 0x5f
je 0x804eb53
inc ebx
cmp byte [ebx], 0
jne 0x804eb48
or esi, 2
cmp byte [ebx], 0x5f
jne 0x804eb67
mov byte [ebx], 0
inc ebx
mov ecx, dword [arg_28h]
mov dword [ecx], ebx
or esi, 1
cmp edi, 1
jne 0x804eba5
mov ecx, dword [arg_14h]
cmp dword [ecx], 0
je 0x804eb7e
mov eax, dword [ecx]
cmp byte [eax], 0
jne 0x804eb7e
and esi, 0xffffffdf
mov ecx, dword [s1]
cmp dword [ecx], 0
je 0x804eb90
mov eax, dword [ecx]
cmp byte [eax], 0
jne 0x804eb90
and esi, 0xffffffef
mov ecx, dword [arg_10h]
cmp dword [ecx], 0
je 0x804eba5
mov eax, dword [ecx]
cmp byte [eax], 0
jne 0x804eba5
and esi, 0xffffff7f
mov eax, esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x2014
push edi
push esi
push ebx
mov edx, dword [s2]
mov esi, dword [n]
lea eax, [esi + 0x11]
and al, 0xfc
sub esp, eax
mov ebx, esp
push esi
push edx
push ebx
call sym.imp.memcpy
add esp, 0xc
mov eax, dword [str._locale.alias]
mov dword [esi + ebx], eax
mov eax, dword [0x8050ec7]
mov dword [esi + ebx + 4], eax
mov eax, dword [0x8050ecb]
mov dword [esi + ebx + 8], eax
mov ax, word [0x8050ecf]
mov word [esi + ebx + 0xc], ax
push 0x8050ed1
push ebx
call sym.imp.fopen
mov dword [ebp - 0x2004], eax
add esp, 8
test eax, eax
jne 0x804df20
xor eax, eax
jmp 0x804e186
lea esi, [esi]
mov dword [ebp - 0x2008], 0
mov esi, esi
mov esi, dword [ebp - 0x2004]
push esi
call sym.imp.feof
add esp, 4
test eax, eax
jne 0x804e150
push esi
push 0x2000
lea ebx, [ebp - 0x2000]
push ebx
call sym.imp.fgets
add esp, 0xc
test eax, eax
je 0x804e150
movsx edx, byte [ebp - 0x2000]
mov eax, dword [obj.__ctype_b]
mov ecx, eax
test byte [eax + edx*2 + 1], 0x20
je 0x804df83
lea esi, [esi]
inc ebx
movsx eax, byte [ebx]
test byte [ecx + eax*2 + 1], 0x20
jne 0x804df78
cmp byte [ebx], 0
je 0x804e108
cmp byte [ebx], 0x23
je 0x804e108
mov dword [ebp - 0x200c], ebx
inc ebx
cmp byte [ebx], 0
je 0x804dfcd
movsx edx, byte [ebx]
mov eax, dword [obj.__ctype_b]
mov ecx, eax
test byte [eax + edx*2 + 1], 0x20
jne 0x804dfc4
mov esi, esi
inc ebx
cmp byte [ebx], 0
je 0x804dfcd
movsx eax, byte [ebx]
test byte [ecx + eax*2 + 1], 0x20
je 0x804dfb4
cmp byte [ebx], 0
je 0x804dfcd
mov byte [ebx], 0
inc ebx
movsx edx, byte [ebx]
mov eax, dword [obj.__ctype_b]
mov ecx, eax
test byte [eax + edx*2 + 1], 0x20
je 0x804dfeb
mov esi, esi
inc ebx
movsx eax, byte [ebx]
test byte [ecx + eax*2 + 1], 0x20
jne 0x804dfe0
cmp byte [ebx], 0
je 0x804e108
mov dword [ebp - 0x2010], ebx
inc ebx
cmp byte [ebx], 0
je 0x804e024
movsx edx, byte [ebx]
mov eax, dword [obj.__ctype_b]
mov ecx, eax
test byte [eax + edx*2 + 1], 0x20
jne 0x804e024
lea esi, [esi]
inc ebx
cmp byte [ebx], 0
je 0x804e024
movsx eax, byte [ebx]
test byte [ecx + eax*2 + 1], 0x20
je 0x804e014
cmp byte [ebx], 0xa
jne 0x804e040
mov byte [ebx], 0
inc ebx
mov byte [ebx], 0xa
jmp 0x804e049
lea esi, [esi]
lea edi, [edi]
cmp byte [ebx], 0
je 0x804e049
mov byte [ebx], 0
inc ebx
mov eax, dword [0x8051fc8]
cmp dword [0x8051fcc], eax
ja 0x804e05b
call fcn.0804e1a0
xor al, al
mov edi, dword [ebp - 0x200c]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov edi, ecx
not edi
push edi
call sym.imp.malloc
mov dword [ebp - 0x2014], eax
add esp, 4
test eax, eax
je 0x804e180
push edi
mov esi, dword [ebp - 0x200c]
push esi
mov esi, dword [ebp - 0x2014]
push esi
call sym.imp.memcpy
add esp, 0xc
mov edx, dword [0x8051fc8]
mov eax, dword [0x805231c]
mov dword [eax + edx*8], esi
xor al, al
mov edi, dword [ebp - 0x2010]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov edi, ecx
not edi
push edi
call sym.imp.malloc
mov dword [ebp - 0x2014], eax
add esp, 4
test eax, eax
je 0x804e180
push edi
mov esi, dword [ebp - 0x2010]
push esi
mov esi, dword [ebp - 0x2014]
push esi
call sym.imp.memcpy
add esp, 0xc
mov edx, dword [0x8051fc8]
mov eax, dword [0x805231c]
mov dword [eax + edx*8 + 4], esi
inc dword [0x8051fc8]
inc dword [ebp - 0x2008]
push 0xa
push ebx
call sym.imp.strchr
add esp, 8
test eax, eax
jne 0x804df2c
lea ebx, [ebp - 0x2000]
mov esi, dword [ebp - 0x2004]
push esi
push 0x2000
push ebx
call sym.imp.fgets
add esp, 0xc
test eax, eax
jne 0x804e108
mov byte [ebp - 0x2000], 0xa
jmp 0x804e108
lea esi, [esi]
lea edi, [edi]
mov esi, dword [ebp - 0x2004]
push esi
call sym.imp.fclose
add esp, 4
cmp dword [ebp - 0x2008], 0
je 0x804e180
push fcn.0804e230
push 8
mov eax, dword [0x8051fc8]
push eax
mov eax, dword [0x805231c]
push eax
call sym.imp.qsort
mov eax, dword [ebp - 0x2008]
lea esp, [ebp - 0x2020]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
cmp dword [0x8051fcc], 0
je 0x804e1c0
mov ecx, dword [0x8051fcc]
mov esi, ecx
add esi, ecx
jmp 0x804e1c5
lea esi, [esi]
mov esi, 0x64
lea eax, [esi*8]
push eax
call sym.imp.malloc
mov ebx, eax
add esp, 4
test ebx, ebx
je 0x804e219
mov edx, dword [0x805231c]
mov ecx, dword [0x8051fc8]
lea eax, [ecx*8]
push eax
push edx
push ebx
call sym.imp.memcpy
add esp, 0xc
cmp dword [0x8051fcc], 0
je 0x804e20d
mov eax, dword [0x805231c]
push eax
call sym.imp.free
mov dword [0x805231c], ebx
mov dword [0x8051fcc], esi
lea esp, [var_8h]
pop ebx
pop esi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
test esi, esi
je 0x804e370
mov al, byte [arg_10h]
mov byte [var_4h], al
lea esi, [esi]
mov edi, ebx
xor al, al
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov edx, ecx
not edx
dec edx
add ebx, edx
dec esi
sub esi, edx
je 0x804e370
mov al, byte [var_4h]
mov byte [ebx], al
inc ebx
jmp 0x804e34c
lea esi, [esi]
lea esp, [var_14h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov edx, dword [arg_ch]
xor esi, esi
test edx, edx
je 0x804e322
lea esi, [esi]
mov edi, ebx
xor al, al
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov dword [var_4h], ecx
add ebx, ecx
sub edx, ecx
inc esi
test edx, edx
jne 0x804e308
mov eax, esi
lea esp, [var_10h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, dword [arg_ch]
mov edx, dword [arg_10h]
test edx, edx
je 0x804e3c0
lea eax, [ebx + esi]
cmp edx, eax
jae 0x804e3a4
push 0
push edx
call sym.imp.__rawmemchr
lea edx, [eax + 1]
lea eax, [ebx + esi]
xor ecx, ecx
cmp edx, eax
jae 0x804e3af
mov ecx, edx
mov eax, ecx
jmp 0x804e3d2
lea esi, [esi]
lea edi, [edi]
test ebx, ebx
jne 0x804e3d0
xor eax, eax
jmp 0x804e3d2
nop
lea esi, [esi]
mov eax, esi
lea esp, [var_8h]
pop ebx
pop esi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
xor ebx, ebx
mov dword [var_4h], 1
xor ecx, ecx
cmp dword [arg_ch], ecx
jbe 0x804e8c2
mov edx, dword [obj.__ctype_b]
nop
mov esi, dword [arg_8h]
movsx eax, byte [ecx + esi]
test byte [edx + eax*2], 8
je 0x804e8bc
inc ebx
test byte [edx + eax*2 + 1], 4
je 0x804e8bc
mov dword [var_4h], 0
inc ecx
cmp dword [arg_ch], ecx
ja 0x804e8a0
cmp dword [var_4h], 0
je 0x804e8d0
lea eax, [ebx + 4]
jmp 0x804e8d3
lea esi, [esi]
lea eax, [ebx + 1]
push eax
call sym.imp.malloc
mov edi, eax
add esp, 4
test edi, edi
je 0x804e952
cmp dword [var_4h], 0
je 0x804e900
push 0x8050ed3
push edi
call sym.imp.stpcpy
mov ebx, eax
jmp 0x804e902
mov esi, esi
lea edi, [edi]
mov ebx, edi
xor ecx, ecx
cmp dword [arg_ch], ecx
jbe 0x804e94f
lea esi, [esi]
mov esi, dword [arg_8h]
movsx edx, byte [ecx + esi]
mov eax, dword [obj.__ctype_b]
test byte [eax + edx*2 + 1], 4
je 0x804e930
mov eax, dword [obj.__ctype_tolower]
mov al, byte [eax + edx*4]
jmp 0x804e946
lea esi, [esi]
mov esi, dword [arg_8h]
movsx edx, byte [ecx + esi]
mov eax, dword [obj.__ctype_b]
test byte [eax + edx*2 + 1], 8
je 0x804e949
mov al, byte [ecx + esi]
mov byte [ebx], al
inc ebx
inc ecx
cmp dword [arg_ch], ecx
ja 0x804e90c
mov byte [ebx], 0
mov eax, edi
lea esp, [var_10h]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebx
mov ecx, dword [arg_10h]
mov bl, byte [arg_ch]
xor edx, edx
cmp edx, ecx
jge 0x804f82c
mov eax, dword [arg_8h]
nop
xor byte [eax], bl
inc eax
inc edx
cmp edx, ecx
jl 0x804f824
pop ebx
ret
pop ebx
add ebx, 0x2783
call fcn.08049280
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, 0x8051ff8
cmp dword [0x8051ff8], 0
je 0x80492a0
mov esi, esi
mov eax, dword [ebx]
call eax
add ebx, 4
cmp dword [ebx], 0
jne 0x8049294
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
call fcn.08048e79
push ebp
mov ebp, esp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov eax, dword [eax + 0x4c]
sub eax, dword [edx + 0x4c]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov edx, dword [edx + 0x4c]
sub edx, dword [eax + 0x4c]
mov eax, edx
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov eax, dword [eax + 0x44]
sub eax, dword [edx + 0x44]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov edx, dword [edx + 0x44]
sub edx, dword [eax + 0x44]
mov eax, edx
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov eax, dword [eax + 0x3c]
sub eax, dword [edx + 0x3c]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov edx, dword [edx + 0x3c]
sub edx, dword [eax + 0x3c]
mov eax, edx
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov eax, dword [eax + 0x30]
sub eax, dword [edx + 0x30]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov edx, dword [edx + 0x30]
sub edx, dword [eax + 0x30]
mov eax, edx
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov eax, dword [eax]
push eax
mov eax, dword [edx]
push eax
call sym.imp.strcmp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
push eax
mov eax, dword [edx]
push eax
call sym.imp.strcmp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
push 0x2e
mov eax, dword [edi]
push eax
call sym.imp.strrchr
mov ebx, eax
push 0x2e
mov eax, dword [esi]
push eax
call sym.imp.strrchr
add esp, 0x10
test ebx, ebx
jne 0x804b970
test eax, eax
je 0x804b98e
test ebx, ebx
jne 0x804b970
mov eax, 0xffffffff
jmp 0x804b999
nop
lea esi, [esi]
test eax, eax
jne 0x804b980
mov eax, 1
jmp 0x804b999
nop
lea esi, [esi]
push eax
push ebx
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804b999
mov eax, dword [esi]
push eax
mov eax, dword [edi]
push eax
call sym.imp.strcmp
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
push 0x2e
mov eax, dword [edi]
push eax
call sym.imp.strrchr
mov ebx, eax
push 0x2e
mov eax, dword [esi]
push eax
call sym.imp.strrchr
add esp, 0x10
test ebx, ebx
jne 0x804b9f0
test eax, eax
je 0x804ba0e
test ebx, ebx
jne 0x804b9f0
mov eax, 0xffffffff
jmp 0x804ba19
nop
lea esi, [esi]
test eax, eax
jne 0x804ba00
mov eax, 1
jmp 0x804ba19
nop
lea esi, [esi]
push eax
push ebx
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804ba19
mov eax, dword [esi]
push eax
mov eax, dword [edi]
push eax
call sym.imp.strcmp
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov eax, dword [eax]
push eax
mov eax, dword [edx]
push eax
call sym.imp.strcasecmp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
push edx
mov eax, dword [eax + 0x10]
push eax
call fcn.0804ef00
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, dword [0x8052328]
test ebx, ebx
je 0x804f1c2
nop
mov edx, dword [ebx + 4]
mov al, byte [edx]
cmp byte [esi], al
jne 0x804f1bb
push esi
push edx
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x804f233
mov ebx, dword [ebx + 8]
test ebx, ebx
jne 0x804f1a4
mov ebx, dword [0x805232c]
test ebx, ebx
je 0x804f1ea
mov edx, dword [ebx + 4]
mov al, byte [edx]
cmp byte [esi], al
jne 0x804f1e3
push esi
push edx
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x804f216
mov ebx, dword [ebx + 8]
test ebx, ebx
jne 0x804f1cc
push esi
call sym.imp.getpwnam
mov edi, eax
push 0xc
call fcn.0804f3b0
mov ebx, eax
push esi
call fcn.0804f420
mov dword [ebx + 4], eax
test edi, edi
jne 0x804f220
mov eax, dword [0x805232c]
mov dword [ebx + 8], eax
mov dword [0x805232c], ebx
xor eax, eax
jmp 0x804f235
lea esi, [esi]
mov eax, dword [edi + 8]
mov dword [ebx], eax
mov eax, dword [0x8052328]
mov dword [ebx + 8], eax
mov dword [0x8052328], ebx
mov eax, ebx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, dword [0x8052330]
test ebx, ebx
je 0x804f2f2
nop
mov edx, dword [ebx + 4]
mov al, byte [edx]
cmp byte [esi], al
jne 0x804f2eb
push esi
push edx
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x804f363
mov ebx, dword [ebx + 8]
test ebx, ebx
jne 0x804f2d4
mov ebx, dword [0x8052334]
test ebx, ebx
je 0x804f31a
mov edx, dword [ebx + 4]
mov al, byte [edx]
cmp byte [esi], al
jne 0x804f313
push esi
push edx
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x804f346
mov ebx, dword [ebx + 8]
test ebx, ebx
jne 0x804f2fc
push esi
call sym.imp.getgrnam
mov edi, eax
push 0xc
call fcn.0804f3b0
mov ebx, eax
push esi
call fcn.0804f420
mov dword [ebx + 4], eax
test edi, edi
jne 0x804f350
mov eax, dword [0x8052334]
mov dword [ebx + 8], eax
mov dword [0x8052334], ebx
xor eax, eax
jmp 0x804f365
lea esi, [esi]
mov eax, dword [edi + 8]
mov dword [ebx], eax
mov eax, dword [0x8052330]
mov dword [ebx + 8], eax
mov dword [0x8052330], ebx
mov eax, ebx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
call fcn.0804f879
