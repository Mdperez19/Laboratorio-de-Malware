push ebp
mov ebp, esp
push ebx
sub esp, 4
call 0x889c
pop ebx
add ebx, 0xe92c
mov edx, dword [ebx - 0xc]
test edx, edx
je 0x88b2
call loc.imp.__gmon_start__
pop eax
pop ebx
leave
ret
jmp dword [ebx + 0xc]
push ebp
fldz
mov ebp, esp
sub esp, 4
mov edx, dword [arg_14h]
mov ecx, dword [arg_18h]
fld dword [ebp + 8]
fld dword [ebp + 0xc]
fld dword [ebp + 0x10]
fxch st(2)
fucomi st(3)
jne 0xee48
jp 0xee48
fstp st(0)
fucomi st(2)
jp 0xee37
je 0xeea0
fstp st(2)
mov eax, 1
fchs
fdivrp st(1)
fst dword [ecx]
fstp dword [edx]
leave
ret
fld st(0)
xor eax, eax
fld st(2)
fxch st(1)
fmul dword [0x15868]
fxch st(1)
fmul st(3)
fxch st(1)
fmulp st(4)
fsubrp st(3)
fxch st(3)
fucompi st(2)
ja 0xee93
fxch st(1)
fsqrt
fstp dword [ebp - 4]
fxch st(1)
mov eax, 1
fadd st(0)
fld dword [ebp - 4]
fld st(0)
fsub st(3)
fxch st(3)
fchs
fxch st(3)
fdiv st(2)
fxch st(3)
fsubrp st(1)
fxch st(2)
fstp dword [edx]
fdivp st(1)
fstp dword [ecx]
leave
ret
fstp st(0)
fstp st(0)
fstp st(0)
leave
ret
nop
lea esi, [esi]
fstp st(0)
xor eax, eax
fucompi st(1)
fstp st(0)
jne 0xee46
jp 0xee46
mov dword [ecx], 0
mov eax, 1
mov dword [edx], 0
leave
ret
push ebp
mov ebp, esp
pop ebp
ret
add dword [arg_4h], 0xfffffffc
jmp sym CEmptyServerPlugin::FireGameEvent(KeyValues*)
push ebp
mov eax, 0
mov ebp, esp
push esi
push ebx
sub esp, 0x50
mov edx, dword [arg_1ch]
fld dword [ebp + 0x18]
mov ebx, dword [arg_ch]
mov ecx, dword [arg_8h]
fld dword [0x158cc]
mov dword [edx], eax
fld st(1)
mov dword [edx + 4], eax
fmul st(2)
mov dword [edx + 8], eax
mov esi, dword [arg_10h]
fld dword [ebx]
fld dword [ecx]
fxch st(2)
fmul dword [0x156a8]
fld dword [ecx + 8]
fld dword [ecx + 4]
fxch st(6)
fmul dword [0x156a8]
fld st(2)
fmul st(6)
fxch st(5)
fmul st(3)
fxch st(7)
fmul st(3)
fxch st(4)
fmul st(5)
fxch st(2)
fmul st(3)
fxch st(6)
fmul st(1)
fxch st(1)
fadd st(0)
fxch st(2)
fstp dword [ebp - 0x28]
fld dword [ebx + 4]
fmul st(5)
fxch st(5)
fmul dword [ebx + 8]
fxch st(5)
fstp dword [ebp - 0x24]
fxch st(4)
fstp dword [ebp - 0x20]
fld dword [esi]
fmul st(2)
fstp dword [ebp - 0x38]
fld dword [esi + 4]
fxch st(6)
fadd dword [edx]
fxch st(6)
fmul st(2)
fxch st(2)
fmul dword [esi + 8]
fxch st(6)
fst dword [edx]
fxch st(2)
fstp dword [ebp - 0x34]
fxch st(2)
fadd dword [edx + 4]
fxch st(5)
fstp dword [ebp - 0x30]
fxch st(4)
fst dword [edx + 4]
fld dword [ebp - 0x28]
fxch st(4)
fadd dword [edx + 8]
fld dword [ebp - 0x24]
fxch st(5)
faddp st(6)
fxch st(4)
faddp st(1)
fxch st(3)
fst dword [edx + 8]
fxch st(4)
fst dword [edx]
fadd dword [var_38h]
fld dword [ebp - 0x20]
fxch st(4)
fst dword [edx + 4]
fadd dword [var_34h]
fxch st(4)
faddp st(5)
fstp dword [edx]
fld dword [ebx]
fxch st(4)
fst dword [edx + 8]
fxch st(4)
fmul st(1)
fxch st(4)
fadd dword [var_30h]
fxch st(3)
fstp dword [edx + 4]
fld dword [ecx]
fxch st(4)
fstp dword [ebp - 0x28]
fxch st(3)
fmul st(1)
fld dword [ebx + 4]
fxch st(3)
fstp dword [edx + 8]
fld dword [ecx + 4]
fxch st(3)
fmul st(4)
fxch st(3)
fmul st(2)
fxch st(4)
fmul dword [ebx + 8]
fxch st(2)
fmul dword [ecx + 8]
fxch st(3)
fstp dword [ebp - 0x24]
fadd dword [edx]
fxch st(3)
fadd dword [edx + 4]
fxch st(1)
fstp dword [ebp - 0x20]
fxch st(1)
fadd dword [edx + 8]
fxch st(2)
fst dword [edx]
fxch st(1)
fst dword [edx + 4]
fxch st(1)
fadd dword [var_28h]
fxch st(2)
fst dword [edx + 8]
fxch st(1)
fadd dword [var_24h]
fxch st(1)
fadd dword [var_20h]
fxch st(2)
fstp dword [edx]
fstp dword [edx + 4]
fstp dword [edx + 8]
fld dword [ebx]
fmul dword [0x156a8]
mov dword [var_4ch], 0x3f000000
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fxch st(2)
fmul dword [0x156a8]
fxch st(3)
fstp dword [ebp - 0x28]
fld dword [ebx + 4]
fmul dword [0x156a8]
fxch st(1)
fmul dword [0x156a8]
fxch st(2)
fmul dword [0x156a8]
fxch st(3)
fadd dword [edx]
fxch st(1)
fstp dword [ebp - 0x24]
fld dword [ebp - 0x4c]
fmul dword [ebx + 8]
fxch st(2)
fadd dword [edx + 4]
fxch st(1)
fst dword [edx]
fadd dword [var_28h]
fxch st(2)
fstp dword [ebp - 0x20]
fxch st(2)
fadd dword [edx + 8]
fxch st(2)
fst dword [edx + 4]
fadd dword [var_24h]
fxch st(1)
fstp dword [edx]
fxch st(1)
fst dword [edx + 8]
fadd dword [var_20h]
fxch st(1)
fstp dword [edx + 4]
fstp dword [edx + 8]
add esp, 0x50
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
lea ecx, [var_18h]
push ebx
sub esp, 0x74
mov edx, dword [arg_ch]
movss xmm0, dword [0x15940]
mov ebx, dword [arg_8h]
mov eax, dword [edx]
xor eax, 0x80000000
mov dword [var_18h], eax
mov eax, dword [edx + 4]
xor eax, 0x80000000
mov dword [var_14h], eax
mov eax, dword [edx + 8]
xor eax, 0x80000000
mov dword [var_10h], eax
mov eax, dword [edx + 0xc]
mov dword [var_ch], eax
lea eax, [var_28h]
cmp ebx, eax
je 0xfdc0
mov dword [var_4h], ecx
lea edx, [var_38h]
mov dword [var_8h], edx
mov dword [esp], ebx
movaps xmmword [var_58h], xmm0
call _Z15QuaternionAlignRK10QuaternionS1_RS_
fld dword [ebp - 0x30]
fld dword [ebx]
fld dword [ebx + 4]
fld dword [ebp - 0x2c]
fxch st(3)
fst dword [ebp - 0x40]
fmul st(1)
fxch st(3)
fmul st(2)
fld dword [ebx + 8]
fld dword [ebx + 0xc]
fxch st(4)
fst dword [ebp - 0x5c]
fxch st(2)
faddp st(5)
mov ecx, dword [var_5ch]
fld dword [ebp - 0x34]
fld dword [ebp - 0x38]
fxch st(1)
xor ecx, 0x80000000
fmul st(2)
mov dword [var_44h], ecx
fld dword [ebp - 0x44]
fxch st(5)
fmul dword [ebp - 0x2c]
fxch st(7)
fsubrp st(1)
fld st(5)
fxch st(5)
fmul dword [ebp - 0x40]
fxch st(5)
fmul st(2)
fxch st(4)
fmul dword [ebp - 0x34]
fxch st(5)
faddp st(7)
faddp st(3)
fld st(1)
fmul st(1)
fxch st(2)
fmul dword [ebp - 0x2c]
fxch st(3)
fst dword [ebp - 0x28]
fxch st(6)
faddp st(2)
fld dword [ebp - 0x34]
fmul st(5)
faddp st(2)
fxch st(1)
fst dword [ebp - 0x24]
fld dword [ebx + 4]
fld st(0)
fmul st(3)
fxch st(1)
fmul dword [ebp - 0x34]
fxch st(3)
fmul dword [ebp - 0x44]
fxch st(5)
fsubrp st(1)
fld dword [ebp - 0x40]
fxch st(1)
faddp st(4)
fmul st(5)
fxch st(5)
fmul dword [ebp - 0x2c]
fxch st(4)
fsubrp st(2)
fxch st(2)
faddp st(4)
fld dword [ebp - 0x40]
fxch st(4)
fst dword [ebp - 0x20]
fxch st(4)
fmul dword [ebx + 8]
fsubp st(1)
faddp st(2)
fxch st(1)
fstp dword [ebp - 0x1c]
fmul st(0)
fxch st(2)
fmul st(0)
fxch st(1)
fmul st(0)
fxch st(1)
faddp st(2)
faddp st(1)
fsqrt
fstp dword [ebp - 0x3c]
fld dword [ebp - 0x3c]
fstp qword [esp]
call asin
fadd st(0)
fstp dword [ebp - 0x3c]
fld dword [ebp - 0x3c]
fmul dword [0x1585c]
add esp, 0x74
pop ebx
pop ebp
ret
mov dword [var_4h], ecx
mov eax, dword [var_28h]
lea ecx, [var_38h]
mov dword [var_8h], ebx
mov edx, dword [var_24h]
mov dword [esp], ecx
mov dword [var_38h], eax
mov eax, dword [var_20h]
mov dword [var_34h], edx
mov edx, dword [var_1ch]
mov dword [var_30h], eax
mov dword [var_2ch], edx
call _Z14QuaternionMultRK10QuaternionS1_RS_
fld dword [ebp - 0x28]
fld dword [ebp - 0x24]
fld dword [ebp - 0x20]
fxch st(1)
jmp 0xfd8c
push ebp
xor edx, edx
mov ebp, esp
sub esp, 4
fld dword [0x15894]
fmul dword [ebp + 8]
fstp dword [ebp - 4]
movss xmm0, dword [var_4h]
cvttss2si eax, xmm0
test eax, eax
js 0xedfe
mov edx, 0x3ff
cmp eax, 0x400
cmovl edx, eax
mov eax, dword [edx*4 + 0x1cde0]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x24
mov dword [var_8h], ebx
mov eax, dword [arg_ch]
lea edx, [var_18h]
mov dword [var_4h], esi
mov ebx, dword [arg_8h]
mov esi, dword [arg_10h]
mov dword [var_sp_8h], edx
mov dword [esp], ebx
mov dword [var_sp_4h], eax
call _Z15QuaternionAlignRK10QuaternionS1_RS_
fld dword [ebp - 0x18]
fadd dword [ebx]
fstp dword [esi]
fld dword [ebp - 0x14]
fadd dword [ebx + 4]
fstp dword [esi + 4]
fld dword [ebp - 0x10]
fadd dword [ebx + 8]
fstp dword [esi + 8]
fld dword [ebp - 0xc]
fadd dword [ebx + 0xc]
fstp dword [esi + 0xc]
mov ebx, dword [var_8h]
mov esi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
fld1
mov ebp, esp
fld dword [ebp + 0x18]
fld st(0)
fmul st(1)
fld st(1)
fmul st(1)
fld st(1)
fmul dword [0x15888]
fld st(1)
fadd st(2)
fsubrp st(1)
fld st(2)
fadd st(3)
fxch st(1)
fadd st(5)
fxch st(1)
fsubr st(2)
fxch st(5)
fsub st(1)
fxch st(1)
fmul dword [ebp + 8]
fxch st(5)
faddp st(4)
fxch st(1)
fsubrp st(2)
fmul dword [ebp + 0xc]
fxch st(2)
fmul dword [ebp + 0x10]
fxch st(1)
fmul dword [ebp + 0x14]
fxch st(3)
pop ebp
faddp st(2)
faddp st(1)
faddp st(1)
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
mov eax, dword [arg_8h]
fld dword [0x15854]
mov edx, dword [arg_ch]
mov ecx, dword [arg_10h]
fld dword [eax + 4]
mov ebx, dword [arg_14h]
fmul st(1)
fsincos
fxch st(1)
fstp dword [ebp - 8]
fld dword [ebp - 8]
fxch st(1)
fstp dword [ebp - 8]
fld dword [eax]
fld dword [ebp - 8]
fxch st(1)
fmul st(3)
fsincos
fxch st(4)
fmul dword [eax + 8]
fxch st(4)
fstp dword [ebp - 0x10]
fstp dword [ebp - 0xc]
fxch st(2)
fsincos
fxch st(1)
fstp dword [ebp - 8]
test edx, edx
fld dword [ebp - 8]
fxch st(1)
fstp dword [ebp - 8]
fld dword [ebp - 8]
je 0xe027
fld dword [ebp - 0x10]
mov eax, dword [var_ch]
fmul st(4)
xor eax, 0x80000000
mov dword [edx + 8], eax
fstp dword [edx]
fld dword [ebp - 0x10]
fmul st(3)
fstp dword [edx + 4]
test ecx, ecx
je 0xe061
fld dword [ebp - 0xc]
fld st(2)
fld st(2)
fxch st(1)
fchs
fxch st(1)
fmul st(5)
fxch st(2)
fmul st(1)
fxch st(1)
fmul dword [ebp - 0x10]
fld st(1)
fmul st(7)
fxch st(2)
fmul st(6)
fxch st(1)
fstp dword [ecx + 8]
fxch st(1)
faddp st(2)
fxch st(1)
fstp dword [ecx]
fld st(1)
fmul st(5)
fsubp st(1)
fstp dword [ecx + 4]
test ebx, ebx
je 0xe095
fld dword [ebp - 0xc]
fld st(2)
fmul st(4)
fxch st(1)
fmul st(2)
fxch st(3)
fmul st(5)
fxch st(2)
fmul dword [ebp - 0x10]
fld st(3)
fmulp st(6)
fxch st(3)
fmulp st(4)
fxch st(2)
fstp dword [ebx + 8]
fxch st(3)
faddp st(1)
fxch st(1)
fsubrp st(2)
fstp dword [ebx]
fstp dword [ebx + 4]
jmp 0xe0a0
fstp st(0)
fstp st(0)
fstp st(0)
fstp st(0)
lea esi, [esi]
add esp, 0xc
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x58
mov eax, dword [0x17358]
mov dword [var_8h], esi
mov esi, dword [arg_ch]
mov dword [var_4h], edi
mov edi, dword [arg_18h]
mov dword [var_ch], ebx
mov eax, dword [eax + 0x2c]
test eax, eax
je 0xa760
mov eax, dword [arg_1ch]
mov edx, dword [arg_14h]
mov dword [var_10h], edi
mov dword [var_sp_4h], esi
mov dword [var_14h], eax
mov eax, dword [arg_10h]
mov dword [var_sp_ch], edx
mov edx, dword [arg_8h]
mov dword [var_sp_8h], eax
mov dword [esp], edx
call dword [0]
test eax, eax
mov ebx, eax
je _Z14blocked_packetP11sockaddr_in
cmp eax, 4
jg 0xa610
mov eax, ebx
mov esi, dword [var_8h]
mov ebx, dword [var_ch]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
cmp byte [esi], 0xff
jne 0xa5fd
cmp byte [esi + 1], 0xff
jne 0xa5fd
cmp byte [esi + 2], 0xff
nop
jne 0xa5fd
cmp byte [esi + 3], 0xff
jne 0xa5fd
cmp byte [esi + 4], 0x6c
lea esi, [esi]
jne 0xa5fd
mov eax, dword [0x17418]
mov eax, dword [eax + 0x2c]
test eax, eax
jne _Z15a2cprint_packetP11sockaddr_in
mov eax, dword [edi + 4]
mov dword [var_bp_14h], eax
movzx eax, word [0x10]
cmp ax, 0xffff
je 0xa6b9
movzx eax, ax
mov dword [var_3ch], eax
shl eax, 4
mov dword [var_40h], eax
add eax, dword [4]
add eax, 8
mov dword [var_sp_4h], eax
lea eax, [var_bp_14h]
mov dword [esp], eax
call dword [0]
test al, al
je blockedIPs
movzx edx, word [var_3ch]
cmp byte [0], 0
mov word [var_38h], dx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_38h], 0xffff
mov eax, 0
je 0xa6b0
movzx eax, word [var_38h]
shl eax, 4
add eax, dword [4]
movzx eax, word [eax]
cmp ax, 0xffff
jne 0xa655
mov word [var_34h], 0xffff
mov eax, 0xffff
cmp eax, dword [8]
jge 0xa6ff
cmp byte [0], 0
mov word [var_32h], ax
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_32h], 0xffff
mov eax, 0
je 0xa6f6
movzx eax, word [var_32h]
shl eax, 4
add eax, dword [4]
movzx edx, word [var_34h]
cmp word [eax], dx
jne 0xa73d
mov eax, dword [0x174d8]
mov eax, dword [eax + 0x2c]
test eax, eax
je 0xa839
cmp ebx, 5
mov ecx, 5
jle 0xa839
movzx edx, byte [ecx + esi]
lea eax, [edx - 0x20]
cmp al, 0x5e
jbe 0xa82e
test dl, dl
je 0xa82e
cmp dl, 0xa
je 0xa82e
mov dword [esp], edi
call _Z15a2cprint_packetP11sockaddr_in
mov dword [esp], edi
call _Z14blocked_packetP11sockaddr_in
add dword [0x17584], 1
jmp 0xa5c5
lea esi, [esi]
mov eax, dword [arg_1ch]
mov edx, dword [arg_14h]
mov dword [var_10h], edi
mov dword [var_sp_4h], esi
mov dword [var_14h], eax
mov eax, dword [arg_10h]
mov dword [var_sp_ch], edx
mov edx, dword [arg_8h]
mov dword [var_sp_8h], eax
mov dword [esp], edx
call dword [0]
mov ebx, eax
jmp 0xa5fd
mov edx, dword [4]
lea eax, [var_bp_14h]
add dword [var_40h], edx
mov dword [var_sp_4h], eax
mov eax, dword [var_40h]
add eax, 8
mov dword [esp], eax
call dword [0]
test al, al
je 0xaab7
movzx eax, word [var_3ch]
cmp byte [0], 0
mov word [var_36h], ax
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_36h], 0xffff
mov eax, 0
je 0xa7e5
movzx eax, word [var_36h]
shl eax, 4
add eax, dword [4]
movzx eax, word [eax + 2]
jmp 0xa64f
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xa697
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xa697
add ecx, 1
cmp ecx, ebx
jne 0xa71d
mov eax, dword [0x17478]
mov eax, dword [eax + 0x2c]
test eax, eax
je _Z15a2cprint_packetP11sockaddr_in
mov eax, dword [edi + 4]
mov dword [var_bp_14h], eax
movzx eax, word [0x10]
cmp ax, 0xffff
je 0xa8c0
movzx eax, ax
mov dword [var_2ch], eax
shl eax, 4
mov dword [var_30h], eax
add eax, dword [4]
add eax, 8
mov dword [var_sp_4h], eax
lea eax, [var_bp_14h]
mov dword [esp], eax
call dword [0]
test al, al
je a2cIPs
movzx edx, word [var_2ch]
cmp byte [0], 0
mov word [var_28h], dx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_28h], 0xffff
mov eax, 0
je 0xa8b7
movzx eax, word [var_28h]
shl eax, 4
add eax, dword [4]
movzx eax, word [eax]
cmp ax, 0xffff
jne 0xa85c
mov word [var_20h], 0xffff
mov dword [var_24h], 0xffff
mov edx, dword [var_24h]
cmp dword [8], edx
jle 0xa94c
cmp byte [0], 0
mov word [var_1eh], dx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_1eh], 0xffff
mov eax, 0
je 0xa902
movzx eax, word [var_1eh]
shl eax, 4
add eax, dword [4]
movzx edx, word [var_20h]
cmp word [eax], dx
je 0xa94c
shl dword [var_24h], 4
mov edx, dword [var_24h]
mov eax, dword [4]
mov eax, dword [edx + eax + 0xc]
lea eax, [eax + eax*2]
lea edx, [eax*4]
add edx, dword [0]
cmp dword [edx + 4], 1
jbe 0xa94c
mov eax, dword [0]
fld dword [eax + 0xc]
fsub dword [edx + 8]
fld dword [0x156a8]
fucompi st(1)
fstp st(0)
ja _Z15a2cprint_packetP11sockaddr_in
mov dword [esp], edi
call _Z15a2cprint_packetP11sockaddr_in
jmp 0xa5fd
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xa7cc
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xa7cc
mov edx, dword [4]
lea eax, [var_bp_14h]
add dword [var_30h], edx
mov dword [var_sp_4h], eax
mov eax, dword [var_30h]
add eax, 8
mov dword [esp], eax
call dword [0]
test al, al
je 0xab07
movzx eax, word [var_2ch]
cmp byte [0], 0
mov word [var_26h], ax
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_26h], 0xffff
mov eax, 0
je 0xa9ee
movzx eax, word [var_26h]
shl eax, 4
add eax, dword [4]
movzx eax, word [eax + 2]
jmp 0xa856
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xa89e
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xa89e
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xa6dd
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xa6dd
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xa9d5
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xa9d5
movzx edx, word [var_3ch]
movzx eax, dx
mov word [var_34h], dx
jmp blockedIPs
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xa8e9
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xa8e9
movzx edx, word [var_2ch]
movzx eax, dx
mov word [var_20h], dx
mov dword [var_24h], eax
jmp 0xa8cd
push ebp
mov ebp, esp
lea edx, [var_18h]
push esi
push ebx
sub esp, 0x18
mov eax, dword [arg_8h]
fld dword [0x1585c]
mov ebx, dword [arg_10h]
mov esi, dword [arg_ch]
fld dword [eax + 4]
fld dword [eax + 8]
fxch st(1)
fmul st(2)
fxch st(1)
fmul st(2)
fxch st(2)
fmul dword [eax]
fxch st(1)
mov dword [var_4h], ebx
mov dword [esp], edx
fstp dword [ebp - 0x18]
fxch st(1)
fstp dword [ebp - 0x14]
fstp dword [ebp - 0x10]
call _Z11AngleMatrixRK6QAngleR11matrix3x4_t
mov ecx, dword [esi]
mov dword [ebx + 0xc], ecx
mov edx, dword [esi + 4]
mov dword [ebx + 0x1c], edx
mov eax, dword [esi + 8]
mov dword [ebx + 0x2c], eax
add esp, 0x18
pop ebx
pop esi
pop ebp
ret
push ebp
fldz
mov ebp, esp
fld dword [ebp + 0xc]
push ebx
xor eax, eax
mov ecx, dword [arg_8h]
mov edx, dword [arg_10h]
mov ebx, dword [arg_14h]
lea esi, [esi]
lea edi, [edi]
fld dword [ecx + eax*4]
fld dword [edx + eax*4]
fucomi st(1)
ja 0xe707
fstp st(0)
fld dword [ebx + eax*4]
fxch st(1)
fucomi st(1)
jbe 0xe710
fxch st(1)
fsubp st(1)
fmul st(0)
faddp st(2)
jmp 0xe720
nop
fstp st(0)
fstp st(0)
lea esi, [esi]
lea edi, [edi]
inc eax
cmp eax, 2
jle 0xe6f0
pop ebx
fmul st(0)
xor eax, eax
pop ebp
fucompi st(1)
fstp st(0)
setae al
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov eax, dword [edx]
mov dword [ecx], eax
mov eax, dword [edx + 4]
mov dword [ecx + 4], eax
mov eax, dword [edx + 8]
mov dword [ecx + 8], eax
mov eax, dword [edx + 0xc]
mov dword [ecx + 0xc], eax
mov eax, dword [edx + 0x10]
mov dword [ecx + 0x10], eax
mov eax, dword [edx + 0x14]
mov dword [ecx + 0x14], eax
mov eax, dword [edx + 0x18]
mov dword [ecx + 0x18], eax
mov eax, dword [edx + 0x1c]
mov dword [ecx + 0x1c], eax
mov eax, dword [edx + 0x20]
mov dword [ecx + 0x20], eax
mov eax, dword [edx + 0x24]
mov dword [ecx + 0x24], eax
mov eax, dword [edx + 0x28]
mov dword [ecx + 0x28], eax
mov eax, dword [edx + 0x2c]
mov dword [ecx + 0x2c], eax
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x2c
movzx eax, word [arg_ch]
mov dword [var_2ch], eax
movzx edx, word [var_2ch]
mov ecx, dword [arg_8h]
movzx eax, dx
mov word [var_1eh], dx
movzx edx, word [ecx + 0x10]
cmp eax, edx
je 0xbc69
cmp byte [0], 0
mov edi, eax
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp di, 0xffff
mov eax, 0
je 0xb690
mov edx, dword [arg_8h]
movzx eax, di
shl eax, 4
add eax, dword [edx + 4]
cmp byte [0], 0
movzx ebx, word [eax + 4]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xb6b8
mov ecx, dword [arg_8h]
movzx eax, bx
shl eax, 4
add eax, dword [ecx + 4]
cmp word [eax + 6], 0
jne 0xbc60
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp di, 0xffff
mov eax, 0
je 0xb6e7
mov edx, dword [arg_8h]
movzx eax, di
shl eax, 4
add eax, dword [edx + 4]
movzx eax, word [eax + 4]
cmp byte [0], 0
movzx ecx, ax
mov word [var_22h], ax
mov esi, ecx
mov dword [var_28h], ecx
mov word [var_16h], cx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
mov eax, 0
mov dword [var_1ch], 0xffff
je 0xb72b
movzx eax, word [var_16h]
mov edx, dword [arg_8h]
mov dword [var_1ch], eax
shl eax, 4
add eax, dword [edx + 4]
movzx eax, word [eax + 4]
cmp byte [0], 0
movzx ebx, word [var_1ch]
mov word [var_20h], ax
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xb75b
mov ecx, dword [arg_8h]
movzx eax, bx
shl eax, 4
add eax, dword [ecx + 4]
cmp byte [0], 0
movzx ebx, word [eax + 4]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xb783
mov edx, dword [arg_8h]
movzx eax, bx
shl eax, 4
add eax, dword [edx + 4]
cmp word [eax], si
jne 0xb826
movzx ecx, word [var_20h]
cmp byte [0], 0
mov dword [var_10h], ecx
mov esi, ecx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp si, 0xffff
mov eax, 0
je 0xb7b9
mov edx, dword [arg_8h]
movzx eax, si
shl eax, 4
add eax, dword [edx + 4]
cmp byte [0], 0
movzx ebx, word [eax + 2]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xb7e1
mov ecx, dword [arg_8h]
movzx eax, bx
shl eax, 4
add eax, dword [ecx + 4]
cmp word [eax + 6], 0
jne _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov edx, dword [arg_8h]
shl dword [var_1ch], 4
mov ecx, dword [var_1ch]
mov eax, dword [edx + 4]
movzx edx, bx
shl edx, 4
mov word [ecx + eax + 6], 1
mov word [edx + eax + 6], 1
movzx edx, si
shl edx, 4
mov word [edx + eax + 6], 0
movzx eax, word [var_20h]
mov dword [var_2ch], eax
jmp 0xb650
movzx edx, word [var_20h]
cmp byte [0], 0
mov dword [var_14h], edx
mov esi, edx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp si, 0xffff
mov eax, 0
je 0xb853
mov ecx, dword [arg_8h]
movzx eax, si
shl eax, 4
add eax, dword [ecx + 4]
cmp byte [0], 0
movzx ebx, word [eax]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xb87a
mov edx, dword [arg_8h]
movzx eax, bx
shl eax, 4
add eax, dword [edx + 4]
cmp word [eax + 6], 0
jne _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov ecx, dword [arg_8h]
shl dword [var_1ch], 4
mov edx, dword [var_1ch]
mov eax, dword [ecx + 4]
movzx ecx, word [var_20h]
mov word [edx + eax + 6], 1
movzx edx, bx
shl edx, 4
mov word [edx + eax + 6], 1
movzx edx, si
shl edx, 4
mov word [edx + eax + 6], 0
mov dword [var_2ch], ecx
jmp 0xb650
nop
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb6a1
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb679
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb6d0
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb744
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xb708
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb708
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb76c
cmp byte [0], 0
mov ebx, edi
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xba66
mov edx, dword [arg_8h]
movzx eax, bx
shl eax, 4
add eax, dword [edx + 4]
cmp byte [0], 0
movzx ebx, word [eax + 4]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xba8e
mov ecx, dword [arg_8h]
movzx eax, bx
shl eax, 4
add eax, dword [ecx + 4]
movzx edx, word [var_1eh]
cmp word [eax + 2], dx
je 0xbd79
mov eax, dword [var_1ch]
shl eax, 4
mov ecx, dword [arg_8h]
mov edx, dword [ecx + 4]
mov word [eax + edx + 6], 1
movzx eax, si
shl eax, 4
mov word [eax + edx + 6], 0
mov eax, dword [var_10h]
mov dword [esp], ecx
mov dword [var_4h], eax
call _ZN10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE11RotateRightEt
jmp 0xb650
cmp byte [0], 0
mov ebx, edi
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xbaf6
mov edx, dword [arg_8h]
movzx eax, bx
shl eax, 4
add eax, dword [edx + 4]
cmp byte [0], 0
movzx ebx, word [eax + 4]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xbb1e
mov ecx, dword [arg_8h]
movzx eax, bx
shl eax, 4
add eax, dword [ecx + 4]
movzx edx, word [var_1eh]
cmp word [eax], dx
je 0xbcfe
mov eax, dword [var_1ch]
shl eax, 4
mov ecx, dword [arg_8h]
mov edx, dword [ecx + 4]
mov word [edx + eax + 6], 1
movzx eax, si
shl eax, 4
mov word [eax + edx + 6], 0
mov eax, dword [var_14h]
mov dword [esp], ecx
mov dword [var_4h], eax
call _ZN10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE10RotateLeftEt
jmp 0xb650
nop
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb863
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb7ca
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb7a2
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb83c
mov eax, dword [arg_8h]
movzx edx, word [eax + 0x10]
mov ecx, eax
mov eax, dword [ecx + 4]
shl edx, 4
mov word [edx + eax + 6], 1
add esp, 0x2c
pop ebx
pop esi
pop edi
pop ebp
ret
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xbb07
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xbadf
mov ecx, dword [var_28h]
mov eax, dword [arg_8h]
mov dword [var_4h], ecx
mov dword [esp], eax
call _ZN10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE11RotateRightEt
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
mov eax, 0
je 0xbd35
mov eax, dword [var_1ch]
mov edx, dword [arg_8h]
shl eax, 4
add eax, dword [edx + 4]
cmp byte [0], 0
movzx ebx, word [eax + 4]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov edx, 0
mov eax, 0xffff0
je 0xbd64
mov ecx, dword [arg_8h]
movzx eax, bx
shl eax, 4
mov edx, eax
add edx, dword [ecx + 4]
movzx edx, word [edx + 4]
mov dword [var_14h], edx
mov esi, edx
movzx edx, word [var_22h]
mov dword [var_2ch], edx
jmp 0xbb31
mov ecx, dword [var_28h]
mov eax, dword [arg_8h]
mov dword [var_4h], ecx
mov dword [esp], eax
call _ZN10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE10RotateLeftEt
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
mov eax, 0
je 0xbdb0
mov eax, dword [var_1ch]
mov edx, dword [arg_8h]
shl eax, 4
add eax, dword [edx + 4]
cmp byte [0], 0
movzx ebx, word [eax + 4]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov edx, 0
mov eax, 0xffff0
je 0xbddf
mov ecx, dword [arg_8h]
movzx eax, bx
shl eax, 4
mov edx, eax
add edx, dword [ecx + 4]
movzx edx, word [edx + 4]
mov dword [var_10h], edx
mov esi, edx
movzx edx, word [var_22h]
mov dword [var_2ch], edx
jmp 0xbaa2
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xba77
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xba4f
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xbd46
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xbdc1
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xbd98
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xbd98
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xbd1d
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xbd1d
mov eax, dword [8]
push ebp
mov ebp, esp
pop ebp
add eax, 1
ret
push ebp
mov ebp, esp
movzx eax, byte [0x1cdd5]
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x48
mov dword [var_8h], ebx
mov eax, dword [arg_8h]
mov ebx, dword [arg_ch]
mov dword [var_4h], esi
lea esi, [var_38h]
mov dword [var_sp_4h], esi
mov dword [esp], eax
call _Z16QuaternionMatrixRK10QuaternionR11matrix3x4_t
mov dword [var_sp_4h], ebx
mov dword [esp], esi
call _Z12MatrixAnglesRK11matrix3x4_tPf
fld dword [0x15854]
fld dword [ebx + 8]
fld dword [ebx]
fxch st(1)
fmul st(2)
fxch st(1)
fmul st(2)
fxch st(2)
fmul dword [ebx + 4]
fxch st(1)
fstp dword [ebx]
fxch st(1)
fstp dword [ebx + 4]
fstp dword [ebx + 8]
mov ebx, dword [var_8h]
mov esi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
xor eax, eax
mov ebp, esp
fld dword [ebp + 8]
fld dword [ebp + 0x18]
fld dword [ebp + 0x10]
fld st(2)
fsub st(2)
fxch st(1)
fsubr st(3)
fmulp st(1)
fld dword [ebp + 0x10]
fsub st(2)
fmulp st(1)
fldz
fxch st(1)
fucomi st(1)
fstp st(1)
jp 0xeeef
je 0xefb0
fld dword [ebp + 0x14]
mov ecx, dword [arg_20h]
fld st(2)
fld dword [ebp + 0xc]
fld st(5)
fxch st(3)
mov edx, dword [arg_24h]
fsub dword [ebp + 0xc]
fxch st(2)
fmul st(5)
fxch st(1)
mov eax, dword [arg_28h]
fsub dword [ebp + 0x1c]
fxch st(2)
fmul st(5)
fxch st(3)
fmul st(6)
fxch st(2)
fmul dword [ebp + 0x10]
faddp st(3)
fld dword [ebp + 0x1c]
fsub dword [ebp + 0x14]
fmul st(6)
faddp st(3)
fxch st(2)
fdiv st(3)
fstp dword [ecx]
fld dword [ebp + 0xc]
fld dword [ebp + 0x14]
fxch st(1)
fsub dword [ebp + 0x14]
fxch st(1)
fsub dword [ebp + 0x1c]
fld dword [ebp + 0x10]
fxch st(2)
fmul st(4)
fxch st(1)
fmul st(3)
fxch st(2)
fmul st(0)
fxch st(1)
faddp st(2)
fld dword [ebp + 0x1c]
fsub dword [ebp + 0xc]
fmul st(1)
faddp st(2)
fld st(6)
fmul st(6)
fxch st(2)
fdiv st(5)
fstp dword [edx]
fld st(5)
fsub st(7)
fxch st(6)
fmul dword [ebp + 0xc]
fxch st(2)
fmulp st(6)
fxch st(6)
fmul dword [ebp + 0x1c]
fxch st(2)
fmul dword [ebp + 0x1c]
fxch st(3)
fmul dword [ebp + 0xc]
fxch st(1)
fsubrp st(2)
fxch st(4)
fmul dword [ebp + 0x14]
fxch st(5)
fmulp st(1)
fxch st(1)
fsubrp st(3)
fxch st(2)
fmul dword [ebp + 0x10]
fxch st(3)
faddp st(2)
fxch st(1)
faddp st(2)
fdivp st(1)
fstp dword [eax]
mov eax, 1
jmp 0xefb6
nop
lea esi, [esi]
fstp st(0)
fstp st(0)
fstp st(0)
pop ebp
ret
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
push ebx
mov edx, dword [arg_10h]
mov ebx, dword [arg_ch]
mov eax, dword [ecx]
mov dword [edx + ebx*4], eax
mov eax, dword [ecx + 4]
mov dword [edx + ebx*4 + 0x10], eax
mov eax, dword [ecx + 8]
mov dword [edx + ebx*4 + 0x20], eax
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_10h]
fld dword [ebp + 0xc]
mov ecx, dword [arg_8h]
mov edx, dword [arg_14h]
fld dword [eax]
fmul st(1)
fadd dword [ecx]
fstp dword [edx]
fld dword [eax + 4]
fmul st(1)
fadd dword [ecx + 4]
fstp dword [edx + 4]
fmul dword [eax + 8]
fadd dword [ecx + 8]
fstp dword [edx + 8]
pop ebp
ret
push ebp
fldz
mov ebp, esp
push esi
lea esi, [var_18h]
push ebx
sub esp, 0x20
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
mov ebx, dword [arg_14h]
fld dword [edx]
fld dword [eax]
fld dword [edx + 4]
fld dword [eax + 4]
fxch st(2)
fsub st(3)
fxch st(2)
fsub st(1)
fld st(2)
fmul st(3)
fld st(1)
fmul st(2)
faddp st(1)
fld dword [0x158e0]
fucompi st(1)
ja 0x13492
fstp st(5)
fld st(2)
fld st(1)
fld st(2)
fxch st(1)
fmul dword [ecx + 4]
fxch st(1)
fmul st(4)
fxch st(2)
fmul dword [ecx]
faddp st(1)
fld st(4)
fmul st(6)
faddp st(2)
fsubrp st(1)
fdivrp st(5)
jmp 0x13494
fstp st(0)
test ebx, ebx
je 0x134a7
fstp st(1)
fstp st(2)
fxch st(2)
fst dword [ebx]
fld dword [edx]
fld dword [edx + 4]
jmp 0x134c0
fxch st(3)
fxch st(1)
fxch st(2)
fxch st(4)
fxch st(2)
jmp 0x134c0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
fxch st(4)
fmul st(2)
fxch st(3)
fmulp st(2)
faddp st(2)
faddp st(2)
fstp dword [esi]
fld dword [ebp - 0x18]
fxch st(1)
fstp dword [esi + 4]
fld dword [ebp - 0x14]
fxch st(1)
fsubr dword [ecx]
fxch st(1)
fsubr dword [ecx + 4]
fxch st(1)
add esp, 0x20
pop ebx
fmul st(0)
fxch st(1)
fmul st(0)
pop esi
pop ebp
faddp st(1)
ret
push ebp
mov ebp, esp
sub esp, 4
fld dword [0x1587c]
fld dword [ebp + 8]
fld st(1)
fxch st(1)
fprem
fnstsw ax
sahf
jp 0x13e63
fstp st(1)
fstp dword [ebp - 4]
fldz
fld dword [ebp - 4]
fxch st(1)
fucompi st(1)
jbe 0x13e80
faddp st(1)
jmp 0x13e82
mov esi, esi
fstp st(1)
leave
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
mov ebp, esp
lea edx, [var_18h]
push esi
push ebx
sub esp, 0x30
mov ebx, dword [arg_8h]
mov eax, dword [arg_ch]
mov esi, dword [arg_10h]
fld dword [ebx + 8]
fld dword [eax + 8]
fld dword [ebx + 4]
fld st(2)
fmul dword [eax + 4]
fxch st(1)
fmul st(2)
fsubrp st(1)
fstp dword [ebp - 0x18]
fld dword [eax]
fld dword [ebx]
fxch st(3)
fmul st(1)
fxch st(2)
fmul st(3)
fsubp st(2)
fxch st(1)
fstp dword [ebp - 0x14]
fmul dword [ebx + 4]
fxch st(1)
fmul dword [eax + 4]
fsubrp st(1)
fstp dword [ebp - 0x10]
mov dword [esp], edx
call dword [0]
fld dword [ebx]
fld dword [ebx + 4]
fld st(1)
fld st(1)
fxch st(1)
fmul st(3)
fxch st(1)
fmul st(2)
faddp st(1)
fsqrt
fld dword [0x15858]
fxch st(1)
fucomi st(1)
fstp st(1)
jbe 0xe380
fxch st(2)
fpatan
fstp dword [ebp - 0x1c]
fld dword [ebp - 0x1c]
fld dword [0x1585c]
fmul st(1), st(0)
fxch st(1)
fstp dword [esi + 4]
fld dword [ebx + 8]
fchs
fxch st(1)
fxch st(2)
fpatan
fstp dword [ebp - 0x1c]
fld dword [ebp - 0x1c]
fmul st(1)
fstp dword [esi]
fld dword [ebp - 0x18]
fld dword [ebp - 0x14]
fmul dword [ebx]
fxch st(1)
fmul dword [ebx + 4]
fld dword [ebp - 0x10]
fxch st(1)
fsubrp st(2)
fxch st(1)
fpatan
fstp dword [ebp - 0x1c]
fld dword [ebp - 0x1c]
fmulp st(1)
fstp dword [esi + 8]
add esp, 0x30
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
fstp st(1)
fstp st(1)
fld dword [ebp - 0x18]
fld dword [ebp - 0x14]
fchs
fpatan
fstp dword [ebp - 0x1c]
fld dword [ebp - 0x1c]
fld dword [0x1585c]
fmul st(1), st(0)
fxch st(1)
fstp dword [esi + 4]
fld dword [ebx + 8]
fchs
fxch st(1)
fxch st(2)
fpatan
fstp dword [ebp - 0x1c]
mov ecx, 0
fld dword [ebp - 0x1c]
mov dword [esi + 8], ecx
fmulp st(1)
fstp dword [esi]
add esp, 0x30
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x18
fld dword [ebp + 0xc]
fld dword [0x17204]
fucompi st(1)
jp 0xf4a4
jne 0xf4a4
fstp st(0)
fld dword [0x1fae0]
fstp qword [esp + 8]
fld dword [ebp + 8]
fstp qword [esp]
call pow
fstp dword [ebp - 4]
fld dword [ebp - 4]
leave
ret
fstp qword [esp]
call log
fld dword [0x158a8]
fmulp st(1)
fstp dword [ebp - 4]
fld dword [ebp - 4]
fst dword [0x1fae0]
fstp qword [esp + 8]
fld dword [ebp + 8]
fstp qword [esp]
call pow
fstp dword [ebp - 4]
fld dword [ebp - 4]
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
fld dword [ebp + 8]
fld st(0)
fmul st(1)
fld st(1)
fmul st(1)
fld st(1)
fmul dword [0x15888]
fld st(1)
fadd st(2)
fsubrp st(1)
fld1
fadd st(1), st(0)
fsub st(1)
fxch st(1)
fstp dword [eax]
fstp dword [eax + 4]
fld st(1)
fadd st(2)
fsubr st(1)
fxch st(1)
fsubrp st(2)
faddp st(2)
fstp dword [eax + 0xc]
fstp dword [eax + 8]
pop ebp
ret
push ebp
fld1
mov ebp, esp
sub esp, 4
fld dword [ebp + 0x14]
fld dword [ebp + 0x10]
fld dword [ebp + 0xc]
fxch st(2)
fmul st(0)
fld st(1)
fld dword [ebp + 0x14]
fxch st(1)
fsub st(4)
fld st(4)
fsub dword [ebp + 8]
fxch st(2)
fmul st(3)
fxch st(1)
fstp dword [ebp - 4]
fld st(2)
fmul dword [0x15888]
fld st(1)
fadd st(2)
fsubrp st(1)
fld st(3)
fadd st(4)
fxch st(1)
fadd st(7)
fxch st(1)
fsubr st(2)
fxch st(7)
fsub st(1)
fxch st(7)
fadd dword [arg_14h]
fxch st(6)
fmulp st(1)
fxch st(4)
fmulp st(6)
fsubrp st(2)
fmulp st(3)
fxch st(1)
faddp st(3)
fmul dword [ebp - 4]
fxch st(2)
faddp st(1)
fadd st(1)
fxch st(1)
fstp dword [ebp - 4]
leave
ret
push ebp
fldz
mov ebp, esp
push esi
push ebx
sub esp, 0x40
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
fld dword [ebx + 4]
fucomi st(1)
jne 0xe215
jp 0xe215
fld dword [ebx]
fucomi st(2)
jne 0xe217
jp 0xe217
fstp st(0)
fstp st(0)
fld dword [ebx + 8]
mov dword [esi + 8], 0
fld st(1)
fld dword [0x15874]
fxch st(2)
fucompi st(3)
fstp st(2)
fld dword [0x15878]
fxch st(2)
fstp dword [esi + 4]
fcmovbe st(0), st(1)
fstp st(1)
fstp dword [esi]
add esp, 0x40
pop ebx
pop esi
pop ebp
ret
fld dword [ebx]
fld st(1)
fld st(1)
fpatan
fstp qword [ebp - 0x10]
fld qword [ebp - 0x10]
fmul qword [0x15908]
fdiv qword [0x158f8]
fstp dword [ebp - 0x14]
fld dword [ebp - 0x14]
fxch st(3)
fucomi st(3)
ja 0xe2a0
fxch st(2)
fmul st(0)
fxch st(1)
fmul st(0)
faddp st(1)
fstp dword [esp]
fstp dword [ebp - 0x28]
fstp dword [ebp - 0x38]
call dword [0]
fld dword [ebx + 8]
fchs
fxch st(1)
fpatan
fstp qword [ebp - 0x10]
fld qword [ebp - 0x10]
fmul qword [0x15908]
fld dword [ebp - 0x28]
fld dword [ebp - 0x38]
fxch st(2)
fdiv qword [0x158f8]
fstp dword [ebp - 0x14]
fld dword [ebp - 0x14]
fxch st(1)
fucompi st(1)
jbe 0xe289
fadd dword [0x1587c]
fstp dword [esi]
fstp dword [esi + 4]
mov dword [esi + 8], 0
add esp, 0x40
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
fxch st(3)
fadd dword [0x1587c]
fxch st(3)
jmp 0xe23b
push ebp
mov ebp, esp
sub esp, 4
movd mm0, dword [arg_8h]
femms
movq mm1, mm0
pfrsqrt mm0, mm1
punpckldq mm0, mm0
pfmul mm1, mm0
movd dword [ebp - 4], mm1
femms
fld dword [ebp - 4]
fdivr dword [0x15860]
leave
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
mov edx, 0x3f000000
mov ebp, esp
mov eax, 0x40400000
sub esp, 0xc
mov dword [var_8h], edx
mov dword [var_ch], eax
movss xmm3, dword [arg_8h]
movss xmm1, dword [var_8h]
movss xmm2, dword [var_ch]
rsqrtss xmm0, xmm3
mulss xmm3, xmm0
mulss xmm1, xmm0
mulss xmm3, xmm0
subss xmm2, xmm3
mulss xmm1, xmm2
movss dword [var_4h], xmm1
fld dword [ebp - 4]
leave
ret
push ebp
mov ebp, esp
push esi
lea esi, [var_28h]
push ebx
sub esp, 0x58
mov ecx, dword [arg_10h]
mov ebx, dword [arg_ch]
mov edx, dword [arg_14h]
mov eax, dword [arg_8h]
fld dword [ecx]
fld dword [ebx]
fld dword [edx]
fld st(2)
fsub st(2)
fld dword [edx + 4]
movss xmm0, dword [edx + 8]
fld dword [eax]
fxch st(2)
fstp dword [ebp - 0x2c]
movss xmm1, dword [var_2ch]
fld dword [eax + 4]
fld dword [eax + 8]
fxch st(4)
ucomiss xmm1, dword [0x158bc]
fst dword [ebp - 0x28]
fxch st(2)
fst dword [ebp - 0x24]
movss dword [var_20h], xmm0
jp 0x117a5
je 0x11806
fxch st(3)
fucomi st(5)
jp 0x11860
jne 0x11860
fstp st(5)
fxch st(3)
fstp dword [ebp - 0x10]
fxch st(2)
fstp dword [ebp - 0x14]
fxch st(2)
fstp dword [ebp - 0x18]
fucomi st(2)
jp 0x117cc
je 0x11820
fld dword [ebp - 0x2c]
fxch st(1)
fsub st(3)
fdiv st(1), st(0)
fmul st(1)
faddp st(3)
fld dword [ecx + 4]
fsub st(2), st(0)
fxch st(3)
fstp dword [esi]
fmul st(1), st(0)
fxch st(2)
faddp st(1)
fstp dword [esi + 4]
fld dword [ecx + 8]
movss dword [var_3ch], xmm0
fld dword [ebp - 0x3c]
fsub st(1)
fmulp st(2)
fadd st(1)
fxch st(1)
fstp dword [ebp - 0x3c]
fstp dword [esi + 8]
jmp 0x11830
fstp st(0)
fstp st(1)
fstp st(3)
fstp st(3)
fstp dword [ebp - 0x10]
fstp dword [ebp - 0x14]
fstp dword [ebp - 0x18]
jmp 0x11830
lea esi, [esi]
fstp st(0)
fstp st(0)
fstp st(0)
lea esi, [esi]
lea edi, [edi]
mov dword [var_8h], ecx
mov eax, dword [arg_1ch]
lea ecx, [var_18h]
mov dword [var_ch], esi
mov edx, dword [arg_18h]
mov dword [var_4h], ebx
mov dword [var_14h], eax
mov dword [var_10h], edx
mov dword [esp], ecx
call _Z12Cubic_SplineRK6VectorS1_S1_S1_fRS_
add esp, 0x58
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
fld st(5)
fsub st(1)
fxch st(1)
fsub st(6)
fxch st(1)
fdivr dword [ebp - 0x2c]
fmul st(1), st(0)
fxch st(6)
faddp st(1)
fstp dword [ebp - 0x18]
fld dword [ebx + 4]
fsub st(1), st(0)
fxch st(1)
fmul st(5)
faddp st(1)
fstp dword [ebp - 0x14]
fld dword [ebx + 8]
fsub st(3), st(0)
fxch st(3)
fmulp st(4)
fxch st(2)
faddp st(3)
fxch st(2)
fstp dword [ebp - 0x10]
jmp 0x117c6
push ebp
mov ebp, esp
sub esp, 4
fld dword [ebp + 8]
fld dword [ebp + 0xc]
fld dword [0x1587c]
fld st(2)
fsub st(2)
fprem
fnstsw ax
sahf
jp 0x13d76
fstp dword [ebp - 4]
fxch st(2)
fucompi st(1)
fstp st(0)
fld dword [ebp - 4]
jbe 0x13da0
fld dword [0x158b0]
fxch st(1)
fucomi st(1)
fstp st(1)
jb 0x13db0
fsubrp st(1)
leave
ret
lea esi, [esi]
fld dword [0x158ec]
fucompi st(1)
jb 0x13db0
leave
faddp st(1)
ret
mov esi, esi
fstp st(1)
leave
jmp 0x13d9c
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x2c
mov ebx, dword [arg_8h]
mov esi, dword [arg_10h]
mov edx, dword [arg_ch]
cmp ebx, esi
je 0xfc31
mov dword [esp], ebx
lea eax, [var_18h]
mov dword [var_8h], eax
mov dword [var_4h], edx
call _Z15QuaternionAlignRK10QuaternionS1_RS_
fld dword [ebx + 4]
fld dword [ebp - 0x10]
fld dword [ebp - 0xc]
fmul dword [ebx]
fxch st(2)
fst dword [ebp - 0x1c]
fmul st(1)
fld dword [ebx + 8]
fld dword [ebp - 0x14]
fld dword [ebx + 0xc]
fxch st(5)
faddp st(3)
fld st(1)
fmul st(1)
fxch st(1)
fmul st(5)
fxch st(3)
fsubrp st(1)
fld st(4)
fmul dword [ebp - 0x18]
faddp st(1)
fld dword [ebp - 0x1c]
fmul dword [ebp - 0xc]
fxch st(1)
fstp dword [esi]
fld dword [ebx]
fld st(0)
fchs
fld st(0)
fmul st(6)
fxch st(1)
fmul dword [ebp - 0x18]
fxch st(6)
fmul st(7)
fxch st(1)
faddp st(3)
fld dword [ebp - 0x18]
fxch st(7)
fmul dword [ebp - 0xc]
fxch st(7)
fmul st(4)
fxch st(4)
fmul dword [ebp - 0xc]
fxch st(3)
faddp st(4)
fxch st(3)
faddp st(4)
fxch st(3)
fstp dword [esi + 4]
fld dword [ebp - 0x14]
fld dword [ebx + 4]
fld dword [ebp - 0x18]
fxch st(5)
fmul st(2)
fxch st(5)
fmul st(1)
fxch st(1)
fmulp st(2)
fsubp st(4)
fsubp st(4)
faddp st(2)
faddp st(1)
fstp dword [esi + 8]
fld dword [ebp - 0x10]
fmul dword [ebx + 8]
fsubp st(1)
faddp st(1)
fstp dword [esi + 0xc]
add esp, 0x2c
pop ebx
pop esi
pop ebp
ret
mov ecx, dword [esi]
mov dword [var_18h], ecx
mov eax, dword [esi + 4]
mov dword [var_14h], eax
mov ebx, dword [esi + 8]
lea eax, [var_18h]
mov dword [var_10h], ebx
mov ecx, dword [esi + 0xc]
mov dword [var_ch], ecx
mov dword [var_8h], esi
mov dword [var_4h], edx
mov dword [esp], eax
call _Z14QuaternionMultRK10QuaternionS1_RS_
add esp, 0x2c
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x30
mov edx, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [edx]
mov dword [var_18h], ebx
mov ecx, dword [edx + 4]
fld dword [ebp - 0x18]
mov dword [var_14h], ecx
mov eax, dword [edx + 8]
lea edx, [var_14h]
mov dword [var_10h], eax
mov eax, 1
fld dword [edx]
fucomi st(1)
fcmovbe st(0), st(1)
fstp st(1)
add edx, 4
dec eax
jns 0x14bda
xor eax, eax
fldz
fxch st(1)
fucomi st(1)
fstp st(1)
jp 0x14bf6
je 0x14c34
fld dword [0x15884]
fxch st(1)
fucomi st(1)
jbe 0x14c1d
fld dword [0x156a8]
jmp 0x14c12
lea esi, [esi]
fxch st(1)
fmul st(1), st(0)
fxch st(1)
inc eax
fucomi st(2)
ja 0x14c10
fstp st(1)
fstp st(1)
fld dword [0x158f4]
jmp 0x14c2e
fxch st(1)
fadd st(0)
fxch st(1)
dec eax
fucomi st(1)
ja 0x14c27
fstp st(0)
fstp st(0)
cmp eax, 0xffffff80
mov ebx, 0xffffff80
jl 0x14c4d
mov ebx, 0x7f
cmp eax, 0x80
cmovl ebx, eax
mov edx, ebx
mov eax, 0x40000000
neg edx
push edx
fild dword [esp]
add esp, 4
mov dword [var_4h], eax
mov dword [esp], 0
fstp qword [esp + 8]
call pow
fstp dword [ebp - 0x1c]
mov edx, 2
lea eax, [var_18h]
fld dword [ebp - 0x1c]
fld dword [0x15884]
lea esi, [esi]
lea edi, [edi]
fld dword [eax]
fld dword [0x15884]
fxch st(1)
fmul st(3)
fucomi st(2)
fcmovnbe st(0), st(1)
fstp st(1)
fstp dword [eax]
add eax, 4
dec edx
jns 0x14c90
fstp st(0)
fstp st(0)
cvttss2si edx, dword [ebp - 0x18]
mov byte [esi], dl
cvttss2si eax, dword [ebp - 0x14]
mov byte [esi + 1], al
cvttss2si ecx, dword [ebp - 0x10]
mov byte [esi + 3], bl
mov byte [esi + 2], cl
add esp, 0x30
pop ebx
pop esi
pop ebp
ret
push ebp
xor eax, eax
mov ebp, esp
pop ebp
ret
push ebp
mov ebp, esp
lea ecx, [var_28h]
push edi
push esi
push ebx
sub esp, 0xac
mov esi, dword [arg_8h]
fld dword [0x15854]
mov eax, dword [arg_14h]
mov ebx, dword [arg_ch]
fld dword [esi + 8]
mov edi, dword [arg_10h]
fld dword [esi]
fxch st(1)
fmul st(2)
fxch st(1)
mov dword [var_8ch], eax
fmul st(2)
fld dword [esi + 4]
fxch st(2)
fst dword [ebp - 0x68]
fxch st(2)
fmul st(3)
fxch st(1)
fst dword [ebp - 0x64]
fxch st(1)
fst dword [ebp - 0x60]
fmul dword [0x156a8]
fsincos
fxch st(2)
fmul dword [0x156a8]
fxch st(1)
fstp dword [ebp - 0x6c]
fxch st(1)
fstp dword [ebp - 0x90]
fld dword [ebp - 0x6c]
fxch st(1)
fsincos
fxch st(3)
fmul dword [0x156a8]
fxch st(3)
fstp dword [ebp - 0x98]
fstp dword [ebp - 0x94]
fxch st(1)
fsincos
fxch st(1)
fstp dword [ebp - 0x6c]
fld dword [ebp - 0x6c]
fxch st(1)
fstp dword [ebp - 0x6c]
fld dword [ebp - 0x6c]
fld dword [ebp - 0x94]
fld dword [ebp - 0x98]
fld dword [ebp - 0x90]
fxch st(2)
fmul st(3)
fxch st(1)
fmul st(4)
fxch st(3)
fmul dword [ebp - 0x98]
fld st(1)
fmul st(6)
fxch st(5)
fmul dword [ebp - 0x94]
fxch st(3)
fmul st(4)
fxch st(4)
fmul st(6)
fxch st(2)
fmul dword [ebp - 0x90]
fxch st(4)
fsubrp st(5)
fld dword [ebp - 0x90]
fmul st(3)
fxch st(3)
fmul st(6)
fxch st(5)
fstp dword [ebp - 0x28]
fld st(0)
fmulp st(6)
fmul dword [ebp - 0x90]
fxch st(3)
faddp st(1)
fxch st(4)
fsubrp st(1)
fxch st(3)
fstp dword [ebp - 0x24]
faddp st(1)
fxch st(1)
fstp dword [ebp - 0x20]
fstp dword [ebp - 0x1c]
fld dword [ebx + 8]
fld dword [ebx]
fxch st(1)
fmul st(2)
fxch st(1)
fmul st(2)
fxch st(2)
fmul dword [ebx + 4]
fxch st(1)
fst dword [ebp - 0x68]
fxch st(2)
fst dword [ebp - 0x64]
fxch st(1)
fst dword [ebp - 0x60]
fmul dword [0x156a8]
fsincos
fxch st(2)
fmul dword [0x156a8]
fxch st(2)
fstp dword [ebp - 0x6c]
fstp dword [ebp - 0x9c]
fld dword [ebp - 0x6c]
fxch st(1)
fsincos
fxch st(3)
fmul dword [0x156a8]
fxch st(3)
fstp dword [ebp - 0xa4]
fstp dword [ebp - 0xa0]
fxch st(1)
fsincos
fxch st(1)
fstp dword [ebp - 0x6c]
mov edx, 0xbf800000
lea ebx, [var_48h]
fld dword [ebp - 0x6c]
fxch st(1)
lea esi, [var_58h]
fstp dword [ebp - 0x6c]
fld dword [ebp - 0xa4]
fld dword [ebp - 0x6c]
fld dword [ebp - 0xa0]
fxch st(2)
fmul st(3)
fxch st(2)
fmul st(1)
fld dword [ebp - 0x9c]
fld st(3)
fmul st(6)
fxch st(5)
fmul dword [ebp - 0xa0]
fxch st(1)
fmul st(2)
fxch st(2)
fmul st(6)
fxch st(3)
fmul dword [ebp - 0xa4]
fxch st(5)
fsubrp st(2)
fld st(0)
fxch st(4)
fmul dword [ebp - 0x9c]
fxch st(4)
fmul st(6)
fxch st(2)
fstp dword [ebp - 0x38]
fld dword [ebp - 0x9c]
fxch st(3)
faddp st(4)
fmul dword [ebp - 0x9c]
fxch st(2)
fmul st(4)
fxch st(4)
fmulp st(5)
fxch st(2)
fstp dword [ebp - 0x34]
fxch st(2)
fsubrp st(1)
fxch st(2)
faddp st(1)
fxch st(1)
fstp dword [ebp - 0x30]
fstp dword [ebp - 0x2c]
mov dword [var_8h], ebx
mov dword [var_4h], edx
mov dword [esp], ecx
call _Z15QuaternionScaleRK10QuaternionfRS_
lea eax, [var_38h]
cmp eax, esi
je 0x142a3
mov dword [var_4h], ebx
lea eax, [var_88h]
lea ebx, [var_38h]
mov dword [var_8h], eax
mov dword [esp], ebx
call _Z15QuaternionAlignRK10QuaternionS1_RS_
fld dword [ebp - 0x34]
fld dword [ebp - 0x38]
fld dword [ebp - 0x7c]
fld dword [ebp - 0x30]
fld st(2)
fxch st(2)
fmul st(3)
fxch st(4)
fst dword [ebp - 0xa8]
fmul dword [ebp - 0x80]
fld dword [ebp - 0x2c]
fld dword [ebp - 0x88]
fxch st(4)
fchs
fxch st(5)
fmul dword [ebp - 0x84]
fxch st(6)
faddp st(2)
fld dword [ebp - 0x84]
fmul st(3)
fsubp st(2)
fld st(0)
fmul st(4)
faddp st(2)
fld dword [ebp - 0x80]
fmul st(5)
fxch st(5)
fmul st(4)
fxch st(2)
fstp dword [ebp - 0x58]
fld dword [ebp - 0xa8]
fmul dword [ebp - 0x7c]
faddp st(5)
fld st(2)
fmul st(4)
faddp st(5)
fld dword [ebp - 0x84]
fmul st(1)
faddp st(5)
fld dword [ebp - 0xa8]
fmul dword [ebp - 0x84]
fxch st(5)
fstp dword [ebp - 0x54]
fld dword [ebp - 0xa8]
fmulp st(4)
fxch st(1)
fsubrp st(4)
fxch st(4)
fsubrp st(2)
fld dword [ebp - 0x7c]
fmul st(1)
fxch st(1)
fmul dword [ebp - 0x80]
fxch st(2)
faddp st(1)
fld dword [ebp - 0x80]
fxch st(3)
fsubrp st(2)
fxch st(2)
fmul st(3)
fxch st(3)
fmul dword [ebp - 0x7c]
fxch st(2)
faddp st(3)
faddp st(1)
fxch st(1)
fstp dword [ebp - 0x50]
fstp dword [ebp - 0x4c]
mov dword [esp], esi
call _Z19QuaternionNormalizeR10Quaternion
fstp st(0)
fld dword [ebp - 0x4c]
fstp qword [esp]
call acos
fld dword [0x158b0]
fxch st(1)
fadd st(0)
fstp dword [ebp - 0x6c]
fld dword [ebp - 0x6c]
fmul dword [0x1585c]
fucomi st(1)
fstp st(1)
jbe 0x14274
fsub dword [0x1587c]
mov esi, dword [var_8ch]
fstp dword [esi]
mov eax, dword [var_58h]
mov dword [edi], eax
mov ebx, dword [var_54h]
mov dword [edi + 4], ebx
mov edx, dword [var_50h]
mov dword [edi + 8], edx
mov dword [esp], edi
call dword [0]
fstp st(0)
add esp, 0xac
pop ebx
pop esi
pop edi
pop ebp
ret
mov ecx, dword [var_8ch]
fstp dword [ecx]
mov eax, dword [var_58h]
mov dword [edi], eax
mov ebx, dword [var_54h]
mov dword [edi + 4], ebx
mov edx, dword [var_50h]
mov dword [edi + 8], edx
mov dword [esp], edi
call dword [0]
fstp st(0)
add esp, 0xac
pop ebx
pop esi
pop edi
pop ebp
ret
mov edx, dword [var_58h]
mov ecx, dword [var_54h]
mov eax, dword [var_50h]
mov dword [var_88h], edx
mov edx, dword [var_4ch]
mov dword [var_84h], ecx
lea ecx, [var_88h]
mov dword [var_80h], eax
mov dword [var_7ch], edx
mov dword [var_8h], esi
mov dword [var_4h], ebx
mov dword [esp], ecx
call _Z14QuaternionMultRK10QuaternionS1_RS_
jmp _Z19QuaternionNormalizeR10Quaternion
push ebp
mov ebp, esp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0xb8
mov dword [var_ch], ebx
mov ecx, dword [arg_10h]
lea ebx, [var_78h]
mov dword [var_8h], esi
lea esi, [var_48h]
mov dword [esp], ecx
mov dword [var_4h], edi
mov edi, dword [arg_8h]
mov dword [var_sp_4h], ebx
lea ebx, [var_a8h]
call _Z12MatrixInvertRK11matrix3x4_tRS_
mov dword [var_sp_4h], esi
mov edx, dword [arg_ch]
mov dword [esp], edx
call _Z11AngleMatrixRK6QAngleR11matrix3x4_t
mov dword [var_sp_8h], ebx
lea eax, [var_78h]
mov dword [esp], eax
mov dword [var_sp_4h], esi
call _Z16ConcatTransformsRK11matrix3x4_tS1_RS_
mov dword [var_sp_4h], edi
mov dword [esp], ebx
call _Z12MatrixAnglesRK11matrix3x4_tPf
mov eax, edi
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret 4
push ebp
mov ebp, esp
push esi
lea esi, [var_28h]
push ebx
sub esp, 0x58
mov ecx, dword [arg_10h]
mov ebx, dword [arg_ch]
mov edx, dword [arg_14h]
mov eax, dword [arg_8h]
fld dword [ecx]
fld dword [ebx]
fld dword [edx]
fld st(2)
fsub st(2)
fld dword [edx + 4]
movss xmm0, dword [edx + 8]
fld dword [eax]
fxch st(2)
fstp dword [ebp - 0x2c]
movss xmm1, dword [var_2ch]
fld dword [eax + 4]
fld dword [eax + 8]
fxch st(4)
ucomiss xmm1, dword [0x158bc]
fst dword [ebp - 0x28]
fxch st(2)
fst dword [ebp - 0x24]
movss dword [var_20h], xmm0
jp 0x11f45
je 0x11fa6
fxch st(3)
fucomi st(5)
jp 0x12000
jne 0x12000
fstp st(5)
fxch st(3)
fstp dword [ebp - 0x10]
fxch st(2)
fstp dword [ebp - 0x14]
fxch st(2)
fstp dword [ebp - 0x18]
fucomi st(2)
jp 0x11f6c
je 0x11fc0
fld dword [ebp - 0x2c]
fxch st(1)
fsub st(3)
fdiv st(1), st(0)
fmul st(1)
faddp st(3)
fld dword [ecx + 4]
fsub st(2), st(0)
fxch st(3)
fstp dword [esi]
fmul st(1), st(0)
fxch st(2)
faddp st(1)
fstp dword [esi + 4]
fld dword [ecx + 8]
movss dword [var_3ch], xmm0
fld dword [ebp - 0x3c]
fsub st(1)
fmulp st(2)
fadd st(1)
fxch st(1)
fstp dword [ebp - 0x3c]
fstp dword [esi + 8]
jmp 0x11fd0
fstp st(0)
fstp st(1)
fstp st(3)
fstp st(3)
fstp dword [ebp - 0x10]
fstp dword [ebp - 0x14]
fstp dword [ebp - 0x18]
jmp 0x11fd0
lea esi, [esi]
fstp st(0)
fstp st(0)
fstp st(0)
lea esi, [esi]
lea edi, [edi]
mov dword [var_8h], ecx
mov eax, dword [arg_1ch]
lea ecx, [var_18h]
mov dword [var_ch], esi
mov edx, dword [arg_18h]
mov dword [var_4h], ebx
mov dword [var_14h], eax
mov dword [var_10h], edx
mov dword [esp], ecx
call _Z16Parabolic_SplineRK6VectorS1_S1_S1_fRS_
add esp, 0x58
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
fld st(5)
fsub st(1)
fxch st(1)
fsub st(6)
fxch st(1)
fdivr dword [ebp - 0x2c]
fmul st(1), st(0)
fxch st(6)
faddp st(1)
fstp dword [ebp - 0x18]
fld dword [ebx + 4]
fsub st(1), st(0)
fxch st(1)
fmul st(5)
faddp st(1)
fstp dword [ebp - 0x14]
fld dword [ebx + 8]
fsub st(3), st(0)
fxch st(3)
fmulp st(4)
fxch st(2)
faddp st(3)
fxch st(2)
fstp dword [ebp - 0x10]
jmp 0x11f66
push ebp
xor eax, eax
mov ebp, esp
mov ecx, dword [arg_8h]
mov edx, dword [arg_ch]
fld dword [ecx + eax*4]
fld dword [edx + eax*4]
fxch st(1)
fucompi st(1)
fstp st(0)
jp 0xd8b8
jne 0xd8b8
inc eax
cmp eax, 2
jle 0xd89b
pop ebp
mov eax, 1
ret
pop ebp
xor eax, eax
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
mov ecx, dword [arg_8h]
fld dword [0x15854]
mov edx, dword [arg_ch]
fld dword [ecx + 4]
fmul st(1)
fsincos
fxch st(1)
fstp dword [ebp - 8]
fld dword [ebp - 8]
fxch st(1)
fstp dword [ebp - 8]
fld dword [ecx]
fld dword [ebp - 8]
fxch st(1)
fmul st(3)
fsincos
fxch st(1)
fstp dword [ebp - 8]
fxch st(3)
fmul dword [ecx + 8]
fxch st(3)
fstp dword [ebp - 0xc]
fld dword [ebp - 8]
fxch st(3)
fsincos
fxch st(1)
fstp dword [ebp - 8]
fld st(2)
lea ebx, [edx + 0x10]
fld dword [ebp - 8]
fxch st(2)
lea ecx, [edx + 0x20]
fstp dword [ebp - 8]
fld st(1)
fmul st(5)
fld dword [ebp - 0xc]
fld dword [ebp - 8]
fxch st(1)
fmul st(5)
fxch st(3)
fmul st(1)
fxch st(3)
fstp dword [edx]
fld dword [ebp - 0xc]
fmul st(6)
fstp dword [edx + 0x10]
fld st(1)
fmul st(5)
fxch st(7)
fst dword [ebp - 0x10]
fxch st(2)
mov eax, dword [var_10h]
fmul st(6)
fxch st(7)
fsubrp st(3)
xor eax, 0x80000000
fld st(3)
mov dword [edx + 0x20], eax
fmul st(6)
fxch st(3)
mov eax, 0
fstp dword [edx + 4]
fld st(0)
fmul st(5)
faddp st(7)
fld dword [ebp - 0xc]
fmul st(4)
fxch st(4)
fmul st(5)
fxch st(7)
fstp dword [ebx + 4]
fld st(0)
fmulp st(2)
fxch st(3)
fstp dword [ecx + 4]
fxch st(2)
fmul dword [ebp - 0xc]
fld st(2)
fmulp st(4)
fxch st(2)
fmulp st(4)
faddp st(2)
fxch st(2)
fsubrp st(3)
fstp dword [edx + 8]
fxch st(1)
fstp dword [ebx + 8]
fstp dword [ecx + 8]
mov dword [edx + 0xc], eax
mov dword [ebx + 0xc], eax
mov dword [ecx + 0xc], eax
add esp, 0xc
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
push esi
mov edx, dword [arg_8h]
mov ecx, dword [arg_10h]
push ebx
lea esi, [eax + 0x10]
lea ebx, [eax + 0x20]
fld dword [eax]
fld dword [eax + 0x10]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [eax + 0x20]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ecx]
fld dword [esi + 4]
fld dword [eax + 4]
fxch st(1)
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [ebx + 4]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ecx + 4]
fld dword [esi + 8]
fld dword [eax + 8]
fxch st(1)
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [ebx + 8]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ecx + 8]
pop ebx
pop esi
pop ebp
ret
push ebp
fld1
mov ebp, esp
push edi
fld st(0)
mov eax, 0
push esi
push ebx
sub esp, 0x7c
mov edx, dword [arg_28h]
fld dword [ebp + 0x10]
fxch st(1)
mov dword [var_88h], 0x3f000000
mov ebx, dword [arg_14h]
mov ecx, dword [arg_18h]
fsub dword [ebp + 8]
fxch st(1)
fadd st(2)
mov esi, dword [arg_1ch]
fld dword [ebp + 0xc]
fxch st(1)
mov edi, dword [arg_20h]
fmul st(2)
fld dword [ebp + 0x24]
fxch st(2)
fadd st(4)
fst dword [ebp - 0x68]
fmul st(1)
fstp dword [ebp - 0x5c]
fld dword [ebp + 0x10]
fsubr st(4)
fxch st(4)
fsub dword [ebp + 0xc]
fxch st(3)
mov dword [edx], eax
fmulp st(4)
mov dword [edx + 4], eax
fld st(1)
mov dword [edx + 8], eax
fmul st(2)
fxch st(1)
fmul st(3)
fxch st(4)
fst dword [ebp - 0x6c]
fmulp st(3)
fld dword [0x156a8]
fld dword [ebx]
fld dword [ebx + 4]
fxch st(2)
fmulp st(3)
fxch st(4)
fstp dword [ebp - 0x60]
fld dword [ebp - 0x6c]
fmul dword [ebp - 0x68]
fxch st(2)
fst dword [ebp - 0x70]
fld dword [ebx + 8]
fxch st(3)
fstp dword [ebp - 0x64]
fmul st(3)
fxch st(3)
fmul dword [ebp - 0x88]
fstp dword [ebp - 0x88]
fld dword [ebp - 0x5c]
fchs
fld st(0)
fmul st(4)
fxch st(1)
fstp dword [ebp - 0x74]
fld dword [ecx]
fxch st(5)
fmul st(1)
fxch st(2)
fmul st(1)
fxch st(3)
fmulp st(1)
fld dword [ebp - 0x5c]
fadd dword [0x15868]
fsub dword [ebp - 0x60]
fsub dword [ebp - 0x64]
fmul st(4)
fmul st(5), st(0)
fxch st(5)
fstp dword [ebp - 0x38]
fld dword [ecx + 4]
fmul st(5)
fxch st(5)
fmul dword [ecx + 8]
fxch st(5)
fstp dword [ebp - 0x34]
fld dword [esi]
fxch st(5)
fstp dword [ebp - 0x30]
fld dword [ebp - 0x60]
fadd dword [0x158c0]
fadd dword [var_64h]
fsub st(6)
fmul st(4)
fxch st(4)
fmul st(6)
fxch st(5)
fmul st(4)
fstp dword [ebp - 0x48]
fld dword [esi + 4]
fmul st(4)
fxch st(4)
fmul dword [esi + 8]
fxch st(4)
fstp dword [ebp - 0x44]
fxch st(3)
fstp dword [ebp - 0x40]
fld dword [edi]
fmul st(4)
fstp dword [ebp - 0x58]
fld dword [edi + 4]
fxch st(1)
fadd dword [edx]
fxch st(1)
fmul st(4)
fxch st(4)
fmul dword [edi + 8]
fxch st(1)
fst dword [edx]
fxch st(4)
fstp dword [ebp - 0x54]
fxch st(1)
fadd dword [edx + 4]
fld dword [ebp - 0x38]
fxch st(2)
fstp dword [ebp - 0x50]
fxch st(2)
fadd dword [edx + 8]
fxch st(1)
faddp st(3)
fxch st(1)
fst dword [edx + 4]
fld dword [ebp - 0x34]
fxch st(2)
fst dword [edx + 8]
fxch st(2)
faddp st(1)
fld dword [ebp - 0x30]
fxch st(3)
fst dword [edx]
fadd dword [var_48h]
fxch st(3)
faddp st(2)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(1)
fst dword [edx + 8]
fxch st(2)
fst dword [edx]
fxch st(1)
fst dword [edx + 4]
fxch st(1)
fadd dword [var_58h]
fxch st(2)
fadd dword [var_40h]
fxch st(1)
fadd dword [var_54h]
fxch st(2)
fstp dword [edx]
fld dword [ebp - 0x70]
fxch st(1)
fst dword [edx + 8]
fadd dword [var_50h]
fxch st(1)
fadd st(0)
fxch st(2)
fstp dword [edx + 4]
fxch st(1)
fmul dword [ebp - 0x5c]
fxch st(1)
fstp dword [edx + 8]
fld dword [ebx]
fld dword [ebx + 4]
fld dword [ebp - 0x60]
fxch st(2)
fmul st(3)
fxch st(1)
fmul st(3)
fxch st(3)
fmul dword [ebx + 8]
fxch st(2)
fadd st(0)
fxch st(3)
fstp dword [ebp - 0x78]
fld dword [ecx]
fxch st(2)
fstp dword [ebp - 0x7c]
fld dword [ebp - 0x5c]
fadd st(0)
fsubr dword [0x158c4]
fadd st(3)
fxch st(3)
fsubr dword [0x158c8]
fxch st(3)
fadd dword [var_64h]
fxch st(3)
fsub dword [ebp - 0x64]
fxch st(3)
fmul dword [ebp - 0x70]
fxch st(3)
fadd st(4)
fxch st(4)
fchs
fxch st(4)
fmul dword [ebp - 0x70]
fxch st(2)
fmul st(3)
fstp dword [ebp - 0x38]
fld dword [ecx + 4]
fmul st(3)
fxch st(3)
fmul dword [ecx + 8]
fxch st(3)
fstp dword [ebp - 0x34]
fxch st(2)
fstp dword [ebp - 0x30]
fld dword [esi]
fmul st(1)
fstp dword [ebp - 0x48]
fld dword [esi + 4]
fmul st(1)
fxch st(1)
fmul dword [esi + 8]
fxch st(1)
fstp dword [ebp - 0x44]
fstp dword [ebp - 0x40]
fxch st(1)
fmul dword [ebp - 0x70]
fld dword [edi]
fld dword [ebp - 0x7c]
fxch st(1)
fmul st(2)
fstp dword [ebp - 0x58]
fld dword [edi + 4]
fxch st(3)
fadd dword [edx]
fxch st(3)
fmul st(2)
fxch st(2)
fmul dword [edi + 8]
fxch st(3)
fst dword [edx]
fxch st(2)
fstp dword [ebp - 0x54]
fld dword [ebp - 0x78]
fadd dword [edx + 4]
fxch st(3)
fstp dword [ebp - 0x50]
fadd dword [edx + 8]
fxch st(2)
fst dword [edx + 4]
fstp dword [ebp - 0x78]
fld dword [ebp - 0x38]
fxch st(2)
fst dword [edx + 8]
fstp dword [ebp - 0x7c]
faddp st(1)
fld dword [ebp - 0x78]
fadd dword [var_34h]
fld dword [ebp - 0x7c]
fxch st(2)
fst dword [edx]
fxch st(2)
fadd dword [var_30h]
fxch st(2)
fadd dword [var_48h]
fxch st(1)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(2)
fst dword [edx + 8]
fxch st(1)
fst dword [edx]
fxch st(1)
fadd dword [var_40h]
fxch st(2)
fst dword [edx + 4]
fxch st(1)
fadd dword [var_58h]
fxch st(1)
fadd dword [var_54h]
fxch st(2)
fst dword [edx + 8]
fxch st(1)
fstp dword [edx]
fxch st(1)
fstp dword [edx + 4]
fld dword [ebp - 0x5c]
fxch st(1)
fadd dword [var_50h]
fxch st(1)
fsub dword [ebp - 0x60]
fld dword [ebp - 0x74]
fmul dword [ebp - 0x88]
fxch st(1)
fmul dword [ebp - 0x88]
fxch st(2)
fstp dword [edx + 8]
fld dword [ebx]
fld dword [ebx + 4]
fld dword [ebx + 8]
fxch st(2)
fmul st(3)
fxch st(1)
fmul st(3)
fxch st(2)
fmulp st(3)
fld st(3)
fmul dword [ecx]
fstp dword [ebp - 0x38]
fld st(3)
fmul dword [ecx + 4]
fxch st(4)
fmul dword [ecx + 8]
fxch st(4)
fstp dword [ebp - 0x34]
fld dword [ebp - 0x88]
fmul dword [ebp - 0x60]
fxch st(4)
fstp dword [ebp - 0x30]
fxch st(3)
fst dword [ebp - 0x84]
fmul dword [esi]
fld dword [ebp - 0x84]
fmul dword [esi + 8]
fxch st(1)
fstp dword [ebp - 0x48]
fld dword [ebp - 0x84]
fmul dword [esi + 4]
fxch st(4)
fadd dword [edx]
fxch st(1)
fstp dword [ebp - 0x40]
fxch st(2)
fadd dword [edx + 8]
fxch st(2)
fst dword [edx]
fxch st(3)
fstp dword [ebp - 0x44]
fld dword [ebp - 0x38]
fxch st(1)
fadd dword [edx + 4]
fxch st(2)
fst dword [edx + 8]
fxch st(1)
faddp st(3)
fxch st(1)
fst dword [edx + 4]
fxch st(2)
fst dword [edx]
fld dword [ebp - 0x34]
fxch st(1)
fadd dword [var_48h]
fxch st(1)
faddp st(3)
fld dword [ebp - 0x30]
fxch st(1)
fst dword [edx]
fxch st(1)
faddp st(2)
fxch st(2)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(2)
fadd dword [ecx]
fxch st(1)
fst dword [edx + 8]
fadd dword [var_40h]
fxch st(2)
fst dword [edx + 4]
fadd dword [ecx + 4]
fxch st(1)
fstp dword [edx]
fxch st(1)
fst dword [edx + 8]
fadd dword [ecx + 8]
fxch st(1)
fstp dword [edx + 4]
fstp dword [edx + 8]
add esp, 0x7c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x5c
mov ebx, dword [arg_ch]
fld dword [ebp + 0x18]
mov dword [var_20h], 0
mov ecx, dword [0]
mov dword [var_24h], 0
shl ebx, 4
mov eax, dword [arg_14h]
fld dword [ebp + 0x1c]
add ebx, 0x10
mov dword [var_28h], 0
sub esp, ebx
mov dword [var_38h], ecx
lea esi, [var_fh]
sub esp, ebx
mov dword [var_3ch], eax
lea ebx, [var_fh]
xor ecx, ecx
and esi, 0xfffffff0
and ebx, 0xfffffff0
mov edx, dword [4]
cmp ecx, dword [arg_ch]
mov dword [var_40h], esi
mov eax, dword [8]
mov edi, dword [arg_10h]
mov dword [var_34h], edx
mov dword [var_30h], eax
jge 0x14764
fld st(0)
mov edx, dword [arg_8h]
fchs
jmp 0x14724
fxch st(1)
xor eax, eax
fucomi st(1)
fstp st(1)
setbe al
inc eax
add edx, 0xc
mov dword [ebx + ecx*4], eax
mov esi, dword [ebx + ecx*4]
inc ecx
inc dword [ebp + esi*4 - 0x28]
cmp ecx, dword [arg_ch]
jge 0x14762
mov eax, dword [var_3ch]
mov esi, dword [var_40h]
fld dword [eax]
fld dword [eax + 4]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [eax + 8]
fmul dword [edx + 8]
faddp st(1)
fsub st(3)
fucomi st(2)
fst dword [esi + ecx*4]
jbe 0x14705
fstp st(0)
mov dword [ebx + ecx*4], 0
add edx, 0xc
mov esi, dword [ebx + ecx*4]
inc ecx
inc dword [ebp + esi*4 - 0x28]
cmp ecx, dword [arg_ch]
jl 0x14724
fstp st(0)
fstp st(0)
mov edx, dword [ebx]
mov esi, dword [var_40h]
mov dword [ebx + ecx*4], edx
mov eax, dword [esi]
mov edx, dword [var_28h]
mov dword [esi + ecx*4], eax
xor eax, eax
test edx, edx
je 0x147ba
mov eax, dword [var_24h]
test eax, eax
jne 0x147c4
fstp st(0)
cmp eax, dword [arg_ch]
jge 0x147af
mov ecx, dword [arg_ch]
xor edx, edx
nop
mov ebx, dword [arg_8h]
mov esi, dword [edx + ebx]
mov eax, dword [edx + ebx + 4]
mov dword [edx + edi], esi
mov esi, dword [edx + ebx + 8]
mov dword [edx + edi + 4], eax
mov dword [edx + edi + 8], esi
add edx, 0xc
dec ecx
jne 0x14790
mov eax, dword [arg_ch]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
fstp st(0)
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov dword [var_44h], 0
mov ecx, dword [arg_ch]
xor esi, esi
cmp esi, ecx
jge 0x148e0
movss xmm0, dword [0x15860]
fld st(0)
mov ecx, edi
fld dword [0x15880]
fxch st(1)
fchs
mov esi, esi
mov edx, dword [arg_8h]
lea eax, [esi + esi*2]
lea edi, [edx + eax*4]
mov edx, dword [ebx + esi*4]
cmp edx, 2
je 0x148ed
test edx, edx
jne 0x1481f
inc dword [var_44h]
mov eax, dword [edi]
mov dword [ecx], eax
mov eax, dword [edi + 4]
mov dword [ecx + 4], eax
mov eax, dword [edi + 8]
mov dword [ecx + 8], eax
add ecx, 0xc
mov eax, dword [ebx + esi*4 + 4]
mov dword [var_60h], eax
lea eax, [esi + 1]
cmp dword [var_60h], 2
mov dword [var_4ch], eax
je 0x148d0
cmp dword [var_60h], edx
je 0x148d0
cdq
fld st(1)
idiv dword [arg_ch]
mov eax, dword [arg_8h]
lea edx, [edx + edx*2]
lea edx, [eax + edx*4]
xor eax, eax
mov dword [var_48h], edx
mov edx, dword [var_40h]
fld dword [edx + esi*4]
fld st(0)
fsub dword [edx + esi*4 + 4]
mov edx, 2
movss dword [var_5ch], xmm0
fld dword [ebp - 0x5c]
fxch st(2)
fdivrp st(1)
mov esi, dword [var_3ch]
fld dword [eax + esi]
fucomi st(2)
jne 0x14896
jp 0x14896
fstp st(0)
fxch st(5)
fst dword [eax + ebp - 0x38]
add eax, 4
dec edx
js 0x148ac
fxch st(5)
mov esi, dword [var_3ch]
fld dword [eax + esi]
fucomi st(2)
je 0x1487a
fucompi st(3)
jne 0x14909
jp 0x14909
fxch st(3)
fst dword [eax + ebp - 0x38]
fxch st(3)
fxch st(5)
add eax, 4
dec edx
jns 0x1488a
fstp st(1)
fstp st(1)
fstp st(3)
inc dword [var_44h]
mov edx, dword [var_38h]
mov eax, dword [var_34h]
mov edi, dword [var_30h]
mov dword [ecx], edx
mov dword [ecx + 4], eax
mov dword [ecx + 8], edi
add ecx, 0xc
lea esi, [esi]
mov esi, dword [var_4ch]
cmp esi, dword [arg_ch]
jl 0x147f0
fstp st(0)
fstp st(0)
fstp st(0)
mov eax, dword [var_44h]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
inc dword [var_44h]
inc esi
mov edx, dword [edi]
mov dword [var_4ch], esi
mov eax, dword [edi + 4]
mov dword [ecx], edx
mov edx, dword [edi + 8]
mov dword [ecx + 4], eax
mov dword [ecx + 8], edx
add ecx, 0xc
jmp 0x148d0
fld dword [eax + edi]
mov esi, dword [var_48h]
fld dword [eax + esi]
fsub st(1)
fmul st(2)
faddp st(1)
fstp dword [eax + ebp - 0x38]
fxch st(5)
jmp 0x148a6
push ebp
mov ebp, esp
sub esp, 8
mov dword [var_4h], 0
mov dword [esp], str.VEngineCvar003
call dword [arg_8h]
test eax, eax
mov dword [0x1722c], eax
je 0x89f0
mov dword [arg_8h], 0
leave
jmp _ZN17ConCommandBaseMgr11OneTimeInitEP23IConCommandBaseAccessor
cld
invalid
invalid
invalid
push ebp
fldz
mov ebp, esp
push esi
push ebx
sub esp, 0x10
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
mov esi, dword [arg_14h]
fld dword [edx]
mov ebx, dword [arg_18h]
fld dword [eax]
fld dword [edx + 4]
fld dword [eax + 4]
fxch st(2)
fsub st(3)
fxch st(2)
fsub st(1)
fld st(2)
fmul st(3)
fld st(1)
fxch st(4)
fst dword [ebp - 0x18]
fxch st(4)
fmul st(2)
fxch st(2)
fst dword [ebp - 0x14]
fxch st(1)
faddp st(2)
fld dword [0x158e0]
fucompi st(2)
ja 0x13572
fstp st(5)
fld st(2)
fld st(5)
fld st(6)
fxch st(1)
fmul dword [ecx + 4]
fxch st(1)
fmul st(4)
fxch st(2)
fmul dword [ecx]
faddp st(1)
fld st(4)
fmul st(6)
faddp st(2)
fsubrp st(1)
fdivrp st(1)
fxch st(4)
jmp 0x13574
fstp st(1)
fld1
fxch st(5)
fucomi st(5)
ja 0x13588
fstp st(5)
fldz
fucomi st(5)
fcmovbe st(0), st(5)
fstp st(5)
jmp 0x1358a
fstp st(0)
test ebx, ebx
je 0x135a0
fstp st(1)
fstp st(2)
fxch st(2)
fst dword [ebx]
fld dword [edx]
fld dword [edx + 4]
jmp 0x135b0
lea esi, [esi]
fxch st(3)
fxch st(1)
fxch st(2)
fxch st(4)
fxch st(2)
lea esi, [esi]
fxch st(4)
fmul st(2)
fxch st(3)
fmulp st(2)
faddp st(2)
faddp st(2)
fstp dword [esi]
fstp dword [esi + 4]
add esp, 0x10
pop ebx
pop esi
pop ebp
ret
push ebp
xor eax, eax
mov ebp, esp
push esi
mov ecx, dword [arg_10h]
mov esi, dword [arg_ch]
push ebx
mov edx, dword [arg_14h]
mov ebx, dword [arg_8h]
lea esi, [esi]
lea edi, [edi]
fld dword [ecx + eax*4]
fld dword [ebx + eax*4]
fucomi st(1)
ja 0x12a55
fstp st(0)
fld dword [esi + eax*4]
fxch st(1)
fucomi st(1)
fcmovnbe st(0), st(1)
fstp st(1)
fstp dword [edx]
inc eax
add edx, 4
cmp eax, 2
jle 0x12a40
pop ebx
pop esi
pop ebp
ret
push ebp
mov eax, 0
mov ebp, esp
push ebx
sub esp, 0x44
mov edx, dword [arg_1ch]
fld dword [ebp + 0x18]
mov ecx, dword [arg_ch]
mov ebx, dword [arg_10h]
mov dword [edx], eax
fld st(0)
fmul st(1)
mov dword [edx + 4], eax
mov dword [edx + 8], eax
fld dword [ecx]
fld dword [ecx + 4]
fxch st(3)
fmul st(2)
fld dword [ecx + 8]
fld st(1)
fadd st(2)
fxch st(2)
fmul dword [0x158cc]
fxch st(3)
fmul st(2)
fxch st(5)
fmul st(2)
fxch st(1)
fmulp st(2)
fld dword [ebx]
fmul st(3)
fstp dword [ebp - 0x38]
fld dword [ebx + 4]
fxch st(5)
fadd dword [edx]
fxch st(5)
fmul st(3)
fxch st(3)
fmul dword [ebx + 8]
fxch st(5)
fst dword [edx]
fadd dword [var_38h]
fxch st(3)
fstp dword [ebp - 0x34]
fld st(3)
fxch st(1)
fadd dword [edx + 4]
fxch st(5)
fstp dword [ebp - 0x30]
fxch st(1)
fadd dword [edx + 8]
fxch st(1)
fmul dword [0x158b4]
fxch st(4)
fst dword [edx + 4]
fadd dword [var_34h]
fxch st(1)
fst dword [edx + 8]
fadd dword [var_30h]
fxch st(2)
fstp dword [edx]
fxch st(2)
fmul dword [0x15888]
fxch st(2)
fstp dword [edx + 4]
fstp dword [edx + 8]
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fxch st(2)
fmul st(4)
fxch st(1)
fmul st(4)
fxch st(2)
fmulp st(4)
fld dword [ebx]
fmul st(3)
fstp dword [ebp - 0x38]
fld dword [ebx + 4]
fxch st(1)
fadd dword [edx]
fxch st(1)
fmul st(3)
fxch st(3)
fmul dword [ebx + 8]
fxch st(1)
fst dword [edx]
fxch st(3)
fstp dword [ebp - 0x34]
fxch st(1)
fadd dword [edx + 4]
fld dword [ebp - 0x38]
fxch st(2)
fstp dword [ebp - 0x30]
fxch st(3)
fadd dword [edx + 8]
fxch st(1)
faddp st(2)
fxch st(2)
fst dword [edx + 4]
fld dword [ebp - 0x34]
fxch st(3)
fst dword [edx + 8]
fxch st(3)
faddp st(1)
fld dword [ebp - 0x30]
fxch st(2)
fst dword [edx]
fadd dword [ecx]
fxch st(2)
faddp st(3)
fst dword [edx + 4]
fadd dword [ecx + 4]
fxch st(2)
fst dword [edx + 8]
fadd dword [ecx + 8]
fxch st(1)
fstp dword [edx]
fxch st(1)
fstp dword [edx + 4]
fstp dword [edx + 8]
add esp, 0x44
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x6c
mov esi, dword [arg_8h]
mov ebx, dword [arg_10h]
mov edi, dword [arg_14h]
mov dword [var_3ch], esi
mov esi, dword [arg_ch]
mov dword [var_40h], edi
fld dword [esi]
fld dword [esi + 4]
fxch st(1)
fsubr dword [ebx]
fxch st(1)
fsubr dword [ebx + 4]
fld dword [esi + 8]
fsubr dword [ebx + 8]
fxch st(2)
fst dword [ebp - 0x28]
fmul st(0)
fxch st(1)
fst dword [ebp - 0x24]
fmul st(0)
fxch st(2)
fst dword [ebp - 0x20]
fmul st(0)
fxch st(1)
faddp st(2)
faddp st(1)
fstp dword [esp]
call dword [0]
mov ecx, dword [var_3ch]
lea eax, [var_28h]
mov edx, dword [var_40h]
fstp dword [ebp - 0x4c]
mov edi, dword [var_4ch]
fld dword [esi]
fsubr dword [ecx]
fstp dword [ebp - 0x28]
fld dword [esi + 4]
fsubr dword [ecx + 4]
fstp dword [ebp - 0x24]
fld dword [esi + 8]
fsubr dword [ecx + 8]
fstp dword [ebp - 0x20]
fld dword [ebx]
fsubr dword [edx]
fstp dword [ebp - 0x38]
fld dword [ebx + 4]
fsubr dword [edx + 4]
fstp dword [ebp - 0x34]
fld dword [ebx + 8]
fsubr dword [edx + 8]
mov dword [esp], eax
fstp dword [ebp - 0x30]
call dword [0]
fstp st(0)
lea ecx, [var_38h]
mov dword [esp], ecx
call dword [0]
fstp st(0)
mov dword [var_4h], edi
lea edx, [var_28h]
mov dword [var_ch], edx
mov dword [var_8h], edx
mov dword [esp], esi
call _Z8VectorMARK6VectorfS1_RS_
mov dword [var_4h], edi
lea eax, [var_38h]
mov dword [var_ch], eax
mov dword [var_8h], eax
mov dword [esp], ebx
call _Z8VectorMARK6VectorfS1_RS_
mov dword [var_8h], ebx
mov edi, dword [arg_1ch]
lea edx, [var_38h]
mov dword [var_4h], esi
mov ecx, dword [arg_18h]
lea eax, [var_28h]
mov dword [var_ch], edx
mov dword [var_14h], edi
mov dword [var_10h], ecx
mov dword [esp], eax
call _Z18Catmull_Rom_SplineRK6VectorS1_S1_S1_fRS_
add esp, 0x6c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x18
mov dword [var_ch], ebx
mov edx, dword [arg_8h]
mov ebx, dword [arg_10h]
mov dword [var_8h], esi
mov esi, dword [arg_14h]
mov dword [var_4h], edi
mov edi, dword [arg_18h]
mov dword [var_sp_8h], esi
mov dword [var_sp_4h], ebx
mov dword [esp], edx
call _Z15VectorTransformPKfRK11matrix3x4_tPf
fld dword [esi + 4]
lea eax, [ebx + 0x10]
lea ecx, [ebx + 0x20]
fld dword [ebx]
fld st(1)
fmul dword [ebx + 4]
fxch st(1)
fmul dword [esi]
fld dword [esi + 8]
fxch st(1)
faddp st(2)
fld st(0)
fmul dword [ebx + 8]
faddp st(2)
fld st(1)
fst dword [esi]
fxch st(3)
fmul dword [eax + 4]
fxch st(2)
fmul dword [ebx + 0x10]
faddp st(2)
fld st(0)
fmul dword [eax + 8]
faddp st(2)
fld st(2)
fxch st(2)
fst dword [esi + 4]
fxch st(2)
mov edx, dword [esi + 4]
fmul dword [ebx + 0x20]
fxch st(2)
fmul dword [ecx + 4]
fxch st(1)
fmul dword [ecx + 8]
fxch st(2)
faddp st(1)
faddp st(1)
fstp dword [esi + 8]
mov eax, dword [esi + 8]
fstp dword [edi]
mov dword [edi + 4], edx
mov dword [edi + 8], eax
mov dword [esp], edi
call dword [0]
fstp st(0)
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov eax, 0x47c34f80
mov ebp, esp
mov edx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov dword [edx + 8], eax
mov dword [edx + 4], eax
mov dword [edx], eax
mov eax, 0xc7c34f80
mov dword [ecx + 8], eax
mov dword [ecx + 4], eax
mov dword [ecx], eax
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
fld dword [eax]
fld dword [eax + 4]
fxch st(1)
fmul st(0)
fxch st(1)
fmul st(0)
faddp st(1)
fld dword [eax + 8]
fmul st(0)
faddp st(1)
fld1
fucomi st(1)
ja 0xc986
fdivrp st(1)
jmp 0xc988
fstp st(1)
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x2c
movzx eax, word [arg_ch]
cmp byte [0], 0
mov esi, dword [arg_8h]
movzx edx, ax
mov word [var_22h], ax
mov word [var_20h], ax
mov dword [var_28h], edx
mov word [var_16h], dx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
movzx ecx, word [var_16h]
mov dword [var_1ch], ecx
shl ecx, 4
mov eax, ecx
add eax, dword [esi + 4]
mov dword [var_14h], ecx
movzx edi, word [eax]
cmp byte [0], 0
mov word [var_1eh], di
mov ebx, edi
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
mov dword [var_10h], 0xffff0
je 0xaca0
movzx eax, bx
shl eax, 4
mov dword [var_10h], eax
add eax, dword [esi + 4]
mov edx, dword [esi + 4]
movzx eax, word [eax + 2]
mov ecx, dword [var_14h]
mov word [edx + ecx], ax
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xaccc
mov eax, dword [var_10h]
add eax, dword [esi + 4]
cmp word [eax + 2], 0xffff
je 0xad04
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
add bx, 1
mov eax, 0
je 0xacf1
mov eax, dword [var_10h]
add eax, dword [esi + 4]
movzx eax, word [eax + 2]
mov edx, dword [esi + 4]
movzx ecx, word [var_20h]
shl eax, 4
mov word [eax + edx + 4], cx
cmp di, 0xffff
je 0xad38
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
mov eax, 0
je 0xad29
mov eax, dword [var_14h]
add eax, dword [esi + 4]
mov edx, dword [esi + 4]
movzx eax, word [eax + 4]
mov ecx, dword [var_10h]
mov word [ecx + edx + 4], ax
movzx eax, word [esi + 0x10]
cmp dword [var_28h], eax
je 0xadd0
cmp byte [0], 0
movzx ebx, word [var_1ch]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xad6a
movzx eax, bx
shl eax, 4
add eax, dword [esi + 4]
cmp byte [0], 0
movzx ebx, word [eax + 4]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xad8f
movzx eax, bx
shl eax, 4
add eax, dword [esi + 4]
movzx edx, word [var_20h]
cmp word [eax + 2], dx
je 0xae00
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
mov eax, 0
je 0xadb8
mov eax, dword [var_14h]
add eax, dword [esi + 4]
movzx eax, word [eax + 4]
mov edx, dword [esi + 4]
movzx ecx, word [var_1eh]
shl eax, 4
mov word [eax + edx], cx
jmp 0xadd7
lea esi, [esi]
mov edx, dword [esi + 4]
mov word [esi + 0x10], di
movzx ecx, word [var_20h]
mov eax, dword [var_10h]
cmp word [var_22h], 0xffff
mov word [edx + eax + 2], cx
je 0xadf6
movzx ecx, word [var_1eh]
mov eax, dword [var_14h]
mov word [edx + eax + 4], cx
add esp, 0x2c
pop ebx
pop esi
pop edi
pop ebp
ret
nop
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
mov eax, 0
je 0xae1f
mov eax, dword [var_14h]
add eax, dword [esi + 4]
movzx eax, word [eax + 4]
mov edx, dword [esi + 4]
movzx ecx, word [var_1eh]
shl eax, 4
mov word [eax + edx + 2], cx
jmp 0xadd7
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xad17
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xad17
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xace0
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xacbb
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xac82
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xac4f
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xac4f
mov eax, 0
mov dword [var_1ch], 0xffff
mov dword [var_14h], 0xffff0
jmp 0xac6c
lea esi, [esi]
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xad56
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xad7b
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xae0d
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xae0d
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xada6
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xada6
push ebp
mov ebp, esp
push ebx
sub esp, 0x14
xor ebx, ebx
lea esi, [esi]
push ebx
fild dword [esp]
add esp, 4
fadd st(0)
fmul qword [0x158f8]
fmul qword [0x15900]
fstp qword [esp]
call sin
fstp dword [ebx*4]
inc ebx
cmp ebx, 0xff
jle 0xccc0
add esp, 0x14
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
lea edx, [var_38h]
push esi
push ebx
sub esp, 0x38
mov eax, dword [arg_ch]
mov dword [var_4h], edx
mov ebx, dword [arg_8h]
mov esi, dword [arg_10h]
mov dword [esp], eax
call _Z11AngleMatrixRK6QAngleR11matrix3x4_t
fld dword [ebp - 0x38]
fld dword [ebp - 0x34]
fmul dword [ebx + 4]
fxch st(1)
fmul dword [ebx]
faddp st(1)
fld dword [ebp - 0x30]
fmul dword [ebx + 8]
faddp st(1)
fstp dword [esi]
fld dword [ebp - 0x28]
fld dword [ebp - 0x24]
fmul dword [ebx + 4]
fxch st(1)
fmul dword [ebx]
faddp st(1)
fld dword [ebp - 0x20]
fmul dword [ebx + 8]
faddp st(1)
fstp dword [esi + 4]
fld dword [ebp - 0x18]
fld dword [ebp - 0x14]
fmul dword [ebx + 4]
fxch st(1)
fmul dword [ebx]
faddp st(1)
fld dword [ebp - 0x10]
fmul dword [ebx + 8]
faddp st(1)
fstp dword [esi + 8]
add esp, 0x38
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov dword [eax], 8
mov dword [eax + 4], 8
pop ebp
jmp _ZdlPv
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x2c
mov eax, dword [arg_8h]
mov eax, dword [eax + 4]
mov dword [var_24h], eax
mov dword [var_14h], eax
movzx eax, word [0x10]
cmp ax, 0xffff
je 0x9ebc
lea edi, [var_14h]
movzx esi, ax
mov ebx, esi
shl ebx, 4
mov eax, ebx
add eax, dword [4]
mov dword [esp], edi
add eax, 8
mov dword [var_4h], eax
call dword [0]
test al, al
je a2cIPs
cmp byte [0], 0
mov ebx, esi
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0x9eb3
movzx eax, bx
shl eax, 4
add eax, dword [4]
movzx eax, word [eax]
cmp ax, 0xffff
jne 0x9e65
mov esi, 0xffffffff
mov ebx, 0xffff
cmp ebx, dword [8]
jge 0x9f29
cmp byte [0], 0
mov edi, ebx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp di, 0xffff
mov eax, 0
je 0x9ef4
movzx eax, di
shl eax, 4
add eax, dword [4]
cmp word [eax], si
je 0x9f29
mov eax, dword [4]
shl ebx, 4
mov edx, dword [0]
mov eax, dword [ebx + eax + 0xc]
mov edx, dword [edx + 0xc]
lea eax, [eax + eax*2]
shl eax, 2
add eax, dword [0]
add dword [eax + 4], 1
mov dword [eax + 8], edx
add esp, 0x2c
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, dword [0xc]
cmp esi, 0x7ff
jg 0x9f21
mov eax, dword [0]
lea edi, [esi + 1]
fld dword [eax + 0xc]
mov eax, dword [4]
fstp dword [ebp - 0x20]
cmp edi, eax
jg a2cList
mov eax, dword [0xc]
mov ecx, dword [0]
add eax, 1
mov dword [0xc], eax
sub eax, esi
lea edx, [eax - 1]
test edx, edx
mov dword [0x10], ecx
jg 0xa0f6
lea eax, [esi + esi*2]
lea ebx, [eax*4]
mov eax, ebx
add eax, dword [0]
je 0x9f9e
mov edx, dword [var_24h]
fld dword [ebp - 0x20]
fstp dword [eax + 8]
mov dword [eax + 4], 1
mov dword [eax], edx
mov eax, dword [var_24h]
mov dword [var_10h], esi
mov dword [var_14h], eax
lea eax, [var_14h]
mov dword [var_4h], eax
mov dword [esp], 0
call _ZN10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE6InsertERKS2_
add esp, 0x2c
pop ebx
pop esi
pop edi
pop ebp
ret
add ebx, dword [4]
mov dword [var_4h], edi
lea eax, [ebx + 8]
mov dword [esp], eax
call dword [0]
test al, al
je 0xa0ee
cmp byte [0], 0
mov ebx, esi
je 0xa055
cmp bx, 0xffff
mov eax, 0
je 0xa002
movzx eax, bx
shl eax, 4
add eax, dword [4]
movzx eax, word [eax + 2]
cmp ax, 0xffff
jne 0x9e65
jmp 0x9ebc
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0x9e9c
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0x9feb
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0x9feb
mov ecx, dword [8]
cmp ecx, 0
jl a2cList
je 0xa164
mov edx, esi
mov eax, esi
sar edx, 0x1f
idiv ecx
add eax, 1
imul eax, ecx
mov ebx, dword [0]
mov dword [4], eax
test ebx, ebx
je g_pMemAlloc
mov edx, dword [0]
lea eax, [eax + eax*2]
shl eax, 2
mov ecx, dword [edx]
mov dword [var_8h], eax
mov dword [var_4h], ebx
mov dword [esp], edx
call dword [ecx + 4]
mov dword [0], eax
jmp a2cList
movzx ebx, si
jmp a2cIPs
lea eax, [esi + esi*2]
lea ebx, [eax*4]
lea eax, [edx + edx*2]
shl eax, 2
mov dword [var_8h], eax
lea eax, [ecx + ebx]
mov dword [var_4h], eax
lea eax, [edi + edi*2]
lea eax, [ecx + eax*4]
mov dword [esp], eax
call memmove
jmp a2cList
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0x9edd
test eax, eax
je 0xa181
add eax, eax
cmp edi, eax
lea esi, [esi]
jle a2cList
add eax, eax
cmp edi, eax
jg 0xa168
jmp a2cList
cmp edi, 3
mov al, 3
jg 0xa168
jmp a2cList
mov edx, dword [0]
lea eax, [eax + eax*2]
shl eax, 2
mov ecx, dword [edx]
mov dword [var_4h], eax
mov dword [esp], edx
call dword [ecx]
mov dword [0], eax
jmp a2cList
push ebp
mov eax, 0
mov ebp, esp
sub esp, 4
mov dword [var_4h], eax
movss xmm2, dword [arg_8h]
sqrtss xmm1, xmm2
movss dword [var_4h], xmm1
fld dword [ebp - 4]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
mov dword [var_8h], ebx
mov eax, dword [arg_8h]
mov ebx, dword [arg_10h]
mov dword [var_4h], esi
mov esi, dword [arg_ch]
mov dword [var_sp_4h], ebx
mov dword [esp], eax
call _Z11AngleMatrixRK6QAngleR11matrix3x4_t
mov ecx, dword [esi]
mov dword [ebx + 0xc], ecx
mov edx, dword [esi + 4]
mov dword [ebx + 0x1c], edx
mov eax, dword [esi + 8]
mov dword [ebx + 0x2c], eax
mov ebx, dword [var_8h]
mov esi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
fldz
mov ebp, esp
push esi
push ebx
sub esp, 0x50
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
fld dword [ebx]
fucomi st(1)
jne 0xd9b0
jp 0xd9b0
fld dword [ebx + 4]
fucomi st(2)
jne 0xd9b3
jp 0xd9b3
fstp st(0)
fxch st(1)
fst dword [ebp - 0x28]
mov ecx, 0x3f800000
mov dword [var_24h], ecx
fst dword [ebp - 0x20]
mov edx, dword [ebx + 8]
fst dword [ebp - 0x34]
fstp dword [ebp - 0x30]
xor edx, 0x80000000
mov dword [var_38h], edx
jmp 0xda4d
lea esi, [esi]
fld dword [ebx + 4]
mov dword [var_48h], 0
mov ecx, 0x3f800000
lea edx, [var_28h]
mov dword [var_40h], ecx
mov dword [var_44h], 0
fld dword [ebx + 8]
fmul st(3)
fsubr st(1), st(0)
fsubr st(2)
fxch st(2)
fmul st(3)
fxch st(1)
fstp dword [ebp - 0x28]
fxch st(1)
fstp dword [ebp - 0x24]
fld dword [ebx + 4]
mov dword [esp], edx
fmulp st(2)
fsubp st(1)
fstp dword [ebp - 0x20]
call dword [0]
fstp st(0)
fld dword [ebx + 8]
lea eax, [var_38h]
fld dword [ebx + 4]
fld st(1)
fld dword [ebp - 0x20]
fld dword [ebp - 0x24]
fxch st(3)
fmul st(1)
fxch st(2)
fmul st(3)
fsubp st(2)
fxch st(1)
fstp dword [ebp - 0x38]
fld dword [ebx]
fld dword [ebp - 0x28]
fxch st(2)
fmul st(1)
fxch st(4)
fmul st(2)
fxch st(1)
fmulp st(3)
fsubrp st(3)
fxch st(2)
fstp dword [ebp - 0x34]
fxch st(1)
fmul dword [ebx + 4]
mov dword [esp], eax
fsubp st(1)
fstp dword [ebp - 0x30]
call dword [0]
fstp st(0)
fld dword [ebx]
mov ecx, dword [var_24h]
mov edx, dword [var_38h]
fstp dword [esi]
mov eax, dword [ebx + 4]
mov dword [esi + 0x10], eax
mov eax, dword [ebx + 8]
mov dword [esi + 0x20], eax
mov ebx, dword [var_28h]
mov dword [esi + 0x14], ecx
mov dword [esi + 4], ebx
mov ecx, dword [var_20h]
mov dword [esi + 8], edx
mov dword [esi + 0x24], ecx
mov eax, dword [var_34h]
mov dword [esi + 0x18], eax
mov ebx, dword [var_30h]
mov dword [esi + 0x28], ebx
add esp, 0x50
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
fld dword [0x15854]
mov edx, dword [arg_8h]
mov eax, dword [arg_10h]
fmul dword [ebp + 0xc]
fmul dword [0x156a8]
fsincos
fxch st(1)
fstp dword [ebp - 4]
fld dword [edx]
fld dword [ebp - 4]
fmul st(1), st(0)
fxch st(1)
fstp dword [eax]
fld dword [edx + 4]
fmul st(1)
fstp dword [eax + 4]
fmul dword [edx + 8]
fxch st(1)
fstp dword [eax + 0xc]
fstp dword [eax + 8]
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
mov edx, dword [arg_8h]
mov ecx, dword [arg_10h]
fld dword [eax + 8]
fld dword [eax + 4]
fmul dword [edx + 8]
fxch st(1)
fmul dword [edx + 4]
fsubrp st(1)
fstp dword [ecx]
fld dword [eax]
fld dword [eax + 8]
fmul dword [edx]
fxch st(1)
fmul dword [edx + 8]
fsubrp st(1)
fstp dword [ecx + 4]
fld dword [eax + 4]
fld dword [eax]
fxch st(1)
fmul dword [edx]
fxch st(1)
fmul dword [edx + 4]
fsubp st(1)
fstp dword [ecx + 8]
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x70
mov esi, dword [arg_14h]
fld dword [ebp + 8]
fld dword [0x15888]
fld dword [ebp + 0xc]
fld dword [ebp + 0x10]
fxch st(3)
fucomi st(2)
fcmovnbe st(0), st(2)
fstp st(2)
fld1
fdivr st(2), st(0)
fxch st(1)
fmul st(2)
fxch st(2)
fstp dword [ebp - 0x3c]
fldz
fucompi st(3)
fstp st(2)
fstp dword [ebp - 0x1c]
jb 0xe993
fstp st(0)
fld dword [0x1588c]
fstp dword [ebp - 0x20]
xor ebx, ebx
fld dword [ebp - 0x1c]
cvtsi2ss xmm0, ebx
fstp qword [esp + 8]
movss dword [var_5ch], xmm0
fld dword [ebp - 0x5c]
fdiv dword [0x15884]
fstp qword [esp]
call pow
fnstcw word [ebp - 0x12]
fmul dword [0x15884]
xor edx, edx
movzx eax, word [var_12h]
or ax, 0xc00
mov word [var_14h], ax
fldcw word [ebp - 0x14]
fistp dword [ebp - 0x18]
fldcw word [ebp - 0x12]
mov eax, dword [var_18h]
test eax, eax
js 0xe8c0
mov edx, 0xff
cmp eax, 0x100
cmovl edx, eax
mov byte [ebx + 0x1f9e0], dl
inc ebx
cmp ebx, 0xff
jle 0xe86b
movss xmm2, dword [arg_10h]
xor ebx, ebx
ucomiss xmm2, dword [0x15860]
ja 0xea47
jmp 0xe968
fstp st(0)
fld dword [ebp - 0x20]
fxch st(1)
fsub dword [ebp - 0x20]
fxch st(1)
fsubr qword [0x15918]
fdivp st(1)
fmul dword [0x15898]
fadd dword [0x1588c]
fstp dword [ebp - 0xc]
fld dword [ebp - 0xc]
fld dword [ebp - 0x3c]
fxch st(1)
fstp qword [esp]
fstp qword [esp + 8]
call pow
fnstcw word [ebp - 0x12]
movzx edx, word [var_12h]
fmul dword [0x15884]
or dx, 0xc00
mov word [var_14h], dx
xor edx, edx
fldcw word [ebp - 0x14]
fistp dword [ebp - 0x18]
fldcw word [ebp - 0x12]
mov eax, dword [var_18h]
test eax, eax
js 0xe954
mov edx, 0xff
cmp eax, 0x100
cmovl edx, eax
mov dword [ebx*4 + 0x1cde0], edx
inc ebx
cmp ebx, 0x3ff
jg 0xea8e
push ebx
fild dword [esp]
add esp, 4
fdiv dword [0x15894]
fstp dword [ebp - 0xc]
fld dword [ebp - 0xc]
fld dword [ebp - 0x20]
fucomi st(1)
jb 0xe8e8
fdivp st(1)
fmul dword [0x1588c]
jmp 0xe90e
fld dword [ebp + 0x10]
fucompi st(1)
fstp st(0)
jbe 0xe9aa
fld dword [0x15890]
fstp dword [ebp - 0x20]
jmp 0xe869
fld dword [ebp + 0x10]
fld qword [0x15910]
fxch st(1)
fmul st(0)
fmulp st(1)
fld dword [0x1588c]
fsubrp st(1)
fstp dword [ebp - 0x20]
jmp 0xe869
lea esi, [esi]
fld dword [ebp - 0x20]
fxch st(1)
fsub dword [ebp - 0x20]
fxch st(1)
fsubr qword [0x15918]
fdivp st(1)
fmul dword [0x15898]
fadd dword [0x1588c]
fstp dword [ebp - 0xc]
fld dword [ebp - 0xc]
fld dword [ebp - 0x3c]
fxch st(1)
fstp qword [esp]
fstp qword [esp + 8]
call pow
fnstcw word [ebp - 0x12]
movzx eax, word [var_12h]
fmul dword [0x15884]
or ax, 0xc00
mov word [var_14h], ax
fldcw word [ebp - 0x14]
fistp dword [ebp - 0x18]
fldcw word [ebp - 0x12]
mov eax, dword [var_18h]
test eax, eax
js 0xea7c
cmp eax, 0x100
mov edx, 0xff
cmovl edx, eax
mov dword [ebx*4 + 0x1cde0], edx
inc ebx
cmp ebx, 0x3ff
jg 0xea8e
push ebx
fild dword [esp]
add esp, 4
fdiv dword [0x15894]
fld dword [ebp - 0x20]
fxch st(1)
fstp dword [ebp - 0xc]
fld dword [ebp - 0xc]
fmul dword [ebp + 0x10]
fxch st(1)
fucompi st(1)
jb 0xe9d0
fld dword [ebp - 0x20]
fdivp st(1)
fmul dword [0x1588c]
jmp 0xe9f4
xor edx, edx
mov dword [ebx*4 + 0x1cde0], edx
inc ebx
cmp ebx, 0x3ff
jle 0xea47
xor ebx, ebx
fld dword [ebp + 0xc]
cvtsi2ss xmm1, ebx
fstp qword [esp + 8]
movss dword [var_24h], xmm1
fld dword [ebp - 0x24]
fdiv dword [0x15884]
fst qword [esp]
fstp dword [ebp - 0x24]
call pow
fld dword [ebp - 0x24]
fxch st(1)
mov ecx, 0xc0000000
mov edx, 0x3fdd1745
fstp dword [ebx*4 + 0x1ede0]
mov dword [var_8h], ecx
mov dword [var_ch], edx
fstp qword [esp]
call pow
fld dword [ebp - 0x24]
fxch st(1)
mov eax, 0xa0000000
mov ecx, 0x40019999
fstp dword [ebx*4 + 0x1f1e0]
mov dword [var_8h], eax
mov dword [var_ch], ecx
fstp qword [esp]
call pow
fstp dword [ebx*4 + 0x1f5e0]
inc ebx
cmp ebx, 0xff
jle 0xea90
fld dword [ebp + 0xc]
xor ebx, ebx
fdivr qword [0x15918]
fstp qword [ebp - 0x30]
mov esi, esi
fld qword [ebp - 0x30]
fstp qword [esp + 8]
push ebx
fild dword [esp]
add esp, 4
fdiv dword [0x15894]
fstp qword [esp]
call pow
fnstcw word [ebp - 0x12]
movzx eax, word [var_12h]
fmul dword [0x15884]
or ax, 0xc00
mov word [var_14h], ax
fldcw word [ebp - 0x14]
fistp dword [ebx*4 + 0x1dde0]
fldcw word [ebp - 0x12]
inc ebx
cmp ebx, 0x3ff
jle 0xeb20
xor ebx, ebx
lea ecx, [ebx - 0x80]
mov edx, 0x40000000
push ecx
fild dword [esp]
add esp, 4
mov dword [esp], 0
mov dword [var_4h], edx
fstp qword [esp + 8]
call pow
fdiv dword [0x15884]
fstp dword [ebx*4]
inc ebx
cmp ebx, 0xff
jle 0xeb69
cmp esi, 2
je 0xec55
fld dword [0x1589c]
cmp esi, 4
fld1
fcmove st(0), st(1)
fstp st(1)
fld dword [ebp + 8]
xor ebx, ebx
fdivr qword [0x15918]
fstp qword [ebp - 0x38]
nop
lea esi, [esi]
fld qword [ebp - 0x38]
fxch st(1)
fstp dword [ebp - 0x58]
fstp qword [esp + 8]
push ebx
fild dword [esp]
add esp, 4
fmul dword [0x158a0]
fstp qword [esp]
call pow
fstp dword [ebp - 0xc]
fld1
fld dword [ebp - 0xc]
fld dword [ebp - 0x58]
fld st(1)
fmul st(1)
fxch st(2)
fmul dword [0x15884]
fxch st(2)
fucomi st(3)
fstp st(3)
fld1
fcmovbe st(0), st(3)
fstp st(3)
fmul st(1), st(0)
fxch st(2)
fstp dword [ebx*4]
fistp dword [ebp - 0x10]
mov eax, dword [var_10h]
mov edx, 0xff
cmp eax, 0xff
jg 0xec3d
mov edx, eax
test eax, eax
mov esi, 0
cmovs edx, esi
mov byte [ebx], dl
inc ebx
cmp ebx, 0xfff
jle 0xebd0
fstp st(0)
add esp, 0x70
pop ebx
pop esi
pop ebp
ret
fld dword [0x156a8]
jmp 0xebba
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x4c
mov esi, dword [arg_8h]
fld dword [0x1586c]
mov ebx, dword [arg_ch]
mov edi, dword [arg_14h]
fld dword [esi + 4]
fld dword [ebx + 4]
fld dword [ebx]
fmul dword [esi]
fxch st(2)
fmul st(1)
faddp st(2)
fld dword [ebx + 8]
fmul dword [esi + 8]
faddp st(2)
fld dword [ebx + 0xc]
fmul dword [esi + 0xc]
faddp st(2)
fld1
fadd st(2)
fucompi st(3)
jbe 0xf9f7
fstp st(0)
fld1
fsub st(1)
fucompi st(2)
fstp st(1)
ja acos
fstp st(0)
fld dword [ebp + 0x10]
fld1
fsub dword [ebp + 0x10]
xor edx, edx
mov eax, edi
mov esi, esi
fld dword [esi + edx*4]
fld dword [ebx + edx*4]
fxch st(1)
inc edx
fmul st(2)
fxch st(1)
fmul st(3)
faddp st(1)
fstp dword [eax]
add eax, 4
cmp edx, 3
jle 0xf9d0
fstp st(0)
fstp st(0)
add esp, 0x4c
pop ebx
pop esi
pop edi
pop ebp
ret
fstp st(1)
fstp st(1)
fchs
fld1
fxch st(1)
fstp dword [edi]
mov ecx, dword [ebx]
fld qword [0x15928]
fxch st(1)
mov dword [edi + 4], ecx
mov edx, dword [ebx + 0xc]
xor edx, 0x80000000
mov dword [edi + 8], edx
mov eax, dword [ebx + 8]
mov dword [edi + 0xc], eax
fsub dword [ebp + 0x10]
fmul st(1)
fstp qword [esp]
fstp qword [ebp - 0x48]
call sin
fld qword [ebp - 0x48]
fmul dword [ebp + 0x10]
fxch st(1)
fstp dword [ebp - 0x34]
fstp qword [esp]
call sin
fstp dword [ebp - 0x1c]
xor edx, edx
mov eax, edi
fld dword [ebp - 0x1c]
nop
fld dword [eax]
fld dword [ebp - 0x34]
fmul dword [esi + edx*4]
fxch st(1)
inc edx
fmul st(2)
faddp st(1)
fstp dword [eax]
add eax, 4
cmp edx, 2
jle 0xfa50
fstp st(0)
add esp, 0x4c
pop ebx
pop esi
pop edi
pop ebp
ret
fstp qword [esp]
call acos
fstp dword [ebp - 0x20]
fld dword [ebp - 0x20]
fstp dword [esp]
call sinf
fstp dword [ebp - 0x24]
fld1
fsub dword [ebp + 0x10]
fmul dword [ebp - 0x20]
fstp qword [esp]
call sin
fld dword [ebp - 0x24]
fstp qword [ebp - 0x30]
fdiv qword [ebp - 0x30]
fstp dword [ebp - 0x1c]
fld dword [ebp + 0x10]
fmul dword [ebp - 0x20]
fld dword [ebp - 0x1c]
fxch st(1)
fstp qword [esp]
fstp dword [ebp - 0x48]
call sin
fdiv qword [ebp - 0x30]
fld dword [ebp - 0x48]
fxch st(1)
fstp dword [ebp - 0x1c]
fld dword [ebp - 0x1c]
fxch st(1)
jmp 0xf9ca
push ebp
mov ebp, esp
mov edx, dword [arg_ch]
push ebx
mov ebx, dword [arg_8h]
mov ecx, dword [arg_10h]
mov eax, dword [ebx + edx*4]
mov dword [ecx], eax
mov eax, dword [ebx + edx*4 + 0x10]
mov dword [ecx + 4], eax
mov eax, dword [ebx + edx*4 + 0x20]
mov dword [ecx + 8], eax
pop ebx
pop ebp
ret
push ebp
mov eax, 0
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x4c
mov edx, dword [arg_1ch]
fld dword [ebp + 0x18]
mov esi, dword [arg_ch]
mov ecx, dword [arg_8h]
fld dword [0x15888]
mov dword [edx], eax
fld st(1)
mov dword [edx + 4], eax
mov ebx, dword [arg_10h]
mov dword [edx + 8], eax
fmul st(1)
mov edi, dword [arg_14h]
fld dword [0x156a8]
fld dword [esi]
fld dword [ecx]
fxch st(3)
fmul st(5)
fxch st(5)
fadd st(0)
fld dword [ecx + 4]
fxch st(6)
fmul st(3)
fxch st(1)
fmul st(3)
fxch st(5)
fmul st(1)
fld st(1)
fchs
fxch st(3)
fmul st(1)
fxch st(5)
fmul st(3)
fxch st(7)
fmul st(3)
fxch st(5)
fstp dword [ebp - 0x38]
fld dword [esi + 4]
fxch st(3)
fmul dword [ecx + 8]
fxch st(3)
fmul st(1)
fxch st(1)
fmul dword [esi + 8]
fxch st(1)
fstp dword [ebp - 0x34]
fld st(1)
fmul dword [0x158b4]
fxch st(1)
fstp dword [ebp - 0x30]
fld dword [ebx]
fmul st(1)
fstp dword [ebp - 0x48]
fld dword [ebx + 4]
fmul st(1)
fxch st(1)
fmul dword [ebx + 8]
fxch st(1)
fstp dword [ebp - 0x44]
fstp dword [ebp - 0x40]
fld dword [edi]
fmul st(1)
fstp dword [ebp - 0x58]
fld dword [edi + 4]
fxch st(6)
fadd dword [edx]
fxch st(6)
fmul st(1)
fxch st(1)
fmul dword [edi + 8]
fxch st(6)
fst dword [edx]
fxch st(1)
fstp dword [ebp - 0x54]
fxch st(3)
fadd dword [edx + 4]
fld dword [ebp - 0x38]
fxch st(6)
fstp dword [ebp - 0x50]
fxch st(1)
fadd dword [edx + 8]
fxch st(5)
faddp st(3)
fst dword [edx + 4]
fld dword [ebp - 0x34]
fxch st(5)
fst dword [edx + 8]
fxch st(5)
faddp st(1)
fld dword [ebp - 0x30]
fxch st(3)
fst dword [edx]
fadd dword [var_48h]
fxch st(3)
faddp st(5)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(4)
fst dword [edx + 8]
fadd dword [var_40h]
fxch st(2)
fst dword [edx]
fxch st(4)
fst dword [edx + 4]
fxch st(4)
fadd dword [var_58h]
fxch st(4)
fadd dword [var_54h]
fxch st(2)
fst dword [edx + 8]
fadd dword [var_50h]
fxch st(4)
fstp dword [edx]
fld st(2)
fadd st(3)
fxch st(2)
fstp dword [edx + 4]
fxch st(3)
fstp dword [edx + 8]
fld dword [ecx + 4]
fld dword [ecx]
fld dword [ecx + 8]
fxch st(2)
fmul st(3)
fxch st(1)
fmul st(3)
fld dword [esi]
fxch st(3)
fmulp st(4)
fld st(4)
fmul dword [0x158b8]
fmul st(3), st(0)
fxch st(3)
fstp dword [ebp - 0x38]
fld dword [esi + 4]
fmul st(3)
fxch st(3)
fmul dword [esi + 8]
fxch st(3)
fstp dword [ebp - 0x34]
fld dword [ebx]
fxch st(3)
fstp dword [ebp - 0x30]
fld st(4)
fmul dword [0x15868]
fxch st(5)
fchs
fxch st(3)
fmul st(5)
fstp dword [ebp - 0x48]
fld dword [ebx + 4]
fmul st(5)
fxch st(5)
fmul dword [ebx + 8]
fxch st(5)
fstp dword [ebp - 0x44]
fxch st(4)
fstp dword [ebp - 0x40]
fld dword [edi]
fmul st(2)
fstp dword [ebp - 0x58]
fld dword [edi + 4]
fxch st(4)
fadd dword [edx]
fxch st(4)
fmul st(2)
fxch st(2)
fmul dword [edi + 8]
fxch st(4)
fst dword [edx]
fxch st(2)
fstp dword [ebp - 0x54]
fadd dword [edx + 4]
fld dword [ebp - 0x38]
fxch st(4)
fstp dword [ebp - 0x50]
fxch st(2)
fadd dword [edx + 8]
fxch st(3)
faddp st(1)
fxch st(1)
fst dword [edx + 4]
fld dword [ebp - 0x34]
fxch st(3)
fst dword [edx + 8]
fxch st(3)
faddp st(1)
fld dword [ebp - 0x30]
fxch st(2)
fst dword [edx]
fadd dword [var_48h]
fxch st(2)
faddp st(3)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(2)
fst dword [edx + 8]
fadd dword [var_40h]
fxch st(1)
fst dword [edx]
fxch st(2)
fst dword [edx + 4]
fxch st(1)
fst dword [edx + 8]
fxch st(2)
fadd dword [var_58h]
fxch st(1)
fadd dword [var_54h]
fxch st(2)
fadd dword [var_50h]
fxch st(1)
fstp dword [edx]
fld dword [ebx]
fxch st(2)
fstp dword [edx + 4]
fld st(2)
fxch st(2)
fmul st(3)
fxch st(1)
fstp dword [edx + 8]
fld dword [ecx]
fld dword [ecx + 4]
fxch st(3)
fchs
fxch st(2)
fstp dword [ebp - 0x38]
fld dword [ebx + 4]
fxch st(1)
fmul st(2)
fxch st(1)
fmul st(4)
fxch st(4)
fmul dword [ebx + 8]
fxch st(3)
fmul st(2)
fxch st(2)
fmul dword [ecx + 8]
fxch st(4)
fstp dword [ebp - 0x34]
fxch st(2)
fstp dword [ebp - 0x30]
fxch st(1)
fadd dword [edx]
fxch st(1)
fadd dword [edx + 4]
fxch st(2)
fadd dword [edx + 8]
fxch st(1)
fst dword [edx]
fxch st(2)
fst dword [edx + 4]
fxch st(1)
fst dword [edx + 8]
fxch st(2)
fadd dword [var_38h]
fxch st(1)
fadd dword [var_34h]
fxch st(2)
fadd dword [var_30h]
fxch st(1)
fstp dword [edx]
fxch st(1)
fstp dword [edx + 4]
fstp dword [edx + 8]
add esp, 0x4c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
fld1
mov ebp, esp
push ebx
sub esp, 4
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
fld dword [eax + 4]
lea ecx, [edx + 0x10]
lea ebx, [edx + 0x20]
fld st(0)
fadd st(1)
fmulp st(1)
fld dword [eax + 8]
fxch st(1)
fsubr qword [0x15918]
fld st(1)
fadd st(2)
fmulp st(2)
fsubrp st(1)
fstp dword [edx]
fld dword [eax]
fld dword [eax + 0xc]
fxch st(1)
fadd st(0)
fxch st(1)
fadd st(0)
fxch st(1)
fmul dword [eax + 4]
fxch st(1)
fmul dword [eax + 8]
faddp st(1)
fstp dword [edx + 0x10]
fld dword [eax]
fld dword [eax + 0xc]
fxch st(1)
fadd st(0)
fxch st(1)
fadd st(0)
fxch st(1)
fmul dword [eax + 8]
fxch st(1)
fmul dword [eax + 4]
fsubp st(1)
fstp dword [edx + 0x20]
fld dword [eax]
fld dword [eax + 0xc]
fxch st(1)
fadd st(0)
fxch st(1)
fadd st(0)
fxch st(1)
fmul dword [eax + 4]
fxch st(1)
fmul dword [eax + 8]
fsubp st(1)
fstp dword [edx + 4]
fld dword [eax]
fld st(0)
fadd st(1)
fmulp st(1)
fld dword [eax + 8]
fld st(0)
fadd st(1)
fxch st(2)
fsubr st(3)
fxch st(2)
fmulp st(1)
fsubp st(1)
fstp dword [ecx + 4]
fld dword [eax + 4]
fld dword [eax + 0xc]
fxch st(1)
fadd st(0)
fxch st(1)
fadd st(0)
fxch st(1)
fmul dword [eax + 8]
fxch st(1)
fmul dword [eax]
faddp st(1)
fstp dword [ebx + 4]
fld dword [eax]
fld dword [eax + 0xc]
fxch st(1)
fadd st(0)
fxch st(1)
fadd st(0)
fxch st(1)
fmul dword [eax + 8]
fxch st(1)
fmul dword [eax + 4]
faddp st(1)
fstp dword [edx + 8]
fld dword [eax + 4]
fld dword [eax + 0xc]
fxch st(1)
fadd st(0)
fxch st(1)
fadd st(0)
fxch st(1)
fmul dword [eax + 8]
fxch st(1)
fmul dword [eax]
fsubp st(1)
fstp dword [ecx + 8]
fld dword [eax]
fld st(0)
fadd st(1)
fmulp st(1)
fld dword [eax + 4]
fxch st(2)
fsubrp st(1)
fld st(1)
fadd st(2)
fmulp st(2)
fsubrp st(1)
fstp dword [ebx + 8]
pop eax
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 4
mov eax, dword [arg_8h]
mov ebx, dword [arg_ch]
mov edx, dword [eax + 4]
mov ecx, dword [eax + 8]
fld dword [eax]
xor edx, 0x80000000
xor ecx, 0x80000000
fchs
mov dword [ebx + 4], edx
fld dword [eax + 4]
fxch st(1)
mov dword [ebx + 8], ecx
fst dword [ebx]
fxch st(1)
fmul st(0)
fld dword [eax]
fld dword [eax + 0xc]
fxch st(1)
fmul st(0)
fxch st(1)
fst dword [ebx + 0xc]
fxch st(1)
faddp st(2)
fld dword [eax + 8]
fmul st(0)
faddp st(2)
fld dword [eax + 0xc]
fmul st(0)
faddp st(2)
fldz
fxch st(2)
fucomi st(2)
fstp st(2)
jp 0xfe90
je 0xfec0
fxch st(1)
fdivr dword [0x15860]
fmul st(2), st(0)
fmul st(1), st(0)
fxch st(2)
fstp dword [ebx]
mov dword [var_8h], edx
fld dword [ebp - 8]
fmul st(2)
fstp dword [ebx + 4]
mov dword [var_8h], ecx
fld dword [ebp - 8]
fxch st(1)
fstp dword [ebx + 0xc]
fmulp st(1)
fstp dword [ebx + 8]
jmp 0xfec6
lea esi, [esi]
fstp st(0)
fstp st(0)
fstp st(0)
pop eax
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
movzx eax, byte [0x1cdd4]
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x10
mov dword [var_ch], ebx
mov edx, dword [arg_8h]
mov eax, dword [arg_10h]
mov dword [var_8h], esi
mov ecx, dword [arg_18h]
mov ebx, dword [arg_14h]
mov dword [var_4h], edi
mov edi, dword [arg_ch]
mov esi, dword [arg_1ch]
fld dword [eax]
mov dword [var_10h], eax
mov eax, dword [edx]
fld dword [edi]
mov dword [ecx], eax
mov eax, dword [edx + 4]
fsubp st(1)
fldz
fxch st(1)
fucomi st(1)
fstp st(1)
mov dword [ecx + 4], eax
mov eax, dword [edx + 8]
mov dword [ecx + 8], eax
mov eax, dword [ebx]
mov dword [esi], eax
mov eax, dword [ebx + 4]
mov dword [esi + 4], eax
mov eax, dword [ebx + 8]
mov dword [esi + 8], eax
jp 0x10436
je 0x10496
fld dword [edx]
fld dword [edi]
fxch st(1)
fucomi st(1)
jp 0x104a5
jne 0x104a5
fstp st(0)
fstp st(0)
fld dword [ebx]
mov eax, dword [var_10h]
fld dword [eax]
fxch st(1)
fucomi st(1)
jp 0x10455
je 0x10492
fsub st(1)
fdiv st(2), st(0)
fmul st(2)
faddp st(1)
fld dword [ebx + 4]
fxch st(1)
fstp dword [esi]
fld dword [eax + 4]
fsub st(1), st(0)
fxch st(1)
fmul st(2)
faddp st(1)
fld dword [ebx + 8]
fxch st(1)
fstp dword [esi + 4]
fld dword [eax + 8]
fsub st(1), st(0)
fxch st(1)
fmulp st(2)
faddp st(1)
fstp dword [esi + 8]
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
fstp st(0)
fstp st(0)
fstp st(0)
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
fld st(1)
fsub st(1)
fxch st(1)
fsub st(2)
fxch st(1)
fdivr st(3)
fmul st(1), st(0)
fxch st(2)
faddp st(1)
fld dword [edx + 4]
fxch st(1)
fstp dword [ecx]
fld dword [edi + 4]
fsub st(1), st(0)
fxch st(1)
fmul st(2)
faddp st(1)
fld dword [edx + 8]
fxch st(1)
fstp dword [ecx + 4]
fld dword [edi + 8]
fsub st(1), st(0)
fxch st(1)
fmulp st(2)
faddp st(1)
fstp dword [ecx + 8]
jmp 0x10446
push ebp
fldz
mov ebp, esp
push esi
push ebx
sub esp, 0x10
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ebx, dword [arg_8h]
mov esi, dword [arg_14h]
fld dword [edx]
mov ecx, dword [arg_18h]
fld dword [eax]
fld dword [edx + 4]
fld dword [eax + 4]
fxch st(2)
fsub st(3)
fxch st(2)
fsub st(1)
fld st(2)
fmul st(3)
fld st(1)
fxch st(4)
fst dword [ebp - 0x18]
fxch st(4)
fmul st(2)
fxch st(2)
fst dword [ebp - 0x14]
fxch st(1)
faddp st(2)
fld dword [0x158e0]
fucompi st(2)
ja 0x13302
fstp st(5)
fld st(2)
fld st(5)
fld st(6)
fxch st(1)
fmul dword [ebx + 4]
fxch st(1)
fmul st(4)
fxch st(2)
fmul dword [ebx]
faddp st(1)
fld st(4)
fmul st(6)
faddp st(2)
fsubrp st(1)
fdivrp st(1)
fxch st(4)
jmp 0x13304
fstp st(1)
test ecx, ecx
je 0x13317
fstp st(1)
fstp st(2)
fxch st(2)
fst dword [ecx]
fld dword [edx]
fld dword [edx + 4]
jmp 0x13330
fxch st(3)
fxch st(1)
fxch st(2)
fxch st(4)
fxch st(2)
jmp 0x13330
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
fxch st(4)
fmul st(2)
fxch st(3)
fmulp st(2)
faddp st(2)
faddp st(2)
fstp dword [esi]
fstp dword [esi + 4]
add esp, 0x10
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x2c
lea ebx, [var_28h]
mov dword [var_8h], ebx
mov eax, dword [arg_ch]
mov esi, dword [arg_8h]
mov edi, dword [arg_14h]
mov dword [var_4h], eax
mov dword [esp], esi
call _Z15QuaternionAlignRK10QuaternionS1_RS_
fld dword [ebp + 0x10]
xor edx, edx
mov eax, edi
fsubr dword [0x15860]
lea esi, [esi]
lea edi, [edi]
fld dword [esi + edx*4]
fld dword [ebp + 0x10]
fmul dword [ebx + edx*4]
fxch st(1)
inc edx
fmul st(2)
faddp st(1)
fstp dword [eax]
add eax, 4
cmp edx, 3
jle 0xf8d0
fstp st(0)
mov dword [esp], edi
call _Z19QuaternionNormalizeR10Quaternion
fstp st(0)
add esp, 0x2c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
fldz
mov ebp, esp
push esi
lea esi, [var_18h]
push ebx
sub esp, 0x30
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
mov ebx, dword [arg_14h]
fld dword [edx]
fld dword [eax]
fld dword [edx + 4]
fld dword [eax + 4]
fxch st(2)
fsub st(3)
fxch st(2)
fsub st(1)
fld st(2)
fmul st(3)
fld st(1)
fmul st(2)
faddp st(1)
fld dword [0x158e0]
fucompi st(1)
ja 0x13632
fstp st(5)
fld st(2)
fld st(1)
fld st(2)
fxch st(1)
fmul dword [ecx + 4]
fxch st(1)
fmul st(4)
fxch st(2)
fmul dword [ecx]
faddp st(1)
fld st(4)
fmul st(6)
faddp st(2)
fsubrp st(1)
fdivrp st(5)
jmp 0x13634
fstp st(0)
fld1
fxch st(5)
fucomi st(5)
ja 0x13648
fstp st(5)
fldz
fucomi st(5)
fcmovbe st(0), st(5)
fstp st(5)
jmp 0x1364a
fstp st(0)
test ebx, ebx
je 0x13660
fstp st(1)
fstp st(2)
fxch st(2)
fst dword [ebx]
fld dword [edx]
fld dword [edx + 4]
jmp 0x13670
lea esi, [esi]
fxch st(3)
fxch st(1)
fxch st(2)
fxch st(4)
fxch st(2)
lea esi, [esi]
fxch st(4)
fmul st(2)
fxch st(3)
fmulp st(2)
faddp st(2)
faddp st(2)
fstp dword [esi]
fld dword [ebp - 0x18]
fxch st(1)
fstp dword [esi + 4]
fld dword [ebp - 0x14]
fxch st(1)
fsubr dword [ecx]
fxch st(1)
fsubr dword [ecx + 4]
fxch st(1)
fst dword [ebp - 0x28]
fmul st(0)
fxch st(1)
fst dword [ebp - 0x24]
fmul st(0)
faddp st(1)
fstp dword [esp]
call dword [0]
add esp, 0x30
pop ebx
pop esi
pop ebp
ret
push ebp
mov ecx, 0x3f000000
mov ebp, esp
sub esp, 0x10
mov eax, 0x40400000
mov edx, dword [arg_8h]
fld dword [edx]
fld dword [edx + 4]
fxch st(1)
fmul st(0)
fxch st(1)
fmul st(0)
fxch st(1)
fadd dword [0x15864]
faddp st(1)
fld dword [edx + 8]
mov dword [var_ch], ecx
mov dword [var_10h], eax
fmul st(0)
faddp st(1)
fstp dword [ebp - 8]
movss xmm3, dword [var_8h]
movss xmm1, dword [var_ch]
movss xmm2, dword [var_10h]
rsqrtss xmm0, xmm3
mulss xmm3, xmm0
mulss xmm1, xmm0
mulss xmm3, xmm0
subss xmm2, xmm3
mulss xmm1, xmm2
movss dword [var_4h], xmm1
fld dword [ebp - 4]
fld dword [edx]
fmul st(1)
fstp dword [edx]
fld dword [edx + 4]
fmul st(1)
fxch st(1)
fmul dword [edx + 8]
fxch st(1)
fstp dword [edx + 4]
fstp dword [edx + 8]
leave
ret
push ebp
xor ecx, ecx
mov ebp, esp
push esi
mov edx, dword [arg_8h]
fldz
push ebx
mov esi, 1
xor ebx, ebx
lea esi, [esi]
lea edi, [edi]
fld dword [edx]
fxch st(1)
fucomi st(1)
fstp st(1)
jbe 0xc1b0
mov eax, esi
shl eax, cl
or ebx, eax
inc ecx
add edx, 4
cmp ecx, 2
jle 0xc1a0
fstp st(0)
mov eax, ebx
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x18
fld qword [0x158f8]
fmul dword [ebp + 8]
fstp qword [esp]
call cos
fsubr qword [0x15918]
fmul dword [0x156a8]
fstp dword [ebp - 4]
fld dword [ebp - 4]
leave
ret
push ebp
fld1
mov ebp, esp
sub esp, 8
mov edx, dword [arg_8h]
mov eax, dword [arg_10h]
fld dword [ebp + 0xc]
fld dword [edx]
fld dword [eax + 0xc]
fxch st(3)
fsub st(2)
fmul st(1), st(0)
fxch st(1)
fstp dword [eax]
fld dword [edx + 4]
fmul st(1)
fstp dword [eax + 4]
fld dword [edx + 8]
fmul st(1)
fstp dword [eax + 8]
fldz
fucompi st(3)
fstp st(2)
jbe 0xf950
fxch st(1)
fmul dword [edx + 0xc]
fsubrp st(1)
fstp dword [eax + 0xc]
mov dword [esp], eax
call _Z19QuaternionNormalizeR10Quaternion
fstp st(0)
leave
ret
mov esi, esi
fxch st(1)
fmul dword [edx + 0xc]
faddp st(1)
fstp dword [eax + 0xc]
mov dword [esp], eax
call _Z19QuaternionNormalizeR10Quaternion
fstp st(0)
leave
ret
push ebp
fldz
mov ebp, esp
sub esp, 0x20
fld qword [ebp + 8]
fld qword [ebp + 0x10]
fxch st(1)
fucomi st(2)
fstp st(2)
jb 0xde13
fld st(1)
fdiv st(1)
fnstcw word [ebp - 2]
movzx eax, word [var_2h]
and eax, 0xfffff3ff
or eax, 0x400
mov word [var_4h], ax
fldcw word [ebp - 4]
frndint
fldcw word [ebp - 2]
fnstcw word [ebp - 0x16]
movzx ecx, word [var_16h]
or cx, 0xc00
mov word [var_18h], cx
fstp qword [ebp - 0x10]
fld qword [ebp - 0x10]
fldcw word [ebp - 0x18]
fist dword [ebp - 0x1c]
fldcw word [ebp - 0x16]
fmulp st(1)
mov ecx, dword [var_1ch]
fsubp st(1)
fstp dword [ebp - 0x14]
fld dword [ebp - 0x14]
fnstcw word [ebp - 4]
movzx edx, word [var_4h]
and edx, 0xfffff3ff
or edx, 0x400
mov word [var_2h], dx
fldcw word [ebp - 2]
frndint
fldcw word [ebp - 4]
fnstcw word [ebp - 0x16]
movzx eax, word [var_16h]
fstp qword [ebp - 0x10]
fld qword [ebp - 0x10]
or ax, 0xc00
mov word [var_18h], ax
fldcw word [ebp - 0x18]
fistp dword [ebp - 0x1c]
fldcw word [ebp - 0x16]
mov edx, dword [var_1ch]
mov eax, dword [arg_18h]
mov dword [eax], ecx
mov ecx, dword [arg_1ch]
mov dword [ecx], edx
leave
ret
fxch st(1)
fchs
fld st(0)
fdiv st(2)
fnstcw word [ebp - 4]
movzx edx, word [var_4h]
and edx, 0xfffff3ff
or edx, 0x400
mov word [var_2h], dx
fldcw word [ebp - 2]
frndint
fldcw word [ebp - 4]
fnstcw word [ebp - 0x16]
movzx ecx, word [var_16h]
or cx, 0xc00
mov word [var_18h], cx
fstp qword [ebp - 0x10]
fld qword [ebp - 0x10]
fldcw word [ebp - 0x18]
fist dword [ebp - 0x1c]
fldcw word [ebp - 0x16]
fmul st(2)
mov ecx, dword [var_1ch]
neg ecx
fsubp st(1)
fstp dword [ebp - 0x14]
fld dword [ebp - 0x14]
fnstcw word [ebp - 4]
movzx eax, word [var_4h]
and eax, 0xfffff3ff
or eax, 0x400
mov word [var_2h], ax
fldcw word [ebp - 2]
frndint
fldcw word [ebp - 4]
fnstcw word [ebp - 0x16]
movzx edx, word [var_16h]
fstp qword [ebp - 0x10]
fld qword [ebp - 0x10]
or dx, 0xc00
mov word [var_18h], dx
fldcw word [ebp - 0x18]
fistp dword [ebp - 0x1c]
fldcw word [ebp - 0x16]
mov edx, dword [var_1ch]
test edx, edx
je 0xdec8
fldcw word [ebp - 0x18]
fistp dword [ebp - 0x1c]
fldcw word [ebp - 0x16]
dec ecx
mov eax, dword [var_1ch]
sub eax, edx
mov edx, eax
mov eax, dword [arg_18h]
mov dword [eax], ecx
mov ecx, dword [arg_1ch]
mov dword [ecx], edx
leave
ret
fstp st(0)
mov eax, dword [arg_18h]
mov dword [eax], ecx
mov ecx, dword [arg_1ch]
mov dword [ecx], edx
leave
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
mov eax, dword [arg_8h]
fld dword [0x15854]
mov edx, dword [arg_ch]
fld dword [eax + 4]
fmul st(1)
fsincos
fxch st(1)
fstp dword [ebp - 8]
fld dword [ebp - 8]
fxch st(1)
fstp dword [ebp - 8]
fld dword [eax]
fld dword [ebp - 8]
fxch st(1)
fmul st(3)
fsincos
fxch st(1)
fstp dword [ebp - 8]
fxch st(3)
fmul dword [eax + 8]
fxch st(3)
fstp dword [ebp - 0xc]
fld dword [ebp - 8]
fxch st(3)
fsincos
fxch st(1)
fstp dword [ebp - 8]
mov eax, 0
fld st(2)
fld dword [ebp - 8]
fxch st(2)
lea ebx, [edx + 0x10]
fstp dword [ebp - 8]
fld st(1)
fmul st(5)
fld dword [ebp - 0xc]
fld dword [ebp - 8]
fxch st(1)
fmul st(5)
fxch st(3)
fmul st(1)
fxch st(3)
fstp dword [edx]
fld dword [ebp - 0xc]
fmul st(6)
fstp dword [edx + 4]
fld st(1)
fmul st(5)
fxch st(7)
fst dword [ebp - 0x10]
fxch st(2)
mov ecx, dword [var_10h]
fmul st(6)
fxch st(7)
fsubrp st(3)
xor ecx, 0x80000000
fld st(3)
mov dword [edx + 8], ecx
fmul st(6)
fxch st(3)
lea ecx, [edx + 0x20]
fstp dword [edx + 0x10]
fld st(0)
fmul st(5)
faddp st(7)
fld dword [ebp - 0xc]
fmul st(4)
fxch st(4)
fmul st(5)
fxch st(7)
fstp dword [ebx + 4]
fld st(0)
fmulp st(2)
fxch st(3)
fstp dword [ebx + 8]
fxch st(2)
fmul dword [ebp - 0xc]
fld st(2)
fmulp st(4)
fxch st(2)
fmulp st(4)
faddp st(2)
fxch st(2)
fsubrp st(3)
fstp dword [edx + 0x20]
fstp dword [ecx + 8]
fstp dword [ecx + 4]
mov dword [edx + 0xc], eax
mov dword [ebx + 0xc], eax
mov dword [ecx + 0xc], eax
add esp, 0xc
pop ebx
pop ebp
ret
push ebp
fldz
mov ebp, esp
sub esp, 0x28
mov edx, dword [arg_8h]
fst dword [ebp - 0x1c]
fld dword [edx]
fucompi st(1)
jne 0xcb90
jp 0xcb90
fld dword [edx + 4]
fucompi st(1)
jne 0xcb90
jp 0xcb90
fld dword [edx + 8]
fucompi st(1)
fstp st(0)
jp 0xcb92
jne 0xcb92
fld dword [ebp - 0x1c]
leave
ret
nop
fstp st(0)
movups xmm4, xmmword [edx]
movaps xmm1, xmm4
mulps xmm1, xmm4
movhlps xmm3, xmm1
movaps xmm2, xmm1
shufps xmm2, xmm2, 1
addss xmm1, xmm2
addss xmm1, xmm3
sqrtss xmm1, xmm1
movss dword [var_1ch], xmm1
rcpss xmm1, xmm1
shufps xmm1, xmm1, 0
mulps xmm4, xmm1
movaps xmmword [var_18h], xmm4
mov eax, dword [var_18h]
mov dword [edx], eax
mov ecx, dword [var_14h]
mov dword [edx + 4], ecx
mov eax, dword [var_10h]
mov dword [edx + 8], eax
fld dword [ebp - 0x1c]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x28
fld dword [ebp + 8]
fld dword [ebp + 0xc]
fld dword [ebp + 0x10]
fxch st(1)
fucomi st(2)
jbe 0xf6b0
fld dword [0x156a8]
fld1
fxch st(4)
fmul st(1)
fdivrp st(2)
fucompi st(1)
ja 0xf6e7
fadd st(0)
fxch st(2)
fsubrp st(1)
fxch st(1)
fsubr dword [0x158ac]
fstp dword [ebp - 0xc]
fld dword [0x17204]
fucompi st(1)
jp log
jne log
fstp st(0)
fld dword [0x1fae0]
fstp qword [esp + 8]
fld dword [ebp - 0xc]
fstp qword [esp]
call pow
fstp dword [ebp - 4]
fld1
fld dword [ebp - 4]
fmul dword [0x156a8]
fsubp st(1)
fld qword [0x158f8]
fmulp st(1)
fstp qword [esp]
call cos
fsubr qword [0x15918]
fmul dword [0x156a8]
fstp dword [ebp - 4]
fld dword [ebp - 4]
leave
ret
nop
fld dword [0x156a8]
fxch st(3)
fsub st(1)
fld1
fld dword [0x156a8]
fxch st(2)
fmul st(5)
fxch st(3)
fsubr st(1)
fdivp st(3)
fxch st(2)
faddp st(4)
fxch st(3)
fstp dword [ebp - 4]
fld dword [ebp - 4]
fxch st(3)
fucompi st(3)
ja 0xf6e5
fxch st(2)
jmp 0xf63f
fxch st(2)
fadd st(0)
fxch st(2)
fsubrp st(1)
fxch st(1)
fstp dword [ebp - 8]
fld dword [0x17204]
fucompi st(1)
jp 0xf766
jne 0xf766
fstp st(0)
fld dword [0x1fae0]
fstp qword [esp + 8]
fld dword [ebp - 8]
fstp qword [esp]
call pow
fstp dword [ebp - 4]
fld dword [ebp - 4]
fmul dword [0x156a8]
fld qword [0x158f8]
fmulp st(1)
fstp qword [esp]
call cos
fsubr qword [0x15918]
fmul dword [0x156a8]
fstp dword [ebp - 4]
fld dword [ebp - 4]
leave
ret
fstp qword [esp]
call log
fld dword [0x158a8]
fmulp st(1)
fstp dword [ebp - 4]
fld dword [ebp - 4]
fst dword [0x1fae0]
jmp 0xf66c
fstp qword [esp]
call log
fld dword [0x158a8]
fmulp st(1)
fstp dword [ebp - 4]
fld dword [ebp - 4]
fst dword [0x1fae0]
jmp 0xf706
push ebp
mov edx, 0xffffffff
mov ebp, esp
push edi
xor eax, eax
push esi
push ebx
sub esp, 0x6c
mov edi, dword [arg_8h]
fld dword [0x158f0]
mov esi, dword [arg_ch]
lea esi, [esi]
fld dword [esi + eax*4]
fabs
fstp dword [ebp - 0x4c]
fld dword [ebp - 0x4c]
fucomi st(1)
jbe 0x14490
fstp st(1)
mov edx, eax
inc eax
cmp eax, 2
jle 0x14460
fstp st(0)
xor eax, eax
cmp edx, 0xffffffff
jne 0x14494
add esp, 0x6c
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
fstp st(0)
jmp 0x14473
fld dword [4]
test edx, edx
fld dword [0]
fld dword [8]
fxch st(2)
fst dword [ebp - 0x44]
js 0x1467a
cmp edx, 1
jg 0x14656
fstp st(2)
fst dword [ebp - 0x48]
fld1
fst dword [ebp - 0x40]
fxch st(2)
fmul dword [esi + 4]
fxch st(1)
lea ebx, [var_48h]
fmul dword [esi]
fxch st(2)
fmul dword [esi + 8]
fxch st(2)
mov dword [var_ch], ebx
mov dword [var_8h], esi
mov dword [esp], ebx
faddp st(1)
faddp st(1)
fchs
fstp dword [esp + 4]
call _Z8VectorMARK6VectorfS1_RS_
mov dword [esp], ebx
call dword [0]
fstp st(0)
fld dword [esi]
lea ecx, [edi + 0xc]
lea eax, [edi + 0x24]
fld dword [ebp + 0x10]
lea edx, [edi + 0x18]
fld dword [ebp - 0x44]
fxch st(1)
fmul st(2)
fld dword [ebp - 0x48]
fld dword [ebp - 0x40]
fmul st(4)
fxch st(2)
fst dword [ebp - 0x50]
fstp dword [ebp - 0x28]
fld dword [ebp + 0x10]
fmul dword [esi + 4]
fxch st(4)
fmul dword [ebp - 0x44]
fxch st(4)
fst dword [ebp - 0x24]
fstp dword [ebp - 0x54]
fld dword [ebp + 0x10]
fmul dword [esi + 8]
fld dword [esi + 4]
fxch st(1)
fst dword [ebp - 0x20]
fld dword [esi + 8]
fxch st(1)
fstp dword [ebp - 0x58]
fld dword [ebp - 0x40]
fxch st(5)
fmul st(1)
fxch st(5)
fmul st(2)
fxch st(1)
fmul st(3)
fxch st(5)
fsubrp st(1)
fld dword [ebp - 0x44]
fxch st(4)
fsubrp st(5)
fld st(2)
fxch st(4)
fmul dword [ebp + 0x14]
fxch st(4)
fmulp st(2)
fxch st(2)
fmul dword [ebp + 0x14]
fxch st(2)
fmul dword [ebp + 0x14]
fxch st(1)
fsubrp st(5)
fxch st(2)
fst dword [ebp - 0x5c]
fstp dword [ebp - 0x44]
fld dword [ebp - 0x40]
fmul dword [ebp + 0x14]
fxch st(3)
fmul dword [ebp + 0x14]
fxch st(4)
fmul dword [ebp + 0x14]
fxch st(2)
fst dword [ebp - 0x38]
fxch st(3)
fst dword [ebp - 0x60]
fstp dword [ebp - 0x40]
fxch st(3)
fst dword [ebp - 0x34]
fxch st(3)
fst dword [ebp - 0x48]
fxch st(1)
fst dword [ebp - 0x30]
fld dword [ebp - 0x58]
fld dword [ebp - 0x50]
fld dword [ebp - 0x54]
fxch st(2)
fsub st(3)
fxch st(1)
fsub st(5)
fxch st(5)
fadd dword [var_50h]
fxch st(2)
fsub st(6)
fxch st(1)
fstp dword [ebp - 0x64]
fld st(4)
fadd st(4)
fxch st(6)
fadd dword [var_54h]
fxch st(5)
fsub st(4)
fxch st(3)
fadd dword [var_58h]
fxch st(6)
fstp dword [edi]
fld dword [ebp - 0x5c]
fxch st(3)
fstp dword [edi + 0x24]
fadd st(2), st(0)
fsub dword [ebp - 0x5c]
fxch st(2)
fstp dword [edi + 4]
fld dword [ebp - 0x64]
fadd dword [var_60h]
fstp dword [edi + 8]
fld st(0)
fadd st(3)
fxch st(1)
fsubrp st(3)
fstp dword [edi + 0xc]
fld dword [ebp - 0x5c]
fxch st(2)
fstp dword [edi + 0x18]
fxch st(1)
fadd st(2)
fxch st(2)
fsub dword [ebp - 0x5c]
fxch st(2)
fstp dword [ecx + 4]
fld dword [ebp - 0x60]
fxch st(2)
fstp dword [edx + 4]
fstp dword [eax + 4]
fadd st(1)
fxch st(1)
fsub dword [ebp - 0x60]
fxch st(1)
fstp dword [ecx + 8]
fld dword [ebp - 0x64]
fsub dword [ebp - 0x60]
fxch st(1)
fstp dword [edx + 8]
fstp dword [eax + 8]
add esp, 0x6c
mov eax, 4
pop ebx
pop esi
pop edi
pop ebp
ret
fxch st(2)
fst dword [ebp - 0x40]
cmp edx, 2
je 0x1466c
fxch st(1)
fst dword [ebp - 0x48]
fxch st(1)
jmp 0x144c6
fstp st(1)
fld1
fst dword [ebp - 0x48]
fxch st(1)
jmp 0x144c6
fxch st(2)
fst dword [ebp - 0x40]
fxch st(1)
jmp 0x14662
push ebp
mov ebp, esp
mov eax, dword [arg_10h]
fld dword [ebp + 0xc]
mov ecx, dword [arg_8h]
mov edx, dword [arg_14h]
fld dword [eax]
fmul st(1)
fadd dword [ecx]
fstp dword [edx]
fld dword [eax + 4]
fmul st(1)
fadd dword [ecx + 4]
fstp dword [edx + 4]
fmul dword [eax + 8]
fadd dword [ecx + 8]
fstp dword [edx + 8]
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov dword [eax], 8
mov dword [eax + 4], 8
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x24
movzx ebx, byte [arg_1ch]
movzx edx, byte [arg_18h]
movzx eax, byte [arg_20h]
mov byte [var_ah], bl
movzx ebx, byte [arg_24h]
mov byte [var_9h], dl
mov byte [var_bh], al
call GetCPUInformation
mov ecx, 0
mov edx, 0
test bl, bl
mov dword [0], ecx
mov ecx, 0
mov dword [0], edx
mov edx, 0
mov dword [0], ecx
mov ecx, 0
mov dword [0], edx
mov edx, 0
mov dword [0], ecx
mov ecx, 0
mov dword [0], edx
mov edx, 0
mov dword [0], ecx
mov dword [0], edx
je 0x13a7b
test byte [eax + 4], 0x40
jne 0x13bc8
mov byte [0x1cdd6], 0
cmp byte [var_9h], 0
je 0x13a92
test byte [eax + 4], 0x20
jne 0x13b7a
mov byte [0x1cdd7], 0
cmp byte [var_ah], 0
je 0x13aa9
test byte [eax + 4], 8
jne 0x13b2c
mov byte [0x1cdd5], 0
cmp byte [var_bh], 0
je 0x13abc
test byte [eax + 4], 0x10
jne 0x13b23
mov byte [0x1cdd4], 0
mov byte [0x1cdd8], 1
xor ebx, ebx
lea esi, [esi]
push ebx
fild dword [esp]
add esp, 4
fadd st(0)
fmul qword [0x158f8]
fmul qword [0x15900]
fstp qword [esp]
call sin
fstp dword [ebx*4]
inc ebx
cmp ebx, 0xff
jle 0x13ad0
mov ebx, dword [arg_10h]
mov edx, dword [arg_14h]
mov ecx, dword [arg_ch]
mov dword [var_8h], ebx
mov eax, dword [arg_8h]
mov dword [var_ch], edx
mov dword [var_4h], ecx
mov dword [esp], eax
call _Z15BuildGammaTablefffi
add esp, 0x24
pop ebx
pop ebp
ret
mov byte [0x1cdd4], 1
jmp 0x13ac3
mov byte [0x1cdd5], 1
mov edx, 0
mov ebx, 0
mov dword [0], edx
mov ecx, 0
mov edx, 0
mov dword [0], ebx
mov ebx, 0
mov dword [0], ecx
mov ecx, 0
mov dword [0], edx
mov dword [0], ebx
mov dword [0], ecx
jmp 0x13ab0
mov byte [0x1cdd7], 1
mov edx, 0
mov ebx, 0
mov dword [0], edx
mov ecx, 0
mov edx, 0
mov dword [0], ebx
mov ebx, 0
mov dword [0], ecx
mov ecx, 0
mov dword [0], edx
mov dword [0], ebx
mov dword [0], ecx
jmp 0x13a99
mov byte [0x1cdd6], 1
jmp 0x13a82
push ebp
mov ebp, esp
sub esp, 0x1c
mov dword [var_ch], ebx
mov ebx, dword [arg_10h]
mov dword [var_8h], esi
mov esi, dword [arg_ch]
mov dword [var_4h], edi
mov edi, dword [arg_8h]
mov dword [var_10h], 0
mov dword [var_sp_8h], ebx
mov dword [var_sp_4h], esi
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
je 0x14e80
mov dword [var_sp_4h], esi
lea eax, [ebx + 0x14]
mov dword [var_sp_8h], eax
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
je 0x14e80
mov dword [var_sp_4h], esi
lea edx, [ebx + 0x28]
mov dword [var_sp_8h], edx
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
je 0x14e80
mov dword [var_sp_4h], esi
lea ecx, [ebx + 0x3c]
mov dword [var_sp_8h], ecx
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
je 0x14e80
mov dword [var_sp_4h], esi
lea eax, [ebx + 0x64]
mov dword [var_sp_8h], eax
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
jne 0x14e87
lea esi, [esi]
lea edi, [edi]
mov dword [var_10h], 1
mov eax, dword [var_10h]
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 4
mov eax, dword [arg_8h]
fld dword [0x15854]
mov edx, dword [arg_ch]
mov ecx, dword [arg_10h]
fld dword [eax + 4]
mov ebx, dword [arg_14h]
fmul st(1)
fsincos
fxch st(1)
fstp dword [ebp - 8]
fld dword [ebp - 8]
fxch st(1)
fstp dword [ebp - 8]
fld dword [eax]
fld dword [ebp - 8]
fxch st(1)
fmul st(3)
fsincos
fxch st(1)
fstp dword [ebp - 8]
fld dword [ebp - 8]
fxch st(1)
fstp dword [ebp - 8]
fxch st(3)
fmul dword [eax + 8]
fld dword [ebp - 8]
fxch st(1)
fsincos
fxch st(1)
fstp dword [ebp - 8]
test edx, edx
fld dword [ebp - 8]
fxch st(1)
fstp dword [ebp - 8]
fld dword [ebp - 8]
je 0xe13d
fld st(2)
fmul st(4)
fld st(5)
fmul st(2)
fxch st(1)
fstp dword [edx]
fld st(2)
fmul st(7)
fmul st(5)
fsubrp st(1)
fld st(2)
fmul st(6)
fxch st(1)
fstp dword [edx + 4]
fld st(1)
fmul st(7)
fmul st(5)
faddp st(1)
fstp dword [edx + 8]
test ecx, ecx
je 0xe170
fld st(2)
fmul st(5)
fld st(1)
fmul st(5)
fxch st(5)
fmul st(3)
fxch st(1)
fstp dword [ecx]
fld st(2)
fmul st(7)
fmul st(6)
faddp st(5)
fxch st(4)
fstp dword [ecx + 4]
fld st(0)
fmul st(6)
fmulp st(5)
fxch st(4)
fsubrp st(3)
fxch st(2)
fstp dword [ecx + 8]
jmp 0xe180
nop
fstp st(3)
fstp st(3)
fxch st(1)
fxch st(2)
fxch st(1)
lea esi, [esi]
test ebx, ebx
je 0xe1a0
fxch st(3)
fchs
fxch st(1)
fmul st(3)
fxch st(2)
fmulp st(3)
fstp dword [ebx]
fstp dword [ebx + 4]
fstp dword [ebx + 8]
jmp 0xe1b0
lea esi, [esi]
fstp st(0)
fstp st(0)
fstp st(0)
fstp st(0)
nop
lea esi, [esi]
pop ecx
pop ebx
pop ebp
ret
push ebp
fldz
mov ebp, esp
sub esp, 0x38
mov dword [var_ch], ebx
mov ebx, dword [arg_8h]
mov dword [var_8h], esi
mov esi, dword [arg_ch]
mov dword [var_4h], edi
mov edi, dword [arg_10h]
fld dword [ebx]
fucompi st(1)
jne 0xdad7
jp 0xdad7
fld dword [ebx + 4]
fucomi st(1)
jne 0xdada
jp 0xdada
fstp st(0)
fst dword [esi]
mov edx, 0xbf800000
mov dword [esi + 4], edx
fst dword [esi + 8]
mov eax, dword [ebx + 8]
fst dword [edi + 4]
fstp dword [edi + 8]
xor eax, 0x80000000
mov dword [edi], eax
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
fld dword [ebx + 4]
mov dword [var_28h], 0
mov ecx, 0x3f800000
mov dword [var_20h], ecx
mov dword [var_24h], 0
fld dword [ebx + 8]
fmul st(2), st(0)
fxch st(1)
fsubrp st(2)
fxch st(1)
fstp dword [esi]
fld dword [ebx]
fld dword [ebp - 0x28]
fld st(1)
fxch st(3)
fmul st(1)
fxch st(3)
fmul dword [ebp - 0x20]
fsubp st(3)
fxch st(2)
fstp dword [esi + 4]
fxch st(1)
fmul dword [ebx + 4]
fxch st(1)
fmul dword [ebp - 0x24]
fsubrp st(1)
fstp dword [esi + 8]
mov dword [esp], esi
call dword [0]
fstp st(0)
fld dword [esi + 8]
fld dword [ebx + 8]
fld dword [esi + 4]
fld st(2)
fmul dword [ebx + 4]
fxch st(1)
fmul st(2)
fsubrp st(1)
fstp dword [edi]
fld dword [ebx]
fld dword [esi]
fxch st(3)
fmul st(1)
fxch st(2)
fmul st(3)
fsubp st(2)
fxch st(1)
fstp dword [edi + 4]
fxch st(1)
fmul dword [ebx + 4]
fxch st(1)
fmul dword [esi + 4]
fsubp st(1)
fstp dword [edi + 8]
mov dword [esp], edi
call dword [0]
fstp st(0)
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
fld dword [ebp + 8]
fsqrt
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x20
fld dword [0x1585c]
mov ecx, dword [arg_8h]
lea edx, [var_18h]
mov eax, dword [arg_ch]
fld dword [ecx + 4]
fld dword [ecx + 8]
fxch st(1)
fmul st(2)
fxch st(1)
fmul st(2)
fxch st(2)
fmul dword [ecx]
fxch st(1)
mov dword [var_4h], eax
fstp dword [ebp - 0x18]
fxch st(1)
mov dword [esp], edx
fstp dword [ebp - 0x14]
fstp dword [ebp - 0x10]
call _Z12AngleIMatrixRK6QAngleR11matrix3x4_t
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
mov edx, dword [arg_8h]
mov ecx, dword [arg_10h]
fld dword [eax]
fld dword [eax + 0xc]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [eax + 0x18]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ecx]
fld dword [eax + 4]
fld dword [eax + 0x10]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [eax + 0x1c]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ecx + 4]
fld dword [eax + 8]
fld dword [eax + 0x14]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [eax + 0x20]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ecx + 8]
fld dword [eax]
fld dword [eax + 0xc]
fmul dword [edx + 0x10]
fxch st(1)
fmul dword [edx + 0xc]
faddp st(1)
fld dword [eax + 0x18]
fmul dword [edx + 0x14]
faddp st(1)
fstp dword [ecx + 0xc]
fld dword [eax + 4]
fld dword [eax + 0x10]
fmul dword [edx + 0x10]
fxch st(1)
fmul dword [edx + 0xc]
faddp st(1)
fld dword [eax + 0x1c]
fmul dword [edx + 0x14]
faddp st(1)
fstp dword [ecx + 0x10]
fld dword [eax + 8]
fld dword [eax + 0x14]
fmul dword [edx + 0x10]
fxch st(1)
fmul dword [edx + 0xc]
faddp st(1)
fld dword [eax + 0x20]
fmul dword [edx + 0x14]
faddp st(1)
fstp dword [ecx + 0x14]
fld dword [eax]
fld dword [eax + 0xc]
fmul dword [edx + 0x1c]
fxch st(1)
fmul dword [edx + 0x18]
faddp st(1)
fld dword [eax + 0x18]
fmul dword [edx + 0x20]
faddp st(1)
fstp dword [ecx + 0x18]
fld dword [eax + 4]
fld dword [eax + 0x10]
fmul dword [edx + 0x1c]
fxch st(1)
fmul dword [edx + 0x18]
faddp st(1)
fld dword [eax + 0x1c]
fmul dword [edx + 0x20]
faddp st(1)
fstp dword [ecx + 0x1c]
fld dword [eax + 8]
fld dword [eax + 0x14]
fmul dword [edx + 0x1c]
fxch st(1)
fmul dword [edx + 0x18]
faddp st(1)
fld dword [eax + 0x20]
fmul dword [edx + 0x20]
faddp st(1)
fstp dword [ecx + 0x20]
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 4
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
cmp ebx, ecx
jle 0xdf11
jmp 0xdf00
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
test ecx, ecx
je 0xdf1e
mov eax, ebx
cdq
mov ebx, ecx
idiv ecx
mov ecx, edx
cmp ebx, ecx
jg 0xdf00
test ebx, ebx
je 0xdf24
mov eax, ecx
cdq
idiv ebx
mov ecx, edx
jmp 0xdf0d
pop edx
mov eax, ebx
pop ebx
pop ebp
ret
pop edx
mov eax, ecx
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 4
mov eax, dword [0]
mov ebx, dword [8]
mov edx, dword [eax]
mov dword [esp], eax
add ebx, 1
call dword [edx + 8]
test al, al
je 0x8bf0
xor eax, eax
test ebx, ebx
jle 0x8bf0
add esp, 4
pop ebx
pop ebp
ret
lea esi, [esi]
xor eax, eax
cmp ebx, 1
setle al
add esp, 4
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x18
mov dword [var_ch], ebx
mov ebx, dword [arg_8h]
mov dword [var_8h], esi
mov esi, dword [arg_ch]
mov dword [var_4h], edi
mov edi, dword [arg_10h]
fld dword [ebx + 0xc]
fstp qword [esp]
call acos
fld dword [0x158b0]
fxch st(1)
fadd st(0)
fstp dword [ebp - 0x10]
fld dword [ebp - 0x10]
fmul dword [0x1585c]
fucomi st(1)
fstp st(1)
jbe 0x10225
fsub dword [0x1587c]
fstp dword [edi]
mov ecx, dword [ebx]
mov dword [esi], ecx
mov edx, dword [ebx + 4]
mov dword [esi + 4], edx
mov eax, dword [ebx + 8]
mov dword [esi + 8], eax
mov dword [esp], esi
call dword [0]
fstp st(0)
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
xor eax, eax
mov ebp, esp
pop ebp
ret
push ebp
mov edx, 0x3f800000
mov ebp, esp
sub esp, 4
mov eax, dword [arg_8h]
mov dword [var_4h], edx
movups xmm4, xmmword [eax]
movaps xmm1, xmm4
mulps xmm1, xmm4
movhlps xmm3, xmm1
movaps xmm2, xmm1
shufps xmm2, xmm2, 1
addss xmm1, xmm2
addss xmm1, xmm3
maxss xmm1, xmm5
rcpss xmm0, xmm1
movss dword [var_4h], xmm0
fld dword [ebp - 4]
leave
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
fld dword [0x1587c]
fld dword [ebp + 8]
fld st(1)
fxch st(1)
fprem
fnstsw ax
sahf
jp 0x13e13
fstp st(1)
fstp dword [ebp - 4]
fld dword [ebp - 4]
fld dword [0x158b0]
fxch st(1)
fucomi st(1)
fstp st(1)
jbe 0x13e32
fsub st(1)
fld dword [0x158ec]
fucompi st(1)
jbe 0x13e40
faddp st(1)
jmp 0x13e42
fstp st(1)
leave
ret
push ebp
mov ebp, esp
lea eax, [var_48h]
push edi
push esi
push ebx
sub esp, 0x78
mov edx, dword [arg_10h]
fld dword [0x156a8]
mov edi, dword [arg_ch]
mov esi, dword [arg_8h]
fld dword [edx]
mov ecx, dword [arg_14h]
mov ebx, dword [arg_18h]
fld dword [edx + 4]
fld dword [edx + 8]
fxch st(2)
fadd dword [edi]
fxch st(1)
fadd dword [edi + 4]
fxch st(2)
fadd dword [edi + 8]
fxch st(1)
mov dword [var_5ch], esi
fmul st(3)
fxch st(2)
mov esi, dword [var_5ch]
mov dword [var_60h], ecx
lea ecx, [var_28h]
fmul st(3)
fxch st(1)
mov dword [var_64h], ebx
fmulp st(3)
fxch st(1)
fst dword [ebp - 0x28]
fsubr dword [edx]
fxch st(1)
fst dword [ebp - 0x24]
fsubr dword [edx + 4]
fxch st(2)
fst dword [ebp - 0x20]
fsubr dword [edx + 8]
fxch st(1)
fstp dword [ebp - 0x38]
fxch st(1)
mov dword [var_8h], eax
fstp dword [ebp - 0x34]
mov dword [var_4h], esi
fstp dword [ebp - 0x30]
mov dword [esp], ecx
call _Z13VectorIRotatePKfRK11matrix3x4_tPf
mov esi, dword [var_38h]
mov edx, dword [var_5ch]
mov ecx, dword [var_34h]
mov dword [var_6ch], esi
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
fmul dword [edx]
fstp dword [ebp - 0x6c]
mov ebx, dword [var_6ch]
and ebx, 0x7fffffff
mov dword [var_6ch], ebx
lea ebx, [edx + 0x10]
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fmul dword [edx + 0x10]
fstp dword [ebp - 0x6c]
mov edi, dword [var_6ch]
and edi, 0x7fffffff
mov dword [var_6ch], edi
lea edi, [edx + 0x20]
mov edx, dword [var_30h]
fld dword [ebp - 0x6c]
mov dword [var_6ch], edx
faddp st(1)
fld dword [ebp - 0x6c]
fmul dword [eax + 0x20]
fstp dword [ebp - 0x70]
mov eax, dword [var_70h]
and eax, 0x7fffffff
mov dword [var_6ch], eax
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fst dword [ebp - 0x58]
fxch st(1)
fmul dword [eax + 4]
fstp dword [ebp - 0x70]
mov eax, dword [var_70h]
and eax, 0x7fffffff
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fmul dword [ebx + 4]
fstp dword [ebp - 0x6c]
mov eax, dword [var_6ch]
and eax, 0x7fffffff
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
mov dword [var_6ch], edx
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fxch st(1)
fmul dword [edi + 4]
fstp dword [ebp - 0x6c]
mov eax, dword [var_6ch]
and eax, 0x7fffffff
mov dword [var_6ch], eax
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fst dword [ebp - 0x54]
fxch st(1)
fmul dword [eax + 8]
fstp dword [ebp - 0x6c]
mov esi, dword [var_6ch]
mov eax, esi
and eax, 0x7fffffff
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fmul dword [ebx + 8]
fstp dword [ebp - 0x6c]
mov eax, dword [var_6ch]
mov esi, eax
and esi, 0x7fffffff
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
mov dword [var_6ch], edx
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fxch st(1)
fmul dword [edi + 8]
fstp dword [ebp - 0x6c]
fxch st(2)
mov ebx, dword [var_6ch]
mov eax, dword [var_60h]
fsubr dword [ebp - 0x48]
fxch st(1)
mov ecx, ebx
fsubr dword [ebp - 0x44]
and ecx, 0x7fffffff
mov edx, dword [var_64h]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fxch st(2)
fstp dword [eax]
fld dword [ebp - 0x58]
fxch st(3)
faddp st(2)
fxch st(2)
fadd dword [var_48h]
fxch st(2)
fstp dword [eax + 4]
fst dword [ebp - 0x50]
fsubr dword [ebp - 0x40]
fxch st(1)
fstp dword [edx]
fld dword [ebp - 0x54]
fadd dword [var_44h]
fxch st(1)
fstp dword [eax + 8]
fstp dword [edx + 4]
fld dword [ebp - 0x50]
fadd dword [var_40h]
fstp dword [edx + 8]
add esp, 0x78
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x10
mov dword [var_8h], ebx
mov eax, dword [arg_8h]
mov ebx, dword [arg_10h]
mov dword [var_4h], esi
mov esi, dword [arg_ch]
mov dword [var_sp_4h], ebx
mov dword [esp], eax
call _Z16QuaternionMatrixRK10QuaternionR11matrix3x4_t
mov ecx, dword [esi]
mov dword [ebx + 0xc], ecx
mov edx, dword [esi + 4]
mov dword [ebx + 0x1c], edx
mov eax, dword [esi + 8]
mov dword [ebx + 0x2c], eax
mov ebx, dword [var_8h]
mov esi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov eax, str.DoS_Attack_Fixer__www.sourceop.com
mov ebp, esp
pop ebp
ret
push ebp
fldz
mov ebp, esp
push esi
lea esi, [var_18h]
push ebx
sub esp, 0x30
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
mov ebx, dword [arg_14h]
fld dword [edx]
fld dword [eax]
fld dword [edx + 4]
fld dword [eax + 4]
fxch st(2)
fsub st(3)
fxch st(2)
fsub st(1)
fld st(2)
fmul st(3)
fld st(1)
fmul st(2)
faddp st(1)
fld dword [0x158e0]
fucompi st(1)
ja 0x133b2
fstp st(5)
fld st(2)
fld st(1)
fld st(2)
fxch st(1)
fmul dword [ecx + 4]
fxch st(1)
fmul st(4)
fxch st(2)
fmul dword [ecx]
faddp st(1)
fld st(4)
fmul st(6)
faddp st(2)
fsubrp st(1)
fdivrp st(5)
jmp 0x133b4
fstp st(0)
test ebx, ebx
je 0x133c7
fstp st(1)
fstp st(2)
fxch st(2)
fst dword [ebx]
fld dword [edx]
fld dword [edx + 4]
jmp 0x133e0
fxch st(3)
fxch st(1)
fxch st(2)
fxch st(4)
fxch st(2)
jmp 0x133e0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
fxch st(4)
fmul st(2)
fxch st(3)
fmulp st(2)
faddp st(2)
faddp st(2)
fstp dword [esi]
fld dword [ebp - 0x18]
fxch st(1)
fstp dword [esi + 4]
fld dword [ebp - 0x14]
fxch st(1)
fsubr dword [ecx]
fxch st(1)
fsubr dword [ecx + 4]
fxch st(1)
fst dword [ebp - 0x28]
fmul st(0)
fxch st(1)
fst dword [ebp - 0x24]
fmul st(0)
faddp st(1)
fstp dword [esp]
call dword [0]
add esp, 0x30
pop ebx
pop esi
pop ebp
ret
push ebp
fldz
mov ebp, esp
push ebx
mov ecx, dword [arg_ch]
mov eax, dword [arg_10h]
mov edx, dword [arg_14h]
mov ebx, dword [arg_8h]
fld dword [ecx]
fld dword [eax]
fld dword [eax + 4]
fld dword [eax + 8]
fxch st(2)
fsubrp st(3)
fld dword [ecx + 4]
fld st(3)
fxch st(2)
fsubrp st(1)
fld dword [ecx + 8]
fxch st(2)
fmul st(4)
fxch st(3)
fsubrp st(2)
fxch st(3)
fst dword [edx]
fld st(3)
fmul st(4)
fxch st(4)
fst dword [edx + 4]
fxch st(2)
fst dword [edx + 8]
fxch st(3)
faddp st(4)
fld st(2)
fmul st(3)
faddp st(4)
fld dword [0x158e0]
fucompi st(4)
ja 0x12b00
fstp st(4)
fld st(3)
fld st(1)
fmul dword [ebx + 4]
fxch st(1)
fmul dword [ebx]
fxch st(5)
fmul dword [ecx]
fxch st(2)
fmul dword [ecx + 4]
fxch st(5)
faddp st(1)
fld st(2)
fmul dword [ebx + 8]
fxch st(2)
faddp st(5)
fxch st(2)
fmul dword [ecx + 8]
fxch st(2)
faddp st(1)
fxch st(3)
faddp st(1)
fsubp st(2)
fdivp st(1)
jmp 0x12b10
fstp st(0)
fstp st(0)
fstp st(0)
fstp st(0)
nop
lea esi, [esi]
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
pop ebp
mov eax, dword [eax + 8]
ret
push ebp
mov eax, 1
mov ebp, esp
mov edx, dword [arg_8h]
jmp 0x14ce2
lea esi, [esi]
add eax, eax
cmp eax, edx
jl 0x14ce0
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ecx, dword [arg_10h]
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
movzx eax, byte [ecx + 0x10]
cmp al, 2
ja 0xc6d0
fld dword [ecx + 0xc]
movzx edx, al
mov eax, 1
fld dword [ebx + edx*4]
fucompi st(1)
jae 0xc742
fld dword [esi + edx*4]
fxch st(1)
fucompi st(1)
fstp st(0)
sbb eax, eax
not eax
add eax, 3
pop ebx
pop esi
pop ebp
ret
movzx eax, byte [ecx + 0x11]
fldz
fld st(0)
cmp eax, 7
ja case.default.0xc6e1
fstp st(0)
fstp st(0)
jmp dword [eax*4 + 0x15834]
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fld st(2)
fld st(2)
fmul dword [ebx + 4]
fxch st(1)
fmul dword [esi]
fxch st(4)
fmul dword [ebx]
fxch st(3)
fmul dword [esi + 4]
fxch st(4)
faddp st(1)
fld st(1)
fmul dword [ebx + 8]
faddp st(1)
fxch st(1)
fmul dword [esi + 8]
fxch st(2)
faddp st(3)
fxch st(2)
faddp st(1)
fxch st(1)
pop ebx
mov eax, 0
mov edx, 1
fld dword [ecx + 0xc]
fxch st(1)
pop esi
fucompi st(1)
cmovb edx, eax
mov eax, edx
or eax, 2
pop ebp
fucompi st(1)
fstp st(0)
cmovbe eax, edx
ret
fstp st(0)
pop ebx
pop esi
pop ebp
ret
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fld st(2)
fld st(2)
fmul dword [ebx + 4]
fxch st(1)
fmul dword [ebx]
fxch st(4)
fmul dword [esi]
jmp 0xc6ff
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fld st(2)
fld st(2)
fmul dword [esi + 4]
fxch st(1)
fmul dword [esi]
fxch st(4)
fmul dword [ebx]
fxch st(3)
fmul dword [ebx + 4]
fxch st(4)
faddp st(1)
fld st(1)
fmul dword [esi + 8]
faddp st(1)
fxch st(1)
fmul dword [ebx + 8]
jmp 0xc714
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fld st(2)
fld st(2)
fmul dword [esi + 4]
fxch st(1)
fmul dword [ebx]
fxch st(4)
fmul dword [esi]
jmp 0xc778
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fld st(2)
fld st(2)
fmul dword [ebx + 4]
fxch st(1)
fmul dword [esi]
fxch st(4)
fmul dword [ebx]
fxch st(3)
fmul dword [esi + 4]
jmp 0xc77d
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fld st(2)
fld st(2)
fmul dword [ebx + 4]
fxch st(1)
fmul dword [ebx]
fxch st(4)
fmul dword [esi]
fxch st(3)
fmul dword [esi + 4]
jmp 0xc77d
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fld st(2)
fld st(2)
fmul dword [esi + 4]
fxch st(1)
fmul dword [esi]
fxch st(4)
fmul dword [ebx]
fxch st(3)
fmul dword [ebx + 4]
jmp 0xc704
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fld st(2)
fld st(2)
fmul dword [esi + 4]
fxch st(1)
fmul dword [ebx]
fxch st(4)
fmul dword [esi]
fxch st(3)
fmul dword [ebx + 4]
jmp 0xc704
push ebp
mov ebp, esp
push esi
lea esi, [var_28h]
push ebx
sub esp, 0x58
mov ecx, dword [arg_10h]
mov ebx, dword [arg_ch]
mov edx, dword [arg_14h]
mov eax, dword [arg_8h]
fld dword [ecx]
fld dword [ebx]
fld dword [edx]
fld st(2)
fsub st(2)
fld dword [edx + 4]
movss xmm0, dword [edx + 8]
fld dword [eax]
fxch st(2)
fstp dword [ebp - 0x2c]
movss xmm1, dword [var_2ch]
fld dword [eax + 4]
fld dword [eax + 8]
fxch st(4)
ucomiss xmm1, dword [0x158bc]
fst dword [ebp - 0x28]
fxch st(2)
fst dword [ebp - 0x24]
movss dword [var_20h], xmm0
jp 0x10ba5
je 0x10c06
fxch st(3)
fucomi st(5)
jp 0x10c60
jne 0x10c60
fstp st(5)
fxch st(3)
fstp dword [ebp - 0x10]
fxch st(2)
fstp dword [ebp - 0x14]
fxch st(2)
fstp dword [ebp - 0x18]
fucomi st(2)
jp 0x10bcc
je 0x10c20
fld dword [ebp - 0x2c]
fxch st(1)
fsub st(3)
fdiv st(1), st(0)
fmul st(1)
faddp st(3)
fld dword [ecx + 4]
fsub st(2), st(0)
fxch st(3)
fstp dword [esi]
fmul st(1), st(0)
fxch st(2)
faddp st(1)
fstp dword [esi + 4]
fld dword [ecx + 8]
movss dword [var_3ch], xmm0
fld dword [ebp - 0x3c]
fsub st(1)
fmulp st(2)
fadd st(1)
fxch st(1)
fstp dword [ebp - 0x3c]
fstp dword [esi + 8]
jmp 0x10c30
fstp st(0)
fstp st(1)
fstp st(3)
fstp st(3)
fstp dword [ebp - 0x10]
fstp dword [ebp - 0x14]
fstp dword [ebp - 0x18]
jmp 0x10c30
lea esi, [esi]
fstp st(0)
fstp st(0)
fstp st(0)
lea esi, [esi]
lea edi, [edi]
mov dword [var_8h], ecx
mov eax, dword [arg_1ch]
lea ecx, [var_18h]
mov dword [var_ch], esi
mov edx, dword [arg_18h]
mov dword [var_4h], ebx
mov dword [var_14h], eax
mov dword [var_10h], edx
mov dword [esp], ecx
call _Z18Catmull_Rom_SplineRK6VectorS1_S1_S1_fRS_
add esp, 0x58
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
fld st(5)
fsub st(1)
fxch st(1)
fsub st(6)
fxch st(1)
fdivr dword [ebp - 0x2c]
fmul st(1), st(0)
fxch st(6)
faddp st(1)
fstp dword [ebp - 0x18]
fld dword [ebx + 4]
fsub st(1), st(0)
fxch st(1)
fmul st(5)
faddp st(1)
fstp dword [ebp - 0x14]
fld dword [ebx + 8]
fsub st(3), st(0)
fxch st(3)
fmulp st(4)
fxch st(2)
faddp st(3)
fxch st(2)
fstp dword [ebp - 0x10]
jmp 0x10bc6
push ebp
fldz
mov ebp, esp
sub esp, 0x10
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
fld dword [eax + 4]
fucomi st(1)
jne 0xdbd0
jp 0xdbd0
fld dword [eax]
fucomi st(2)
jne 0xdbd2
jp 0xdbd2
fstp st(0)
fstp st(0)
fld dword [eax + 8]
mov dword [edx + 8], 0
fld st(1)
fld dword [0x15874]
fxch st(2)
fucompi st(3)
fstp st(2)
fld dword [0x15878]
fxch st(2)
fstp dword [edx + 4]
fcmovbe st(0), st(1)
fstp st(1)
fstp dword [edx]
leave
ret
mov esi, esi
fld dword [eax]
fld st(1)
fld st(1)
fpatan
fstp qword [ebp - 8]
fld qword [ebp - 8]
fmul qword [0x15908]
fld qword [0x158f8]
fdiv st(1), st(0)
fxch st(1)
fstp dword [ebp - 0xc]
fld dword [ebp - 0xc]
fxch st(4)
fucomi st(4)
ja 0xdc47
fxch st(3)
fmul st(0)
fxch st(2)
fmul st(0)
faddp st(2)
fxch st(1)
fsqrt
fstp dword [ebp - 0xc]
fld dword [eax + 8]
fld dword [ebp - 0xc]
fxch st(1)
fchs
fxch st(1)
fpatan
fstp qword [ebp - 8]
fld qword [ebp - 8]
fmul qword [0x15908]
fdivrp st(1)
fstp dword [ebp - 0xc]
fld dword [ebp - 0xc]
fxch st(1)
fucompi st(1)
jbe 0xdc39
fadd dword [0x1587c]
fstp dword [edx]
fstp dword [edx + 4]
mov dword [edx + 8], 0
leave
ret
fxch st(4)
fadd dword [0x1587c]
fxch st(4)
jmp 0xdbfa
push ebp
fldz
mov ebp, esp
push esi
lea esi, [var_18h]
push ebx
sub esp, 0x20
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
mov ebx, dword [arg_14h]
fld dword [edx]
fld dword [eax]
fld dword [edx + 4]
fld dword [eax + 4]
fxch st(2)
fsub st(3)
fxch st(2)
fsub st(1)
fld st(2)
fmul st(3)
fld st(1)
fmul st(2)
faddp st(1)
fld dword [0x158e0]
fucompi st(1)
ja 0x13722
fstp st(5)
fld st(2)
fld st(1)
fld st(2)
fxch st(1)
fmul dword [ecx + 4]
fxch st(1)
fmul st(4)
fxch st(2)
fmul dword [ecx]
faddp st(1)
fld st(4)
fmul st(6)
faddp st(2)
fsubrp st(1)
fdivrp st(5)
jmp 0x13724
fstp st(0)
fld1
fxch st(5)
fucomi st(5)
ja 0x13738
fstp st(5)
fldz
fucomi st(5)
fcmovbe st(0), st(5)
fstp st(5)
jmp 0x1373a
fstp st(0)
test ebx, ebx
je 0x13750
fstp st(1)
fstp st(2)
fxch st(2)
fst dword [ebx]
fld dword [edx]
fld dword [edx + 4]
jmp 0x13760
lea esi, [esi]
fxch st(3)
fxch st(1)
fxch st(2)
fxch st(4)
fxch st(2)
lea esi, [esi]
fxch st(4)
fmul st(2)
fxch st(3)
fmulp st(2)
faddp st(2)
faddp st(2)
fstp dword [esi]
fld dword [ebp - 0x18]
fxch st(1)
fstp dword [esi + 4]
fld dword [ebp - 0x14]
fxch st(1)
fsubr dword [ecx]
fxch st(1)
fsubr dword [ecx + 4]
fxch st(1)
add esp, 0x20
pop ebx
fmul st(0)
fxch st(1)
fmul st(0)
pop esi
pop ebp
faddp st(1)
ret
push ebp
xor edx, edx
mov ebp, esp
push edi
fldz
push esi
push ebx
sub esp, 0x5c
mov eax, dword [arg_ch]
fld qword [ebp + 0x18]
mov dword [var_20h], 0
mov esi, dword [arg_14h]
shl eax, 5
fld qword [ebp + 0x20]
fxch st(2)
add eax, 0x10
sub esp, eax
fst qword [ebp - 0x48]
lea edi, [var_fh]
sub esp, eax
fst qword [ebp - 0x40]
and edi, 0xfffffff0
lea ebx, [var_fh]
fstp qword [ebp - 0x38]
and ebx, 0xfffffff0
cmp edx, dword [arg_ch]
mov dword [var_24h], 0
mov dword [var_28h], 0
jge 0x149df
fld st(1)
xor ecx, ecx
fchs
jmp 0x1499f
mov esi, esi
fxch st(1)
xor eax, eax
fucomi st(1)
fstp st(1)
setbe al
inc eax
add ecx, 0x18
mov dword [ebx + edx*4], eax
mov eax, dword [ebx + edx*4]
inc edx
inc dword [ebp + eax*4 - 0x28]
cmp edx, dword [arg_ch]
jge 0x149dd
fld qword [esi]
mov eax, dword [arg_8h]
fld qword [esi + 8]
fmul qword [ecx + eax + 8]
fxch st(1)
fmul qword [ecx + eax]
faddp st(1)
fld qword [esi + 0x10]
fmul qword [ecx + eax + 0x10]
faddp st(1)
fsub st(2)
fucomi st(3)
fst qword [edi + edx*8]
jbe 0x14980
fstp st(0)
mov dword [ebx + edx*4], 0
add ecx, 0x18
mov eax, dword [ebx + edx*4]
inc edx
inc dword [ebp + eax*4 - 0x28]
cmp edx, dword [arg_ch]
jl 0x1499f
fstp st(0)
fstp st(0)
fstp st(0)
fld qword [edi]
xor eax, eax
mov esi, dword [ebx]
mov dword [ebx + edx*4], esi
mov ecx, dword [var_28h]
fstp qword [edi + edx*8]
test ecx, ecx
je 0x14a1c
mov edx, dword [var_24h]
test edx, edx
jne 0x14a24
mov ebx, dword [arg_ch]
lea edx, [ebx + ebx*2]
cmp edx, 0
jmp 0x14a17
mov ecx, dword [arg_8h]
mov edi, dword [arg_10h]
fld qword [ecx + eax*8]
fstp qword [edi + eax*8]
inc eax
cmp edx, eax
jg 0x14a08
mov eax, dword [arg_ch]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov dword [var_4ch], 0
mov eax, dword [arg_ch]
xor esi, esi
cmp esi, eax
jge 0x14afc
mov dword [var_54h], 0
nop
mov edx, dword [arg_8h]
lea eax, [esi + esi*2]
lea ecx, [edx + eax*8]
mov edx, dword [ebx + esi*4]
cmp edx, 2
mov dword [var_5ch], edx
je 0x14b07
mov edx, dword [var_5ch]
test edx, edx
jne 0x14a81
fld qword [ecx]
mov edx, dword [var_54h]
mov eax, dword [arg_10h]
inc dword [var_4ch]
fstp qword [edx + eax]
fld qword [ecx + 8]
fstp qword [edx + eax + 8]
fld qword [ecx + 0x10]
fstp qword [edx + eax + 0x10]
add edx, 0x18
mov dword [var_54h], edx
mov edx, dword [ebx + esi*4 + 4]
lea eax, [esi + 1]
mov dword [var_50h], eax
cmp edx, 2
je 0x14af0
cmp edx, dword [var_5ch]
je 0x14af0
fld qword [edi + esi*8]
cdq
idiv dword [arg_ch]
mov eax, dword [arg_8h]
fld st(0)
fsub qword [edi + esi*8 + 8]
lea edx, [edx + edx*2]
lea edx, [eax + edx*8]
fdivp st(1)
xor eax, eax
fld qword [ecx + eax*8]
fld qword [edx + eax*8]
fsub st(1)
fmul st(2)
faddp st(1)
fstp qword [ebp + eax*8 - 0x48]
inc eax
cmp eax, 2
jle 0x14aaf
fstp st(0)
fld qword [ebp - 0x48]
mov esi, dword [var_54h]
mov ecx, dword [arg_10h]
inc dword [var_4ch]
fstp qword [esi + ecx]
fld qword [ebp - 0x40]
fstp qword [esi + ecx + 8]
fld qword [ebp - 0x38]
fstp qword [esi + ecx + 0x10]
add esi, 0x18
mov dword [var_54h], esi
lea esi, [esi]
mov esi, dword [var_50h]
cmp esi, dword [arg_ch]
jl 0x14a40
mov eax, dword [var_4ch]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
fld qword [ecx]
inc esi
mov edx, dword [var_54h]
inc dword [var_4ch]
mov eax, dword [arg_10h]
mov dword [var_50h], esi
fstp qword [edx + eax]
fld qword [ecx + 8]
fstp qword [edx + eax + 8]
fld qword [ecx + 0x10]
fstp qword [edx + eax + 0x10]
add edx, 0x18
mov dword [var_54h], edx
jmp 0x14af0
push ebp
mov ebp, esp
sub esp, 4
mov eax, dword [arg_8h]
fld dword [eax]
fld dword [eax + 4]
fld dword [eax + 8]
fld st(2)
fld st(2)
fld dword [eax + 0xc]
fxch st(1)
fmul st(4)
fxch st(2)
fmul st(5)
faddp st(2)
fld st(2)
fmul st(3)
faddp st(2)
fld st(0)
fmul st(1)
faddp st(2)
fldz
fxch st(2)
fucomi st(2)
fstp st(2)
jp 0xceca
je 0xcf00
fxch st(1)
fsqrt
fstp dword [ebp - 4]
fld1
fld dword [ebp - 4]
fdiv st(1), st(0)
fxch st(2)
fmul st(1)
fxch st(3)
fmul st(1)
fxch st(4)
fmul st(1)
fxch st(5)
fmulp st(1)
fxch st(2)
fstp dword [eax + 0xc]
fxch st(2)
fstp dword [eax + 8]
fxch st(2)
fstp dword [eax + 4]
fxch st(1)
fstp dword [eax]
jmp 0xcf08
lea esi, [esi]
fstp st(0)
fstp st(1)
fstp st(1)
fstp st(1)
leave
ret
push ebp
mov ebp, esp
sub esp, 0x1c
mov dword [var_ch], ebx
mov ebx, dword [arg_10h]
mov dword [var_8h], esi
mov esi, dword [arg_ch]
mov dword [var_4h], edi
mov edi, dword [arg_8h]
mov dword [var_10h], 0
mov dword [var_sp_8h], ebx
mov dword [var_sp_4h], esi
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
je 0x14dc0
mov dword [var_sp_4h], esi
lea eax, [ebx + 0x14]
mov dword [var_sp_8h], eax
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
je 0x14dc0
mov dword [var_sp_4h], esi
lea edx, [ebx + 0x28]
mov dword [var_sp_8h], edx
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
je 0x14dc0
mov dword [var_sp_4h], esi
lea ecx, [ebx + 0x3c]
mov dword [var_sp_8h], ecx
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
je 0x14dc0
mov dword [var_sp_4h], esi
lea eax, [ebx + 0x50]
mov dword [var_sp_8h], eax
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
je 0x14dc0
mov dword [var_sp_4h], esi
lea edx, [ebx + 0x64]
mov dword [var_sp_8h], edx
mov dword [esp], edi
call _Z14BoxOnPlaneSidePKfS0_PK8cplane_t
cmp eax, 2
jne 0x14dc7
lea esi, [esi]
mov dword [var_10h], 1
mov eax, dword [var_10h]
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
fldz
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_10h]
mov ecx, dword [arg_ch]
fld dword [edx]
fld dword [eax]
fxch st(1)
fucomi st(1)
jbe 0xc894
fsubrp st(1)
fmul st(0)
faddp st(1)
fld dword [eax + 4]
fld dword [edx + 4]
fucomi st(1)
jbe 0xc883
fsubrp st(1)
fmul st(0)
faddp st(1)
fld dword [eax + 8]
fld dword [edx + 8]
fucomi st(1)
jbe 0xc870
fsubrp st(1)
fmul st(0)
faddp st(1)
pop ebp
ret
fstp st(0)
fld dword [ecx + 8]
fxch st(1)
fucomi st(1)
jbe 0xc8a4
pop ebp
fsubrp st(1)
fmul st(0)
faddp st(1)
ret
fstp st(0)
fld dword [ecx + 4]
fxch st(1)
fucomi st(1)
ja 0xc858
fstp st(0)
fstp st(0)
jmp 0xc85e
fstp st(0)
fld dword [ecx]
fxch st(1)
fucomi st(1)
ja 0xc848
fstp st(0)
fstp st(0)
jmp 0xc84e
fstp st(0)
fstp st(0)
pop ebp
jmp 0xc86f
push ebp
mov ebp, esp
sub esp, 0x88
mov dword [var_ch], ebx
mov edx, dword [arg_ch]
lea ebx, [var_48h]
mov dword [var_8h], esi
lea esi, [var_78h]
mov dword [esp], edx
mov dword [var_4h], edi
mov edi, dword [arg_8h]
mov dword [var_sp_4h], ebx
call _Z11AngleMatrixRK6QAngleR11matrix3x4_t
mov dword [var_sp_8h], esi
mov eax, dword [arg_10h]
mov dword [var_sp_4h], ebx
mov dword [esp], eax
call _Z16ConcatTransformsRK11matrix3x4_tS1_RS_
mov dword [var_sp_4h], edi
mov dword [esp], esi
call _Z12MatrixAnglesRK11matrix3x4_tPf
mov eax, edi
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret 4
push ebp
mov ebp, esp
push ebx
sub esp, 4
call 0x151f0
pop ebx
add ebx, 0x1fd8
call fcn.000088c0
pop ecx
pop ebx
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
call fcn.00008977
add ebx, 0xe8fe
sub esp, 0x10
cmp byte [ebx + 0x5c], 0
jne 0x8933
mov eax, dword [ebx - 4]
test eax, eax
je 0x88f4
lea eax, [ebx - 0x118]
mov dword [esp], eax
call sym.imp.__cxa_finalize
lea eax, [ebx - 0x120]
lea edx, [ebx - 0x124]
sub eax, edx
sar eax, 2
lea esi, [eax - 1]
mov eax, dword [ebx + 0x58]
cmp esi, eax
jbe 0x892c
add eax, 1
mov dword [ebx + 0x58], eax
call dword [ebx + eax*4 - 0x124]
mov eax, dword [ebx + 0x58]
cmp esi, eax
ja 0x8912
mov byte [ebx + 0x5c], 1
add esp, 0x10
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov dword [eax], 8
mov dword [eax + 4], 8
pop ebp
ret
push ebp
mov ecx, 0xa0000000
mov ebp, esp
sub esp, 0x18
mov edx, 0x40019999
fld dword [ebp + 8]
mov dword [var_8h], ecx
mov dword [var_ch], edx
fstp qword [esp]
call pow
fstp dword [ebp - 4]
fld dword [ebp - 4]
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_ch]
mov eax, dword [arg_8h]
mov dword [eax + 8], edx
pop ebp
ret
push ebp
xor eax, eax
mov ebp, esp
pop ebp
ret
push ebp
mov edx, 0xc0000000
mov ebp, esp
sub esp, 0x18
mov eax, 0x3fdd1745
fld dword [ebp + 8]
mov dword [var_8h], edx
mov dword [var_ch], eax
fstp qword [esp]
call pow
fstp dword [ebp - 4]
fld dword [ebp - 4]
leave
ret
push ebp
fldz
mov ebp, esp
sub esp, 4
fld dword [ebp + 8]
fxch st(1)
fucomi st(1)
ja 0xecf6
fstp st(0)
fld dword [0x158a4]
fxch st(1)
fucomi st(1)
fstp st(1)
jae 0xecfb
fmul dword [0x15884]
fistp dword [ebp - 4]
mov eax, dword [var_4h]
fld dword [eax*4 + 0x1f5e0]
leave
ret
fstp st(1)
leave
jmp 0xecf5
fstp st(0)
leave
fld1
ret
push ebp
mov eax, 0
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x4c
mov edx, dword [arg_1ch]
fld dword [ebp + 0x18]
mov esi, dword [arg_ch]
mov ecx, dword [arg_8h]
fld dword [0x156a8]
mov dword [edx], eax
fld st(1)
mov dword [edx + 4], eax
fmul st(2)
mov dword [edx + 8], eax
mov ebx, dword [arg_10h]
fld st(2)
fld dword [esi]
fxch st(2)
mov edi, dword [arg_14h]
fmul st(3)
fld dword [ecx]
fxch st(4)
fmulp st(5)
fmul st(1), st(0)
fld dword [ecx + 4]
fld st(2)
fld st(3)
fxch st(1)
fmul dword [0x15888]
fxch st(1)
fchs
fmul st(6), st(0)
fxch st(5)
fmul st(1)
fxch st(2)
fmul st(5)
fxch st(5)
fmul dword [ecx + 8]
fxch st(2)
fstp dword [ebp - 0x38]
fld dword [esi + 4]
fmul st(1)
fxch st(1)
fmul dword [esi + 8]
fxch st(1)
fstp dword [ebp - 0x34]
fld dword [ebx]
fxch st(1)
fstp dword [ebp - 0x30]
fld st(3)
fmul dword [0x158b4]
fmul st(1), st(0)
fxch st(1)
fstp dword [ebp - 0x48]
fld dword [ebx + 4]
fmul st(1)
fxch st(1)
fmul dword [ebx + 8]
fxch st(1)
fstp dword [ebp - 0x44]
fstp dword [ebp - 0x40]
fld dword [edi]
fmul st(3)
fstp dword [ebp - 0x58]
fld dword [edi + 4]
fxch st(5)
fadd dword [edx]
fxch st(5)
fmul st(3)
fxch st(3)
fmul dword [edi + 8]
fxch st(5)
fst dword [edx]
fxch st(3)
fstp dword [ebp - 0x54]
fxch st(3)
fadd dword [edx + 4]
fld dword [ebp - 0x38]
fxch st(5)
fstp dword [ebp - 0x50]
fxch st(3)
fadd dword [edx + 8]
fxch st(4)
faddp st(2)
fxch st(2)
fst dword [edx + 4]
fld dword [ebp - 0x34]
fxch st(4)
fst dword [edx + 8]
fxch st(4)
faddp st(1)
fxch st(3)
fadd dword [var_30h]
fxch st(1)
fst dword [edx]
fadd dword [var_48h]
fxch st(3)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(1)
fst dword [edx + 8]
fadd dword [var_40h]
fxch st(3)
fst dword [edx]
fadd dword [var_58h]
fxch st(1)
fst dword [edx + 4]
fadd dword [var_54h]
fxch st(3)
fst dword [edx + 8]
fadd dword [var_50h]
fxch st(1)
fstp dword [edx]
fld st(1)
fadd st(2)
fxch st(3)
fstp dword [edx + 4]
fstp dword [edx + 8]
fld dword [ecx + 4]
fld dword [ecx]
fld dword [ecx + 8]
fxch st(2)
fmul st(4)
fxch st(1)
fmul st(4)
fld dword [esi]
fxch st(3)
fmulp st(5)
fld st(3)
fmul dword [0x158b8]
fmul st(3), st(0)
fxch st(3)
fstp dword [ebp - 0x38]
fld dword [esi + 4]
fmul st(3)
fxch st(3)
fmul dword [esi + 8]
fxch st(3)
fstp dword [ebp - 0x34]
fld dword [ebx]
fxch st(3)
fstp dword [ebp - 0x30]
fld st(3)
fmul dword [0x15868]
fxch st(4)
fchs
fxch st(3)
fmul st(4)
fstp dword [ebp - 0x48]
fld dword [ebx + 4]
fmul st(4)
fxch st(4)
fmul dword [ebx + 8]
fxch st(4)
fstp dword [ebp - 0x44]
fxch st(3)
fstp dword [ebp - 0x40]
fld dword [edi]
fmul st(2)
fstp dword [ebp - 0x58]
fld dword [edi + 4]
fxch st(3)
fadd dword [edx]
fxch st(3)
fmul st(2)
fxch st(2)
fmul dword [edi + 8]
fxch st(3)
fst dword [edx]
fxch st(2)
fstp dword [ebp - 0x54]
fadd dword [edx + 4]
fld dword [ebp - 0x38]
fxch st(3)
fstp dword [ebp - 0x50]
fxch st(3)
fadd dword [edx + 8]
fxch st(2)
faddp st(1)
fxch st(2)
fst dword [edx + 4]
fld dword [ebp - 0x34]
fxch st(2)
fst dword [edx + 8]
fxch st(2)
faddp st(1)
fld dword [ebp - 0x30]
fxch st(3)
fst dword [edx]
fadd dword [var_48h]
fxch st(3)
faddp st(2)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(1)
fst dword [edx + 8]
fadd dword [var_40h]
fxch st(2)
fst dword [edx]
fxch st(1)
fst dword [edx + 4]
fxch st(2)
fst dword [edx + 8]
fxch st(1)
fadd dword [var_58h]
fxch st(2)
fadd dword [var_54h]
fxch st(1)
fadd dword [var_50h]
fxch st(2)
fstp dword [edx]
fld dword [ebx]
fxch st(1)
fstp dword [edx + 4]
fld st(2)
fxch st(1)
fmul st(3)
fxch st(2)
fstp dword [edx + 8]
fchs
fld dword [ecx]
fld dword [ecx + 4]
fxch st(3)
fstp dword [ebp - 0x38]
fmul st(1)
fxch st(2)
fmul st(1)
fld dword [ebx + 4]
fxch st(2)
fmul dword [ecx + 8]
fxch st(2)
fmul st(4)
fxch st(4)
fmul dword [ebx + 8]
fxch st(3)
fadd dword [edx]
fxch st(4)
fstp dword [ebp - 0x34]
fadd dword [edx + 4]
fxch st(2)
fstp dword [ebp - 0x30]
fxch st(2)
fst dword [edx]
fxch st(2)
fadd dword [edx + 8]
fld dword [ebp - 0x38]
fxch st(2)
fst dword [edx + 4]
fxch st(2)
faddp st(3)
fld dword [ebp - 0x34]
fxch st(1)
fst dword [edx + 8]
fadd dword [var_30h]
fxch st(1)
faddp st(2)
fxch st(2)
fst dword [edx]
fadd dword [esi]
fxch st(1)
fst dword [edx + 4]
fxch st(2)
fst dword [edx + 8]
fxch st(2)
fadd dword [esi + 4]
fxch st(2)
fadd dword [esi + 8]
fxch st(1)
fstp dword [edx]
fxch st(1)
fstp dword [edx + 4]
fstp dword [edx + 8]
add esp, 0x4c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
call entry0
call fcn.00008940
call fcn.000151b0
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.00008977
add ebx, 0xe87f
sub esp, 4
mov edx, dword [ebx - 0x11c]
test edx, edx
je 0x8971
mov edx, dword [ebx - 8]
test edx, edx
je 0x8971
lea eax, [ebx - 0x11c]
mov dword [esp], eax
call edx
add esp, 4
pop ebx
pop ebp
ret
mov ebx, dword [esp]
ret
push ebp
mov ebp, esp
push esi
push ebx
call fcn.00008977
add ebx, 0x200e
lea eax, [ebx - 0x128]
lea esi, [eax - 4]
mov eax, dword [eax - 4]
cmp eax, 0xffffffff
je 0x151dd
sub esi, 4
call eax
mov eax, dword [esi]
cmp eax, 0xffffffff
jne 0x151d1
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
fld dword [eax]
fld dword [eax + 4]
fld dword [eax + 8]
fld st(2)
fld st(2)
fmul st(3)
fxch st(1)
fmul st(4)
faddp st(1)
fld st(1)
fmul st(2)
faddp st(1)
fsqrt
fadd dword [0x15864]
fdivr dword [0x15860]
fmul st(3), st(0)
fmul st(2), st(0)
fmulp st(1)
fxch st(2)
fstp dword [eax]
fstp dword [eax + 4]
fstp dword [eax + 8]
pop ebp
ret
push ebp
mov ebp, esp
movzx eax, byte [0x1cdd6]
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
xor esi, esi
push ebx
sub esp, 0x1c
mov edi, dword [arg_8h]
mov word [var_eh], 0xffff
movzx eax, word [edi + 0x10]
cmp ax, 0xffff
jne 0xbfd4
jmp _ZN10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE7NewNodeEv
cmp byte [0], 0
mov esi, ebx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp si, 0xffff
mov eax, 0
je 0xbfc6
movzx eax, si
shl eax, 4
add eax, dword [edi + 4]
movzx eax, word [eax]
mov esi, 1
cmp ax, 0xffff
je 0xc021
movzx ebx, ax
mov eax, ebx
shl eax, 4
add eax, dword [edi + 4]
add eax, 8
mov dword [var_4h], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call dword [edi]
test al, al
jne 0xbfa3
cmp byte [0], 0
mov esi, ebx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp si, 0xffff
mov eax, 0
je 0xc015
movzx eax, si
shl eax, 4
add eax, dword [edi + 4]
movzx eax, word [eax + 2]
xor esi, esi
cmp ax, 0xffff
jne 0xbfd4
mov word [var_eh], bx
mov dword [esp], edi
call _ZN10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE7NewNodeEv
movzx ecx, ax
mov edx, ecx
mov ebx, ecx
shl edx, 4
mov eax, edx
mov dword [var_14h], edx
movzx edx, word [var_eh]
add eax, dword [edi + 4]
cmp dx, 0xffff
mov word [eax + 4], dx
mov word [eax + 2], 0xffff
mov word [eax], 0xffff
mov word [eax + 6], 0
je 0xc144
mov eax, esi
test al, al
je 0xc130
movzx eax, dx
mov edx, dword [edi + 4]
shl eax, 4
mov word [eax + edx], cx
mov dword [var_4h], ebx
mov dword [esp], edi
call _ZN10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE15InsertRebalanceEt
mov edx, dword [var_14h]
add edx, dword [edi + 4]
add word [edi + 0x12], 1
mov ecx, edx
add ecx, 8
je 0xc0a5
mov esi, dword [arg_ch]
mov eax, dword [esi]
mov dword [edx + 8], eax
mov eax, dword [esi + 4]
mov dword [ecx + 4], eax
add esp, 0x1c
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret
nop
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xc001
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xbfb2
movzx eax, word [var_eh]
mov edx, dword [edi + 4]
shl eax, 4
mov word [eax + edx + 2], cx
jmp 0xc079
mov word [edi + 0x10], cx
jmp 0xc079
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x3c
mov eax, dword [arg_8h]
mov ebx, dword [arg_ch]
mov dword [var_2ch], eax
cmp eax, ebx
je 0xd7cd
mov esi, dword [var_2ch]
lea edi, [ebx + 0x10]
lea ecx, [esi + 0x10]
fld dword [esi]
lea edx, [esi + 0x20]
fst dword [ebx]
fld dword [esi + 0x10]
fst dword [ebx + 4]
fld dword [esi + 0x20]
fst dword [ebx + 8]
fld dword [esi + 4]
fst dword [ebx + 0x10]
mov eax, dword [ecx + 4]
mov dword [edi + 4], eax
mov esi, dword [edx + 4]
mov eax, dword [var_2ch]
mov dword [edi + 8], esi
lea esi, [ebx + 0x20]
fld dword [eax + 8]
fst dword [ebx + 0x20]
mov eax, dword [ecx + 8]
mov dword [esi + 4], eax
mov eax, dword [edx + 8]
mov dword [esi + 8], eax
mov eax, dword [var_2ch]
fld dword [eax + 0xc]
fst dword [ebp - 0x28]
fmulp st(5)
fld dword [ecx + 0xc]
fst dword [ebp - 0x24]
fmulp st(4)
fld dword [edx + 0xc]
fxch st(5)
faddp st(4)
fxch st(4)
fst dword [ebp - 0x20]
fmulp st(2)
fxch st(2)
faddp st(1)
fchs
fstp dword [ebx + 0xc]
fld dword [ebp - 0x24]
fld dword [ebp - 0x28]
fld dword [ebp - 0x20]
fld st(2)
fxch st(4)
fmul st(2)
fxch st(4)
fmul dword [edi + 4]
fxch st(2)
fmulp st(5)
fxch st(3)
faddp st(1)
fld st(2)
fmul dword [edi + 8]
faddp st(1)
fchs
fstp dword [edi + 0xc]
fmul dword [esi + 4]
fxch st(1)
fmul dword [esi + 8]
fxch st(2)
faddp st(1)
faddp st(1)
fchs
fstp dword [esi + 0xc]
add esp, 0x3c
pop ebx
pop esi
pop edi
pop ebp
ret
lea edi, [ebx + 0x10]
lea esi, [ebx + 4]
mov dword [esp], esi
lea esi, [ebx + 0x20]
mov dword [var_4h], edi
call _Z4swapIfEvRT_S1_
mov dword [var_4h], esi
lea eax, [ebx + 8]
mov dword [esp], eax
call _Z4swapIfEvRT_S1_
lea ecx, [ebx + 0x24]
lea edx, [ebx + 0x18]
mov dword [var_4h], ecx
mov dword [esp], edx
call _Z4swapIfEvRT_S1_
fld dword [ebx]
mov ecx, edi
mov edx, esi
fld dword [ebx + 4]
fld dword [ebx + 8]
fld dword [ebx + 0x10]
fld dword [ebx + 0x20]
jmp 0xd760
push ebp
fldz
mov ebp, esp
push esi
mov edx, dword [arg_8h]
fld st(0)
push ebx
mov esi, dword [arg_10h]
xor eax, eax
mov ebx, dword [arg_ch]
fld dword [edx + eax*4]
fld dword [ebx + eax*4]
inc eax
fld st(1)
fsub st(1)
fxch st(2)
cmp eax, 3
faddp st(1)
fxch st(1)
fmul st(0)
fxch st(1)
fmul st(0)
fxch st(3)
faddp st(1)
fxch st(1)
faddp st(2)
jg 0xf7f6
nop
lea esi, [esi]
fxch st(1)
fld dword [edx + eax*4]
fld dword [ebx + eax*4]
inc eax
fld st(1)
fsub st(1)
fxch st(2)
cmp eax, 3
faddp st(1)
fxch st(1)
fmul st(0)
fxch st(1)
fmul st(0)
fxch st(3)
faddp st(1)
fxch st(1)
faddp st(2)
jle 0xf7d0
fucompi st(1)
fstp st(0)
jbe 0xf817
xor ecx, ecx
mov edx, esi
mov eax, dword [ebx + ecx*4]
inc ecx
xor eax, 0x80000000
mov dword [edx], eax
add edx, 4
cmp ecx, 3
jle 0xf800
pop ebx
pop esi
pop ebp
ret
cmp esi, ebx
je 0xf813
xor ecx, ecx
mov edx, esi
nop
mov esi, dword [ebx + ecx*4]
inc ecx
mov dword [edx], esi
add edx, 4
cmp ecx, 3
jle 0xf820
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
push ebx
mov ecx, dword [arg_ch]
mov ebx, dword [edx]
mov eax, dword [ecx]
mov dword [edx], eax
mov dword [ecx], ebx
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [eax]
mov eax, dword [arg_ch]
pop ebp
cmp edx, dword [eax]
setb al
movzx eax, al
ret
push ebp
mov ebp, esp
sub esp, 4
rsqrtss xmm0, dword [var_4h]
movss dword [arg_8h], xmm0
fld dword [ebp - 4]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
movss xmm0, dword [0x15860]
mov eax, dword [arg_8h]
mov ecx, dword [eax]
mov dword [var_8h], ecx
mov edx, dword [eax + 4]
mov dword [var_4h], edx
movd mm2, dword [eax + 8]
mov dword [var_10h], ecx
mov dword [var_ch], edx
femms
movss dword [var_14h], xmm0
movq mm1, qword [var_8h]
movq mm0, qword [var_10h]
movd mm3, dword [var_14h]
pfmul mm1, mm1
pfmul mm2, mm2
pfacc mm1, mm1
pfadd mm2, mm1
pfmax mm0, mm2
pfrcp mm1, mm2
movq mm3, mm1
movd dword [ebp - 0x14], mm3
femms
fld dword [ebp - 0x14]
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
mov edx, dword [arg_8h]
pop ebp
fld dword [eax]
fld dword [eax + 4]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [eax + 8]
fmul dword [edx + 8]
faddp st(1)
fld dword [eax + 0xc]
fmul dword [edx + 0xc]
faddp st(1)
ret
push ebp
mov ebp, esp
sub esp, 0x28
fld dword [ebp + 0xc]
mov edx, dword [arg_8h]
mov eax, dword [arg_10h]
mov ecx, dword [arg_14h]
fld dword [edx]
fsubr dword [eax]
fxch st(1)
fstp dword [ebp - 0x20]
fst dword [ebp - 0x18]
fld dword [edx + 4]
fsubr dword [eax + 4]
fst dword [ebp - 0x14]
fld dword [edx + 8]
fsubr dword [eax + 8]
xor eax, eax
fst dword [ebp - 0x10]
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fld st(2)
fld st(2)
fmul st(3)
fxch st(1)
fmul st(4)
fxch st(3)
fmul st(6)
fxch st(4)
fmul st(7)
fxch st(3)
faddp st(1)
fld st(1)
fmul st(2)
fxch st(7)
fmul st(0)
fxch st(6)
fmul st(0)
fxch st(2)
fmul st(5)
fxch st(1)
faddp st(7)
fxch st(4)
fmul st(0)
fld dword [ebp - 0x20]
fxch st(6)
faddp st(2)
fxch st(2)
faddp st(3)
fxch st(4)
fmul st(0)
fxch st(4)
faddp st(1)
fxch st(1)
faddp st(2)
fsubrp st(2)
fld st(2)
fxch st(1)
fadd st(0)
fxch st(1)
fmul dword [0x15868]
fld st(1)
fmul st(2)
fxch st(1)
fmulp st(3)
fsubrp st(2)
fld dword [0x1586c]
fucompi st(2)
jae 0xce28
fxch st(1)
fsqrt
fstp dword [ebp - 0x1c]
mov eax, dword [arg_18h]
fld st(1)
fld dword [ebp - 0x1c]
fxch st(1)
faddp st(3)
mov ecx, dword [arg_1ch]
fld st(0)
fsub st(2)
fxch st(2)
fchs
fxch st(2)
fdiv st(3)
fxch st(2)
fsubrp st(1)
fxch st(1)
fstp dword [eax]
mov eax, 1
fdivrp st(1)
fstp dword [ecx]
jmp 0xce2e
fstp st(0)
fstp st(0)
fstp st(0)
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x30
mov ebx, dword [arg_8h]
mov esi, dword [arg_10h]
fld dword [ebx]
fld dword [ebx + 4]
fxch st(1)
fmul st(0)
fxch st(1)
fmul st(0)
faddp st(1)
fld dword [ebx + 8]
fmul st(0)
faddp st(1)
fsqrt
fstp dword [ebp - 0xc]
fld1
fld dword [ebp - 0xc]
fxch st(1)
fst dword [ebp - 0x28]
fucomi st(1)
fcmovnbe st(0), st(1)
fstp st(1)
fst qword [esp]
fstp dword [ebp - 0x18]
call asin
fmul dword [ebp + 0xc]
fstp qword [esp]
call sin
fld dword [ebp - 0x18]
fxch st(1)
fstp dword [ebp - 0xc]
fadd dword [0x15864]
fld dword [ebp - 0xc]
fld dword [ebx]
fld dword [ebp - 0x28]
fxch st(3)
fdivr st(2)
fmul st(1), st(0)
fxch st(2)
fmul st(0)
fxch st(1)
fstp dword [esi]
fsubp st(2)
fldz
fld dword [ebx + 4]
fxch st(1)
fucomi st(3)
fxch st(3)
fcmovnbe st(0), st(3)
fxch st(1)
fmul st(2)
fstp dword [esi + 4]
fxch st(1)
fmul dword [ebx + 8]
fstp dword [esi + 8]
fsqrt
fstp dword [ebp - 0xc]
mov eax, dword [var_ch]
fld dword [ebx + 0xc]
fxch st(1)
fucompi st(1)
fstp st(0)
jbe 0xff79
xor eax, 0x80000000
mov dword [esi + 0xc], eax
add esp, 0x30
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov dword [eax], 8
pop ebp
jmp _ZdlPv
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x2c
movzx eax, word [arg_ch]
cmp byte [0], 0
mov esi, dword [arg_8h]
movzx edx, ax
mov word [var_22h], ax
mov word [var_20h], ax
mov dword [var_28h], edx
mov word [var_16h], dx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
movzx ecx, word [var_16h]
mov dword [var_1ch], ecx
shl ecx, 4
mov eax, ecx
add eax, dword [esi + 4]
mov dword [var_14h], ecx
movzx edi, word [eax + 2]
cmp byte [0], 0
mov word [var_1eh], di
mov ebx, edi
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
mov dword [var_10h], 0xffff0
je 0xb251
movzx eax, bx
shl eax, 4
mov dword [var_10h], eax
add eax, dword [esi + 4]
mov edx, dword [esi + 4]
movzx eax, word [eax]
mov ecx, dword [var_14h]
mov word [edx + ecx + 2], ax
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xb27d
mov eax, dword [var_10h]
add eax, dword [esi + 4]
cmp word [eax], 0xffff
je 0xb2b3
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
add bx, 1
mov eax, 0
je 0xb2a1
mov eax, dword [var_10h]
add eax, dword [esi + 4]
movzx eax, word [eax]
mov edx, dword [esi + 4]
movzx ecx, word [var_20h]
shl eax, 4
mov word [eax + edx + 4], cx
cmp di, 0xffff
je 0xb2e7
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
mov eax, 0
je 0xb2d8
mov eax, dword [var_14h]
add eax, dword [esi + 4]
mov edx, dword [esi + 4]
movzx eax, word [eax + 4]
mov ecx, dword [var_10h]
mov word [ecx + edx + 4], ax
movzx eax, word [esi + 0x10]
cmp dword [var_28h], eax
je 0xb380
cmp byte [0], 0
movzx ebx, word [var_1ch]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xb319
movzx eax, bx
shl eax, 4
add eax, dword [esi + 4]
cmp byte [0], 0
movzx ebx, word [eax + 4]
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0xb33e
movzx eax, bx
shl eax, 4
add eax, dword [esi + 4]
movzx edx, word [var_20h]
cmp word [eax], dx
je 0xb3b0
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
mov eax, 0
je 0xb366
mov eax, dword [var_14h]
add eax, dword [esi + 4]
movzx eax, word [eax + 4]
mov edx, dword [esi + 4]
movzx ecx, word [var_1eh]
shl eax, 4
mov word [eax + edx + 2], cx
jmp 0xb387
nop
lea esi, [esi]
mov edx, dword [esi + 4]
mov word [esi + 0x10], di
movzx ecx, word [var_20h]
mov eax, dword [var_10h]
cmp word [var_22h], 0xffff
mov word [edx + eax], cx
je 0xb3a5
movzx ecx, word [var_1eh]
mov eax, dword [var_14h]
mov word [edx + eax + 4], cx
add esp, 0x2c
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
cmp byte [0], 0
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp word [var_16h], 0xffff
mov eax, 0
je 0xb3cf
mov eax, dword [var_14h]
add eax, dword [esi + 4]
movzx eax, word [eax + 4]
mov edx, dword [esi + 4]
movzx ecx, word [var_1eh]
shl eax, 4
mov word [eax + edx], cx
jmp 0xb387
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xb2c6
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb2c6
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb290
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb26c
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb233
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xb1ff
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb1ff
mov eax, 0
mov dword [var_1ch], 0xffff
mov dword [var_14h], 0xffff0
jmp 0xb21c
nop
lea esi, [esi]
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb305
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb32a
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xb3bd
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb3bd
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xb354
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb354
push ebp
mov ebp, esp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0xc
fld dword [0x156a8]
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
fld dword [eax + 8]
fmul st(1)
fsincos
fstp dword [ebp - 4]
fld dword [eax + 4]
fxch st(1)
fstp dword [ebp - 8]
fld dword [ebp - 4]
fxch st(1)
fmul st(2)
fsincos
fstp dword [ebp - 4]
fxch st(2)
fmul dword [eax]
fxch st(2)
fstp dword [ebp - 0xc]
fld dword [ebp - 4]
fxch st(2)
fsincos
fxch st(1)
fstp dword [ebp - 4]
fld dword [ebp - 4]
fxch st(1)
fstp dword [ebp - 4]
fld dword [ebp - 4]
fld st(1)
fmul st(4)
fld dword [ebp - 0xc]
fld dword [ebp - 8]
fxch st(4)
fmul dword [ebp - 0xc]
fxch st(1)
fmul st(3)
fld st(2)
fmul dword [ebp - 8]
fxch st(5)
fmul st(1)
fxch st(3)
fmul st(6)
fxch st(4)
fmulp st(7)
fmul st(5)
fxch st(3)
fsubrp st(2)
fld st(0)
fmul st(5)
fxch st(3)
faddp st(4)
fxch st(1)
fstp dword [edx]
fld dword [ebp - 8]
fxch st(1)
fmul dword [ebp - 8]
fxch st(1)
fmul st(5)
fxch st(5)
fmulp st(4)
fxch st(2)
fstp dword [edx + 4]
fsubp st(3)
faddp st(1)
fxch st(1)
fstp dword [edx + 8]
fstp dword [edx + 0xc]
leave
ret
mov edx, dword [0]
mov eax, dword [0]
push ebp
mov ebp, esp
mov dword [eax + 0x2c], edx
pop ebp
jmp _Z24DisconnectTier1Librariesv
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
pop ebp
mov eax, dword [ecx]
test eax, 0x7f800000
sete dl
test eax, 0x7fffff
setne al
movzx eax, al
and eax, edx
ret
push ebp
mov eax, 0
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x6c
mov edx, dword [arg_1ch]
fld dword [ebp + 0x18]
mov ecx, dword [arg_8h]
mov esi, dword [arg_ch]
mov dword [edx], eax
fld st(0)
mov ebx, dword [arg_10h]
mov dword [edx + 4], eax
fmul st(1)
mov edi, dword [arg_14h]
mov dword [edx + 8], eax
fld st(1)
mov eax, 0x3e2aaaab
fmul dword [0x158d0]
fxch st(1)
fmul dword [0x158d0]
fld dword [ecx]
fld dword [ecx + 4]
fld dword [ecx + 8]
fxch st(4)
fstp dword [ebp - 0x60]
fxch st(4)
fmul st(2)
fld dword [0x15888]
fld dword [esi]
fld st(2)
fchs
fmul st(4), st(0)
fmul st(7), st(0)
fmulp st(6)
fld st(2)
fmul st(2)
fmul st(1), st(0)
fxch st(1)
fstp dword [ebp - 0x38]
fld dword [esi + 4]
fmul st(1)
fxch st(1)
fmul dword [esi + 8]
fxch st(1)
fstp dword [ebp - 0x34]
fld dword [ebx]
fxch st(1)
fstp dword [ebp - 0x30]
fld st(2)
fmul dword [0x158b4]
fmul st(1), st(0)
fxch st(1)
fstp dword [ebp - 0x48]
fld dword [ebx + 4]
fmul st(1)
fxch st(1)
fmul dword [ebx + 8]
fxch st(1)
fstp dword [ebp - 0x44]
fstp dword [ebp - 0x40]
fld dword [edi]
fmul st(2)
fstp dword [ebp - 0x58]
fld dword [edi + 4]
fxch st(3)
fadd dword [edx]
fxch st(3)
fmul st(2)
fxch st(2)
fmul dword [edi + 8]
fxch st(3)
fst dword [edx]
fxch st(2)
fstp dword [ebp - 0x54]
fxch st(5)
fadd dword [edx + 4]
fld dword [ebp - 0x38]
fxch st(3)
fstp dword [ebp - 0x50]
fxch st(4)
fadd dword [edx + 8]
fxch st(2)
faddp st(1)
fxch st(3)
fst dword [edx + 4]
fld dword [ebp - 0x34]
fxch st(4)
fst dword [edx]
fxch st(4)
faddp st(1)
fxch st(1)
fst dword [edx + 8]
fxch st(3)
fadd dword [var_48h]
fld dword [ebp - 0x30]
fxch st(2)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(2)
faddp st(4)
fst dword [edx]
fadd dword [var_58h]
fxch st(1)
fst dword [edx + 4]
fadd dword [var_54h]
fxch st(3)
fst dword [edx + 8]
fadd dword [var_40h]
fxch st(1)
fstp dword [edx]
fld dword [esi]
fxch st(3)
fstp dword [edx + 4]
fld st(1)
fmul st(4)
fxch st(2)
fmul dword [0x158c4]
fxch st(1)
fst dword [edx + 8]
fadd dword [var_50h]
fld dword [ecx + 4]
fxch st(4)
fmul st(2)
fxch st(4)
fmul st(3)
fxch st(1)
fstp dword [edx + 8]
fld dword [ecx + 8]
fld dword [ecx]
fxch st(5)
fstp dword [ebp - 0x38]
fmul st(3)
fxch st(4)
mov dword [var_5ch], 0xc0400000
fmul st(3)
fld dword [esi + 4]
fxch st(6)
fmul dword [ebp - 0x60]
fxch st(6)
fmul st(3)
fxch st(3)
fmul dword [esi + 8]
fxch st(3)
fstp dword [ebp - 0x34]
fld dword [ebx]
fxch st(3)
fstp dword [ebp - 0x30]
fxch st(2)
fmul st(3)
fstp dword [ebp - 0x48]
fld dword [ebx + 4]
fxch st(2)
fadd dword [edx]
fxch st(2)
fmul st(3)
fxch st(3)
fmul dword [ebx + 8]
fxch st(2)
fst dword [edx]
fxch st(3)
fstp dword [ebp - 0x44]
fld dword [ebp - 0x38]
fxch st(1)
fadd dword [edx + 4]
fxch st(2)
fstp dword [ebp - 0x40]
faddp st(2)
fxch st(2)
fadd dword [edx + 8]
fxch st(2)
fst dword [edx + 4]
fxch st(1)
fst dword [edx]
fld dword [ebp - 0x34]
fxch st(3)
fst dword [edx + 8]
fld dword [ebp - 0x30]
fxch st(4)
faddp st(3)
fxch st(1)
fadd dword [var_48h]
fxch st(3)
faddp st(1)
fxch st(1)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(2)
fstp dword [edx]
fld dword [ebp - 0x60]
fmul dword [ebp - 0x5c]
fxch st(1)
fst dword [edx + 8]
fadd dword [var_40h]
fxch st(2)
fstp dword [edx + 4]
fld st(0)
fld st(1)
fxch st(3)
fstp dword [edx + 8]
fld dword [ebx]
fxch st(3)
fmul dword [ecx]
fxch st(3)
fmul st(4)
fxch st(2)
fmul dword [ecx + 4]
fxch st(1)
fmul dword [ecx + 8]
fxch st(2)
fstp dword [ebp - 0x48]
fld dword [ebx + 4]
fxch st(3)
fadd dword [edx]
fxch st(3)
fmul st(4)
fxch st(4)
fmul dword [ebx + 8]
fxch st(3)
fst dword [edx]
fadd dword [var_48h]
fxch st(4)
fstp dword [ebp - 0x44]
fadd dword [edx + 4]
fld dword [0x158d4]
fxch st(3)
fstp dword [ebp - 0x40]
fxch st(3)
fstp dword [edx]
fadd dword [edx + 8]
fld dword [esi]
fxch st(3)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(3)
fmul st(2)
fxch st(1)
fst dword [edx + 8]
fadd dword [var_40h]
fxch st(3)
fstp dword [edx + 4]
fld dword [ecx]
fxch st(1)
fstp dword [ebp - 0x38]
fld dword [esi + 4]
fxch st(3)
fstp dword [edx + 8]
fld dword [ecx + 8]
fxch st(3)
fmul st(2)
fxch st(2)
fmul dword [esi + 8]
fld dword [ecx + 4]
fxch st(2)
fmul dword [0x158d0]
fxch st(3)
fstp dword [ebp - 0x34]
fxch st(1)
fmul dword [0x158d0]
fxch st(1)
fstp dword [ebp - 0x30]
fld dword [ebx]
fmul dword [0x158d0]
fxch st(3)
fmul dword [0x158d0]
fxch st(3)
fstp dword [ebp - 0x48]
fld dword [ebx + 4]
fmul dword [0x158d0]
fstp dword [ebp - 0x44]
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
fmul dword [ebx + 8]
fxch st(2)
fadd dword [edx]
fxch st(1)
fadd dword [edx + 4]
fxch st(2)
fstp dword [ebp - 0x40]
fxch st(2)
fadd dword [edx + 8]
fxch st(2)
fst dword [edx]
fld dword [ebp - 0x38]
fxch st(2)
fst dword [edx + 4]
fld dword [ebp - 0x34]
fxch st(3)
faddp st(2)
fxch st(3)
fst dword [edx + 8]
fxch st(2)
faddp st(3)
fld dword [ebp - 0x30]
fxch st(1)
fst dword [edx]
fadd dword [var_48h]
fxch st(1)
faddp st(2)
fxch st(2)
fst dword [edx + 4]
fadd dword [var_44h]
fxch st(1)
fst dword [edx + 8]
fadd dword [var_40h]
fxch st(2)
fstp dword [edx]
fstp dword [edx + 4]
fstp dword [edx + 8]
add esp, 0x6c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
lea eax, [var_18h]
push esi
push ebx
sub esp, 0x40
mov ebx, dword [arg_10h]
mov dword [var_8h], eax
mov ecx, dword [arg_8h]
mov esi, dword [arg_18h]
mov dword [esp], ebx
mov dword [var_4h], ecx
call _Z15QuaternionAlignRK10QuaternionS1_RS_
mov dword [esp], ebx
mov eax, dword [arg_ch]
lea edx, [var_28h]
mov dword [var_8h], edx
mov dword [var_4h], eax
call _Z15QuaternionAlignRK10QuaternionS1_RS_
fld dword [ebx]
fld1
fld dword [ebp - 0x28]
fld st(2)
fld dword [ebp + 0x14]
fxch st(1)
fsub st(2)
fld st(2)
fsub dword [ebp - 0x18]
fxch st(2)
fmul st(0)
fxch st(1)
fstp dword [ebp - 0x2c]
fld dword [ebp + 0x14]
fld st(1)
fxch st(1)
fmul st(2)
fxch st(1)
fadd st(2)
fld st(1)
fadd st(2)
fxch st(2)
fstp dword [ebp - 0x30]
fld st(2)
fmul dword [0x15888]
fxch st(1)
fsubr dword [ebp - 0x30]
fxch st(3)
fsubr dword [ebp - 0x30]
fxch st(3)
fadd dword [arg_14h]
fxch st(2)
fsubrp st(1)
fld dword [ebp - 0x2c]
fxch st(3)
fst dword [ebp - 0x34]
fxch st(1)
fadd st(6)
fxch st(4)
fmul st(2)
fxch st(6)
fsub st(4)
fxch st(5)
fmul st(4)
fxch st(7)
fmul st(5)
fxch st(3)
fmulp st(1)
fxch st(6)
faddp st(2)
fxch st(1)
faddp st(4)
fxch st(3)
faddp st(4)
fld dword [ebp - 0x24]
fld st(0)
fxch st(5)
fstp dword [esi]
fld dword [ebx + 4]
fxch st(5)
fsub dword [ebp - 0x14]
fld st(5)
fsub st(2)
fxch st(6)
fmul st(4)
fxch st(2)
fmul st(3)
fxch st(1)
fmul st(5)
fxch st(6)
fmul dword [ebp - 0x34]
fxch st(1)
faddp st(2)
fld dword [ebx + 8]
fxch st(2)
faddp st(6)
faddp st(5)
fld st(0)
fmul st(3)
fxch st(5)
fstp dword [esi + 4]
fld dword [ebp - 0x20]
fld st(0)
fxch st(2)
fsub st(1)
fxch st(2)
fsub dword [ebp - 0x10]
fxch st(1)
fmul st(3)
fxch st(2)
fmul dword [ebp - 0x34]
fxch st(1)
fmul st(5)
fxch st(2)
faddp st(6)
fld dword [ebx + 0xc]
fxch st(6)
faddp st(2)
faddp st(1)
fld st(4)
fmulp st(3)
fstp dword [esi + 8]
fld dword [ebp - 0x1c]
fld st(0)
fxch st(5)
fsub st(1)
fxch st(5)
fsub dword [ebp - 0xc]
fxch st(1)
fmulp st(2)
fxch st(4)
fmul dword [ebp - 0x34]
fxch st(4)
fmulp st(3)
faddp st(1)
faddp st(1)
faddp st(1)
fstp dword [esi + 0xc]
mov dword [esp], esi
call _Z19QuaternionNormalizeR10Quaternion
fstp st(0)
add esp, 0x40
pop ebx
pop esi
pop ebp
ret
add dword [arg_4h], 0xfffffffc
jmp fcn.00008ca0
push ebp
mov ebp, esp
push ebx
sub esp, 4
movzx ebx, word [arg_ch]
cmp byte [0], 0
je 0xab93
cmp bx, 0xffff
mov edx, 0
je 0xab8b
mov eax, dword [arg_8h]
movzx edx, bx
shl edx, 4
add edx, dword [eax + 4]
add esp, 4
mov eax, edx
pop ebx
pop ebp
ret
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xab74
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xab74
push ebp
xor ecx, ecx
mov ebp, esp
push edi
mov edi, dword [arg_8h]
push esi
mov esi, dword [arg_ch]
push ebx
mov ebx, dword [arg_10h]
jmp 0xe790
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
fld dword [edi + ecx*4]
lea edx, [ecx*4]
lea eax, [edx + esi]
fld dword [eax]
fucompi st(1)
jbe 0xe7a5
fst dword [eax]
lea eax, [edx + ebx]
fld dword [eax]
fxch st(1)
fucomi st(1)
fstp st(1)
jbe 0xe7b6
fstp dword [eax]
jmp 0xe7b8
fstp st(0)
inc ecx
cmp ecx, 2
jle 0xe790
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x14
mov ebx, dword [arg_ch]
mov eax, dword [ebx]
mov dword [esp], ebx
mov dword [var_4h], 0x40000
call dword [eax + 0x10]
mov dword [esp], ebx
mov dword [var_4h], 0
call _ZN14ConCommandBase7SetNextEPS_
cld
invalid
invalid
jmp dword [ecx + 0x1722c]
mov edx, dword [eax]
mov dword [var_4h], ebx
mov dword [esp], eax
call dword [edx + 0x14]
add esp, 0x14
mov eax, 1
pop ebx
pop ebp
ret
push ebp
fld1
mov ebp, esp
sub esp, 0x38
mov edx, dword [arg_8h]
fld dword [ebp + 0x18]
mov dword [var_ch], ebx
mov ebx, dword [arg_1ch]
fld st(0)
mov dword [var_8h], esi
fmul st(1)
mov esi, dword [arg_10h]
mov dword [var_4h], edi
fld st(1)
mov edi, dword [arg_14h]
fmul st(1)
fld st(1)
fld st(2)
fxch st(1)
fmul dword [0x15888]
fld st(2)
fadd st(3)
fxch st(2)
fadd st(4)
fxch st(2)
fsubrp st(1)
fxch st(1)
fsubr st(2)
fld dword [edx]
fxch st(2)
fadd st(6)
fxch st(3)
fsubrp st(4)
faddp st(4)
fmul st(1)
fxch st(4)
fsub st(1)
fxch st(2)
fstp dword [ebp - 0x1c]
fxch st(3)
fstp dword [ebx]
fld dword [edx + 4]
fmul st(3)
fxch st(3)
fmul dword [edx + 8]
fxch st(3)
fstp dword [ebx + 4]
fxch st(2)
fstp dword [ebx + 8]
fxch st(1)
mov dword [var_sp_ch], ebx
mov eax, dword [arg_ch]
fstp dword [esp + 4]
mov dword [esp], ebx
mov dword [var_sp_8h], eax
fstp dword [ebp - 0x28]
call _Z8VectorMARK6VectorfS1_RS_
mov dword [var_sp_ch], ebx
mov dword [var_sp_8h], esi
fld dword [ebp - 0x28]
mov dword [esp], ebx
fstp dword [esp + 4]
call _Z8VectorMARK6VectorfS1_RS_
fld dword [ebp - 0x1c]
mov dword [arg_14h], ebx
mov esi, dword [var_8h]
mov dword [arg_10h], edi
mov edi, dword [var_4h]
mov dword [arg_8h], ebx
mov ebx, dword [var_ch]
fstp dword [ebp + 0xc]
mov esp, ebp
pop ebp
jmp _Z8VectorMARK6VectorfS1_RS_
cld
invalid
invalid
invalid
push ebp
fldz
mov ebp, esp
sub esp, 4
fld dword [ebp + 8]
fxch st(1)
fucomi st(1)
ja 0xed42
fstp st(0)
fld1
fxch st(1)
fucomi st(1)
ja 0xed46
fstp st(1)
fmul dword [0x15884]
fistp dword [ebp - 4]
mov eax, dword [var_4h]
fld dword [eax*4 + 0x1f1e0]
jmp 0xed50
fstp st(1)
jmp 0xed50
fstp st(0)
nop
lea esi, [esi]
leave
ret
push ebp
mov ebp, esp
push esi
lea esi, [var_28h]
push ebx
sub esp, 0x58
mov ecx, dword [arg_10h]
mov ebx, dword [arg_ch]
mov edx, dword [arg_14h]
mov eax, dword [arg_8h]
fld dword [ecx]
fld dword [ebx]
fld dword [edx]
fld st(2)
fsub st(2)
fld dword [edx + 4]
movss xmm0, dword [edx + 8]
fld dword [eax]
fxch st(2)
fstp dword [ebp - 0x2c]
movss xmm1, dword [var_2ch]
fld dword [eax + 4]
fld dword [eax + 8]
fxch st(4)
ucomiss xmm1, dword [0x158bc]
fst dword [ebp - 0x28]
fxch st(2)
fst dword [ebp - 0x24]
movss dword [var_20h], xmm0
jp 0x11c15
je 0x11c76
fxch st(3)
fucomi st(5)
jp 0x11cd0
jne 0x11cd0
fstp st(5)
fxch st(3)
fstp dword [ebp - 0x10]
fxch st(2)
fstp dword [ebp - 0x14]
fxch st(2)
fstp dword [ebp - 0x18]
fucomi st(2)
jp 0x11c3c
je 0x11c90
fld dword [ebp - 0x2c]
fxch st(1)
fsub st(3)
fdiv st(1), st(0)
fmul st(1)
faddp st(3)
fld dword [ecx + 4]
fsub st(2), st(0)
fxch st(3)
fstp dword [esi]
fmul st(1), st(0)
fxch st(2)
faddp st(1)
fstp dword [esi + 4]
fld dword [ecx + 8]
movss dword [var_3ch], xmm0
fld dword [ebp - 0x3c]
fsub st(1)
fmulp st(2)
fadd st(1)
fxch st(1)
fstp dword [ebp - 0x3c]
fstp dword [esi + 8]
jmp 0x11ca0
fstp st(0)
fstp st(1)
fstp st(3)
fstp st(3)
fstp dword [ebp - 0x10]
fstp dword [ebp - 0x14]
fstp dword [ebp - 0x18]
jmp 0x11ca0
lea esi, [esi]
fstp st(0)
fstp st(0)
fstp st(0)
lea esi, [esi]
lea edi, [edi]
mov dword [var_8h], ecx
mov eax, dword [arg_1ch]
lea ecx, [var_18h]
mov dword [var_ch], esi
mov edx, dword [arg_18h]
mov dword [var_4h], ebx
mov dword [var_14h], eax
mov dword [var_10h], edx
mov dword [esp], ecx
call _Z7BSplineRK6VectorS1_S1_S1_fRS_
add esp, 0x58
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
fld st(5)
fsub st(1)
fxch st(1)
fsub st(6)
fxch st(1)
fdivr dword [ebp - 0x2c]
fmul st(1), st(0)
fxch st(6)
faddp st(1)
fstp dword [ebp - 0x18]
fld dword [ebx + 4]
fsub st(1), st(0)
fxch st(1)
fmul st(5)
faddp st(1)
fstp dword [ebp - 0x14]
fld dword [ebx + 8]
fsub st(3), st(0)
fxch st(3)
fmulp st(4)
fxch st(2)
faddp st(3)
fxch st(2)
fstp dword [ebp - 0x10]
jmp 0x11c36
push edi
push esi
push ebx
sub esp, 0x10
mov eax, dword [arg_24h]
test eax, eax
jle 0x1505f
mov ecx, dword [0]
lea edi, [eax - 1]
mov esi, eax
and edi, 1
mov ebx, dword [arg_20h]
test ecx, ecx
je 0x1512e
mov eax, dword [0]
test eax, eax
je 0x15154
mov edx, dword [0]
test edx, edx
je 0x15176
add ebx, 4
dec esi
je 0x1505f
test edi, edi
jne 0x15038
jmp g_pCVar
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [0]
test eax, eax
je 0x15110
mov ecx, dword [0]
test ecx, ecx
je 0x150f0
mov eax, dword [0]
test eax, eax
je 0x15070
dec esi
add ebx, 4
mov edi, dword [0]
test edi, edi
je 0x150d0
mov edi, dword [0]
test edi, edi
je 0x150b0
mov eax, dword [0]
test eax, eax
je 0x15090
add ebx, 4
dec esi
jne g_pCVar
add esp, 0x10
pop ebx
pop esi
pop edi
ret
lea esi, [esi]
lea edi, [edi]
mov dword [esp], str.VDmElementFrameworkVersion001
xor edx, edx
mov dword [var_4h], edx
call dword [ebx]
mov dword [0], eax
jmp 0x15034
lea esi, [esi]
lea edi, [edi]
mov dword [esp], str.VDmElementFrameworkVersion001
xor ecx, ecx
mov dword [var_4h], ecx
call dword [ebx]
mov dword [0], eax
jmp 0x15059
lea esi, [esi]
lea edi, [edi]
mov dword [esp], str.VDataModelVersion001
xor edx, edx
mov dword [var_4h], edx
call dword [ebx]
mov dword [0], eax
jmp g_pDmElementFramework
lea esi, [esi]
lea edi, [edi]
mov dword [esp], str.VEngineCvar003
xor ecx, ecx
mov dword [var_4h], ecx
call dword [ebx]
mov dword [0], eax
mov dword [0], eax
jmp g_pDataModel
mov esi, esi
mov dword [esp], str.VDataModelVersion001
xor edi, edi
mov dword [var_4h], edi
call dword [ebx]
mov dword [0], eax
jmp g_pDmElementFramework
lea esi, [esi]
mov dword [esp], str.VEngineCvar003
xor edx, edx
mov dword [var_4h], edx
call dword [ebx]
mov dword [0], eax
mov dword [0], eax
jmp g_pDataModel
mov dword [esp], str.VEngineCvar003
xor edx, edx
mov dword [var_4h], edx
call dword [ebx]
mov dword [0], eax
mov dword [0], eax
mov eax, dword [0]
test eax, eax
jne g_pDmElementFramework
mov dword [esp], str.VDataModelVersion001
xor ecx, ecx
mov dword [var_4h], ecx
call dword [ebx]
mov edx, dword [0]
test edx, edx
mov dword [0], eax
jne 0x14ff7
mov dword [esp], str.VDmElementFrameworkVersion001
xor eax, eax
mov dword [var_4h], eax
call dword [ebx]
mov dword [0], eax
jmp 0x14ff7
push ebp
xor ecx, ecx
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
fld dword [eax]
fld dword [edx]
fxch st(1)
fucompi st(1)
fstp st(0)
jne 0xcd40
jp 0xcd40
fld dword [eax + 4]
fld dword [edx + 4]
fxch st(1)
fucompi st(1)
fstp st(0)
jne 0xcd40
jp 0xcd40
fld dword [eax + 8]
mov eax, 1
fld dword [edx + 8]
fucompi st(1)
fstp st(0)
cmovne eax, ecx
cmovnp ecx, eax
mov esi, esi
pop ebp
mov eax, ecx
ret
push ebp
mov ebp, esp
sub esp, 0xc
mov dword [esp], ebx
mov ecx, dword [arg_10h]
mov edx, dword [arg_8h]
mov dword [var_4h], esi
mov ebx, dword [arg_14h]
mov esi, dword [arg_18h]
mov dword [var_8h], edi
mov eax, dword [ecx]
mov edi, dword [arg_ch]
mov dword [edx], eax
mov eax, dword [ecx + 4]
mov dword [edx + 0x10], eax
mov eax, dword [ecx + 8]
mov dword [edx + 0x20], eax
mov eax, dword [ebx]
mov dword [edx + 4], eax
mov ecx, dword [ebx + 4]
mov dword [edx + 0x14], ecx
mov eax, dword [ebx + 8]
mov dword [edx + 0x24], eax
mov ebx, dword [esi]
mov dword [edx + 8], ebx
mov ecx, dword [esi + 4]
mov dword [edx + 0x18], ecx
mov eax, dword [esi + 8]
mov dword [edx + 0x28], eax
mov ebx, dword [edi]
mov dword [edx + 0xc], ebx
mov ecx, dword [edi + 4]
mov dword [edx + 0x1c], ecx
mov eax, dword [edi + 8]
mov dword [edx + 0x2c], eax
mov ebx, dword [esp]
mov esi, dword [var_4h]
mov edi, dword [var_8h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
lea esi, [var_28h]
push ebx
sub esp, 0x64
mov ecx, dword [arg_1ch]
mov ebx, dword [arg_18h]
mov edx, dword [arg_20h]
mov eax, dword [arg_14h]
fld dword [ecx]
fld dword [ebx]
fld dword [edx]
fld st(2)
fsub st(2)
fld dword [edx + 4]
movss xmm0, dword [edx + 8]
fld dword [eax]
fxch st(2)
fstp dword [ebp - 0x2c]
movss xmm1, dword [var_2ch]
fld dword [eax + 4]
fld dword [eax + 8]
fxch st(4)
ucomiss xmm1, dword [0x158bc]
fst dword [ebp - 0x28]
fxch st(2)
fst dword [ebp - 0x24]
movss dword [var_20h], xmm0
jp 0x11515
je 0x11576
fxch st(3)
fucomi st(5)
jp 0x115e1
jne 0x115e1
fstp st(5)
fxch st(3)
fstp dword [ebp - 0x10]
fxch st(2)
fstp dword [ebp - 0x14]
fxch st(2)
fstp dword [ebp - 0x18]
fucomi st(2)
jp 0x1153c
je 0x11590
fld dword [ebp - 0x2c]
fxch st(1)
fsub st(3)
fdiv st(1), st(0)
fmul st(1)
faddp st(3)
fld dword [ecx + 4]
fsub st(2), st(0)
fxch st(3)
fstp dword [esi]
fmul st(1), st(0)
fxch st(2)
faddp st(1)
fstp dword [esi + 4]
fld dword [ecx + 8]
movss dword [var_3ch], xmm0
fld dword [ebp - 0x3c]
fsub st(1)
fmulp st(2)
fadd st(1)
fxch st(1)
fstp dword [ebp - 0x3c]
fstp dword [esi + 8]
jmp 0x115a0
fstp st(0)
fstp st(1)
fstp st(3)
fstp st(3)
fstp dword [ebp - 0x10]
fstp dword [ebp - 0x14]
fstp dword [ebp - 0x18]
jmp 0x115a0
lea esi, [esi]
fstp st(0)
fstp st(0)
fstp st(0)
lea esi, [esi]
lea edi, [edi]
mov dword [var_18h], esi
mov edx, dword [arg_28h]
mov esi, dword [arg_10h]
mov dword [var_14h], ecx
mov eax, dword [arg_24h]
mov ecx, dword [arg_8h]
mov dword [var_10h], ebx
mov ebx, dword [arg_ch]
mov dword [var_sp_20h], edx
lea edx, [var_bp_18h]
mov dword [var_8h], esi
mov dword [var_4h], ebx
mov dword [var_1ch], eax
mov dword [var_ch], edx
mov dword [esp], ecx
call _Z23Kochanek_Bartels_SplinefffRK6VectorS1_S1_S1_fRS_
add esp, 0x64
pop ebx
pop esi
pop ebp
ret
fld st(5)
fsub st(1)
fxch st(1)
fsub st(6)
fxch st(1)
fdivr dword [ebp - 0x2c]
fmul st(1), st(0)
fxch st(6)
faddp st(1)
fstp dword [ebp - 0x18]
fld dword [ebx + 4]
fsub st(1), st(0)
fxch st(1)
fmul st(5)
faddp st(1)
fstp dword [ebp - 0x14]
fld dword [ebx + 8]
fsub st(3), st(0)
fxch st(3)
fmulp st(4)
fxch st(2)
faddp st(3)
fxch st(2)
fstp dword [ebp - 0x10]
jmp 0x11536
push ebp
mov ebp, esp
sub esp, 0x18
mov dword [var_8h], esi
mov esi, dword [arg_8h]
mov dword [var_ch], ebx
mov dword [var_4h], edi
movzx eax, word [esi + 0x14]
cmp ax, 0xffff
je 0xb130
cmp byte [0], 0
movzx ebx, ax
mov edi, ebx
je 0xb0f0
cmp di, 0xffff
mov eax, 0
je 0xb0d2
movzx eax, di
shl eax, 4
add eax, dword [esi + 4]
movzx eax, word [eax + 2]
mov word [esi + 0x14], ax
mov eax, dword [esi + 4]
mov dword [esi + 0x18], eax
mov eax, ebx
mov esi, dword [var_8h]
mov ebx, dword [var_ch]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
nop
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xb0be
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xb0be
lea esi, [esi]
lea edi, [esi + 4]
movzx eax, word [esi + 0x16]
mov ecx, dword [edi + 4]
cmp ecx, eax
je 0xb14d
movzx edx, word [esi + 0x16]
lea eax, [edx + 1]
mov ebx, edx
mov word [esi + 0x16], ax
jmp 0xb0da
mov ebx, dword [edi + 8]
test ebx, ebx
js 0xb13e
test ebx, ebx
lea edx, [ecx + 1]
je 0xb18f
mov edx, ecx
mov eax, ecx
sar edx, 0x1f
idiv ebx
lea ecx, [eax + 1]
imul ecx, ebx
mov ebx, dword [edi]
mov dword [edi + 4], ecx
test ebx, ebx
je g_pMemAlloc
mov eax, dword [0]
shl ecx, 4
mov edx, dword [eax]
mov dword [var_sp_8h], ecx
mov dword [var_sp_4h], ebx
mov dword [esp], eax
call dword [edx + 4]
mov dword [edi], eax
jmp 0xb13e
test ecx, ecx
mov eax, 2
cmove ecx, eax
cmp ecx, edx
jge 0xb16a
lea esi, [esi]
add ecx, ecx
cmp edx, ecx
jg 0xb1a0
jmp 0xb16a
mov eax, dword [0]
shl ecx, 4
mov edx, dword [eax]
mov dword [var_sp_4h], ecx
mov dword [esp], eax
call dword [edx]
mov dword [edi], eax
jmp 0xb13e
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x2c
mov esi, dword [arg_20h]
fld dword [ebp + 0x10]
mov ebx, dword [arg_24h]
mov edi, dword [arg_28h]
fstp dword [ebp - 0x28]
fld dword [ebp - 0x28]
fld dword [ebp + 8]
fucompi st(1)
fstp st(0)
ja 0xf296
movss xmm0, dword [var_28h]
ucomiss xmm0, dword [ebp + 0x18]
ja 0xf267
fld dword [ebp + 8]
fld dword [ebp - 0x28]
fxch st(1)
fucomi st(1)
fstp st(1)
ja 0xf231
movss xmm0, dword [0x15860]
fldz
fld dword [ebp + 0x14]
fxch st(1)
fstp dword [ebp - 0x14]
fld dword [ebp + 0xc]
movss dword [var_30h], xmm0
movss xmm1, dword [var_14h]
fld dword [ebp - 0x30]
fxch st(1)
fstp dword [ebp - 0x20]
fld dword [ebp + 0x1c]
fstp dword [ebp - 0x2c]
jmp 0xf172
nop
lea esi, [esi]
fld dword [ebp - 0x20]
mov eax, 1
fld st(4)
fld dword [ebp - 0x20]
fxch st(2)
fsubr st(5)
fxch st(1)
fmul st(6)
fxch st(2)
fsub dword [ebp - 0x2c]
fxch st(1)
fmul st(3)
fxch st(1)
fmul dword [ebp - 0x28]
fld dword [ebp - 0x28]
fmul st(0)
fxch st(2)
faddp st(1)
fld dword [ebp - 0x2c]
fsub st(6)
fmul st(7)
faddp st(1)
fld dword [ebp - 0x2c]
fxch st(1)
fdiv st(5)
fxch st(1)
fsubr st(6)
fxch st(1)
fstp dword [esi]
fld st(3)
fmul st(4)
fxch st(1)
fmul st(3)
fxch st(3)
fmul dword [ebp - 0x2c]
fxch st(1)
fstp dword [ebp - 0x18]
fld dword [ebp - 0x20]
fsub st(6)
fmul dword [ebp - 0x18]
faddp st(3)
fld dword [ebp - 0x1c]
fmul st(2)
faddp st(3)
fld st(6)
fmul st(4)
fxch st(3)
fdiv st(5)
fxch st(4)
fmul dword [ebp - 0x20]
fxch st(7)
fmul dword [ebp - 0x2c]
fxch st(4)
fstp dword [ebx]
fld dword [ebp - 0x18]
fxch st(3)
fmul dword [ebp - 0x24]
fxch st(7)
fsubrp st(4)
fxch st(2)
fmul dword [ebp - 0x20]
fxch st(1)
fmulp st(3)
fxch st(5)
fmulp st(4)
fsubrp st(4)
fxch st(3)
fmul dword [ebp - 0x28]
fxch st(2)
faddp st(3)
fxch st(2)
faddp st(1)
fdivrp st(1)
fstp dword [edi]
test al, al
je 0xf1e8
fld dword [esi]
fld dword [ebp + 0xc]
fld dword [ebp + 0x14]
fxch st(2)
fadd st(0)
fxch st(2)
fucomi st(1)
fxch st(2)
fadd dword [ebx]
fxch st(1)
fstp dword [ebp - 0x20]
fstp dword [ebp - 0x10]
fld dword [ebp - 0x10]
ja 0xf1f2
fld dword [ebp - 0x20]
fucompi st(2)
jbe 0xf223
fld dword [ebp + 0x1c]
fxch st(2)
fucomi st(2)
fxch st(2)
fstp dword [ebp - 0x2c]
jbe 0xf223
movss dword [var_30h], xmm1
fld dword [ebp - 0x30]
fucompi st(1)
fstp st(0)
jae 0xf214
fld qword [0x15920]
fadd dword [var_14h]
movss dword [var_30h], xmm0
fstp dword [ebp - 0x14]
ucomiss xmm0, dword [ebp - 0x14]
fld dword [ebp - 0x30]
jb 0xf223
fld dword [ebp + 0x10]
fld dword [ebp + 8]
fxch st(1)
fstp dword [ebp - 0x28]
fxch st(2)
fxch st(1)
fld dword [ebp - 0x14]
movss dword [var_30h], xmm1
xor eax, eax
fld dword [ebp + 0x18]
fxch st(1)
fsubp st(2)
fld dword [ebp - 0x2c]
fld st(1)
fsub st(5)
fxch st(1)
fsub dword [ebp - 0x20]
fxch st(3)
fmulp st(4)
fld dword [ebp - 0x28]
fxch st(1)
fst dword [ebp - 0x24]
fxch st(3)
fstp dword [ebp - 0x1c]
fsubr st(4)
fld dword [ebp - 0x28]
fsub st(5)
fmul dword [ebp - 0x1c]
fdivrp st(3)
fxch st(2)
fadd dword [var_20h]
fmul dword [ebp - 0x14]
faddp st(3)
fld st(3)
fsub st(1)
fmulp st(2)
fld dword [ebp - 0x28]
fsub st(1)
fmulp st(2)
fld dword [ebp - 0x30]
fxch st(2)
fucomi st(2)
fstp st(2)
jp 0xf040
jne 0xf040
fstp st(0)
fstp st(0)
fstp st(0)
fstp st(0)
test al, al
jne 0xf0f1
add esp, 0x2c
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret
fld dword [ebp + 0x1c]
fucomi st(2)
fstp dword [ebp - 0x2c]
jbe 0xf116
movss dword [var_30h], xmm1
fld dword [ebp - 0x30]
fxch st(1)
fucompi st(1)
fstp st(0)
jb 0xf145
fstp st(0)
add esp, 0x2c
mov eax, 1
pop ebx
pop esi
pop edi
pop ebp
ret
fstp st(0)
fstp st(0)
add esp, 0x2c
mov eax, 1
jmp 0xf21e
fstp st(0)
lea ecx, [arg_10h]
lea edx, [arg_8h]
mov dword [var_4h], ecx
mov dword [esp], edx
call _Z4swapIfEvRT_S1_
lea eax, [arg_14h]
lea ecx, [arg_ch]
mov dword [var_4h], eax
mov dword [esp], ecx
call _Z4swapIfEvRT_S1_
fld dword [ebp + 0x10]
fld dword [ebp + 8]
fxch st(1)
fstp dword [ebp - 0x28]
jmp 0xf009
lea edx, [arg_18h]
lea eax, [arg_10h]
mov dword [var_4h], edx
mov dword [esp], eax
call _Z4swapIfEvRT_S1_
lea ecx, [arg_1ch]
lea edx, [arg_14h]
mov dword [var_4h], ecx
mov dword [esp], edx
call _Z4swapIfEvRT_S1_
fld dword [ebp + 0x10]
fstp dword [ebp - 0x28]
jmp 0xeff7
lea eax, [arg_10h]
lea ecx, [arg_8h]
mov dword [var_4h], eax
mov dword [esp], ecx
call _Z4swapIfEvRT_S1_
lea edx, [arg_14h]
lea eax, [arg_ch]
mov dword [var_4h], edx
mov dword [esp], eax
call _Z4swapIfEvRT_S1_
fld dword [ebp + 0x10]
fstp dword [ebp - 0x28]
jmp 0xefe8
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
push ebx
mov edx, dword [arg_8h]
mov ebx, dword [arg_10h]
fld dword [eax]
lea ecx, [eax + 0x10]
fld dword [eax + 4]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [eax + 8]
fmul dword [edx + 8]
faddp st(1)
fadd dword [eax + 0xc]
fstp dword [ebx]
fld dword [ecx + 4]
fld dword [eax + 0x10]
fxch st(1)
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [ecx + 8]
fmul dword [edx + 8]
faddp st(1)
fadd dword [ecx + 0xc]
lea ecx, [eax + 0x20]
fstp dword [ebx + 4]
fld dword [eax + 0x20]
fld dword [ecx + 4]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [ecx + 8]
fmul dword [edx + 8]
faddp st(1)
fadd dword [ecx + 0xc]
fstp dword [ebx + 8]
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x28
fld dword [0x15854]
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
fld dword [0x156a8]
fld dword [eax + 8]
fld dword [eax]
fxch st(1)
fmul st(3)
fxch st(1)
fmul st(3)
fxch st(3)
fmul dword [eax + 4]
fxch st(1)
fst dword [ebp - 0x18]
fxch st(3)
fst dword [ebp - 0x14]
fxch st(1)
fst dword [ebp - 0x10]
fmul st(2)
fsincos
fstp dword [ebp - 0x1c]
fxch st(1)
fmul st(2)
fxch st(1)
fstp dword [ebp - 0x20]
fld dword [ebp - 0x1c]
fxch st(1)
fsincos
fstp dword [ebp - 0x1c]
fxch st(3)
fmulp st(2)
fxch st(2)
fstp dword [ebp - 0x24]
fld dword [ebp - 0x1c]
fxch st(1)
fsincos
fxch st(1)
fstp dword [ebp - 0x1c]
fld dword [ebp - 0x1c]
fxch st(1)
fstp dword [ebp - 0x1c]
fld dword [ebp - 0x1c]
fld st(1)
fmul st(3)
fld dword [ebp - 0x24]
fld dword [ebp - 0x20]
fxch st(4)
fmul dword [ebp - 0x24]
fxch st(1)
fmul st(3)
fld st(2)
fmul dword [ebp - 0x20]
fxch st(5)
fmul st(1)
fxch st(3)
fmul st(7)
fxch st(4)
fmulp st(6)
fmul st(6)
fxch st(3)
fsubrp st(2)
fld st(0)
fmul st(6)
fxch st(3)
faddp st(4)
fxch st(1)
fstp dword [edx]
fld dword [ebp - 0x20]
fxch st(1)
fmul dword [ebp - 0x20]
fxch st(1)
fmul st(4)
fxch st(4)
fmulp st(5)
fxch st(2)
fstp dword [edx + 4]
fsubp st(2)
faddp st(2)
fstp dword [edx + 8]
fstp dword [edx + 0xc]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x68
mov esi, dword [arg_8h]
mov edx, dword [arg_10h]
mov edi, dword [arg_ch]
cmp esi, edx
je 0xd5d4
cmp edi, edx
je 0xd636
fld dword [edi]
lea ecx, [edi + 0x10]
lea ebx, [edi + 0x20]
fld dword [edi + 0x10]
mov dword [var_4ch], ebx
lea eax, [edx + 0x10]
fmul dword [esi + 4]
fxch st(1)
mov dword [var_5ch], eax
lea eax, [esi + 0x10]
fmul dword [esi]
faddp st(1)
fld dword [edi + 0x20]
fmul dword [esi + 8]
faddp st(1)
fstp dword [edx]
fld dword [edi + 4]
fld dword [ecx + 4]
fmul dword [esi + 4]
fxch st(1)
fmul dword [esi]
faddp st(1)
fld dword [ebx + 4]
fmul dword [esi + 8]
faddp st(1)
fstp dword [edx + 4]
fld dword [edi + 8]
fld dword [ecx + 8]
fmul dword [esi + 4]
fxch st(1)
fmul dword [esi]
faddp st(1)
fld dword [ebx + 8]
fmul dword [esi + 8]
faddp st(1)
fstp dword [edx + 8]
fld dword [edi + 0xc]
fld dword [ecx + 0xc]
fmul dword [esi + 4]
fxch st(1)
fmul dword [esi]
faddp st(1)
fld dword [ebx + 0xc]
fmul dword [esi + 8]
faddp st(1)
fadd dword [esi + 0xc]
fstp dword [edx + 0xc]
fld dword [edi]
fld dword [edi + 0x10]
fmul dword [eax + 4]
fxch st(1)
fmul dword [esi + 0x10]
faddp st(1)
fld dword [edi + 0x20]
fmul dword [eax + 8]
faddp st(1)
fstp dword [edx + 0x10]
mov ebx, dword [var_4ch]
fld dword [edi + 4]
fld dword [ecx + 4]
fmul dword [eax + 4]
fxch st(1)
fmul dword [esi + 0x10]
faddp st(1)
fld dword [ebx + 4]
mov ebx, dword [var_5ch]
fmul dword [eax + 8]
faddp st(1)
fstp dword [ebx + 4]
mov ebx, dword [var_4ch]
fld dword [edi + 8]
fld dword [ecx + 8]
fmul dword [eax + 4]
fxch st(1)
fmul dword [esi + 0x10]
faddp st(1)
fld dword [ebx + 8]
mov ebx, dword [var_5ch]
fmul dword [eax + 8]
faddp st(1)
fstp dword [ebx + 8]
mov ebx, dword [var_4ch]
fld dword [edi + 0xc]
fld dword [ecx + 0xc]
fmul dword [eax + 4]
fxch st(1)
fmul dword [esi + 0x10]
faddp st(1)
fld dword [ebx + 0xc]
mov ebx, dword [var_5ch]
fmul dword [eax + 8]
faddp st(1)
fadd dword [eax + 0xc]
lea eax, [esi + 0x20]
fstp dword [ebx + 0xc]
lea ebx, [edx + 0x20]
fld dword [edi]
fld dword [edi + 0x10]
fxch st(1)
fmul dword [esi + 0x20]
fxch st(1)
fmul dword [eax + 4]
faddp st(1)
fld dword [edi + 0x20]
fmul dword [eax + 8]
faddp st(1)
fstp dword [edx + 0x20]
mov edx, dword [var_4ch]
fld dword [edi + 4]
fld dword [ecx + 4]
fxch st(1)
fmul dword [esi + 0x20]
fxch st(1)
fmul dword [eax + 4]
faddp st(1)
fld dword [edx + 4]
fmul dword [eax + 8]
faddp st(1)
fstp dword [ebx + 4]
fld dword [edi + 8]
fld dword [ecx + 8]
fxch st(1)
fmul dword [esi + 0x20]
fxch st(1)
fmul dword [eax + 4]
faddp st(1)
fld dword [edx + 8]
fmul dword [eax + 8]
faddp st(1)
fstp dword [ebx + 8]
fld dword [edi + 0xc]
fld dword [ecx + 0xc]
fxch st(1)
fmul dword [esi + 0x20]
fxch st(1)
fmul dword [eax + 4]
faddp st(1)
fld dword [edx + 0xc]
fmul dword [eax + 8]
faddp st(1)
fadd dword [eax + 0xc]
fstp dword [ebx + 0xc]
add esp, 0x68
pop ebx
pop esi
pop edi
pop ebp
ret
mov ebx, dword [esi]
lea ecx, [var_48h]
mov dword [var_48h], ebx
mov edx, dword [esi + 4]
mov dword [var_44h], edx
mov eax, dword [esi + 8]
mov dword [var_40h], eax
mov ebx, dword [esi + 0xc]
mov dword [var_3ch], ebx
mov edx, dword [esi + 0x10]
mov dword [var_38h], edx
mov eax, dword [esi + 0x14]
mov dword [var_34h], eax
mov ebx, dword [esi + 0x18]
mov dword [var_30h], ebx
mov edx, dword [esi + 0x1c]
mov dword [var_2ch], edx
mov eax, dword [esi + 0x20]
mov dword [var_28h], eax
mov ebx, dword [esi + 0x24]
mov dword [var_24h], ebx
mov edx, dword [esi + 0x28]
mov dword [var_20h], edx
mov eax, dword [esi + 0x2c]
mov dword [var_1ch], eax
mov dword [var_8h], esi
mov dword [var_4h], edi
mov dword [esp], ecx
call _Z16ConcatTransformsRK11matrix3x4_tS1_RS_
add esp, 0x68
pop ebx
pop esi
pop edi
pop ebp
ret
mov ebx, dword [edi]
lea ecx, [var_48h]
mov dword [var_48h], ebx
mov edx, dword [edi + 4]
mov dword [var_44h], edx
mov eax, dword [edi + 8]
mov dword [var_40h], eax
mov ebx, dword [edi + 0xc]
mov dword [var_3ch], ebx
mov edx, dword [edi + 0x10]
mov dword [var_38h], edx
mov eax, dword [edi + 0x14]
mov dword [var_34h], eax
mov ebx, dword [edi + 0x18]
mov dword [var_30h], ebx
mov edx, dword [edi + 0x1c]
mov dword [var_2ch], edx
mov eax, dword [edi + 0x20]
mov dword [var_28h], eax
mov ebx, dword [edi + 0x24]
mov dword [var_24h], ebx
mov edx, dword [edi + 0x28]
mov dword [var_20h], edx
mov eax, dword [edi + 0x2c]
mov dword [var_1ch], eax
mov dword [var_8h], edi
mov dword [var_4h], ecx
mov dword [esp], esi
call _Z16ConcatTransformsRK11matrix3x4_tS1_RS_
jmp 0xd62e
push ebp
mov ebp, esp
sub esp, 4
fld dword [0x15854]
mov ecx, dword [arg_8h]
mov edx, dword [arg_ch]
fld dword [ecx + 4]
fmul st(1)
fsincos
fxch st(1)
fstp dword [ebp - 4]
fld dword [ebp - 4]
fxch st(1)
fstp dword [ebp - 4]
fxch st(1)
fmul dword [ecx]
fld dword [ebp - 4]
fxch st(1)
fsincos
fxch st(1)
fstp dword [ebp - 4]
mov eax, dword [var_4h]
fstp dword [ebp - 4]
fld dword [ebp - 4]
xor eax, 0x80000000
mov dword [edx + 8], eax
fmul st(1), st(0)
fmulp st(2)
fstp dword [edx]
fstp dword [edx + 4]
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
fld dword [eax]
fld dword [eax + 4]
fld dword [eax + 8]
fld st(2)
fld st(2)
fmul st(3)
fxch st(1)
fmul st(4)
faddp st(1)
fld st(1)
fmul st(2)
faddp st(1)
fsqrt
fld st(0)
fadd dword [0x15864]
fdivr dword [0x15860]
fmul st(4), st(0)
fmul st(3), st(0)
fmulp st(2)
fxch st(3)
fstp dword [eax]
fxch st(1)
fstp dword [eax + 4]
fstp dword [eax + 8]
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x54
mov eax, dword [arg_8h]
mov ebx, dword [arg_ch]
lea edx, [eax + 0x20]
fld dword [eax]
fld st(0)
fmul st(1)
fxch st(1)
fst dword [ebp - 0x18]
fld dword [eax + 0x10]
fld st(0)
fmul st(1)
fxch st(1)
fst dword [ebp - 0x14]
fxch st(3)
mov ecx, dword [eax + 0x20]
faddp st(1)
mov dword [var_10h], ecx
fld dword [eax + 4]
fst dword [ebp - 0x28]
mov eax, dword [eax + 0x14]
mov dword [var_24h], eax
fld dword [edx + 4]
fst dword [ebp - 0x20]
fxch st(2)
mov edx, dword [edx + 8]
mov dword [var_30h], edx
fsqrt
fld dword [0x15858]
fxch st(1)
fucomi st(1)
fstp st(1)
jbe 0xc545
fstp st(1)
fxch st(2)
fxch st(1)
fxch st(3)
fxch st(1)
fpatan
fstp dword [ebp - 0x3c]
xor ecx, 0x80000000
fld dword [ebp - 0x3c]
fld dword [0x1585c]
fmul st(1), st(0)
fxch st(1)
fstp dword [ebx + 4]
mov dword [var_4ch], ecx
fld dword [ebp - 0x4c]
fxch st(1)
fxch st(2)
fpatan
fstp dword [ebp - 0x3c]
fld dword [ebp - 0x3c]
fmul st(1)
fstp dword [ebx]
mov dword [var_4ch], edx
fld dword [ebp - 0x4c]
fxch st(1)
fxch st(2)
fxch st(1)
fpatan
fstp dword [ebp - 0x3c]
fld dword [ebp - 0x3c]
fmulp st(1)
fstp dword [ebx + 8]
add esp, 0x54
pop ebx
pop ebp
ret
fstp st(2)
fstp st(2)
fstp st(2)
fchs
mov dword [var_4ch], eax
fld dword [ebp - 0x4c]
fpatan
fstp dword [ebp - 0x3c]
xor ecx, 0x80000000
fld dword [ebp - 0x3c]
fld dword [0x1585c]
fmul st(1), st(0)
fxch st(1)
fstp dword [ebx + 4]
mov dword [var_4ch], ecx
fld dword [ebp - 0x4c]
fxch st(1)
fxch st(2)
fpatan
fstp dword [ebp - 0x3c]
mov ecx, 0
fld dword [ebp - 0x3c]
mov dword [ebx + 8], ecx
fmulp st(1)
fstp dword [ebx]
add esp, 0x54
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
fld1
mov ebp, esp
push esi
xor edx, edx
push ebx
sub esp, 0x10
mov esi, dword [arg_14h]
fld dword [ebp + 0x10]
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
fsub st(1), st(0)
mov eax, esi
lea esi, [esi]
fld dword [ebx + edx*4]
fld dword [ecx + edx*4]
fxch st(1)
inc edx
fmul st(3)
fxch st(1)
fmul st(2)
faddp st(1)
fstp dword [eax]
add eax, 4
cmp edx, 3
jle 0xf860
fstp st(0)
fstp st(0)
mov dword [esp], esi
call _Z19QuaternionNormalizeR10Quaternion
fstp st(0)
add esp, 0x10
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
fld dword [ebp + 8]
fsincos
fxch st(1)
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
fstp dword [edx]
fstp dword [eax]
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov dword [eax], 8
mov dword [eax + 4], 0x68
mov dword [eax + 8], 0
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x34
fld dword [ebp + 0xc]
mov eax, dword [arg_8h]
mov ecx, dword [arg_10h]
cmp eax, ecx
je 0xf443
fmul dword [0x15854]
fsincos
fxch st(1)
fstp dword [ebp - 0x1c]
fld dword [ebp - 0x1c]
fxch st(1)
fstp dword [ebp - 0x1c]
mov edx, dword [eax + 8]
fld dword [eax + 4]
fld dword [ebp - 0x1c]
fld dword [eax]
fld st(2)
fmul st(4)
fxch st(1)
mov dword [ecx + 8], edx
fmul st(2)
fxch st(3)
fmulp st(2)
fsubp st(2)
fxch st(1)
fstp dword [ecx]
fxch st(1)
fmul dword [eax]
faddp st(1)
fstp dword [ecx + 4]
leave
ret
mov eax, dword [ecx]
lea edx, [var_18h]
mov dword [var_18h], eax
mov eax, dword [ecx + 4]
mov dword [var_14h], eax
mov eax, dword [ecx + 8]
mov dword [var_10h], eax
mov dword [var_8h], ecx
fstp dword [esp + 4]
mov dword [esp], edx
call _Z15VectorYawRotateRK6VectorfRS_
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
add esp, 0xffffff80
mov esi, dword [arg_ch]
fld dword [0x15880]
mov edx, dword [arg_8h]
mov ecx, dword [arg_10h]
fld dword [esi]
mov ebx, dword [arg_14h]
fld dword [esi + 4]
fxch st(1)
fmul st(2)
fxch st(1)
fmul st(2)
fxch st(2)
fmul dword [esi + 8]
fxch st(1)
lea esi, [var_48h]
fst dword [ebp - 0x18]
fxch st(2)
mov eax, dword [edx]
fst dword [ebp - 0x14]
fxch st(1)
mov dword [var_48h], eax
mov eax, dword [edx + 4]
fst dword [ebp - 0x10]
fxch st(2)
mov dword [var_38h], eax
mov eax, dword [edx + 8]
fstp dword [ebp - 0x44]
fxch st(1)
fstp dword [ebp - 0x24]
mov dword [var_28h], eax
fstp dword [ebp - 0x34]
mov edx, dword [ecx]
mov dword [var_40h], edx
mov eax, dword [ecx + 4]
mov dword [var_30h], eax
mov edx, dword [ecx + 8]
lea eax, [var_58h]
mov dword [var_4h], eax
mov dword [esp], esi
mov dword [var_20h], edx
call _Z12MatrixAnglesRK11matrix3x4_tPf
fld dword [0x15854]
fld dword [ebp - 0x50]
fld dword [ebp - 0x58]
fld dword [0x156a8]
fxch st(2)
fmul st(3)
fxch st(1)
fmul st(3)
fxch st(3)
fmul dword [ebp - 0x54]
fxch st(1)
fst dword [ebp - 0x68]
fxch st(3)
fst dword [ebp - 0x64]
fxch st(1)
fst dword [ebp - 0x60]
fmul st(2)
fsincos
fstp dword [ebp - 0x6c]
fxch st(1)
fmul st(2)
fxch st(1)
fstp dword [ebp - 0x70]
fld dword [ebp - 0x6c]
fxch st(1)
fsincos
fstp dword [ebp - 0x6c]
fxch st(3)
fmulp st(2)
fxch st(2)
fstp dword [ebp - 0x74]
fld dword [ebp - 0x6c]
fxch st(1)
fsincos
fxch st(1)
fstp dword [ebp - 0x6c]
fld dword [ebp - 0x6c]
fxch st(1)
fstp dword [ebp - 0x6c]
fld dword [ebp - 0x6c]
fld st(1)
fmul st(3)
fld dword [ebp - 0x74]
fld dword [ebp - 0x70]
fxch st(4)
fmul dword [ebp - 0x74]
fxch st(1)
fmul st(3)
fld st(2)
fmul dword [ebp - 0x70]
fxch st(5)
fmul st(1)
fxch st(3)
fmul st(7)
fxch st(4)
fmulp st(6)
fmul st(6)
fxch st(3)
fsubrp st(2)
fld st(0)
fmul st(6)
fxch st(3)
faddp st(4)
fxch st(1)
fstp dword [ebx]
fld dword [ebp - 0x70]
fxch st(1)
fmul dword [ebp - 0x70]
fxch st(1)
fmul st(4)
fxch st(4)
fmulp st(5)
fxch st(2)
fstp dword [ebx + 4]
fsubp st(2)
faddp st(2)
fstp dword [ebx + 8]
fstp dword [ebx + 0xc]
sub esp, 0xffffff80
pop ebx
pop esi
pop ebp
ret
push ebp
fldz
mov ebp, esp
push ebx
mov ecx, dword [arg_ch]
mov eax, dword [arg_10h]
mov edx, dword [arg_14h]
mov ebx, dword [arg_8h]
fld dword [ecx]
fld dword [eax]
fld dword [eax + 4]
fxch st(1)
fsubrp st(2)
fld dword [ecx + 4]
fld st(2)
fxch st(2)
fsubrp st(1)
fxch st(2)
fst dword [edx]
fmul st(1), st(0)
fld st(2)
fst dword [edx + 4]
fmul st(3), st(0)
fxch st(2)
faddp st(3)
fld dword [0x158e0]
fucompi st(3)
ja 0x13275
fstp st(3)
fld st(2)
fld st(1)
fxch st(1)
fmul dword [ebx]
fxch st(1)
fmul dword [ebx + 4]
fxch st(4)
fmul dword [ecx]
fxch st(2)
fmul dword [ecx + 4]
fxch st(1)
faddp st(4)
faddp st(1)
fsubp st(2)
fdivp st(1)
jmp 0x13280
fstp st(0)
fstp st(0)
fstp st(0)
nop
lea esi, [esi]
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
fld dword [ebp + 0xc]
fld dword [ebp + 8]
fsubrp st(1)
fld dword [0x158ec]
fucompi st(1)
jbe 0x13de0
fadd dword [0x1587c]
pop ebp
ret
lea esi, [esi]
fld dword [0x158b0]
fxch st(1)
fucomi st(1)
fstp st(1)
jbe 0x13ddb
fsub dword [0x1587c]
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x6c
mov ebx, dword [arg_8h]
mov edx, dword [arg_10h]
mov eax, dword [arg_14h]
mov ecx, dword [arg_ch]
fld dword [ebx]
mov esi, dword [arg_20h]
mov edi, dword [arg_24h]
fld dword [edx]
fld st(1)
fld dword [ebx + 4]
fxch st(1)
fsub st(2)
fld dword [ebx + 8]
fld st(2)
fsub dword [edx + 4]
fld st(1)
fxch st(3)
fst dword [ebp - 0x28]
fxch st(5)
fsubr dword [eax]
fxch st(3)
fsub dword [edx + 8]
fxch st(1)
fst dword [ebp - 0x24]
fxch st(3)
fst dword [ebp - 0x50]
fstp dword [ebp - 0x38]
fld dword [edx + 4]
fsubr dword [eax + 4]
fxch st(1)
fst dword [ebp - 0x20]
fld dword [ebp - 0x50]
fabs
fxch st(2)
fst dword [ebp - 0x54]
fstp dword [ebp - 0x34]
fld dword [edx + 8]
fsubr dword [eax + 8]
fst dword [ebp - 0x58]
fstp dword [ebp - 0x30]
fld qword [0x15930]
fucompi st(2)
fstp st(1)
jbe 0x13850
fld dword [ebp - 0x54]
fabs
fld qword [0x15930]
fucompi st(1)
fstp st(0)
jbe 0x13850
fld dword [ebp - 0x58]
xor eax, eax
fabs
fld qword [0x15930]
fucompi st(1)
fstp st(0)
ja 0x139d0
lea esi, [esi]
lea edi, [edi]
fxch st(5)
fsubr dword [ecx]
fld dword [ecx + 8]
fxch st(4)
fsubr dword [ecx + 4]
fxch st(4)
fsubrp st(2)
fld st(0)
fst dword [ebp - 0x48]
fxch st(1)
fabs
fxch st(4)
fst dword [ebp - 0x44]
fxch st(2)
fst dword [ebp - 0x40]
fld qword [0x15930]
fucompi st(5)
fstp st(4)
ja 0x139a0
fld dword [ebp - 0x50]
xor eax, eax
fld dword [ebp - 0x50]
fxch st(1)
fmul st(6)
fxch st(1)
fmul st(2)
fxch st(6)
fmul st(2)
fxch st(1)
fstp dword [ebp - 0x4c]
fld dword [ebp - 0x54]
fmul st(4)
fxch st(4)
fmul st(3)
fxch st(4)
fadd dword [var_4ch]
fxch st(4)
faddp st(1)
fxch st(3)
fstp dword [ebp - 0x4c]
fld dword [ebp - 0x58]
fmul st(6)
fxch st(6)
fmul st(4)
fxch st(6)
fadd dword [var_4ch]
fxch st(6)
faddp st(3)
fld dword [ebp - 0x50]
fxch st(6)
fstp dword [ebp - 0x4c]
fld dword [ebp - 0x54]
fxch st(6)
fmul st(0)
fxch st(6)
fmul st(2)
fxch st(3)
fstp dword [ebp - 0x6c]
fld st(0)
fmul st(1)
fxch st(5)
faddp st(3)
fld dword [ebp - 0x58]
fmul st(4)
faddp st(3)
fld dword [ebp - 0x54]
fmul st(0)
faddp st(6)
fld dword [ebp - 0x58]
fmul st(0)
faddp st(6)
fld st(1)
fmul st(2)
faddp st(5)
fld st(3)
fmul st(4)
faddp st(5)
fld st(2)
fmul st(3)
fxch st(5)
fmul st(6)
fsubrp st(5)
fld qword [0x15930]
fld st(5)
fabs
fxch st(1)
fucompi st(1)
fstp st(0)
ja 0x139d0
fld dword [ebp - 0x4c]
mov eax, dword [arg_18h]
mov ecx, dword [arg_1ch]
fld dword [ebp - 0x6c]
fxch st(1)
fmul st(4)
fxch st(1)
fmul st(7)
fsubp st(1)
fld dword [ebp - 0x58]
fxch st(1)
fdivrp st(6)
fxch st(5)
fst dword [esi]
fmulp st(3)
fxch st(2)
fadd dword [var_4ch]
fdivrp st(5)
fxch st(4)
fstp dword [edi]
fmul dword [esi]
fld dword [ebp - 0x50]
fxch st(1)
fadd dword [ebx]
fstp dword [eax]
fxch st(3)
fmul dword [esi]
fadd dword [ebx + 4]
fstp dword [eax + 4]
fmul dword [esi]
fadd dword [ebx + 8]
fstp dword [eax + 8]
fxch st(1)
mov eax, 1
fmul dword [edi]
fadd dword [edx]
fstp dword [ecx]
fld dword [ebp - 0x54]
fmul dword [edi]
fadd dword [edx + 4]
fstp dword [ecx + 4]
fmul dword [edi]
fadd dword [edx + 8]
fstp dword [ecx + 8]
add esp, 0x6c
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
fld st(1)
fabs
fld qword [0x15930]
fucompi st(1)
fstp st(0)
jbe 0x13883
fld st(3)
xor eax, eax
fabs
fld qword [0x15930]
fucompi st(1)
fstp st(0)
jbe 0x13883
lea esi, [esi]
fstp st(0)
fstp st(0)
fstp st(0)
fstp st(0)
fstp st(0)
fstp st(0)
add esp, 0x6c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
fld dword [ebp + 0xc]
fld dword [ebp + 8]
fld dword [ebp + 0x10]
fxch st(1)
fsub st(2)
fucomi st(1)
jbe 0x13c58
fstp st(0)
faddp st(1)
fstp dword [ebp - 4]
mov eax, dword [var_4h]
jmp 0x13c50
fstp st(0)
fstp st(0)
mov esi, esi
lea edi, [edi]
mov dword [var_4h], eax
fld dword [ebp - 4]
leave
ret
fld st(1)
mov eax, dword [arg_8h]
fchs
fucompi st(1)
fstp st(0)
jbe 0x13c43
fsubp st(1)
jmp 0x13c3b
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov dword [eax], 8
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x6c
mov eax, dword [arg_10h]
fld dword [0x156a8]
mov edi, dword [arg_ch]
mov esi, dword [arg_14h]
fld dword [eax]
mov ebx, dword [arg_8h]
mov ecx, dword [arg_18h]
fadd dword [edi]
fld dword [eax + 4]
fld dword [eax + 8]
fxch st(1)
fadd dword [edi + 4]
fxch st(2)
fmul st(3)
fxch st(1)
mov dword [var_60h], esi
fadd dword [edi + 8]
fxch st(2)
fmul st(3)
mov dword [var_5ch], ebx
mov edx, dword [var_5ch]
fld st(1)
fxch st(3)
mov dword [var_64h], ecx
fmulp st(4)
fld dword [eax]
fsub st(2)
fstp dword [ebp - 0x6c]
mov esi, dword [var_6ch]
fld dword [eax + 4]
fsub st(1)
fstp dword [ebp - 0x6c]
mov edi, dword [var_6ch]
fld st(1)
fld dword [eax + 8]
lea eax, [edx + 0x10]
fsub st(5)
fstp dword [ebp - 0x6c]
fld st(1)
mov ecx, dword [var_6ch]
fmul dword [edx + 4]
fxch st(4)
fmul dword [edx]
faddp st(4)
fld st(4)
fmul dword [edx + 8]
faddp st(4)
fxch st(3)
fst dword [ebp - 0x48]
fxch st(3)
fmul dword [edx + 0x10]
mov edx, dword [eax + 4]
mov dword [var_6ch], edx
mov ebx, dword [eax + 8]
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
mov dword [var_6ch], ebx
add eax, 0x20
fmul st(2)
mov dword [var_70h], eax
mov eax, dword [var_5ch]
faddp st(1)
fld dword [ebp - 0x6c]
fmul st(5)
faddp st(1)
fstp dword [ebp - 0x44]
fxch st(1)
fmul dword [eax + 0x20]
mov eax, dword [var_70h]
fld dword [eax + 4]
fld dword [eax + 8]
fxch st(3)
mov eax, dword [var_5ch]
fmul st(1)
fxch st(5)
mov dword [var_6ch], esi
fmul st(3)
fld dword [ebp - 0x6c]
fxch st(3)
faddp st(6)
faddp st(5)
fxch st(4)
fstp dword [ebp - 0x40]
fmul dword [eax]
fstp dword [ebp - 0x70]
mov eax, dword [var_70h]
and eax, 0x7fffffff
mov dword [var_6ch], eax
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
mov dword [var_6ch], edi
fld dword [ebp - 0x6c]
fmul dword [eax + 4]
fstp dword [ebp - 0x70]
mov eax, dword [var_70h]
and eax, 0x7fffffff
mov dword [var_6ch], eax
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fxch st(1)
fmul dword [eax + 8]
fstp dword [ebp - 0x70]
mov eax, dword [var_70h]
and eax, 0x7fffffff
mov dword [var_6ch], eax
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fsub st(3), st(0)
fstp dword [ebp - 0x58]
fmul dword [eax + 0x10]
fstp dword [ebp - 0x70]
mov eax, dword [var_70h]
and eax, 0x7fffffff
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
mov dword [var_6ch], edi
fld dword [ebp - 0x6c]
mov dword [var_6ch], edx
fld dword [ebp - 0x6c]
fmulp st(1)
fstp dword [ebp - 0x6c]
mov edx, dword [var_6ch]
mov eax, edx
and eax, 0x7fffffff
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
mov dword [var_6ch], ebx
mov ebx, dword [var_5ch]
fld dword [ebp - 0x6c]
fmulp st(2)
fxch st(1)
fstp dword [ebp - 0x6c]
mov eax, dword [var_6ch]
mov edx, eax
and edx, 0x7fffffff
mov dword [var_6ch], edx
fld dword [ebp - 0x6c]
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fst dword [ebp - 0x54]
fxch st(1)
fmul dword [ebx + 0x20]
fstp dword [ebp - 0x6c]
mov eax, dword [var_6ch]
fsubr dword [ebp - 0x44]
mov edx, eax
and edx, 0x7fffffff
mov dword [var_6ch], edx
mov eax, dword [var_60h]
mov edx, dword [var_64h]
fld dword [ebp - 0x6c]
mov dword [var_6ch], edi
fld dword [ebp - 0x6c]
fmulp st(5)
fxch st(4)
fstp dword [ebp - 0x6c]
mov edi, dword [var_6ch]
mov esi, edi
and esi, 0x7fffffff
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fxch st(5)
faddp st(1)
fxch st(4)
fmulp st(2)
fxch st(1)
fstp dword [ebp - 0x6c]
mov ecx, dword [var_6ch]
mov ebx, ecx
and ebx, 0x7fffffff
mov dword [var_6ch], ebx
fld dword [ebp - 0x6c]
fxch st(2)
fstp dword [eax]
fld dword [ebp - 0x58]
fxch st(3)
faddp st(2)
fxch st(2)
fadd dword [var_48h]
fxch st(2)
fstp dword [eax + 4]
fst dword [ebp - 0x50]
fsubr dword [ebp - 0x40]
fxch st(1)
fstp dword [edx]
fld dword [ebp - 0x54]
fadd dword [var_44h]
fxch st(1)
fstp dword [eax + 8]
fstp dword [edx + 4]
fld dword [ebp - 0x50]
fadd dword [var_40h]
fstp dword [edx + 8]
add esp, 0x6c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x28
fld dword [ebp + 8]
fld dword [0x156a8]
fld dword [ebp + 0xc]
fxch st(1)
fucompi st(2)
jbe 0xf540
fld dword [0x17204]
fxch st(2)
fadd st(0)
fstp dword [ebp - 8]
fld1
fsubrp st(1)
fxch st(1)
fucompi st(1)
jp log
jne log
fstp st(0)
fld dword [0x1fae0]
fstp qword [esp + 8]
fld dword [ebp - 8]
fstp qword [esp]
call pow
fstp dword [ebp - 4]
fld dword [ebp - 4]
fmul dword [0x156a8]
leave
ret
mov esi, esi
fld dword [0x17204]
fxch st(2)
fadd st(0)
fsubr dword [0x158ac]
fstp dword [ebp - 0xc]
fld1
fsubrp st(1)
fxch st(1)
fucompi st(1)
jp 0xf590
jne 0xf590
fstp st(0)
fld dword [0x1fae0]
fstp qword [esp + 8]
fld dword [ebp - 0xc]
fstp qword [esp]
call pow
fstp dword [ebp - 4]
fld dword [ebp - 4]
fmul dword [0x156a8]
fsubr dword [0x15860]
leave
ret
lea esi, [esi]
fstp qword [esp]
call log
fld dword [0x158a8]
fmulp st(1)
fstp dword [ebp - 4]
fld dword [ebp - 4]
fst dword [0x1fae0]
jmp 0xf567
mov esi, esi
fstp qword [esp]
call log
fld dword [0x158a8]
fmulp st(1)
fstp dword [ebp - 4]
fld dword [ebp - 4]
fst dword [0x1fae0]
jmp 0xf521
push ebp
fldz
mov ebp, esp
push esi
push ebx
sub esp, 0x20
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
mov ebx, dword [arg_14h]
fld dword [edx]
mov esi, dword [arg_18h]
fld dword [edx + 4]
fld st(1)
fsubr dword [eax]
fld st(1)
fsubr dword [eax + 4]
fld dword [edx + 8]
fld st(2)
fmul st(3)
fld dword [eax + 8]
fxch st(6)
fstp dword [ebp - 0x20]
fld st(2)
fmul st(3)
fxch st(4)
fst dword [ebp - 0x18]
fxch st(6)
fsub st(2)
fxch st(5)
fstp dword [ebp - 0x1c]
faddp st(3)
fld st(3)
fxch st(2)
fst dword [ebp - 0x14]
fxch st(2)
fmul st(4)
fxch st(4)
fst dword [ebp - 0x10]
fxch st(3)
faddp st(4)
fld dword [0x158e0]
fucompi st(4)
ja 0x12f20
fstp st(5)
fld dword [ebp - 0x1c]
fld st(4)
fld st(2)
fmul dword [ecx + 4]
fxch st(2)
fmul st(3)
fxch st(1)
fmul dword [ecx]
faddp st(2)
fld st(3)
fmul dword [ecx + 8]
faddp st(2)
fld dword [ebp - 0x20]
fmul st(6)
faddp st(1)
fld st(3)
fmul st(7)
faddp st(1)
fsubp st(1)
fdivrp st(3)
fxch st(2)
fxch st(4)
fxch st(2)
jmp 0x12f22
mov esi, esi
fstp st(3)
fld1
fxch st(5)
fucomi st(5)
ja 0x12f36
fstp st(5)
fldz
fucomi st(5)
fcmovbe st(0), st(5)
fstp st(5)
jmp 0x12f38
fstp st(0)
test esi, esi
je 0x12f54
fstp st(2)
fxch st(3)
fst dword [esi]
fld dword [edx]
fld dword [edx + 8]
fxch st(1)
fstp dword [ebp - 0x20]
fld dword [edx + 4]
fstp dword [ebp - 0x1c]
jmp 0x12f60
fxch st(2)
fxch st(1)
fxch st(4)
fxch st(1)
lea esi, [esi]
fxch st(3)
fmul st(1)
fxch st(2)
fmul st(1)
fxch st(4)
fmulp st(1)
fxch st(1)
fadd dword [var_20h]
fxch st(3)
fadd dword [var_1ch]
fxch st(2)
faddp st(1)
fxch st(2)
fst dword [ebx]
fxch st(1)
fst dword [ebx + 4]
fxch st(2)
fstp dword [ebx + 8]
fstp dword [ebp - 0x20]
fstp dword [ebp - 0x1c]
add esp, 0x20
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
fld dword [ebp + 8]
fsqrt
fdivr dword [0x15860]
pop ebp
ret
add dword [arg_4h], 0xfffffffc
jmp fcn.00008cc0
push ebp
fldz
mov ebp, esp
push esi
push ebx
sub esp, 0x30
lea ebx, [var_18h]
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
fld dword [edx + 4]
mov esi, dword [arg_14h]
fld dword [edx]
fld st(1)
fld dword [eax]
fxch st(1)
fsubr dword [eax + 4]
fld dword [edx + 8]
fxch st(2)
fsub st(3)
fxch st(4)
fstp dword [ebp - 0x2c]
fld st(0)
fld st(4)
fxch st(3)
fst dword [ebp - 0x30]
fxch st(1)
fmul st(2)
fxch st(1)
fsubr dword [eax + 8]
fxch st(3)
fmul st(5)
faddp st(1)
fld st(2)
fmul st(3)
faddp st(1)
fld dword [0x158e0]
fucompi st(1)
ja 0x13170
fstp st(5)
fld dword [ebp - 0x2c]
fld st(4)
fld st(2)
fmul dword [ecx + 4]
fxch st(2)
fmul st(3)
fxch st(1)
fmul dword [ecx]
faddp st(2)
fld st(3)
fmul dword [ecx + 8]
faddp st(2)
fld st(5)
fmul st(5)
faddp st(1)
fld dword [ebp - 0x30]
fmul st(4)
faddp st(1)
fsubp st(1)
fdivrp st(5)
jmp 0x13172
nop
lea esi, [esi]
fstp st(0)
fld1
fxch st(5)
fucomi st(5)
ja 0x13186
fstp st(5)
fldz
fucomi st(5)
fcmovbe st(0), st(5)
fstp st(5)
jmp 0x13188
fstp st(0)
test esi, esi
je 0x131a4
fstp st(2)
fxch st(3)
fst dword [esi]
fld dword [edx + 4]
fld dword [edx]
fxch st(1)
fstp dword [ebp - 0x2c]
fld dword [edx + 8]
fstp dword [ebp - 0x30]
jmp 0x131b0
fxch st(2)
fxch st(1)
fxch st(4)
fxch st(1)
lea esi, [esi]
fxch st(3)
fmul st(1)
fxch st(2)
fmul st(1)
fxch st(4)
fmulp st(1)
fxch st(3)
fadd dword [var_2ch]
fxch st(2)
faddp st(1)
fxch st(2)
fadd dword [var_30h]
fxch st(2)
fstp dword [ebx]
fst dword [ebx + 4]
fld dword [ebp - 0x18]
fld dword [ebp - 0x14]
fxch st(1)
fsubr dword [ecx]
fxch st(1)
fsubr dword [ecx + 4]
fxch st(3)
fst dword [ebx + 8]
fld dword [ebp - 0x10]
fxch st(2)
fmul st(0)
fxch st(4)
fmul st(0)
fxch st(2)
fsubr dword [ecx + 8]
fxch st(3)
fstp dword [ebp - 0x2c]
fstp dword [ebp - 0x30]
add esp, 0x30
faddp st(2)
pop ebx
fmul st(0)
pop esi
faddp st(1)
pop ebp
ret
push ebp
xorps xmm0, xmm0
mov ebp, esp
sub esp, 0x18
mov ecx, dword [arg_8h]
fld dword [ecx]
movss dword [var_14h], xmm0
fld dword [ebp - 0x14]
fxch st(1)
fucompi st(1)
jne 0xca30
jp 0xca30
fld dword [ecx + 4]
fucompi st(1)
jne 0xca30
jp 0xca30
fld dword [ecx + 8]
fucompi st(1)
fstp st(0)
jp 0xca32
jne 0xca32
movss dword [var_14h], xmm0
fld dword [ebp - 0x14]
leave
ret
lea esi, [esi]
fstp st(0)
mov edx, dword [ecx]
mov dword [var_8h], edx
mov eax, dword [ecx + 4]
mov dword [var_4h], eax
movd mm3, dword [ecx + 8]
mov dword [var_10h], edx
mov eax, dword [ecx + 4]
mov dword [var_ch], eax
movd mm2, dword [ecx + 8]
femms
movq mm4, qword [var_8h]
movq mm0, qword [var_10h]
pfmul mm4, mm4
pfmul mm3, mm3
pfacc mm4, mm4
pfadd mm3, mm4
pfrsqrt mm4, mm3
punpckldq mm3, mm3
pfmul mm3, mm4
pfmul mm2, mm4
pfmul mm0, mm4
movq qword [var_10h], mm0
mov edx, dword [var_10h]
movd dword [ebp - 0x14], mm3
movss xmm0, dword [var_14h]
mov dword [ecx], edx
mov eax, dword [var_ch]
movd dword [ecx + 8], mm2
mov dword [ecx + 4], eax
femms
movss dword [var_14h], xmm0
fld dword [ebp - 0x14]
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x10
mov eax, dword [arg_ch]
mov edx, dword [arg_8h]
mov esi, dword [arg_10h]
lea ebx, [eax + 0x10]
fld dword [ebx + 0xc]
lea ecx, [eax + 0x20]
fld dword [eax + 0xc]
fsubr dword [edx]
fxch st(1)
fsubr dword [edx + 4]
fld dword [ecx + 0xc]
fsubr dword [edx + 8]
fld st(2)
fld st(2)
fmul dword [eax + 0x10]
fxch st(1)
fmul dword [eax]
faddp st(1)
fld st(1)
fmul dword [eax + 0x20]
faddp st(1)
fld st(2)
fxch st(1)
fstp dword [esi]
fld st(3)
fxch st(1)
fmul dword [ebx + 4]
fxch st(1)
fmul dword [eax + 4]
faddp st(1)
fld st(1)
fmul dword [ecx + 4]
faddp st(1)
fstp dword [esi + 4]
fxch st(1)
fmul dword [ebx + 8]
fxch st(2)
fmul dword [eax + 8]
fxch st(1)
fmul dword [ecx + 8]
fxch st(1)
faddp st(2)
faddp st(1)
fstp dword [esi + 8]
add esp, 0x10
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x20
fld dword [0x1585c]
mov ecx, dword [arg_8h]
lea edx, [var_18h]
mov eax, dword [arg_ch]
fld dword [ecx + 4]
fld dword [ecx + 8]
fxch st(1)
fmul st(2)
fxch st(1)
fmul st(2)
fxch st(2)
fmul dword [ecx]
fxch st(1)
mov dword [var_4h], eax
fstp dword [ebp - 0x18]
fxch st(1)
mov dword [esp], edx
fstp dword [ebp - 0x14]
fstp dword [ebp - 0x10]
call _Z11AngleMatrixRK6QAngleR11matrix3x4_t
leave
ret
push ebp
mov ebp, esp
sub esp, 4
mov eax, dword [arg_8h]
mov dword [esp], eax
call _Z22_3DNow_VectorNormalizeR6Vector
fstp st(0)
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
push ebx
mov edx, dword [arg_8h]
mov ebx, dword [arg_10h]
fld dword [eax]
lea ecx, [eax + 0x10]
fld dword [eax + 4]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [eax + 8]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ebx]
fld dword [ecx + 4]
fld dword [eax + 0x10]
fxch st(1)
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [ecx + 8]
lea ecx, [eax + 0x20]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ebx + 4]
fld dword [eax + 0x20]
fld dword [ecx + 4]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [ecx + 8]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ebx + 8]
pop ebx
pop ebp
ret
push ebp
mov eax, 1
mov ebp, esp
mov edx, dword [arg_8h]
jmp 0x14d02
lea esi, [esi]
add eax, eax
cmp eax, edx
jl 0x14d00
pop ebp
sar eax, 1
ret
push ebp
xor eax, eax
mov ebp, esp
push edi
cld
sub esp, 4
mov ecx, 0xc
mov edx, dword [arg_8h]
mov dword [var_8h], edx
mov edi, dword [var_8h]
mov edx, dword [var_8h]
rep stosd dword es:[edi], eax
mov eax, 0x3f800000
mov dword [edx], eax
mov dword [edx + 0x14], eax
mov dword [edx + 0x28], eax
pop edi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
movd mm0, dword [arg_8h]
femms
pfrsqrt mm1, mm0
punpckldq mm1, mm1
pfmul mm0, mm1
femms
movd dword [ebp - 4], mm0
fld dword [ebp - 4]
leave
ret
push ebp
fld1
mov ebp, esp
sub esp, 4
fld dword [ebp + 0x14]
fadd dword [arg_8h]
fld dword [ebp + 0x10]
fld dword [ebp + 0xc]
fxch st(2)
fsub dword [ebp + 0xc]
fxch st(2)
fsubr st(1)
fdivp st(2)
fxch st(1)
fadd st(0)
fsub st(2)
fld st(0)
fabs
fld dword [0x158d8]
fxch st(1)
fucomi st(1)
jbe 0x12108
fsubrp st(1)
fdiv dword [0x158dc]
fstp dword [ebp - 4]
fld dword [ebp - 4]
fxch st(3)
fucomi st(3)
jbe 0x12110
fldz
fxch st(2)
fucompi st(2)
fstp st(1)
jbe 0x12140
fld st(2)
fmul st(3)
fld st(3)
fld st(2)
fxch st(1)
fmul st(2)
fld st(2)
fmul dword [0x15888]
fld st(1)
fadd st(2)
fsubrp st(1)
fld st(3)
fadd st(4)
fxch st(1)
fadd st(5)
fxch st(1)
fsubr st(2)
fxch st(3)
fsub st(1)
fxch st(1)
fmul dword [0x158d8]
fxch st(3)
faddp st(7)
fxch st(1)
fsubrp st(3)
fxch st(5)
fmul dword [0x158d8]
fxch st(1)
faddp st(5)
faddp st(4)
fldz
fmulp st(1)
faddp st(3)
fxch st(2)
nop
fadd st(2)
fmul dword [0x156a8]
fsub st(2), st(0)
fmulp st(1)
fxch st(1)
fmul dword [ebp + 0xc]
faddp st(1)
fsub dword [ebp + 0x14]
leave
ret
fstp st(0)
fstp st(0)
jmp 0x120f0
mov esi, esi
fstp st(3)
fldz
fxch st(1)
fucompi st(1)
fstp st(0)
fld st(1)
fld dword [0x15880]
fcmovnbe st(0), st(3)
faddp st(3)
fxch st(2)
fmul dword [0x156a8]
fsub st(2), st(0)
fmulp st(1)
fxch st(1)
fmul dword [ebp + 0xc]
faddp st(1)
fsub dword [ebp + 0x14]
leave
ret
mov esi, esi
fld st(2)
fmul st(3)
fld st(3)
fld st(2)
fxch st(1)
fmul st(2)
fld st(2)
fmul dword [0x15888]
fld st(1)
fadd st(2)
fsubrp st(1)
fld st(3)
fadd st(4)
fxch st(1)
fadd st(5)
fxch st(1)
fsubr st(2)
fxch st(3)
fsub st(1)
fxch st(1)
fmul dword [0x158d8]
fxch st(3)
faddp st(7)
fxch st(1)
fsubrp st(3)
fxch st(5)
fmul dword [0x158d8]
fxch st(1)
faddp st(5)
faddp st(4)
fldz
fmulp st(1)
fld st(1)
fxch st(4)
faddp st(1)
fchs
faddp st(1)
fmul dword [0x156a8]
fsub st(2), st(0)
fmulp st(1)
fxch st(1)
fmul dword [ebp + 0xc]
faddp st(1)
fsub dword [ebp + 0x14]
leave
ret
push ebp
fld1
mov ebp, esp
push edi
lea edi, [var_28h]
push esi
lea esi, [var_38h]
push ebx
sub esp, 0x5c
mov edx, dword [arg_8h]
fld dword [ebp + 0x14]
mov eax, dword [arg_ch]
mov ecx, dword [arg_10h]
fld dword [edx]
fld st(1)
fxch st(1)
mov ebx, dword [arg_18h]
fsubr dword [eax]
fxch st(1)
fmul st(2)
fld st(2)
fxch st(2)
fstp dword [ebp - 0x28]
fmul st(1), st(0)
fld st(0)
fld dword [edx + 4]
fld st(2)
fadd st(3)
fxch st(1)
fsubr dword [eax + 4]
fxch st(2)
fmul dword [0x15888]
fxch st(1)
fsubr st(4)
fxch st(2)
fstp dword [ebp - 0x24]
fxch st(1)
faddp st(4)
fld dword [edx + 8]
fsubr dword [eax + 8]
fstp dword [ebp - 0x20]
fld dword [eax]
fsubr dword [ecx]
fstp dword [ebp - 0x38]
fld dword [eax + 4]
fsubr dword [ecx + 4]
fstp dword [ebp - 0x34]
fld dword [eax + 8]
fsubr dword [ecx + 8]
fstp dword [ebp - 0x30]
fld st(2)
fadd st(3)
fxch st(3)
fsubrp st(2)
fsubp st(2)
fld dword [eax]
fxch st(1)
fstp dword [ebp - 0x3c]
fxch st(1)
fadd st(3)
fmul st(1), st(0)
fsub st(3), st(0)
fxch st(1)
fstp dword [ebx]
fld dword [eax + 4]
fmul st(1)
fstp dword [ebx + 4]
fmul dword [eax + 8]
fxch st(1)
fstp dword [ebp - 0x58]
fstp dword [ebx + 8]
mov dword [var_8h], ecx
fstp dword [esp + 4]
mov dword [var_ch], ebx
mov dword [esp], ebx
call _Z8VectorMARK6VectorfS1_RS_
fld dword [ebp - 0x58]
mov dword [var_ch], ebx
mov dword [var_8h], edi
mov dword [esp], ebx
fstp dword [esp + 4]
call _Z8VectorMARK6VectorfS1_RS_
fld dword [ebp - 0x3c]
mov dword [var_ch], ebx
mov dword [var_8h], esi
mov dword [esp], ebx
fstp dword [esp + 4]
call _Z8VectorMARK6VectorfS1_RS_
add esp, 0x5c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
fld dword [ebp + 8]
fld dword [ebp + 0xc]
fld dword [0x1587c]
fld st(2)
fsub st(2)
fld st(1)
fxch st(1)
fprem
fnstsw ax
sahf
jp 0x13eaa
fstp st(1)
fstp dword [ebp - 4]
fxch st(2)
fucompi st(1)
fstp st(0)
fld dword [ebp - 4]
jbe 0x13ee1
fld dword [0x158b0]
fxch st(1)
fucomi st(1)
fstp st(1)
jae 0x13f00
fstp st(1)
xor eax, eax
fabs
fld dword [ebp + 0x10]
leave
fucompi st(1)
fstp st(0)
seta al
ret
fld dword [0x158ec]
fucompi st(1)
jb 0x13ecf
faddp st(1)
xor eax, eax
fabs
fld dword [ebp + 0x10]
leave
fucompi st(1)
fstp st(0)
seta al
ret
lea esi, [esi]
fsubrp st(1)
xor eax, eax
fabs
fld dword [ebp + 0x10]
leave
fucompi st(1)
fstp st(0)
seta al
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x44
lea ebx, [var_38h]
mov dword [var_4h], ebx
mov edx, dword [arg_8h]
mov dword [esp], edx
call _Z16QuaternionMatrixRK10QuaternionR11matrix3x4_t
mov dword [esp], ebx
mov eax, dword [arg_ch]
mov dword [var_4h], eax
call _Z12MatrixAnglesRK11matrix3x4_tPf
add esp, 0x44
pop ebx
pop ebp
ret
push ebp
fldz
mov ebp, esp
push esi
push ebx
sub esp, 0x40
lea ebx, [var_18h]
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
fld dword [edx]
mov esi, dword [arg_14h]
fld dword [edx + 4]
fld st(1)
fld dword [eax + 4]
fxch st(1)
fsubr dword [eax]
fxch st(3)
fstp dword [ebp - 0x30]
fsub st(1)
fld dword [edx + 8]
fld st(3)
fmul st(4)
fxch st(1)
fst dword [ebp - 0x2c]
fld st(2)
fxch st(1)
fsubr dword [eax + 8]
fxch st(1)
fmul st(3)
faddp st(2)
fld st(0)
fmul st(1)
faddp st(2)
fld dword [0x158e0]
fucompi st(2)
ja 0x12cb0
fstp st(5)
fld st(3)
fld st(2)
fld st(3)
fxch st(1)
fmul dword [ecx + 4]
fxch st(1)
fmul st(5)
fxch st(2)
fmul dword [ecx]
faddp st(1)
fld st(6)
fmul dword [ecx + 8]
faddp st(1)
fld dword [ebp - 0x30]
fmul st(6)
faddp st(2)
fld dword [ebp - 0x2c]
fmul st(7)
faddp st(2)
fsubrp st(1)
fdivrp st(1)
fxch st(4)
jmp 0x12cb2
nop
lea esi, [esi]
fstp st(1)
test esi, esi
je 0x12cd0
fstp st(2)
fxch st(3)
fst dword [esi]
fld dword [edx]
fld dword [edx + 4]
fxch st(1)
fstp dword [ebp - 0x30]
fld dword [edx + 8]
fstp dword [ebp - 0x2c]
jmp 0x12ce0
mov esi, esi
fxch st(2)
fxch st(1)
fxch st(4)
fxch st(1)
nop
lea esi, [esi]
fxch st(3)
fmul st(1)
fxch st(4)
fmul st(1)
fxch st(2)
fmulp st(1)
fxch st(3)
fadd dword [var_30h]
fxch st(2)
faddp st(1)
fxch st(2)
fadd dword [var_2ch]
fxch st(1)
fst dword [ebx]
fxch st(2)
fstp dword [ebx + 4]
fld dword [ebp - 0x18]
fld dword [ebp - 0x14]
fxch st(1)
fsubr dword [ecx]
fxch st(1)
fsubr dword [ecx + 4]
fxch st(2)
fst dword [ebx + 8]
fld dword [ebp - 0x10]
fsubr dword [ecx + 8]
fxch st(2)
fst dword [ebp - 0x28]
fmul st(0)
fxch st(3)
fst dword [ebp - 0x24]
fmul st(0)
fxch st(2)
fst dword [ebp - 0x20]
fmul st(0)
fxch st(3)
faddp st(2)
fxch st(3)
fstp dword [ebp - 0x30]
fxch st(2)
fstp dword [ebp - 0x2c]
faddp st(1)
fstp dword [esp]
call dword [0]
add esp, 0x40
pop ebx
pop esi
pop ebp
ret
xor eax, eax
xor ecx, ecx
xor edx, edx
mov dword [0], eax
xor eax, eax
mov dword [0], ecx
mov dword [0], edx
mov dword [0], eax
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
fldz
mov ebp, esp
push esi
push ebx
sub esp, 0x20
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
mov ebx, dword [arg_14h]
fld dword [edx]
mov esi, dword [arg_18h]
fld dword [edx + 8]
fld st(1)
fstp dword [ebp - 0x1c]
fld dword [edx + 4]
fxch st(2)
fsubr dword [eax]
fld dword [eax + 8]
fld st(3)
fsubr dword [eax + 4]
fld st(2)
fmul st(3)
fxch st(5)
fstp dword [ebp - 0x20]
fld st(0)
fmul st(1)
fxch st(3)
fst dword [ebp - 0x18]
fxch st(2)
fsub st(4)
fxch st(1)
fst dword [ebp - 0x14]
fxch st(5)
faddp st(3)
fld st(0)
fst dword [ebp - 0x10]
fmul st(1), st(0)
fxch st(3)
faddp st(1)
fld dword [0x158e0]
fucompi st(1)
ja 0x12bb6
fstp st(5)
fld dword [ebp - 0x20]
fld st(1)
fld st(5)
fmul dword [ecx + 4]
fxch st(2)
fmul st(6)
fxch st(1)
fmul dword [ecx]
faddp st(2)
fld st(3)
fmul dword [ecx + 8]
faddp st(2)
fld dword [ebp - 0x1c]
fmul st(3)
faddp st(1)
fld st(3)
fmul st(5)
faddp st(1)
fsubp st(1)
fdivrp st(5)
jmp 0x12bb8
fstp st(0)
test esi, esi
je 0x12bd4
fstp st(2)
fxch st(3)
fst dword [esi]
fld dword [edx]
fld dword [edx + 8]
fxch st(1)
fstp dword [ebp - 0x1c]
fld dword [edx + 4]
fstp dword [ebp - 0x20]
jmp 0x12be0
fxch st(2)
fxch st(1)
fxch st(4)
fxch st(1)
lea esi, [esi]
fxch st(2)
fmul st(1)
fxch st(3)
fmul st(1)
fxch st(4)
fmulp st(1)
fxch st(2)
fadd dword [var_1ch]
fxch st(3)
fadd dword [var_20h]
fxch st(1)
faddp st(2)
fxch st(2)
fst dword [ebx]
fxch st(2)
fst dword [ebx + 4]
fxch st(1)
fstp dword [ebx + 8]
fxch st(1)
fstp dword [ebp - 0x1c]
fstp dword [ebp - 0x20]
add esp, 0x20
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
lea eax, [var_48h]
push edi
push esi
push ebx
sub esp, 0x78
mov edi, dword [arg_10h]
fld dword [0x156a8]
mov edx, dword [arg_ch]
mov esi, dword [arg_14h]
fld dword [edi]
mov ebx, dword [arg_8h]
mov ecx, dword [arg_18h]
fld dword [edi + 4]
fld dword [edi + 8]
fxch st(2)
fadd dword [edx]
fxch st(1)
fadd dword [edx + 4]
fxch st(2)
fadd dword [edx + 8]
fxch st(1)
mov dword [var_5ch], esi
fmul st(3)
fxch st(2)
mov dword [var_60h], ecx
lea esi, [var_28h]
fmul st(3)
fxch st(1)
fmulp st(3)
fxch st(1)
fst dword [ebp - 0x28]
fsubr dword [edi]
fxch st(1)
fst dword [ebp - 0x24]
fsubr dword [edi + 4]
fxch st(2)
fst dword [ebp - 0x20]
fsubr dword [edi + 8]
fxch st(1)
fstp dword [ebp - 0x38]
fxch st(1)
mov dword [var_8h], eax
fstp dword [ebp - 0x34]
mov dword [var_4h], ebx
fstp dword [ebp - 0x30]
mov dword [esp], esi
call _Z15VectorTransformPKfRK11matrix3x4_tPf
mov esi, dword [var_38h]
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
fmul dword [ebx]
fstp dword [ebp - 0x6c]
mov ecx, dword [var_6ch]
and ecx, 0x7fffffff
mov dword [var_6ch], ecx
mov ecx, dword [var_34h]
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fmul dword [ebx + 4]
fstp dword [ebp - 0x6c]
mov edx, dword [var_6ch]
and edx, 0x7fffffff
mov dword [var_6ch], edx
mov edx, dword [var_30h]
fld dword [ebp - 0x6c]
mov dword [var_6ch], edx
faddp st(1)
fld dword [ebp - 0x6c]
fmul dword [ebx + 8]
fstp dword [ebp - 0x6c]
mov edi, dword [var_6ch]
and edi, 0x7fffffff
mov dword [var_6ch], edi
lea edi, [ebx + 0x10]
fld dword [ebp - 0x6c]
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fst dword [ebp - 0x58]
fxch st(1)
fmul dword [ebx + 0x10]
fstp dword [ebp - 0x6c]
mov eax, dword [var_6ch]
and eax, 0x7fffffff
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fmul dword [edi + 4]
fstp dword [ebp - 0x6c]
fxch st(1)
mov eax, dword [var_6ch]
fsubr dword [ebp - 0x48]
and eax, 0x7fffffff
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
mov dword [var_6ch], edx
fld dword [ebp - 0x6c]
fxch st(3)
faddp st(1)
fxch st(2)
fmul dword [edi + 8]
fstp dword [ebp - 0x6c]
mov edi, dword [var_6ch]
and edi, 0x7fffffff
mov dword [var_6ch], edi
lea edi, [ebx + 0x20]
fld dword [ebp - 0x6c]
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
fxch st(3)
faddp st(1)
fst dword [ebp - 0x54]
fxch st(2)
fmul dword [ebx + 0x20]
fstp dword [ebp - 0x6c]
mov ebx, dword [var_6ch]
mov eax, ebx
and eax, 0x7fffffff
mov dword [var_6ch], eax
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fmul dword [edi + 4]
fstp dword [ebp - 0x6c]
mov ecx, dword [var_6ch]
mov esi, ecx
and esi, 0x7fffffff
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
mov dword [var_6ch], edx
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fxch st(1)
fmul dword [edi + 8]
fstp dword [ebp - 0x6c]
mov edx, dword [var_6ch]
mov ebx, edx
and ebx, 0x7fffffff
mov dword [var_6ch], ebx
fld dword [ebp - 0x6c]
faddp st(1)
fst dword [ebp - 0x50]
fxch st(1)
fstp dword [eax]
fxch st(1)
mov ecx, dword [var_60h]
fsubr dword [ebp - 0x44]
fld dword [ebp - 0x58]
fadd dword [var_48h]
fxch st(2)
fsubr dword [ebp - 0x40]
fxch st(1)
fstp dword [eax + 4]
fxch st(1)
fstp dword [ecx]
fld dword [ebp - 0x54]
fadd dword [var_44h]
fxch st(1)
fstp dword [eax + 8]
fstp dword [ecx + 4]
fld dword [ebp - 0x50]
fadd dword [var_40h]
fstp dword [ecx + 8]
add esp, 0x78
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x37c
mov eax, dword [arg_8h]
mov eax, dword [eax + 4]
mov dword [var_354h], eax
mov dword [var_14h], eax
movzx eax, word [0x10]
cmp ax, 0xffff
je 0x99f7
lea edi, [var_14h]
nop
lea esi, [esi]
movzx esi, ax
mov ebx, esi
shl ebx, 4
mov eax, ebx
add eax, dword [4]
mov dword [esp], edi
add eax, 8
mov dword [var_4h], eax
call dword [0]
test al, al
je blockedIPs
cmp byte [0], 0
mov ebx, esi
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp bx, 0xffff
mov eax, 0
je 0x99ee
movzx eax, bx
shl eax, 4
add eax, dword [4]
movzx eax, word [eax]
cmp ax, 0xffff
jne 0x99a0
mov esi, 0xffffffff
mov ebx, 0xffff
cmp ebx, dword [8]
jge 0x9a67
cmp byte [0], 0
mov edi, ebx
je _ZGVZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
cmp di, 0xffff
mov eax, 0
je 0x9a2f
movzx eax, di
shl eax, 4
add eax, dword [4]
cmp word [eax], si
je 0x9a67
mov eax, dword [4]
shl ebx, 4
mov edx, dword [0]
mov eax, dword [ebx + eax + 0xc]
mov edx, dword [edx + 0xc]
lea eax, [eax + eax*2]
shl eax, 2
add eax, dword [0]
add dword [eax + 4], 1
mov dword [eax + 8], edx
add esp, 0x37c
pop ebx
pop esi
pop edi
pop ebp
ret
cmp dword [0xc], 0x7ff
jg 0x9a5c
mov eax, dword [0x173b8]
mov eax, dword [eax + 0x2c]
test eax, eax
jne engine
mov eax, dword [0]
mov esi, dword [0xc]
fld dword [eax + 0xc]
mov eax, dword [4]
lea edi, [esi + 1]
fstp dword [ebp - 0x350]
cmp edi, eax
jg blockedList
mov eax, dword [0xc]
mov ecx, dword [0]
add eax, 1
mov dword [0xc], eax
sub eax, esi
lea edx, [eax - 1]
test edx, edx
mov dword [0x10], ecx
jg 0x9d7d
lea eax, [esi + esi*2]
lea ebx, [eax*4]
mov eax, ebx
add eax, dword [0]
je 0x9af9
mov edx, dword [var_354h]
fld dword [ebp - 0x350]
fstp dword [eax + 8]
mov dword [eax + 4], 1
mov dword [eax], edx
mov eax, dword [var_354h]
mov dword [var_10h], esi
mov dword [var_14h], eax
lea eax, [var_14h]
mov dword [var_4h], eax
mov dword [esp], 0
call _ZN10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE6InsertERKS2_
add esp, 0x37c
pop ebx
pop esi
pop edi
pop ebp
ret
add ebx, dword [4]
mov dword [var_4h], edi
lea eax, [ebx + 8]
mov dword [esp], eax
call dword [0]
test al, al
je 0x9c4f
cmp byte [0], 0
mov ebx, esi
je 0x9bb6
cmp bx, 0xffff
mov eax, 0
je 0x9b63
movzx eax, bx
shl eax, 4
add eax, dword [4]
movzx eax, word [eax + 2]
cmp ax, 0xffff
jne 0x99a0
jmp 0x99f7
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0x99d7
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0x9b4c
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0x9b4c
mov ecx, dword [8]
cmp ecx, 0
jl blockedList
je 0x9deb
mov edx, esi
mov eax, esi
sar edx, 0x1f
idiv ecx
add eax, 1
imul eax, ecx
mov ebx, dword [0]
mov dword [4], eax
test ebx, ebx
je g_pMemAlloc
mov edx, dword [0]
lea eax, [eax + eax*2]
shl eax, 2
mov ecx, dword [edx]
mov dword [var_8h], eax
mov dword [var_4h], ebx
mov dword [esp], edx
call dword [ecx + 4]
mov dword [0], eax
jmp blockedList
movzx ebx, si
jmp blockedIPs
mov eax, dword [0]
lea ebx, [var_140h]
mov edx, dword [eax]
mov dword [var_4h], ebx
mov dword [esp], eax
mov dword [var_8h], 0x100
call dword [edx + 0xd8]
mov dword [var_ch], ebx
lea ebx, [var_340h]
mov dword [var_8h], str._s_addons_daf_log.txt
mov dword [var_4h], 0x200
mov dword [esp], ebx
call _Z10V_snprintfPciPKcz
mov dword [var_4h], 0x2f
mov dword [esp], ebx
call _Z12V_FixSlashesPcc
mov dword [var_4h], 0x15629
mov dword [esp], ebx
call fopen
test eax, eax
mov edi, eax
je gpGlobals
lea eax, [var_40h]
mov esi, 0x1562c
mov dword [esp], eax
mov eax, dword [0]
call dword [eax + 0x5c]
mov ebx, dword [var_38h]
mov edx, 0x2aaaaaab
mov eax, ebx
imul edx
mov eax, ebx
sar eax, 0x1f
sar edx, 1
sub edx, eax
mov eax, 0x1562f
lea edx, [edx + edx*2]
shl edx, 2
cmp ebx, 0xb
cmova esi, eax
sub ebx, edx
mov edx, dword [arg_8h]
mov eax, 0xc
cmove ebx, eax
mov eax, dword [edx + 4]
mov dword [esp], eax
call inet_ntoa
mov edx, 0x51eb851f
mov dword [var_20h], esi
mov dword [var_24h], eax
mov eax, dword [var_40h]
mov dword [var_1ch], eax
mov eax, dword [var_3ch]
mov dword [var_sp_14h], ebx
mov dword [var_18h], eax
mov ecx, dword [var_2ch]
mov eax, ecx
imul edx
mov eax, ecx
sar eax, 0x1f
sar edx, 5
sub edx, eax
imul edx, edx, 0x64
sub ecx, edx
mov dword [var_sp_10h], ecx
mov eax, dword [var_34h]
mov dword [var_ch], eax
mov eax, dword [var_30h]
mov dword [var_4h], str.__02d__02d__02d__02d:_02d:_02d__s__Blocked__s._n
mov dword [esp], edi
add eax, 1
mov dword [var_8h], eax
call fprintf
mov dword [esp], edi
call fclose
jmp gpGlobals
lea eax, [esi + esi*2]
lea ebx, [eax*4]
lea eax, [edx + edx*2]
shl eax, 2
mov dword [var_8h], eax
lea eax, [ecx + ebx]
mov dword [var_4h], eax
lea eax, [edi + edi*2]
lea eax, [ecx + eax*4]
mov dword [esp], eax
call memmove
jmp blockedList
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je _ZZNK10CUtlRBTreeIN7CUtlMapImmtE6Node_tEtNS1_8CKeyLessEE5LinksEtE10s_Sentinel
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0x9a18
test eax, eax
je 0x9e05
add eax, eax
cmp edi, eax
jle blockedList
add eax, eax
cmp edi, eax
jg 0x9def
nop
jmp blockedList
cmp edi, 3
mov al, 3
jg 0x9def
lea esi, [esi]
jmp blockedList
mov edx, dword [0]
lea eax, [eax + eax*2]
shl eax, 2
mov ecx, dword [edx]
mov dword [var_4h], eax
mov dword [esp], edx
call dword [ecx]
mov dword [0], eax
jmp blockedList
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
push ebx
mov edx, dword [arg_8h]
mov ebx, dword [arg_10h]
fld dword [eax]
lea ecx, [eax + 0x10]
fld dword [eax + 4]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [eax + 8]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ebx]
fld dword [ecx + 4]
fld dword [eax + 0x10]
fxch st(1)
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [ecx + 8]
lea ecx, [eax + 0x20]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ebx + 4]
fld dword [eax + 0x20]
fld dword [ecx + 4]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [ecx + 8]
fmul dword [edx + 8]
faddp st(1)
fstp dword [ebx + 8]
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
lea eax, [var_48h]
push edi
push esi
push ebx
sub esp, 0x78
mov edx, dword [arg_10h]
fld dword [0x156a8]
mov edi, dword [arg_ch]
mov esi, dword [arg_8h]
fld dword [edx]
mov ecx, dword [arg_14h]
mov ebx, dword [arg_18h]
fld dword [edx + 4]
fld dword [edx + 8]
fxch st(2)
fadd dword [edi]
fxch st(1)
fadd dword [edi + 4]
fxch st(2)
fadd dword [edi + 8]
fxch st(1)
mov dword [var_5ch], esi
fmul st(3)
fxch st(2)
mov esi, dword [var_5ch]
mov dword [var_60h], ecx
lea ecx, [var_28h]
fmul st(3)
fxch st(1)
mov dword [var_64h], ebx
fmulp st(3)
fxch st(1)
fst dword [ebp - 0x28]
fsubr dword [edx]
fxch st(1)
fst dword [ebp - 0x24]
fsubr dword [edx + 4]
fxch st(2)
fst dword [ebp - 0x20]
fsubr dword [edx + 8]
fxch st(1)
fstp dword [ebp - 0x38]
fxch st(1)
mov dword [var_8h], eax
fstp dword [ebp - 0x34]
mov dword [var_4h], esi
fstp dword [ebp - 0x30]
mov dword [esp], ecx
call _Z16VectorITransformPKfRK11matrix3x4_tPf
mov esi, dword [var_38h]
mov edx, dword [var_5ch]
mov ecx, dword [var_34h]
mov dword [var_6ch], esi
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
fmul dword [edx]
fstp dword [ebp - 0x6c]
mov ebx, dword [var_6ch]
and ebx, 0x7fffffff
mov dword [var_6ch], ebx
lea ebx, [edx + 0x10]
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fmul dword [edx + 0x10]
fstp dword [ebp - 0x6c]
mov edi, dword [var_6ch]
and edi, 0x7fffffff
mov dword [var_6ch], edi
lea edi, [edx + 0x20]
mov edx, dword [var_30h]
fld dword [ebp - 0x6c]
mov dword [var_6ch], edx
faddp st(1)
fld dword [ebp - 0x6c]
fmul dword [eax + 0x20]
fstp dword [ebp - 0x70]
mov eax, dword [var_70h]
and eax, 0x7fffffff
mov dword [var_6ch], eax
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fst dword [ebp - 0x58]
fxch st(1)
fmul dword [eax + 4]
fstp dword [ebp - 0x70]
mov eax, dword [var_70h]
and eax, 0x7fffffff
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fmul dword [ebx + 4]
fstp dword [ebp - 0x6c]
mov eax, dword [var_6ch]
and eax, 0x7fffffff
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
mov dword [var_6ch], edx
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fxch st(1)
fmul dword [edi + 4]
fstp dword [ebp - 0x6c]
mov eax, dword [var_6ch]
and eax, 0x7fffffff
mov dword [var_6ch], eax
mov eax, dword [var_5ch]
fld dword [ebp - 0x6c]
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fst dword [ebp - 0x54]
fxch st(1)
fmul dword [eax + 8]
fstp dword [ebp - 0x6c]
mov esi, dword [var_6ch]
mov eax, esi
and eax, 0x7fffffff
mov dword [var_6ch], eax
fld dword [ebp - 0x6c]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fmul dword [ebx + 8]
fstp dword [ebp - 0x6c]
mov eax, dword [var_6ch]
mov esi, eax
and esi, 0x7fffffff
mov dword [var_6ch], esi
fld dword [ebp - 0x6c]
mov dword [var_6ch], edx
fld dword [ebp - 0x6c]
fxch st(2)
faddp st(1)
fxch st(1)
fmul dword [edi + 8]
fstp dword [ebp - 0x6c]
fxch st(2)
mov ebx, dword [var_6ch]
mov eax, dword [var_60h]
fsubr dword [ebp - 0x48]
fxch st(1)
mov ecx, ebx
fsubr dword [ebp - 0x44]
and ecx, 0x7fffffff
mov edx, dword [var_64h]
mov dword [var_6ch], ecx
fld dword [ebp - 0x6c]
fxch st(2)
fstp dword [eax]
fld dword [ebp - 0x58]
fxch st(3)
faddp st(2)
fxch st(2)
fadd dword [var_48h]
fxch st(2)
fstp dword [eax + 4]
fst dword [ebp - 0x50]
fsubr dword [ebp - 0x40]
fxch st(1)
fstp dword [edx]
fld dword [ebp - 0x54]
fadd dword [var_44h]
fxch st(1)
fstp dword [eax + 8]
fstp dword [edx + 4]
fld dword [ebp - 0x50]
fadd dword [var_40h]
fstp dword [edx + 8]
add esp, 0x78
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
xor edx, edx
mov ebp, esp
sub esp, 4
fld dword [0x15894]
fmul dword [ebp + 8]
fstp dword [ebp - 4]
movss xmm0, dword [var_4h]
cvttss2si eax, xmm0
test eax, eax
js 0xedbe
mov edx, 0x3ff
cmp eax, 0x400
cmovl edx, eax
mov eax, dword [edx*4 + 0x1dde0]
leave
ret
push ebp
xor eax, eax
mov ebp, esp
sub esp, 4
fld dword [ebp + 0x18]
fld dword [ebp + 8]
fld dword [ebp + 8]
fsub dword [ebp + 0x10]
fxch st(1)
fsub st(2)
fld dword [ebp + 0x10]
fxch st(2)
fmulp st(1)
fxch st(1)
fsub st(2)
fldz
fxch st(2)
fmul st(1)
fmul dword [ebp + 0xc]
fmul dword [ebp + 0x14]
fmul dword [ebp + 0x1c]
fucomi st(2)
fstp st(2)
jp 0xf30e
je 0xf3e3
fld dword [ebp + 8]
mov ecx, dword [arg_20h]
fld st(3)
fxch st(1)
fmul dword [ebp + 0xc]
fxch st(1)
mov edx, dword [arg_24h]
fmul st(4)
fld dword [ebp + 0x14]
fsub dword [ebp + 0x1c]
fmulp st(2)
fld dword [ebp + 0xc]
fsub dword [ebp + 0x14]
fmul st(5)
fmul dword [ebp + 0x1c]
faddp st(2)
fld dword [ebp + 0x10]
fmul dword [ebp + 0x14]
fstp dword [ebp - 4]
fld dword [ebp + 0x1c]
fsub dword [ebp + 0xc]
fmul dword [ebp - 4]
faddp st(2)
fxch st(1)
fdiv st(3)
fstp dword [ecx]
fld dword [ebp + 0x10]
fld dword [ebp + 0x14]
fld dword [ebp + 0xc]
fxch st(2)
fmul st(0)
fxch st(2)
fsub dword [ebp + 0x1c]
fld dword [ebp + 8]
fxch st(2)
fmul st(3)
fxch st(2)
fmul st(0)
fxch st(2)
fmulp st(1)
fld dword [ebp + 0x14]
fsub dword [ebp + 0xc]
fxch st(2)
fmul dword [ebp + 0xc]
fxch st(2)
fmul st(4)
fmul dword [ebp + 0x1c]
faddp st(1)
fld dword [ebp + 0x1c]
fsub dword [ebp + 0x14]
fmul st(2)
faddp st(1)
fdiv st(5)
fstp dword [edx]
fxch st(3)
fmul dword [ebp + 0x10]
fmul st(5)
fxch st(5)
fmul dword [ebp + 0x1c]
fxch st(5)
fmul dword [ebp + 0x14]
fxch st(5)
fsubr dword [ebp - 4]
fxch st(5)
fmul dword [ebp + 0x1c]
fxch st(3)
fmul st(5)
fxch st(5)
fstp dword [ebp - 4]
fxch st(1)
mov eax, dword [arg_28h]
fmul dword [ebp + 0xc]
fxch st(2)
faddp st(4)
fmul dword [ebp + 0xc]
fxch st(1)
fmul dword [ebp + 0x1c]
fxch st(1)
fmul dword [ebp + 0x14]
fsubp st(1)
fmul dword [ebp + 8]
faddp st(2)
fdivp st(1)
fstp dword [eax]
mov eax, 1
jmp 0xf3e9
fstp st(0)
fstp st(0)
fstp st(0)
leave
ret
push ebp
fld1
mov ebp, esp
push esi
push ebx
sub esp, 0x10
mov ebx, dword [arg_8h]
fld dword [0x15870]
mov eax, dword [arg_ch]
lea ecx, [ebx + 0x10]
fld dword [ebx]
lea edx, [ebx + 0x20]
mov esi, dword [arg_10h]
fld dword [ecx + 4]
fld st(1)
fld dword [edx + 8]
fxch st(1)
fadd st(2)
fadd st(1)
fadd st(5)
fucomi st(4)
fstp st(4)
jbe 0xcf90
fstp st(0)
fstp st(0)
fstp st(0)
fstp st(1)
fld dword [ecx + 8]
fsubr dword [edx + 4]
fstp dword [eax]
fld dword [ebx + 0x20]
fsubr dword [ebx + 8]
fstp dword [eax + 4]
fld dword [ebx + 4]
fsubr dword [ebx + 0x10]
fxch st(1)
fstp dword [eax + 0xc]
fstp dword [eax + 8]
mov dword [esp], eax
call _Z19QuaternionNormalizeR10Quaternion
fstp st(0)
mov ecx, dword [ebx + 0xc]
mov dword [esi], ecx
mov edx, dword [ebx + 0x1c]
mov dword [esi + 4], edx
mov eax, dword [ebx + 0x2c]
mov dword [esi + 8], eax
add esp, 0x10
pop ebx
pop esi
pop ebp
ret
fstp st(3)
fxch st(1)
fucomi st(1)
jbe 0xcfe2
fucomi st(2)
jbe 0xcfe2
faddp st(3)
fsubp st(2)
fsubp st(1)
fstp dword [eax]
fld dword [ebx + 4]
fadd dword [ebx + 0x10]
fstp dword [eax + 4]
fld dword [ebx + 0x20]
fadd dword [ebx + 8]
fstp dword [eax + 8]
fld dword [ecx + 8]
fsubr dword [edx + 4]
fstp dword [eax + 0xc]
nop
mov dword [esp], eax
call _Z19QuaternionNormalizeR10Quaternion
fstp st(0)
mov ecx, dword [ebx + 0xc]
mov dword [esi], ecx
mov edx, dword [ebx + 0x1c]
mov dword [esi + 4], edx
mov eax, dword [ebx + 0x2c]
mov dword [esi + 8], eax
add esp, 0x10
pop ebx
pop esi
pop ebp
ret
fstp st(1)
fstp st(1)
fld dword [ecx + 4]
fld dword [edx + 8]
fxch st(1)
fucomi st(1)
jbe 0xd020
faddp st(3)
fxch st(2)
fsubrp st(1)
fld dword [ebx + 0x10]
fadd dword [ebx + 4]
fxch st(1)
fsubrp st(2)
fstp dword [eax]
fstp dword [eax + 4]
fld dword [ecx + 8]
fadd dword [edx + 4]
fstp dword [eax + 8]
fld dword [ebx + 0x20]
fsubr dword [ebx + 8]
fstp dword [eax + 0xc]
jmp 0xcfc0
nop
lea esi, [esi]
fxch st(1)
faddp st(3)
fxch st(2)
fsubrp st(1)
fld dword [ebx + 0x20]
fadd dword [ebx + 8]
fxch st(1)
fsubrp st(2)
fstp dword [eax]
fld dword [ecx + 8]
fadd dword [edx + 4]
fxch st(1)
fstp dword [eax + 8]
fstp dword [eax + 4]
fld dword [ebx + 4]
fsubr dword [ebx + 0x10]
fstp dword [eax + 0xc]
jmp _Z19QuaternionNormalizeR10Quaternion
push ebp
fldz
mov ebp, esp
push esi
push ebx
sub esp, 0x30
lea ebx, [var_18h]
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
fld dword [edx]
mov esi, dword [arg_14h]
fld dword [edx + 4]
fld st(1)
fld dword [eax + 4]
fxch st(1)
fsubr dword [eax]
fxch st(3)
fstp dword [ebp - 0x30]
fsub st(1)
fld dword [edx + 8]
fld st(3)
fmul st(4)
fxch st(1)
fst dword [ebp - 0x2c]
fld st(2)
fxch st(1)
fsubr dword [eax + 8]
fxch st(1)
fmul st(3)
faddp st(2)
fld st(0)
fmul st(1)
faddp st(2)
fld dword [0x158e0]
fucompi st(2)
ja 0x12df0
fstp st(5)
fld st(3)
fld st(2)
fld st(3)
fxch st(1)
fmul dword [ecx + 4]
fxch st(1)
fmul st(5)
fxch st(2)
fmul dword [ecx]
faddp st(1)
fld st(6)
fmul dword [ecx + 8]
faddp st(1)
fld dword [ebp - 0x30]
fmul st(6)
faddp st(2)
fld dword [ebp - 0x2c]
fmul st(7)
faddp st(2)
fsubrp st(1)
fdivrp st(1)
fxch st(4)
jmp 0x12df2
nop
lea esi, [esi]
fstp st(1)
test esi, esi
je 0x12e10
fstp st(2)
fxch st(3)
fst dword [esi]
fld dword [edx]
fld dword [edx + 4]
fxch st(1)
fstp dword [ebp - 0x30]
fld dword [edx + 8]
fstp dword [ebp - 0x2c]
jmp 0x12e20
mov esi, esi
fxch st(2)
fxch st(1)
fxch st(4)
fxch st(1)
nop
lea esi, [esi]
fxch st(3)
fmul st(1)
fxch st(4)
fmul st(1)
fxch st(2)
fmulp st(1)
fxch st(3)
fadd dword [var_30h]
fxch st(2)
faddp st(1)
fxch st(2)
fadd dword [var_2ch]
fxch st(1)
fst dword [ebx]
fxch st(2)
fstp dword [ebx + 4]
fld dword [ebp - 0x18]
fld dword [ebp - 0x14]
fxch st(1)
fsubr dword [ecx]
fxch st(1)
fsubr dword [ecx + 4]
fxch st(2)
fst dword [ebx + 8]
fld dword [ebp - 0x10]
fxch st(2)
fmul st(0)
fxch st(3)
fmul st(0)
fxch st(2)
fsubr dword [ecx + 8]
fxch st(4)
fstp dword [ebp - 0x30]
fstp dword [ebp - 0x2c]
add esp, 0x30
faddp st(1)
fxch st(1)
pop ebx
fmul st(0)
pop esi
faddp st(1)
pop ebp
ret
push ebp
xor edx, edx
mov ebp, esp
mov eax, dword [arg_8h]
jmp 0xd951
lea esi, [esi]
inc edx
sar eax, 1
jne 0xd950
pop ebp
mov eax, edx
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x2c
lea eax, [arg_ch]
mov dword [esp], eax
mov dword [var_4h], 1
call _Z21ConnectTier1LibrariesPPFPvPKcPiEi
mov dword [var_4h], 0
mov dword [esp], str.PlayerInfoManager002
call dword [arg_10h]
test eax, eax
mov dword [0], eax
je 0xa58c
mov dword [var_4h], 0
mov dword [esp], str.VEngineServer021
call dword [arg_ch]
mov dword [var_4h], 0
mov dword [esp], str.ISERVERPLUGINHELPERS001
mov dword [0], eax
call dword [arg_ch]
mov dword [var_4h], 0
mov dword [esp], str.EngineTraceServer003
mov dword [0], eax
call dword [arg_ch]
mov dword [var_4h], 0
mov dword [esp], str.VEngineRandom001
mov dword [0], eax
call dword [arg_ch]
mov esi, dword [0]
test esi, esi
mov dword [0], eax
je 0xa577
mov ebx, dword [0]
test ebx, ebx
je 0xa577
mov ecx, dword [0]
test ecx, ecx
je 0xa577
test eax, eax
je 0xa577
mov dword [var_4h], 0
mov dword [esp], str.VEngineCvar003
call dword [arg_ch]
test eax, eax
mov dword [0], eax
je 0xa558
mov edx, dword [0]
test edx, edx
je 0xa2af
mov eax, dword [edx]
mov dword [esp], edx
call dword [eax + 4]
mov dword [0], eax
mov eax, 0x400ccccd
mov dword [var_4h], eax
mov dword [esp], eax
mov dword [var_1ch], 1
mov dword [var_18h], 1
mov dword [var_14h], 1
mov dword [var_10h], 1
mov dword [var_ch], 2
mov dword [var_8h], 0
call _Z12MathLib_Initfffibbbb
mov eax, dword [arg_ch]
mov dword [esp], eax
call _Z9InitCVarsPFPvPKcPiE
mov edx, dword [8]
mov dword [0xc], 0
test edx, edx
jns blockedList
mov ecx, dword [0]
movzx eax, word [0x16]
mov dword [0x10], ecx
mov esi, eax
sub esi, 1
js blockedIPs
mov word [var_eh], 0xffff
jmp 0xa366
lea esi, [esi]
mov eax, edi
movzx edx, word [var_eh]
sub esi, 1
shl eax, 4
add eax, dword [4]
cmp esi, 0xffffffff
mov word [eax + 2], dx
mov word [eax], bx
je blockedIPs
mov word [var_eh], bx
movzx edi, si
mov ebx, esi
cmp edi, dword [8]
jge 0xa340
cmp byte [0], 0
jne 0xa340
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xa340
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xa340
mov ecx, dword [0]
test ecx, ecx
je 0xa3dc
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
xor ecx, ecx
mov dword [0], 0
mov dword [4], 0
jmp blockedIPs
nop
lea esi, [esi]
cmp word [0x16], 1
mov word [0x10], 0xffff
mov word [0x12], 0
sbb eax, eax
mov word [0x14], ax
mov eax, dword [0]
test eax, eax
jne a2cList
mov dword [0], 0
mov eax, dword [8]
mov dword [0xc], 0
test eax, eax
js a2cList
mov ecx, dword [0]
test ecx, ecx
je 0xa463
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
xor ecx, ecx
mov dword [0], 0
mov dword [4], 0
movzx eax, word [0x16]
mov dword [0x10], ecx
mov esi, eax
sub esi, 1
js a2cIPs
mov word [var_bp_10h], 0xffff
jmp 0xa4b2
lea esi, [esi]
mov eax, edi
movzx edx, word [var_bp_10h]
sub esi, 1
shl eax, 4
add eax, dword [4]
cmp esi, 0xffffffff
mov word [eax + 2], dx
mov word [eax], bx
je 0xa501
mov word [var_bp_10h], bx
movzx edi, si
mov ebx, esi
cmp edi, dword [8]
jge 0xa490
cmp byte [0], 0
jne 0xa490
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0xa490
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0xa490
cmp word [0x16], 1
mov word [0x10], 0xffff
mov word [0x12], 0
sbb eax, eax
mov word [0x14], ax
mov eax, dword [0]
test eax, eax
jne 0xa536
mov dword [0], 0
mov edx, dword [0]
mov eax, dword [edx + 0x2c]
mov dword [0], eax
mov eax, 1
mov dword [edx + 0x2c], 0
add esp, 0x2c
pop ebx
pop esi
pop edi
pop ebp
ret
mov dword [var_4h], 0
mov dword [esp], str.VEngineCvar004
call dword [arg_ch]
test eax, eax
mov dword [0], eax
jne playerinfomanager
add esp, 0x2c
xor eax, eax
pop ebx
pop esi
pop edi
pop ebp
ret
mov ecx, dword [0]
jmp a2cIPs
mov dword [esp], str.Unable_to_load_playerinfomanager__ignoring_n
call Warning
jmp 0xa1eb
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov dword [eax], 8
mov dword [eax + 4], 0x68
mov dword [eax + 8], 0
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x18
mov esi, dword [arg_10h]
mov edx, dword [arg_8h]
mov ebx, dword [arg_ch]
mov dword [var_4h], esi
mov dword [esp], edx
call _Z12AngleIMatrixRK6QAngleR11matrix3x4_t
fld dword [esi]
lea eax, [esi + 0x10]
lea ecx, [esi + 0x20]
fld dword [esi + 4]
fmul dword [ebx + 4]
fxch st(1)
fmul dword [ebx]
fld dword [esi + 0x10]
fmul dword [ebx]
fld dword [esi + 0x20]
fxch st(2)
faddp st(3)
fld dword [esi + 8]
fmul dword [ebx + 8]
fxch st(2)
fmul dword [ebx]
fxch st(3)
faddp st(2)
fld dword [eax + 4]
fmul dword [ebx + 4]
faddp st(1)
fld dword [eax + 8]
fmul dword [ebx + 8]
faddp st(1)
fld dword [ecx + 4]
fmul dword [ebx + 4]
faddp st(3)
fld dword [ecx + 8]
fmul dword [ebx + 8]
faddp st(3)
fld dword [0x15880]
fmul st(2), st(0)
fmul st(1), st(0)
fmulp st(3)
fstp dword [ebp - 0x14]
fxch st(1)
fstp dword [ebp - 0x10]
fstp dword [esi + 0xc]
mov edx, dword [var_14h]
mov dword [esi + 0x1c], edx
mov eax, dword [var_10h]
mov dword [esi + 0x2c], eax
add esp, 0x18
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 4
mov ecx, dword [arg_8h]
fld dword [0x15884]
mov esi, dword [arg_ch]
movzx ebx, byte [ecx]
movsx edx, byte [ecx + 3]
cvtsi2ss xmm2, ebx
mov ebx, 0
movss dword [var_ch], xmm2
fld dword [ebp - 0xc]
fmul dword [ebx + edx*4 + 0x200]
fmul st(1)
fstp dword [esi]
movzx eax, byte [ecx + 1]
movsx edx, byte [ecx + 3]
cvtsi2ss xmm1, eax
movss dword [var_ch], xmm1
fld dword [ebp - 0xc]
fmul dword [ebx + edx*4 + 0x200]
fmul st(1)
fstp dword [esi + 4]
movzx eax, byte [ecx + 2]
movsx edx, byte [ecx + 3]
cvtsi2ss xmm0, eax
movss dword [var_ch], xmm0
fld dword [ebp - 0xc]
fmul dword [ebx + edx*4 + 0x200]
fmulp st(1)
fstp dword [esi + 8]
pop ebx
pop ebx
pop esi
pop ebp
ret
push ebp
fldz
mov ebp, esp
push esi
push ebx
sub esp, 0x40
lea ebx, [var_18h]
mov edx, dword [arg_ch]
mov eax, dword [arg_10h]
mov ecx, dword [arg_8h]
fld dword [edx + 4]
mov esi, dword [arg_14h]
fld dword [edx]
fld st(1)
fld dword [eax]
fxch st(1)
fsubr dword [eax + 4]
fld dword [edx + 8]
fxch st(2)
fsub st(3)
fxch st(4)
fstp dword [ebp - 0x2c]
fld st(0)
fld st(4)
fxch st(3)
fst dword [ebp - 0x30]
fxch st(1)
fmul st(2)
fxch st(1)
fsubr dword [eax + 8]
fxch st(3)
fmul st(5)
faddp st(1)
fld st(2)
fmul st(3)
faddp st(1)
fld dword [0x158e0]
fucompi st(1)
ja 0x13030
fstp st(5)
fld dword [ebp - 0x2c]
fld st(4)
fld st(2)
fmul dword [ecx + 4]
fxch st(2)
fmul st(3)
fxch st(1)
fmul dword [ecx]
faddp st(2)
fld st(3)
fmul dword [ecx + 8]
faddp st(2)
fld st(5)
fmul st(5)
faddp st(1)
fld dword [ebp - 0x30]
fmul st(4)
faddp st(1)
fsubp st(1)
fdivrp st(5)
jmp 0x13032
nop
lea esi, [esi]
fstp st(0)
fld1
fxch st(5)
fucomi st(5)
ja 0x13046
fstp st(5)
fldz
fucomi st(5)
fcmovbe st(0), st(5)
fstp st(5)
jmp 0x13048
fstp st(0)
test esi, esi
je 0x13064
fstp st(2)
fxch st(3)
fst dword [esi]
fld dword [edx + 4]
fld dword [edx]
fxch st(1)
fstp dword [ebp - 0x2c]
fld dword [edx + 8]
fstp dword [ebp - 0x30]
jmp 0x13070
fxch st(2)
fxch st(1)
fxch st(4)
fxch st(1)
lea esi, [esi]
fxch st(3)
fmul st(1)
fxch st(2)
fmul st(1)
fxch st(4)
fmulp st(1)
fxch st(3)
fadd dword [var_2ch]
fxch st(2)
faddp st(1)
fxch st(2)
fadd dword [var_30h]
fxch st(2)
fstp dword [ebx]
fst dword [ebx + 4]
fld dword [ebp - 0x18]
fld dword [ebp - 0x14]
fxch st(1)
fsubr dword [ecx]
fxch st(1)
fsubr dword [ecx + 4]
fxch st(3)
fst dword [ebx + 8]
fld dword [ebp - 0x10]
fsubr dword [ecx + 8]
fxch st(2)
fst dword [ebp - 0x28]
fmul st(0)
fxch st(4)
fst dword [ebp - 0x24]
fmul st(0)
fxch st(2)
fst dword [ebp - 0x20]
fmul st(0)
fxch st(4)
faddp st(2)
fxch st(2)
fstp dword [ebp - 0x2c]
fxch st(1)
fstp dword [ebp - 0x30]
faddp st(1)
fstp dword [esp]
call dword [0]
add esp, 0x40
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
push ebx
mov edx, dword [arg_8h]
mov ebx, dword [arg_10h]
fld dword [eax]
lea ecx, [eax + 0x10]
fld dword [eax + 4]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [eax + 8]
fmul dword [edx + 8]
faddp st(1)
fadd dword [eax + 0xc]
fstp dword [ebx]
fld dword [ecx + 4]
fld dword [eax + 0x10]
fxch st(1)
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [ecx + 8]
fmul dword [edx + 8]
faddp st(1)
fadd dword [ecx + 0xc]
lea ecx, [eax + 0x20]
fstp dword [ebx + 4]
fld dword [eax + 0x20]
fld dword [ecx + 4]
fmul dword [edx + 4]
fxch st(1)
fmul dword [edx]
faddp st(1)
fld dword [ecx + 8]
fmul dword [edx + 8]
faddp st(1)
fadd dword [ecx + 0xc]
fstp dword [ebx + 8]
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov eax, dword [edx]
xor eax, 0x80000000
mov dword [ecx], eax
mov eax, dword [edx + 4]
xor eax, 0x80000000
mov dword [ecx + 4], eax
mov eax, dword [edx + 8]
xor eax, 0x80000000
mov dword [ecx + 8], eax
mov eax, dword [edx + 0xc]
mov dword [ecx + 0xc], eax
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0xf8
mov dword [var_8h], esi
mov ecx, dword [arg_8h]
lea esi, [var_48h]
mov dword [var_ch], ebx
lea ebx, [var_78h]
mov dword [esp], ecx
mov dword [var_4h], edi
lea edi, [var_a8h]
mov dword [var_sp_4h], esi
call _Z11AngleMatrixRK6QAngleR11matrix3x4_t
mov dword [var_sp_4h], edi
mov edx, dword [arg_ch]
mov dword [esp], edx
call _Z11AngleMatrixRK6QAngleR11matrix3x4_t
mov dword [esp], esi
lea esi, [var_d8h]
mov dword [var_sp_4h], ebx
call _Z12MatrixInvertRK11matrix3x4_tRS_
mov dword [var_sp_4h], ebx
mov dword [var_sp_8h], esi
mov dword [esp], edi
call _Z16ConcatTransformsRK11matrix3x4_tS1_RS_
mov dword [esp], esi
lea eax, [var_e8h]
mov dword [var_sp_4h], eax
call _Z12MatrixAnglesRK11matrix3x4_tPf
mov ebx, dword [arg_10h]
test ebx, ebx
je 0x14374
mov edi, dword [arg_10h]
mov esi, dword [var_e8h]
mov ebx, dword [var_e4h]
mov eax, dword [var_e0h]
mov dword [edi], esi
mov dword [edi + 4], ebx
mov dword [edi + 8], eax
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
movzx eax, byte [0x1cdd7]
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x14
mov ecx, dword [arg_8h]
mov edx, dword [arg_10h]
mov ebx, dword [arg_ch]
mov eax, dword [ecx + 0xc]
mov dword [edx], eax
mov eax, dword [ecx + 0x1c]
mov dword [edx + 4], eax
mov eax, dword [ecx + 0x2c]
mov dword [edx + 8], eax
mov dword [var_4h], ebx
mov dword [esp], ecx
call _Z12MatrixAnglesRK11matrix3x4_tPf
fld dword [0x15854]
fld dword [ebx + 8]
fld dword [ebx]
fxch st(1)
fmul st(2)
fxch st(1)
fmul st(2)
fxch st(2)
fmul dword [ebx + 4]
fxch st(1)
fstp dword [ebx]
fxch st(1)
fstp dword [ebx + 4]
fstp dword [ebx + 8]
add esp, 0x14
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x14
xor ebx, ebx
lea esi, [esi]
lea edx, [ebx - 0x80]
mov eax, 0x40000000
push edx
fild dword [esp]
add esp, 4
mov dword [esp], 0
mov dword [var_4h], eax
fstp qword [esp + 8]
call pow
fdiv dword [0x15884]
fstp dword [ebx*4]
inc ebx
cmp ebx, 0xff
jle 0xe7e0
add esp, 0x14
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x30
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
mov esi, dword [arg_14h]
fld dword [ebx]
fsubr dword [ecx]
fld dword [ebx + 4]
fsubr dword [ecx + 4]
fld dword [ebx + 8]
fsubr dword [ecx + 8]
fxch st(2)
fstp dword [ebp - 0x18]
fld dword [ebx]
fsubr dword [edx]
fxch st(1)
fst dword [ebp - 0x14]
fxch st(2)
fst dword [ebp - 0x10]
fld dword [ebx + 4]
fsubr dword [edx + 4]
fxch st(2)
fstp dword [ebp - 0x28]
fld dword [ebx + 8]
fsubr dword [edx + 8]
fxch st(2)
fst dword [ebp - 0x24]
fmul st(1)
fxch st(3)
fmul st(2)
fxch st(2)
fst dword [ebp - 0x20]
fxch st(2)
fsubrp st(3)
fxch st(2)
fstp dword [esi]
fld dword [ebp - 0x28]
fld dword [ebp - 0x18]
fxch st(3)
fmul st(1)
fxch st(2)
fmul st(3)
fsubp st(2)
fxch st(1)
fstp dword [esi + 4]
fmul dword [ebp - 0x14]
fxch st(1)
fmul dword [ebp - 0x24]
fsubrp st(1)
fstp dword [esi + 8]
mov dword [esp], esi
call dword [0]
fstp st(0)
fld dword [ebx]
mov eax, dword [arg_18h]
fld dword [ebx + 4]
fmul dword [esi + 4]
fxch st(1)
fmul dword [esi]
faddp st(1)
fld dword [ebx + 8]
fmul dword [esi + 8]
faddp st(1)
fstp dword [eax]
add esp, 0x30
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
fldz
mov ebp, esp
mov eax, dword [arg_8h]
test eax, eax
js 0xed80
fstp st(0)
cmp eax, 0xff
fld1
jg 0xed80
fstp st(0)
fld dword [eax*4 + 0x1ede0]
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
fld dword [0x158e4]
fld dword [ebp + 8]
fld dword [ebp + 0x10]
fxch st(1)
fmul st(2)
fxch st(2)
fmul dword [ebp + 0xc]
fxch st(2)
fstp dword [ebp - 4]
movss xmm3, dword [var_4h]
fld dword [0x158e8]
cvttss2si ecx, xmm3
and ecx, 0xffff
cvtsi2ss xmm2, ecx
movss dword [var_4h], xmm2
fld dword [ebp - 4]
fxch st(3)
fstp dword [ebp - 4]
movss xmm1, dword [var_4h]
fmul st(2), st(0)
cvttss2si edx, xmm1
and edx, 0xffff
cvtsi2ss xmm0, edx
fld st(2)
movss dword [var_4h], xmm0
fld dword [ebp - 4]
fxch st(3)
fst dword [ebp - 4]
fxch st(3)
mov eax, dword [var_4h]
fmulp st(2)
xor eax, 0x80000000
fldz
fucompi st(3)
mov dword [var_4h], eax
fsub st(1)
fld dword [ebp - 4]
fcmovbe st(0), st(3)
fstp st(3)
fld dword [0x158ec]
fucompi st(1)
jbe 0x13d20
fadd dword [0x1587c]
fucomi st(2)
ja 0x13d40
fxch st(3)
fstp dword [ebp - 4]
fld st(1)
mov eax, dword [var_4h]
fchs
fucompi st(3)
fstp st(2)
jbe 0x13d54
fsubp st(1)
jmp 0x13d46
fld dword [0x158b0]
fxch st(1)
fucomi st(1)
fstp st(1)
jbe 0x13d06
fsub dword [0x1587c]
fucomi st(2)
jbe 0x13d0a
nop
lea esi, [esi]
fstp st(0)
fstp st(2)
faddp st(1)
fstp dword [ebp - 4]
mov eax, dword [var_4h]
mov dword [var_4h], eax
fld dword [ebp - 4]
leave
ret
fstp st(0)
fstp st(0)
mov dword [var_4h], eax
fld dword [ebp - 4]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x28
mov dword [var_4h], esi
mov ecx, dword [arg_ch]
mov esi, dword [arg_8h]
mov dword [var_8h], ebx
lea ebx, [var_18h]
mov dword [var_sp_8h], ebx
mov dword [var_sp_4h], ecx
mov dword [esp], esi
call _Z15QuaternionAlignRK10QuaternionS1_RS_
mov dword [var_sp_4h], ebx
mov edx, dword [arg_14h]
mov eax, dword [arg_10h]
mov dword [esp], esi
mov dword [var_ch], edx
mov dword [var_sp_8h], eax
call _Z22QuaternionSlerpNoAlignRK10QuaternionS1_fRS_
mov ebx, dword [var_8h]
mov esi, dword [var_4h]
mov esp, ebp
pop ebp
ret
jmp dword [ebx + 0x10]
push ebp
mov ebp, esp
mov dword [arg_8h], 0x17560
pop ebp
jmp _ZN10ConCommandD1Ev
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
mov dword [arg_8h], 0x17520
pop ebp
jmp _ZN10ConCommandD1Ev
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
mov dword [arg_8h], 0x174c0
pop ebp
jmp _ZN6ConVarD1Ev
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
mov dword [arg_8h], 0x17460
pop ebp
jmp _ZN6ConVarD1Ev
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
mov dword [arg_8h], 0x17400
pop ebp
jmp _ZN6ConVarD1Ev
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
mov dword [arg_8h], 0x173a0
pop ebp
jmp _ZN6ConVarD1Ev
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
mov dword [arg_8h], 0x17340
pop ebp
jmp _ZN6ConVarD1Ev
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
mov dword [arg_8h], 0x172e0
pop ebp
jmp _ZN6ConVarD1Ev
cld
invalid
invalid
invalid
push ebp
mov ebp, esp
push ebx
sub esp, 0x14
mov ecx, dword [8]
mov dword [0xc], 0
test ecx, ecx
js 0x8d90
mov ecx, dword [0]
test ecx, ecx
je 0x8d42
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
xor ecx, ecx
mov dword [0], 0
mov dword [4], 0
mov edx, dword [8]
mov dword [0x10], ecx
test edx, edx
js 0x8d85
test ecx, ecx
je 0x8d7b
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
mov dword [0], 0
mov dword [4], 0
add esp, 0x14
pop ebx
pop ebp
ret
nop
lea esi, [esi]
mov ecx, dword [0]
jmp 0x8d4c
push ebp
mov ebp, esp
sub esp, 0x18
sub eax, 1
je 0x8df0
leave
ret
lea esi, [esi]
cmp edx, 0xffff
jne 0x8deb
xor eax, eax
mov dword [0x172c8], eax
mov dword [0x172cc], eax
mov eax, 0x7f7fffff
mov dword [0x172d0], eax
mov dword [0x172d4], eax
mov dword [var_10h], str.The_version_of_the_DoS_Attack_Fix_plugin
mov dword [var_ch], 0x100
mov dword [var_8h], str.Version_3_of_SourceOP.com_DoS_Attack_Fix_Plugin
mov dword [var_4h], str.daf_version
mov dword [esp], 0x172e0
call _ZN6ConVarC1EPKcS1_iS1_
cld
invalid
invalid
inc edi
inc esp
and al, 8
mov al, 0x70
add dword [eax], eax
mov dword [var_4h], 0
mov dword [esp], fcn.00008c70
call __cxa_atexit
mov dword [var_10h], str.Enables_the_DoS_Attack_Fix_plugin
mov dword [var_ch], 0
mov dword [var_8h], 0x1566e
mov dword [var_4h], str.daf_enable
mov dword [esp], 0x17340
call _ZN6ConVarC1EPKcS1_iS1_
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.00008c60
call __cxa_atexit
mov dword [var_10h], str.Enables_logging_of_new_attackers_to_file
mov dword [var_ch], 0
mov dword [var_8h], 0x15503
mov dword [var_4h], str.daf_log
mov dword [esp], 0x173a0
call _ZN6ConVarC1EPKcS1_iS1_
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.00008c50
call __cxa_atexit
mov dword [var_10h], str.Enables_blocking_of_all_A2C_PRINT_packets
mov dword [var_ch], 0
mov dword [var_8h], 0x15503
mov dword [var_4h], str.daf_block_alla2cprint
mov dword [esp], 0x17400
call _ZN6ConVarC1EPKcS1_iS1_
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.00008c40
call __cxa_atexit
mov dword [var_10h], str.Enables_blocking_of_high_volumes_of_A2C_PRINT_packets
mov dword [var_ch], 0
mov dword [var_8h], 0x1566e
mov dword [var_4h], str.daf_block_a2cprint_spam
mov dword [esp], 0x17460
call _ZN6ConVarC1EPKcS1_iS1_
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.00008c30
call __cxa_atexit
mov dword [var_10h], str.Enables_blocking_of_A2C_PRINT_packets_with_strange_characters
mov dword [var_ch], 0
mov dword [var_8h], 0x1566e
mov dword [var_4h], str.daf_block_a2cprint_nonprintable
mov dword [esp], 0x174c0
call _ZN6ConVarC1EPKcS1_iS1_
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.00008c20
call __cxa_atexit
mov dword [0], 0
mov dword [4], 0
mov dword [8], 0
mov dword [0xc], 0
mov dword [0x10], 0
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.000093a0
call __cxa_atexit
mov dword [0], 0
mov dword [4], 0
mov dword [8], 0
mov dword [0xc], 0
mov word [0x10], 0xffff
mov word [0x12], 0
mov word [0x14], 0xffff
mov word [0x16], 0
mov dword [0x18], 0
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.00009480
call __cxa_atexit
mov dword [0], 0
mov dword [4], 0
mov dword [8], 0
mov dword [0xc], 0
mov dword [0x10], 0
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.00008d00
call __cxa_atexit
mov dword [0], 0
mov dword [4], 0
mov dword [8], 0
mov dword [0xc], 0
mov word [0x10], 0xffff
mov word [0x12], 0
mov word [0x14], 0xffff
mov word [0x16], 0
mov dword [0x18], 0
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.00009820
call __cxa_atexit
mov dword [0], 8
mov dword [4], 0x68
mov dword [8], 0
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.00009380
call __cxa_atexit
mov dword [var_8h], str.ISERVERPLUGINCALLBACKS002
mov dword [var_4h], 0x8a50
mov dword [esp], 0x17504
call _ZN12InterfaceRegC1EPFPvvEPKc
cld
invalid
invalid
inc edi
inc esp
and al, 0x14
add byte [eax], al
add byte [eax], al
mov dword [var_10h], 0
mov dword [var_ch], str.Returns_the_status_of_the_DoS_Attack_Fix_plugin_and_prints_the_IP_address_of_any_blocked_offenders
mov dword [var_8h], fcn.00009260
mov dword [var_4h], str.daf_status
mov dword [esp], 0x17520
call _ZN10ConCommandC1EPKcPFvvES1_iPFiS1_PA64_cE
cld
invalid
invalid
inc edi
inc esp
and al, 8
mov al, 0x70
add dword [eax], eax
mov dword [var_4h], 0
mov dword [esp], fcn.00008c10
call __cxa_atexit
mov dword [var_14h], 0
mov dword [var_10h], 0
mov dword [var_ch], str.Resets_the_banned_IP_list
mov dword [var_8h], fcn.000095d0
mov dword [var_4h], str.daf_reset
mov dword [esp], 0x17560
call _ZN10ConCommandC1EPKcPFvvES1_iPFiS1_PA64_cE
mov dword [var_8h], section..data.rel.ro
mov dword [var_4h], 0
mov dword [esp], fcn.00008c00
call __cxa_atexit
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
mov eax, dword [0]
mov dword [var_ch], ebx
mov ebx, dword [8]
mov dword [var_8h], esi
mov dword [var_4h], edi
mov edx, dword [eax]
mov dword [esp], eax
add ebx, 1
call dword [edx + 8]
test al, al
je 0x92a0
test ebx, ebx
jle 0x92a0
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
sub ebx, 1
jg 0x928d
mov eax, dword [0x17358]
mov edx, str.diabled
mov ebx, dword [eax + 0x2c]
test ebx, ebx
je 0x92bb
mov edx, str.enabled
mov dword [var_sp_4h], edx
mov dword [esp], str.Plugin__s._n
call Msg
mov eax, dword [0x17358]
mov edi, dword [eax + 0x2c]
test edi, edi
je 0x9361
mov dword [esp], str.Blocked_IPs:_n
call Msg
mov dword [esp], str.___IP_Address____Occurences_n
call Msg
mov dword [esp], str.____________________________n
call Msg
mov esi, dword [0xc]
test esi, esi
jle 0x9347
xor edi, edi
xor esi, esi
lea esi, [esi]
mov eax, esi
add edi, 1
add eax, dword [0]
add esi, 0xc
mov edx, dword [eax]
mov ebx, dword [eax + 4]
mov dword [esp], edx
call inet_ntoa
mov dword [var_sp_8h], ebx
mov dword [esp], str.__16s____9i_n
mov dword [var_sp_4h], eax
call Msg
cmp dword [0xc], edi
jg 0x9310
mov eax, dword [0x17584]
mov dword [esp], str._nBlocked__i_packets_total._n
mov dword [var_sp_4h], eax
call Msg
jmp 0x928d
mov dword [esp], str.___Use_daf_enable_CVAR_to_enable._n
call Msg
lea esi, [esi]
jmp 0x92db
push ebp
mov ebp, esp
pop ebp
mov dword [0], 8
mov dword [4], 8
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x14
mov eax, dword [8]
mov dword [0xc], 0
test eax, eax
js 0x9430
mov ecx, dword [0]
test ecx, ecx
je 0x93e1
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
xor ecx, ecx
mov dword [0], 0
mov dword [4], 0
mov eax, dword [8]
mov dword [0x10], ecx
test eax, eax
js 0x9423
test ecx, ecx
je 0x9419
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
mov dword [0], 0
mov dword [4], 0
add esp, 0x14
pop ebx
pop ebp
ret
lea esi, [esi]
mov ecx, dword [0]
jmp blockedList
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x10
movzx eax, word [0x16]
lea esi, [eax - 1]
mov ebx, esi
jmp 0x949c
sub ebx, 1
sub esi, 1
test ebx, ebx
js blockedIPs
movzx eax, si
cmp eax, dword [8]
jge 0x9496
cmp byte [0], 0
jne 0x9496
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0x9496
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0x9496
mov eax, dword [0xc]
mov word [0x10], 0xffff
mov word [0x12], 0
mov word [0x16], 0
test eax, eax
mov word [0x14], 0xffff
js 0x9581
mov ecx, dword [4]
test ecx, ecx
je blockedIPs
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
mov dword [4], 0
mov eax, dword [0xc]
mov dword [8], 0
test eax, eax
js 0x9581
mov ecx, dword [4]
test ecx, ecx
je 0x9577
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
mov dword [4], 0
mov dword [8], 0
add esp, 0x10
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [0]
mov ebx, dword [8]
mov edx, dword [eax]
mov dword [esp], eax
add ebx, 1
call dword [edx + 8]
test al, al
je 0x9600
test ebx, ebx
jle 0x9600
add esp, 0xc
pop ebx
pop esi
pop edi
pop ebp
ret
nop
sub ebx, 1
jg 0x95f7
mov edx, dword [8]
mov dword [0xc], 0
test edx, edx
jns blockedList
mov ecx, dword [0]
movzx eax, word [0x16]
mov dword [0x10], ecx
mov esi, eax
sub esi, 1
js 0x96b1
mov word [var_eh], 0xffff
jmp 0x9662
nop
mov eax, edi
movzx edx, word [var_eh]
sub esi, 1
shl eax, 4
add eax, dword [4]
cmp esi, 0xffffffff
mov word [eax + 2], dx
mov word [eax], bx
je 0x96b1
mov word [var_eh], bx
movzx edi, si
mov ebx, esi
cmp edi, dword [8]
jge 0x9640
cmp byte [0], 0
jne 0x9640
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0x9640
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0x9640
mov ecx, dword [8]
cmp word [0x16], 1
mov word [0x10], 0xffff
mov word [0x12], 0
sbb eax, eax
test ecx, ecx
mov word [0x14], ax
mov dword [0xc], 0
js a2cList
mov ecx, dword [0]
test ecx, ecx
je 0x9712
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
xor ecx, ecx
mov dword [0], 0
mov dword [4], 0
movzx eax, word [0x16]
mov dword [0x10], ecx
mov esi, eax
sub esi, 1
js a2cIPs
mov word [var_10h], 0xffff
jmp 0x9762
lea esi, [esi]
mov eax, edi
movzx edx, word [var_10h]
sub esi, 1
shl eax, 4
add eax, dword [4]
cmp esi, 0xffffffff
mov word [eax + 2], dx
mov word [eax], bx
je 0x97b1
mov word [var_10h], bx
movzx edi, si
mov ebx, esi
cmp edi, dword [8]
jge 0x9740
cmp byte [0], 0
jne 0x9740
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0x9740
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0x9740
cmp word [0x16], 1
mov word [0x10], 0xffff
mov word [0x12], 0
sbb eax, eax
mov word [0x14], ax
add esp, 0xc
pop ebx
pop esi
pop edi
pop ebp
ret
mov ecx, dword [0]
jmp a2cIPs
mov ecx, dword [0]
test ecx, ecx
je 0x980d
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
xor ecx, ecx
mov dword [0], 0
mov dword [4], 0
jmp blockedIPs
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x10
movzx eax, word [0x16]
lea esi, [eax - 1]
mov ebx, esi
jmp 0x983c
sub ebx, 1
sub esi, 1
test ebx, ebx
js a2cIPs
movzx eax, si
cmp eax, dword [8]
jge 0x9836
cmp byte [0], 0
jne 0x9836
mov dword [esp], 0
call __cxa_guard_acquire
test eax, eax
je 0x9836
mov dword [esp], 0
mov word [0], 0xffff
mov word [2], 0xffff
mov word [4], 0xffff
call __cxa_guard_release
jmp 0x9836
mov eax, dword [0xc]
mov word [0x10], 0xffff
mov word [0x12], 0
mov word [0x16], 0
test eax, eax
mov word [0x14], 0xffff
js 0x9921
mov ecx, dword [4]
test ecx, ecx
je a2cIPs
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
mov dword [4], 0
mov eax, dword [0xc]
mov dword [8], 0
test eax, eax
js 0x9921
mov ecx, dword [4]
test ecx, ecx
je 0x9917
mov eax, dword [0]
mov edx, dword [eax]
mov dword [var_4h], ecx
mov dword [esp], eax
call dword [edx + 8]
mov dword [4], 0
mov dword [8], 0
add esp, 0x10
pop ebx
pop esi
pop ebp
ret
