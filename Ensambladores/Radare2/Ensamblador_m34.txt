xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff0
push eax
push esp
push edx
push fcn.0804b400
push fcn.080488cc
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
jmp dword [reloc.__register_frame_info]
jmp dword [reloc.write]
jmp dword [reloc.close]
jmp dword [reloc.perror]
jmp dword [reloc.fprintf]
jmp dword [reloc.fork]
jmp dword [reloc.getenv]
jmp dword [reloc.signal]
jmp dword [reloc.fflush]
jmp dword [reloc.select]
jmp dword [reloc.tcsetattr]
jmp dword [reloc.__errno_location]
jmp dword [reloc.memchr]
jmp dword [reloc.accept]
jmp dword [reloc.inet_ntoa]
jmp dword [reloc.listen]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.time]
jmp dword [reloc.getopt]
jmp dword [reloc.fgets]
jmp dword [reloc.sleep]
jmp dword [reloc.inet_addr]
jmp dword [reloc.printf]
jmp dword [reloc.bind]
jmp dword [reloc.getsockname]
jmp dword [reloc.srand]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.exit]
jmp dword [reloc.sscanf]
jmp dword [reloc.ioctl]
jmp dword [reloc.connect]
jmp dword [reloc.kill]
jmp dword [reloc.sprintf]
jmp dword [reloc.socket]
jmp dword [reloc.tcgetattr]
jmp dword [reloc.read]
jmp dword [reloc.alarm]
jmp dword [reloc.wait]
jmp dword [reloc.strcpy]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x178
cld
xor eax, eax
mov ecx, 5
lea edi, [ptr]
mov esi, dword [argv]
mov ebx, dword [envp]
mov dword [s], 0
mov dword [var_15ch], 0
mov dword [var_160h], 0
mov dword [var_164h], 2
mov dword [var_168h], 5
mov dword [var_16ch], 0xa
rep stosd dword es:[edi], eax
stosw word es:[edi], ax
push 0
call sym.imp.time
mov dword [esp], eax
call sym.imp.srand
add esp, 0xc
push str._dev_null
push 0x804b76b
push dword [obj.stderr]
call sym.imp.fprintf
jmp 0x80494e6
mov edx, dword [obj.optarg]
test edx, edx
je 0x80496c4
and eax, 0xdf
sub eax, 0x43
cmp eax, 0x11
ja case.0x8049477.69
jmp dword [eax*4 + 0x804b800]
mov esi, esi
mov dword [s], edx
jmp 0x80494e9
push ecx
lea eax, [var_15ch]
push eax
push 0x804b788
push dword [obj.optarg]
call sym.imp.sscanf
add esp, 0x10
dec eax
je 0x80494e9
jmp 0x80496c4
nop
push edx
lea eax, [var_160h]
jmp 0x804948f
lea esi, [esi]
push eax
lea eax, [var_164h]
jmp 0x804948f
lea esi, [esi]
push edi
lea eax, [var_168h]
jmp 0x804948f
lea esi, [esi]
push ecx
lea eax, [var_16ch]
jmp 0x804948f
lea esi, [esi]
sub esp, 0xc
push dword [ebx]
call fcn.08048cf8
add esp, 0x10
push edx
push str.h:H:s:S:d:D:i:I:t:T:C:c:
push ebx
push esi
call sym.imp.getopt
add esp, 0x10
cmp eax, 0xffffffff
jne 0x804945c
mov eax, dword [s]
test eax, eax
je 0x80496c4
cmp dword [var_15ch], 0xffff
jg 0x80496c4
mov eax, dword [var_160h]
cmp eax, 0xffff
jg 0x80496c4
test eax, eax
je 0x8049544
mov dword [str.5On], eax
mov dword [0x804c868], 0
sub esp, 8
lea eax, [var_118h]
push eax
push dword [s]
call fcn.08048d18
mov dword [var_178h], eax
add esp, 0x10
inc eax
jne 0x8049578
sub esp, 0xc
push dword [s]
call sym.imp.perror
jmp 0x8049883
push edi
push 6
push 1
push 2
call sym.imp.socket
mov ebx, eax
add esp, 0x10
test ebx, ebx
jns 0x80495a0
sub esp, 0xc
push str.socket
call sym.imp.perror
jmp 0x8049883
nop
xor eax, eax
lea edi, [address]
cld
mov ecx, 4
rep stosd dword es:[edi], eax
mov eax, dword [var_15ch]
mov word [address], 2
mov dword [var_144h], 0
ror ax, 8
push esi
push 0x10
lea esi, [address]
push esi
push ebx
mov word [var_146h], ax
call sym.imp.bind
add esp, 0x10
test eax, eax
jns 0x8049600
sub esp, 0xc
push str.bind
call sym.imp.perror
jmp 0x8049883
lea esi, [esi]
sub esp, 8
push 1
push ebx
call sym.imp.listen
add esp, 0x10
test eax, eax
jns 0x8049624
sub esp, 0xc
push str.listen
call sym.imp.perror
jmp 0x8049883
push ecx
lea eax, [addrlen]
push eax
push esi
push ebx
mov dword [addrlen], 4
call sym.imp.getsockname
add esp, 0x10
test eax, eax
jns 0x8049658
sub esp, 0xc
push str.getsockname
call sym.imp.perror
jmp 0x8049883
mov esi, esi
mov ax, word [var_146h]
ror ax, 8
sub esp, 8
movzx eax, ax
push eax
push str.Listening_to_port__d_n
mov dword [var_15ch], eax
call sym.imp.printf
pop eax
pop edx
movzx eax, word [var_15ch]
push eax
lea eax, [ptr]
push eax
call fcn.08048d8c
call sym.imp.fork
add esp, 0x10
test eax, eax
jns 0x80496b0
sub esp, 0xc
push str.fork
call sym.imp.perror
jmp 0x8049883
mov esi, esi
test eax, eax
je 0x80496e8
push edi
push esi
push ebx
push eax
call fcn.08048f18
jmp 0x8049888
mov esi, esi
sub esp, 0xc
push dword [ebx]
call fcn.08048cf8
jmp 0x8049888
nop
sub esp, 0xc
push str.socket
call sym.imp.perror
jmp 0x8049883
mov esi, esi
sub esp, 0xc
push ebx
call sym.imp.close
mov ecx, dword [str.5On]
add esp, 0x10
test ecx, ecx
je 0x804986c
mov esi, str.5On
nop
push edx
push 0
push 1
push 2
call sym.imp.socket
mov ebx, eax
add esp, 0x10
test ebx, ebx
js 0x80496d4
xor eax, eax
lea edi, [addr]
cld
mov ecx, 4
rep stosd dword es:[edi], eax
mov ax, word [esi]
mov word [addr], 2
ror ax, 8
mov word [var_156h], ax
mov eax, dword [var_178h]
mov dword [var_154h], eax
push dword [esi]
lea eax, [var_118h]
push eax
push str.Trying__s:_d..._n
push dword [obj.stderr]
call sym.imp.fprintf
pop eax
push dword [var_16ch]
call fcn.08048ccc
add esp, 0xc
push 0x10
lea eax, [addr]
push eax
push ebx
call sym.imp.connect
mov edi, dword [0x804c888]
add esp, 0x10
test edi, edi
je 0x80497ac
sub esp, 8
push str.connect:_Timed_out_n
push dword [obj.stderr]
call sym.imp.fprintf
jmp 0x804985c
test eax, eax
jns 0x80497c4
sub esp, 0xc
push str.connect
call sym.imp.perror
jmp 0x804985c
mov esi, esi
sub esp, 8
push str.Trying...
push dword [obj.stderr]
call sym.imp.fprintf
pop ecx
push dword [var_168h]
call fcn.08048ccc
jmp 0x8049814
lea esi, [esi]
sub esp, 0xc
push dword [var_164h]
call sym.imp.sleep
pop eax
pop edx
push 0x804b7fb
push dword [obj.stderr]
call sym.imp.fprintf
pop edi
push dword [obj.stderr]
call sym.imp.fflush
add esp, 0x10
mov ecx, dword [0x804c888]
test ecx, ecx
jne 0x8049838
push edx
push 0x16
lea eax, [ptr]
push eax
push ebx
call sym.imp.write
add esp, 0x10
test eax, eax
jns 0x80497e8
push dword [var_168h]
push dword [s]
push str._n_s:_no_response_within__d_seconds_n
push dword [obj.stderr]
call sym.imp.fprintf
mov dword [esp], ebx
call sym.imp.close
add esp, 0x10
add esi, 4
mov eax, dword [esi]
test eax, eax
jne 0x8049708
push edi
push dword [s]
push str._s:_server_not_responding__giving_up__n
push dword [obj.stderr]
call sym.imp.fprintf
mov eax, 1
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov eax, sym.imp.__register_frame_info
mov ebp, esp
sub esp, 8
test eax, eax
je 0x8048c64
sub esp, 8
push 0x804ca2c
push section..eh_frame
call sym.imp.__register_frame_info
add esp, 0x10
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 4
mov eax, dword [section..ctors]
mov ebx, section..ctors
cmp eax, 0xffffffff
je 0x804b3ec
lea esi, [esi]
lea edi, [edi]
sub ebx, 4
call eax
mov eax, dword [ebx]
cmp eax, 0xffffffff
jne 0x804b3e0
pop eax
pop ebx
pop ebp
ret
pop ebx
add ebx, 0x3dc2
mov eax, dword [ebx + 0xac]
test eax, eax
je 0x8048bc1
call eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x78
lea ebx, [var_78h]
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
push ebx
call fcn.0804af20
add esp, 0xc
push esi
push edi
push ebx
call fcn.0804af58
pop eax
pop edx
push ebx
push dword [arg_10h]
call fcn.0804b000
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov dword [eax], 0x67452301
mov dword [eax + 4], 0xefcdab89
mov dword [eax + 8], 0x98badcfe
mov dword [eax + 0xc], 0x10325476
mov dword [eax + 0x10], 0xc3d2e1f0
mov dword [eax + 0x18], 0
mov dword [eax + 0x14], 0
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x14]
mov edx, dword [arg_10h]
mov ecx, eax
shl edx, 3
shr ecx, 3
add eax, edx
and ecx, 0x3f
mov ebx, dword [arg_8h]
cmp eax, edx
mov dword [ebx + 0x14], eax
jae 0x804af84
inc dword [ebx + 0x18]
mov eax, dword [arg_10h]
shr eax, 0x1d
mov edx, dword [arg_8h]
mov ebx, dword [arg_10h]
add dword [edx + 0x18], eax
lea eax, [ebx + ecx]
cmp eax, 0x3f
jbe 0x804afe0
mov ebx, 0x40
sub ebx, ecx
lea edi, [ecx + edx + 0x1c]
mov esi, dword [arg_ch]
mov ecx, ebx
rep movsb byte es:[edi], byte ptr [esi]
mov eax, edx
sub esp, 8
add eax, 0x1c
push eax
push edx
jmp 0x804afcb
lea esi, [esi]
mov eax, dword [arg_ch]
sub esp, 8
add eax, ebx
push eax
add ebx, 0x40
push dword [arg_8h]
call fcn.08049890
lea eax, [ebx + 0x3f]
add esp, 0x10
cmp eax, dword [arg_10h]
jb 0x804afbc
xor ecx, ecx
jmp 0x804afe2
nop
xor ebx, ebx
sub dword [arg_10h], ebx
mov eax, dword [arg_8h]
mov esi, dword [arg_ch]
lea edi, [ecx + eax + 0x1c]
add esi, ebx
mov ecx, dword [arg_10h]
rep movsb byte es:[edi], byte ptr [esi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x1c
mov ebx, dword [arg_ch]
lea eax, [ebx + 4]
xor edi, edi
lea esi, [var_18h]
mov dword [var_1ch], eax
nop
cmp edi, 4
mov eax, edi
sbb edx, edx
mov ecx, 3
and eax, 3
sub ecx, eax
shl ecx, 3
mov dword [var_24h], ecx
and edx, 4
mov ecx, dword [var_1ch]
mov eax, dword [ecx + edx + 0x10]
mov cl, byte [var_24h]
shr eax, cl
mov byte [edi + ebp - 0x18], al
inc edi
cmp edi, 7
jbe 0x804b018
push ecx
push 1
push 0x804b850
jmp 0x804b05c
mov esi, esi
push edx
push 1
push 0x804b852
push ebx
call fcn.0804af58
mov eax, dword [ebx + 0x14]
and eax, 0x1f8
add esp, 0x10
cmp eax, 0x1c0
jne 0x804b054
push eax
push 8
push esi
push ebx
call fcn.0804af58
xor edi, edi
add esp, 0x10
nop
mov eax, edi
and eax, 3
mov edx, edi
mov ecx, 3
and edx, 0xfffffffc
sub ecx, eax
shl ecx, 3
mov eax, dword [edx + ebx]
shr eax, cl
mov edx, dword [arg_8h]
mov byte [edi + edx], al
inc edi
cmp edi, 0x13
jbe 0x804b084
lea edx, [ebx + 0x1c]
xor eax, eax
mov ecx, 0x40
mov edi, edx
rep stosb byte es:[edi], al
mov edi, ebx
mov ecx, 0x14
rep stosb byte es:[edi], al
lea edi, [ebx + 0x14]
mov ecx, 8
rep stosb byte es:[edi], al
mov edi, esi
mov ecx, 8
rep stosb byte es:[edi], al
sub esp, 8
push edx
push ebx
call fcn.08049890
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_ch]
push ecx
push ebx
mov esi, dword [arg_8h]
push 0x14
push dword [arg_10h]
call fcn.0804b0e8
mov word [ebx + 0x14], si
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x10
push fcn.08048efc
push 0x1c
call sym.imp.signal
inc dword [0x804c88c]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push edi
mov esi, dword [arg_8h]
mov ecx, 0x14
mov edi, dword [arg_ch]
rep movsb byte es:[edi], byte ptr [esi]
mov eax, dword [arg_ch]
mov dword [eax + 0x14], 0
pop esi
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edx, dword [arg_10h]
test edx, edx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
je 0x804b1b9
mov esi, esi
mov dl, byte [edi]
mov ecx, dword [esi + 0x14]
mov al, byte [ecx + esi]
mov bl, dl
xor ebx, eax
add eax, edx
mov byte [ecx + esi], al
mov eax, dword [esi + 0x14]
inc eax
cmp eax, 0x14
mov dword [esi + 0x14], eax
jne 0x804b1b1
push eax
push esi
push 0x14
push esi
call fcn.0804b0e8
add esp, 0x10
mov dword [esi + 0x14], 0
mov byte [edi], bl
inc edi
dec dword [arg_10h]
jne 0x804b180
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x10
mov dword [0x804c890], 1
push fcn.08048c80
push 0xe
call sym.imp.signal
add esp, 0x10
mov dword [arg_8h], 0x3c
leave
jmp sym.imp.alarm
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ebx, dword [arg_10h]
test ebx, ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
je 0x804b213
mov esi, esi
mov eax, dword [esi + 0x14]
mov dl, byte [eax + esi]
mov bl, dl
xor bl, byte [edi]
add edx, ebx
mov byte [eax + esi], dl
mov eax, dword [esi + 0x14]
inc eax
cmp eax, 0x14
mov dword [esi + 0x14], eax
jne 0x804b20b
push ecx
push esi
push 0x14
push esi
call fcn.0804b0e8
add esp, 0x10
mov dword [esi + 0x14], 0
mov byte [edi], bl
inc edi
dec dword [arg_10h]
jne 0x804b1dc
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0xc
push dword [arg_8h]
push str.use:_n_s__hsditc__...args_n_h_tSpecifies_ip_hostname_of_host_where_is_running_n_tsuckitd_n_s_tSpecifies_port_where_we_should_listen_for_incoming_n_tserver_connection__if_some_firewalled_etc___if_not_n_tspecified__well_get_some_from_os_n_d_tSpecifies_port_of_service_we_could_use_for_authentication_n_techo__telnet__ssh__httpd..._is_probably_good_choice_n_i_tInterval_between_request_sends__in_seconds__n_t_tTime_we_will_wait_for_server_before_giving_up__in_seconds__n_c_tConnect_timeout__in_seconds__n
push dword [obj.stderr]
call sym.imp.fprintf
mov eax, 1
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x28
xor eax, eax
cld
lea edi, [var_28h]
mov ecx, 4
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
rep stosd dword es:[edi], eax
push ebx
call sym.imp.inet_addr
mov dword [in], eax
mov byte [esi], 0
mov edi, dword [in]
add esp, 0x10
cmp edi, 0xffffffff
jne 0x8048d6a
sub esp, 0xc
push ebx
call sym.imp.gethostbyname
add esp, 0x10
test eax, eax
jne 0x8048d60
mov eax, edi
jmp 0x8048d84
nop
mov eax, dword [eax + 0x10]
mov eax, dword [eax]
mov eax, dword [eax]
mov dword [in], eax
sub esp, 0xc
push dword [in]
call sym.imp.inet_ntoa
pop ecx
pop ebx
push eax
push esi
call sym.imp.strcpy
add esp, 0x10
mov eax, dword [in]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x1a4
mov eax, dword [arg_ch]
mov word [var_19ah], ax
lea eax, [var_58h]
push eax
mov dword [var_1a0h], eax
push 0
call sym.imp.tcgetattr
add esp, 0xc
cld
mov esi, dword [var_1a0h]
lea eax, [var_98h]
lea edi, [var_98h]
mov ecx, 0xf
rep movsd dword es:[edi], dword ptr [esi]
push eax
push 2
and dword [var_8ch], 0xfffffff4
and dword [var_98h], 0xffffebff
push 0
call sym.imp.tcsetattr
pop edx
pop ecx
push str.password:_
push dword [obj.stderr]
call sym.imp.fprintf
pop eax
push dword [obj.stderr]
call sym.imp.fflush
add esp, 0xc
push dword [obj.stdin]
lea ebx, [s]
push 0xff
push ebx
call sym.imp.fgets
add esp, 0xc
push dword [var_1a0h]
push 2
push 0
call sym.imp.tcsetattr
add esp, 0xc
push 0x804cb1c
xor eax, eax
cld
mov edi, ebx
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
push ecx
push ebx
call fcn.0804b0e8
add esp, 0xc
push 0x804cb1c
push dword [arg_8h]
mov ax, word [var_19ah]
ror ax, 8
mov word [var_19ah], ax
movzx eax, ax
push eax
call fcn.0804b120
pop esi
pop edi
push 0x804b74b
push dword [obj.stderr]
call sym.imp.fprintf
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x48a4
push fcn.08048e94
mov ebx, dword [arg_ch]
push 0x11
mov dword [ebp - 0x488c], 0x10
call sym.imp.signal
add esp, 0xc
lea eax, [ebp - 0x488c]
push eax
lea eax, [var_28h]
push eax
push ebx
call sym.imp.accept
mov dword [esp], ebx
mov dword [ebp - 0x489c], eax
call sym.imp.close
mov esi, dword [ebp - 0x489c]
add esp, 0x10
test esi, esi
jns 0x8048f84
sub esp, 0xc
push str.accept
call sym.imp.perror
mov eax, 1
jmp 0x80493c6
nop
sub esp, 8
push fcn.08048ea8
push 0x11
call sym.imp.signal
pop ecx
pop ebx
push 0xf
push dword [pid]
call sym.imp.kill
pop eax
pop edx
push str.Et_voila_nServer_connected._Escape_character_is_K_n
push dword [obj.stderr]
call sym.imp.fprintf
pop esi
pop edi
push 0x804cae0
push 0
call sym.imp.tcgetattr
pop ecx
pop ebx
push fcn.08048ebc
push 1
call sym.imp.signal
pop eax
pop edx
push fcn.08048ebc
push 2
call sym.imp.signal
pop esi
pop edi
push fcn.08048ebc
push 3
call sym.imp.signal
pop ecx
pop ebx
push fcn.08048ebc
push 4
call sym.imp.signal
pop eax
pop edx
push fcn.08048ebc
push 6
call sym.imp.signal
pop esi
pop edi
push fcn.08048ebc
push 7
call sym.imp.signal
pop ecx
pop ebx
push fcn.08048ebc
push 8
call sym.imp.signal
pop eax
pop edx
push fcn.08048ebc
push 0xb
call sym.imp.signal
pop esi
pop edi
push fcn.08048ebc
push 0xf
call sym.imp.signal
pop ecx
pop ebx
push fcn.08048ebc
push 0xd
call sym.imp.signal
pop eax
pop edx
push fcn.08048ebc
push 0x1d
call sym.imp.signal
mov dword [esp], 0
call fcn.08048efc
add esp, 0xc
cld
mov edi, 0x804caa0
mov esi, 0x804cae0
mov ecx, 0xf
rep movsd dword es:[edi], dword ptr [esi]
push 0x804caa0
push 2
and dword [0x804caac], 0xfffffff4
and dword [0x804caa0], 0xffffebff
push 0
call sym.imp.tcsetattr
pop esi
pop edi
lea esi, [var_48h]
push esi
push 0x804cb1c
call fcn.0804b144
pop ecx
pop ebx
lea eax, [var_68h]
push eax
push 0x804cb1c
call fcn.0804b144
mov dword [esp], str.TERM
mov byte [ebp - 0x4068], 0
call sym.imp.getenv
add esp, 0x10
test eax, eax
je 0x80490e9
push edx
push eax
push str.TERM_s
lea eax, [ebp - 0x4068]
push eax
call sym.imp.sprintf
add esp, 0x10
push edi
push 0x40
lea ebx, [ebp - 0x4068]
push ebx
push esi
call fcn.0804b168
add esp, 0xc
push 0x40
push ebx
push dword [ebp - 0x489c]
call sym.imp.write
mov dword [esp], 0
call fcn.08048c80
lea eax, [ebp - 0x4868]
mov dword [ebp - 0x48a0], eax
mov eax, dword [ebp - 0x489c]
shr eax, 5
shl eax, 2
mov dword [0x804c890], 0
add esp, 0x10
mov dword [ebp - 0x48a4], eax
lea esi, [esi]
mov ecx, 0x200
mov edi, dword [ebp - 0x48a0]
xor eax, eax
cld
rep stosd dword es:[edi], eax
bts dword [ebp - 0x4868], eax
mov eax, dword [ebp - 0x489c]
and eax, 0x1f
mov edx, dword [ebp - 0x48a0]
mov ecx, dword [ebp - 0x48a4]
bts dword [ecx + edx], eax
mov ebx, dword [0x804c88c]
test ebx, ebx
je 0x8049209
push ecx
lea eax, [ebp - 0x4898]
push eax
push 0x5413
push 1
call sym.imp.ioctl
add esp, 0x10
test eax, eax
jne 0x80491ff
movzx ax, byte [ebp - 0x4895]
mov byte [ebp - 0x4877], al
mov al, byte [ebp - 0x4896]
push edx
mov byte [ebp - 0x4876], al
movzx ax, byte [ebp - 0x4897]
push 5
mov byte [ebp - 0x4875], al
lea ebx, [ebp - 0x4878]
mov al, byte [ebp - 0x4898]
push ebx
mov byte [ebp - 0x4874], al
lea eax, [var_48h]
push eax
mov byte [ebp - 0x4878], 0xb
call fcn.0804b168
add esp, 0xc
push 5
push ebx
push dword [ebp - 0x489c]
call sym.imp.write
add esp, 0x10
mov dword [0x804c88c], 0
call sym.imp.__errno_location
mov edi, eax
mov dword [edi], 0
mov eax, dword [0x804c890]
test eax, eax
je 0x8049268
push esi
push 5
lea ebx, [ebp - 0x4888]
push ebx
lea eax, [var_48h]
push eax
mov dword [ebp - 0x4888], 0
mov byte [ebp - 0x4884], 0
mov byte [ebp - 0x4888], 0xb
mov dword [0x804c890], 0
call fcn.0804b168
add esp, 0xc
push 5
push ebx
push dword [ebp - 0x489c]
call sym.imp.write
add esp, 0x10
sub esp, 0xc
push 0
push 0
push 0
mov eax, dword [ebp - 0x489c]
push dword [ebp - 0x48a0]
inc eax
push eax
call sym.imp.select
add esp, 0x20
test eax, eax
jns 0x804929c
cmp dword [edi], 4
jne 0x804938c
jmp 0x8049144
lea esi, [esi]
xor edx, edx
bt dword [ebp - 0x4868], edx
setb al
test al, al
je 0x8049315
mov dword [edi], 0
push ebx
push 0x4000
lea esi, [ebp - 0x4068]
push esi
push 0
call sym.imp.read
mov ebx, eax
add esp, 0x10
test ebx, ebx
jg 0x80492d8
cmp dword [edi], 4
jne 0x804938c
push ecx
push ebx
push 0xb
push esi
call sym.imp.memchr
add esp, 0x10
test eax, eax
jne 0x804938c
push edx
push ebx
push esi
lea eax, [var_48h]
push eax
call fcn.0804b168
add esp, 0xc
push ebx
push esi
push dword [ebp - 0x489c]
call sym.imp.write
add esp, 0x10
test eax, eax
jns 0x8049315
cmp dword [edi], 4
jne 0x804938c
mov eax, dword [ebp - 0x489c]
and eax, 0x1f
mov ecx, dword [ebp - 0x48a0]
mov edx, dword [ebp - 0x48a4]
bt dword [edx + ecx], eax
setb al
test al, al
je 0x8049144
call sym.imp.__errno_location
mov edi, eax
mov dword [edi], 0
push eax
push 0x4000
lea esi, [ebp - 0x4068]
push esi
push dword [ebp - 0x489c]
call sym.imp.read
mov ebx, eax
add esp, 0x10
test ebx, ebx
jg 0x804936c
cmp dword [edi], 4
jne 0x804938c
push edi
push ebx
push esi
lea eax, [var_68h]
push eax
call fcn.0804b1c4
add esp, 0xc
push ebx
push esi
push 1
call sym.imp.write
add esp, 0x10
jmp 0x8049144
push esi
push 0x804cae0
push 2
push 0
call sym.imp.tcsetattr
add esp, 0
call sym.imp.__errno_location
add esp, 0xc
push dword [eax]
push str.Connection_disappeared__errno_d_n
push dword [obj.stderr]
call sym.imp.fprintf
pop ebx
push dword [ebp - 0x489c]
call sym.imp.close
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x14
mov eax, dword [arg_8h]
push eax
mov dword [0x804c888], 0
call sym.imp.alarm
pop eax
pop edx
push fcn.08048cac
push 0xe
call sym.imp.signal
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x118
mov ecx, 0x40
mov esi, dword [arg_ch]
mov edi, 0x804ca60
rep movsb byte es:[edi], byte ptr [esi]
mov eax, dword [arg_8h]
mov ecx, dword [eax + 8]
mov esi, dword [eax]
mov ebx, dword [eax + 4]
mov eax, dword [eax + 0xc]
mov dword [var_24h], ecx
xor dword [var_24h], eax
and dword [var_24h], ebx
xor dword [var_24h], eax
mov dword [var_10h], eax
mov edx, dword [var_24h]
mov eax, esi
mov edi, dword [arg_8h]
add edx, dword [0x804ca60]
rol eax, 5
mov edi, dword [edi + 0x10]
add edx, eax
add edx, edi
rol ebx, 0x1e
mov dword [var_28h], edx
add edx, 0x5a827999
mov dword [var_14h], edx
mov edx, ebx
xor edx, ecx
and edx, esi
xor edx, ecx
mov edi, dword [0x804ca64]
lea eax, [edi + edx]
mov edx, dword [var_14h]
rol edx, 5
add eax, edx
mov edx, dword [var_10h]
rol esi, 0x1e
lea edx, [eax + edx + 0x5a827999]
mov dword [var_10h], edx
mov edx, esi
xor edx, ebx
and edx, dword [var_14h]
xor edx, ebx
mov edi, dword [0x804ca68]
lea eax, [edi + edx]
mov edx, dword [var_10h]
rol dword [var_14h], 0x1e
rol edx, 5
add eax, edx
mov edx, dword [var_14h]
xor edx, esi
and edx, dword [var_10h]
lea ecx, [eax + ecx + 0x5a827999]
xor edx, esi
mov edi, dword [0x804ca6c]
lea eax, [edi + edx]
mov edx, ecx
rol dword [var_10h], 0x1e
rol edx, 5
add eax, edx
mov edx, dword [var_10h]
xor edx, dword [var_14h]
and edx, ecx
lea ebx, [eax + ebx + 0x5a827999]
xor edx, dword [var_14h]
mov edi, dword [0x804ca70]
lea eax, [edi + edx]
mov edx, ebx
rol ecx, 0x1e
rol edx, 5
add eax, edx
mov edx, ecx
xor edx, dword [var_10h]
and edx, ebx
lea esi, [eax + esi + 0x5a827999]
xor edx, dword [var_10h]
mov edi, dword [0x804ca74]
lea eax, [edi + edx]
mov edx, esi
rol edx, 5
add eax, edx
mov edx, dword [var_14h]
rol ebx, 0x1e
lea edx, [eax + edx + 0x5a827999]
mov dword [var_14h], edx
mov edx, ebx
xor edx, ecx
and edx, esi
xor edx, ecx
mov edi, dword [0x804ca78]
lea eax, [edi + edx]
mov edx, dword [var_14h]
rol edx, 5
add eax, edx
mov edx, dword [var_10h]
rol esi, 0x1e
lea edx, [eax + edx + 0x5a827999]
mov dword [var_10h], edx
mov edx, esi
xor edx, ebx
and edx, dword [var_14h]
xor edx, ebx
mov edi, dword [0x804ca7c]
lea eax, [edi + edx]
mov edx, dword [var_10h]
rol dword [var_14h], 0x1e
rol edx, 5
add eax, edx
mov edx, dword [var_14h]
xor edx, esi
and edx, dword [var_10h]
lea ecx, [eax + ecx + 0x5a827999]
xor edx, esi
mov edi, dword [0x804ca80]
lea eax, [edi + edx]
mov edx, ecx
rol dword [var_10h], 0x1e
rol edx, 5
add eax, edx
mov edx, dword [var_10h]
xor edx, dword [var_14h]
and edx, ecx
xor edx, dword [var_14h]
lea ebx, [eax + ebx + 0x5a827999]
mov edi, dword [0x804ca84]
lea eax, [edi + edx]
mov edx, ebx
rol ecx, 0x1e
rol edx, 5
add eax, edx
mov edx, ecx
xor edx, dword [var_10h]
and edx, ebx
xor edx, dword [var_10h]
lea esi, [eax + esi + 0x5a827999]
mov edi, dword [0x804ca88]
lea eax, [edi + edx]
mov edx, esi
rol edx, 5
add eax, edx
mov edx, dword [var_14h]
rol ebx, 0x1e
lea edx, [eax + edx + 0x5a827999]
mov dword [var_14h], edx
mov edx, ebx
xor edx, ecx
and edx, esi
xor edx, ecx
mov edi, dword [0x804ca8c]
lea eax, [edi + edx]
mov edx, dword [var_14h]
rol edx, 5
add eax, edx
mov edx, dword [var_10h]
rol esi, 0x1e
lea edx, [eax + edx + 0x5a827999]
mov dword [var_10h], edx
mov edx, esi
xor edx, ebx
and edx, dword [var_14h]
xor edx, ebx
mov edi, dword [0x804ca90]
lea eax, [edi + edx]
mov edx, dword [var_10h]
rol dword [var_14h], 0x1e
rol edx, 5
add eax, edx
mov edx, dword [var_14h]
xor edx, esi
and edx, dword [var_10h]
lea ecx, [eax + ecx + 0x5a827999]
xor edx, esi
mov edi, dword [0x804ca94]
lea eax, [edi + edx]
mov edx, ecx
rol edx, 5
rol dword [var_10h], 0x1e
add eax, edx
mov edx, dword [var_10h]
xor edx, dword [var_14h]
and edx, ecx
xor edx, dword [var_14h]
lea ebx, [eax + ebx + 0x5a827999]
mov edi, dword [0x804ca98]
lea eax, [edi + edx]
mov edx, ebx
rol ecx, 0x1e
rol edx, 5
add eax, edx
mov edx, ecx
xor edx, dword [var_10h]
and edx, ebx
xor edx, dword [var_10h]
lea esi, [eax + esi + 0x5a827999]
mov edi, dword [0x804ca9c]
lea eax, [edi + edx]
mov edx, esi
rol edx, 5
add eax, edx
mov edi, dword [0x804ca94]
mov edx, dword [var_14h]
mov dword [var_2ch], edi
rol ebx, 0x1e
lea edx, [eax + edx + 0x5a827999]
mov eax, dword [0x804ca80]
xor dword [var_2ch], eax
mov dword [var_14h], edx
mov edi, dword [0x804ca68]
mov edx, ebx
xor dword [var_2ch], edi
mov eax, dword [0x804ca60]
xor edx, ecx
xor dword [var_2ch], eax
and edx, esi
rol dword [var_2ch], 1
mov eax, dword [var_14h]
xor edx, ecx
add edx, dword [var_2ch]
rol eax, 5
mov edi, dword [var_10h]
rol esi, 0x1e
add edx, eax
lea edi, [edx + edi + 0x5a827999]
mov eax, dword [0x804ca98]
mov edx, esi
mov dword [var_30h], eax
mov dword [var_10h], edi
xor edx, ebx
mov edi, dword [0x804ca84]
mov eax, dword [0x804ca6c]
and edx, dword [var_14h]
xor dword [var_30h], edi
xor dword [var_30h], eax
mov edi, dword [0x804ca64]
xor dword [var_30h], edi
mov eax, dword [var_10h]
rol dword [var_30h], 1
xor edx, ebx
add edx, dword [var_30h]
rol eax, 5
add edx, eax
mov eax, dword [0x804ca9c]
mov dword [var_34h], eax
rol dword [var_14h], 0x1e
mov edi, dword [0x804ca88]
xor dword [var_34h], edi
lea ecx, [edx + ecx + 0x5a827999]
mov eax, dword [0x804ca70]
mov edx, dword [var_14h]
xor dword [var_34h], eax
mov edi, dword [0x804ca68]
xor edx, esi
xor dword [var_34h], edi
and edx, dword [var_10h]
rol dword [var_34h], 1
xor edx, esi
mov eax, ecx
add edx, dword [var_34h]
rol eax, 5
add edx, eax
rol dword [var_10h], 0x1e
lea ebx, [edx + ebx + 0x5a827999]
mov edx, dword [var_10h]
xor edx, dword [var_14h]
mov eax, dword [var_2ch]
and edx, ecx
mov edi, dword [0x804ca8c]
xor edx, dword [var_14h]
mov dword [var_38h], eax
xor dword [var_38h], edi
mov eax, dword [0x804ca74]
xor dword [var_38h], eax
mov edi, dword [0x804ca6c]
xor dword [var_38h], edi
rol dword [var_38h], 1
mov eax, ebx
add edx, dword [var_38h]
rol eax, 5
add edx, eax
mov eax, dword [var_30h]
mov dword [var_3ch], eax
mov edi, dword [0x804ca90]
xor dword [var_3ch], edi
mov eax, dword [0x804ca78]
xor dword [var_3ch], eax
lea esi, [edx + esi + 0x5a827999]
rol ecx, 0x1e
mov edi, dword [0x804ca70]
mov edx, ebx
xor dword [var_3ch], edi
xor edx, ecx
xor edx, dword [var_10h]
rol dword [var_3ch], 1
mov eax, esi
add edx, dword [var_3ch]
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
mov edi, dword [var_34h]
lea eax, [edx + eax + 0x6ed9eba1]
mov dword [var_40h], edi
mov dword [var_14h], eax
mov edi, dword [0x804ca7c]
mov eax, dword [0x804ca94]
rol ebx, 0x1e
xor dword [var_40h], eax
mov edx, esi
xor dword [var_40h], edi
mov eax, dword [0x804ca74]
xor dword [var_40h], eax
xor edx, ebx
mov eax, dword [var_14h]
rol dword [var_40h], 1
xor edx, ecx
add edx, dword [var_40h]
rol eax, 5
mov edi, dword [var_10h]
add edx, eax
lea edi, [edx + edi + 0x6ed9eba1]
mov eax, dword [var_38h]
mov dword [var_44h], eax
mov dword [var_10h], edi
mov edi, dword [0x804ca98]
xor dword [var_44h], edi
mov eax, dword [0x804ca80]
xor dword [var_44h], eax
mov edx, dword [var_14h]
rol esi, 0x1e
mov edi, dword [0x804ca78]
xor dword [var_44h], edi
xor edx, esi
rol dword [var_44h], 1
mov eax, dword [var_10h]
xor edx, ebx
add edx, dword [var_44h]
rol eax, 5
add edx, eax
lea ecx, [edx + ecx + 0x6ed9eba1]
mov eax, dword [var_3ch]
rol dword [var_14h], 0x1e
mov edx, dword [var_10h]
mov edi, dword [0x804ca9c]
xor edx, dword [var_14h]
mov dword [var_48h], eax
xor dword [var_48h], edi
mov eax, dword [0x804ca84]
xor dword [var_48h], eax
mov edi, dword [0x804ca7c]
xor dword [var_48h], edi
rol dword [var_48h], 1
xor edx, esi
mov eax, ecx
add edx, dword [var_48h]
rol eax, 5
add edx, eax
mov eax, dword [var_40h]
mov dword [var_4ch], eax
mov edi, dword [var_2ch]
xor dword [var_4ch], edi
mov eax, dword [0x804ca88]
xor dword [var_4ch], eax
lea ebx, [edx + ebx + 0x6ed9eba1]
rol dword [var_10h], 0x1e
mov edi, dword [0x804ca80]
mov edx, ecx
xor dword [var_4ch], edi
xor edx, dword [var_10h]
xor edx, dword [var_14h]
rol dword [var_4ch], 1
mov eax, ebx
add edx, dword [var_4ch]
rol eax, 5
add edx, eax
lea esi, [edx + esi + 0x6ed9eba1]
mov eax, dword [var_44h]
rol ecx, 0x1e
mov edx, ebx
mov dword [var_50h], eax
mov edi, dword [var_30h]
xor edx, ecx
mov eax, dword [0x804ca8c]
xor edx, dword [var_10h]
xor dword [var_50h], edi
xor dword [var_50h], eax
mov edi, dword [0x804ca84]
xor dword [var_50h], edi
rol dword [var_50h], 1
mov eax, esi
add edx, dword [var_50h]
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
mov edi, dword [var_48h]
lea eax, [edx + eax + 0x6ed9eba1]
mov dword [var_54h], edi
mov dword [var_14h], eax
mov eax, dword [var_34h]
xor dword [var_54h], eax
mov edi, dword [0x804ca90]
xor dword [var_54h], edi
rol ebx, 0x1e
mov eax, dword [0x804ca88]
mov edx, esi
xor dword [var_54h], eax
xor edx, ebx
rol dword [var_54h], 1
mov eax, dword [var_14h]
xor edx, ecx
add edx, dword [var_54h]
rol eax, 5
mov edi, dword [var_10h]
add edx, eax
lea edi, [edx + edi + 0x6ed9eba1]
mov eax, dword [var_4ch]
mov dword [var_58h], eax
mov dword [var_10h], edi
mov eax, dword [0x804ca94]
mov edi, dword [var_38h]
rol esi, 0x1e
mov edx, dword [var_14h]
xor dword [var_58h], edi
xor dword [var_58h], eax
mov edi, dword [0x804ca8c]
xor dword [var_58h], edi
xor edx, esi
mov eax, dword [var_10h]
rol dword [var_58h], 1
xor edx, ebx
add edx, dword [var_58h]
rol eax, 5
add edx, eax
mov eax, dword [var_50h]
mov dword [var_5ch], eax
mov edi, dword [var_3ch]
xor dword [var_5ch], edi
mov eax, dword [0x804ca98]
xor dword [var_5ch], eax
lea ecx, [edx + ecx + 0x6ed9eba1]
rol dword [var_14h], 0x1e
mov edx, dword [var_10h]
mov edi, dword [0x804ca90]
xor dword [var_5ch], edi
xor edx, dword [var_14h]
rol dword [var_5ch], 1
xor edx, esi
mov eax, ecx
add edx, dword [var_5ch]
rol eax, 5
add edx, eax
lea ebx, [edx + ebx + 0x6ed9eba1]
rol dword [var_10h], 0x1e
mov edx, ecx
mov eax, dword [var_54h]
xor edx, dword [var_10h]
mov edi, dword [var_40h]
xor edx, dword [var_14h]
mov dword [var_60h], eax
xor dword [var_60h], edi
mov eax, dword [0x804ca9c]
xor dword [var_60h], eax
mov edi, dword [0x804ca94]
xor dword [var_60h], edi
rol dword [var_60h], 1
mov eax, ebx
add edx, dword [var_60h]
rol eax, 5
add edx, eax
mov eax, dword [var_58h]
mov dword [var_64h], eax
mov edi, dword [var_44h]
xor dword [var_64h], edi
mov eax, dword [var_2ch]
xor dword [var_64h], eax
lea esi, [edx + esi + 0x6ed9eba1]
rol ecx, 0x1e
mov edi, dword [0x804ca98]
mov edx, ebx
xor dword [var_64h], edi
xor edx, ecx
xor edx, dword [var_10h]
rol dword [var_64h], 1
mov eax, esi
add edx, dword [var_64h]
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
mov edi, dword [var_5ch]
lea eax, [edx + eax + 0x6ed9eba1]
mov dword [var_68h], edi
mov dword [var_14h], eax
mov edi, dword [var_30h]
mov eax, dword [var_48h]
rol ebx, 0x1e
xor dword [var_68h], eax
mov edx, esi
xor dword [var_68h], edi
mov eax, dword [0x804ca9c]
xor dword [var_68h], eax
xor edx, ebx
mov eax, dword [var_14h]
rol dword [var_68h], 1
xor edx, ecx
add edx, dword [var_68h]
rol eax, 5
mov edi, dword [var_10h]
add edx, eax
lea edi, [edx + edi + 0x6ed9eba1]
mov eax, dword [var_60h]
mov dword [var_6ch], eax
mov dword [var_10h], edi
mov edi, dword [var_4ch]
xor dword [var_6ch], edi
mov eax, dword [var_34h]
xor dword [var_6ch], eax
mov edx, dword [var_14h]
mov edi, dword [var_2ch]
rol esi, 0x1e
xor dword [var_6ch], edi
xor edx, esi
rol dword [var_6ch], 1
mov eax, dword [var_10h]
xor edx, ebx
add edx, dword [var_6ch]
rol eax, 5
add edx, eax
lea ecx, [edx + ecx + 0x6ed9eba1]
mov eax, dword [var_64h]
rol dword [var_14h], 0x1e
mov edx, dword [var_10h]
mov edi, dword [var_50h]
xor edx, dword [var_14h]
mov dword [var_70h], eax
xor dword [var_70h], edi
mov eax, dword [var_38h]
xor dword [var_70h], eax
mov edi, dword [var_30h]
xor dword [var_70h], edi
rol dword [var_70h], 1
xor edx, esi
mov eax, ecx
add edx, dword [var_70h]
rol eax, 5
add edx, eax
mov eax, dword [var_68h]
mov dword [var_74h], eax
mov edi, dword [var_54h]
xor dword [var_74h], edi
mov eax, dword [var_3ch]
xor dword [var_74h], eax
lea ebx, [edx + ebx + 0x6ed9eba1]
rol dword [var_10h], 0x1e
mov edi, dword [var_34h]
mov edx, ecx
xor dword [var_74h], edi
xor edx, dword [var_10h]
xor edx, dword [var_14h]
rol dword [var_74h], 1
mov eax, ebx
add edx, dword [var_74h]
rol eax, 5
add edx, eax
lea esi, [edx + esi + 0x6ed9eba1]
mov eax, dword [var_6ch]
rol ecx, 0x1e
mov edx, ebx
mov dword [var_78h], eax
mov edi, dword [var_58h]
mov eax, dword [var_40h]
xor edx, ecx
xor edx, dword [var_10h]
xor dword [var_78h], edi
xor dword [var_78h], eax
mov edi, dword [var_38h]
xor dword [var_78h], edi
rol dword [var_78h], 1
mov eax, esi
add edx, dword [var_78h]
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
mov edi, dword [var_70h]
lea eax, [edx + eax + 0x6ed9eba1]
mov dword [var_7ch], edi
mov dword [var_14h], eax
mov eax, dword [var_5ch]
xor dword [var_7ch], eax
mov edi, dword [var_44h]
xor dword [var_7ch], edi
mov eax, dword [var_3ch]
rol ebx, 0x1e
mov edx, esi
xor dword [var_7ch], eax
xor edx, ebx
rol dword [var_7ch], 1
mov eax, dword [var_14h]
xor edx, ecx
add edx, dword [var_7ch]
rol eax, 5
mov edi, dword [var_10h]
add edx, eax
lea edi, [edx + edi + 0x6ed9eba1]
mov eax, dword [var_74h]
mov dword [var_80h], eax
mov dword [var_10h], edi
mov eax, dword [var_48h]
mov edi, dword [var_60h]
rol esi, 0x1e
mov edx, dword [var_14h]
xor dword [var_80h], edi
xor dword [var_80h], eax
mov edi, dword [var_40h]
xor dword [var_80h], edi
xor edx, esi
mov eax, dword [var_10h]
rol dword [var_80h], 1
xor edx, ebx
add edx, dword [var_80h]
rol eax, 5
add edx, eax
mov eax, dword [var_78h]
mov dword [var_84h], eax
mov edi, dword [var_64h]
xor dword [var_84h], edi
mov eax, dword [var_4ch]
xor dword [var_84h], eax
lea ecx, [edx + ecx + 0x6ed9eba1]
rol dword [var_14h], 0x1e
mov edx, dword [var_10h]
mov edi, dword [var_44h]
xor dword [var_84h], edi
xor edx, dword [var_14h]
rol dword [var_84h], 1
xor edx, esi
mov eax, ecx
add edx, dword [var_84h]
rol eax, 5
add edx, eax
lea ebx, [edx + ebx + 0x6ed9eba1]
rol dword [var_10h], 0x1e
mov edx, ecx
mov eax, dword [var_7ch]
xor edx, dword [var_10h]
mov edi, dword [var_68h]
xor edx, dword [var_14h]
mov dword [var_88h], eax
xor dword [var_88h], edi
mov eax, dword [var_50h]
xor dword [var_88h], eax
mov edi, dword [var_48h]
xor dword [var_88h], edi
rol dword [var_88h], 1
mov eax, ebx
add edx, dword [var_88h]
rol eax, 5
add edx, eax
lea esi, [edx + esi + 0x6ed9eba1]
rol ecx, 0x1e
mov edx, ebx
or edx, ecx
mov eax, ebx
and edx, dword [var_10h]
and eax, ecx
or edx, eax
mov eax, dword [var_80h]
mov dword [var_8ch], eax
mov edi, dword [var_6ch]
xor dword [var_8ch], edi
mov eax, dword [var_54h]
xor dword [var_8ch], eax
mov edi, dword [var_4ch]
xor dword [var_8ch], edi
rol dword [var_8ch], 1
mov eax, esi
add edx, dword [var_8ch]
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
rol ebx, 0x1e
lea eax, [edx + eax - 0x70e44324]
mov edx, esi
mov dword [var_14h], eax
or edx, ebx
mov eax, esi
mov edi, dword [var_84h]
and eax, ebx
and edx, ecx
mov dword [var_90h], edi
or edx, eax
mov edi, dword [var_58h]
mov eax, dword [var_70h]
xor dword [var_90h], eax
xor dword [var_90h], edi
mov eax, dword [var_50h]
xor dword [var_90h], eax
rol dword [var_90h], 1
mov eax, dword [var_14h]
add edx, dword [var_90h]
rol eax, 5
mov edi, dword [var_10h]
add edx, eax
rol esi, 0x1e
lea edi, [edx + edi - 0x70e44324]
mov edx, dword [var_14h]
mov eax, dword [var_14h]
or edx, esi
and eax, esi
and edx, ebx
or edx, eax
mov eax, dword [var_88h]
mov dword [var_94h], eax
mov dword [var_10h], edi
mov edi, dword [var_74h]
xor dword [var_94h], edi
mov eax, dword [var_5ch]
xor dword [var_94h], eax
mov edi, dword [var_54h]
xor dword [var_94h], edi
rol dword [var_94h], 1
mov eax, dword [var_10h]
add edx, dword [var_94h]
rol eax, 5
add edx, eax
lea ecx, [edx + ecx - 0x70e44324]
rol dword [var_14h], 0x1e
mov edx, dword [var_10h]
or edx, dword [var_14h]
mov eax, dword [var_10h]
and eax, dword [var_14h]
and edx, esi
or edx, eax
mov eax, dword [var_8ch]
mov dword [var_98h], eax
mov edi, dword [var_78h]
xor dword [var_98h], edi
mov eax, dword [var_60h]
xor dword [var_98h], eax
mov edi, dword [var_58h]
xor dword [var_98h], edi
rol dword [var_98h], 1
mov eax, ecx
add edx, dword [var_98h]
rol eax, 5
add edx, eax
lea ebx, [edx + ebx - 0x70e44324]
rol dword [var_10h], 0x1e
mov edx, ecx
or edx, dword [var_10h]
mov eax, ecx
and eax, dword [var_10h]
and edx, dword [var_14h]
or edx, eax
mov eax, dword [var_90h]
mov dword [var_9ch], eax
mov edi, dword [var_7ch]
xor dword [var_9ch], edi
mov eax, dword [var_64h]
xor dword [var_9ch], eax
mov edi, dword [var_5ch]
xor dword [var_9ch], edi
rol dword [var_9ch], 1
mov eax, ebx
add edx, dword [var_9ch]
rol eax, 5
add edx, eax
lea esi, [edx + esi - 0x70e44324]
rol ecx, 0x1e
mov edx, ebx
or edx, ecx
mov eax, ebx
and edx, dword [var_10h]
and eax, ecx
or edx, eax
mov eax, dword [var_94h]
mov dword [var_a0h], eax
mov edi, dword [var_80h]
xor dword [var_a0h], edi
mov eax, dword [var_68h]
xor dword [var_a0h], eax
mov edi, dword [var_60h]
xor dword [var_a0h], edi
rol dword [var_a0h], 1
mov eax, esi
add edx, dword [var_a0h]
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
rol ebx, 0x1e
lea eax, [edx + eax - 0x70e44324]
mov edx, esi
mov dword [var_14h], eax
or edx, ebx
mov eax, esi
mov edi, dword [var_98h]
and eax, ebx
and edx, ecx
mov dword [var_a4h], edi
or edx, eax
mov eax, dword [var_84h]
xor dword [var_a4h], eax
mov edi, dword [var_6ch]
xor dword [var_a4h], edi
mov eax, dword [var_64h]
xor dword [var_a4h], eax
rol dword [var_a4h], 1
mov eax, dword [var_14h]
add edx, dword [var_a4h]
rol eax, 5
mov edi, dword [var_10h]
add edx, eax
rol esi, 0x1e
lea edi, [edx + edi - 0x70e44324]
mov edx, dword [var_14h]
mov eax, dword [var_14h]
or edx, esi
and eax, esi
and edx, ebx
or edx, eax
mov eax, dword [var_9ch]
mov dword [var_10h], edi
mov dword [var_a8h], eax
mov edi, dword [var_88h]
xor dword [var_a8h], edi
mov eax, dword [var_70h]
xor dword [var_a8h], eax
mov edi, dword [var_68h]
xor dword [var_a8h], edi
rol dword [var_a8h], 1
mov eax, dword [var_10h]
add edx, dword [var_a8h]
rol eax, 5
add edx, eax
lea ecx, [edx + ecx - 0x70e44324]
rol dword [var_14h], 0x1e
mov edx, dword [var_10h]
or edx, dword [var_14h]
mov eax, dword [var_10h]
and eax, dword [var_14h]
and edx, esi
or edx, eax
mov eax, dword [var_a0h]
mov dword [var_ach], eax
mov edi, dword [var_8ch]
xor dword [var_ach], edi
mov eax, dword [var_74h]
xor dword [var_ach], eax
mov edi, dword [var_6ch]
xor dword [var_ach], edi
rol dword [var_ach], 1
mov eax, ecx
add edx, dword [var_ach]
rol eax, 5
add edx, eax
lea ebx, [edx + ebx - 0x70e44324]
mov edx, ecx
rol dword [var_10h], 0x1e
mov eax, ecx
or edx, dword [var_10h]
and eax, dword [var_10h]
and edx, dword [var_14h]
or edx, eax
mov eax, dword [var_a4h]
mov dword [var_b0h], eax
mov edi, dword [var_90h]
xor dword [var_b0h], edi
mov eax, dword [var_78h]
xor dword [var_b0h], eax
mov edi, dword [var_70h]
xor dword [var_b0h], edi
rol dword [var_b0h], 1
mov eax, ebx
add edx, dword [var_b0h]
rol eax, 5
add edx, eax
lea esi, [edx + esi - 0x70e44324]
rol ecx, 0x1e
mov edx, ebx
or edx, ecx
mov eax, ebx
and edx, dword [var_10h]
and eax, ecx
or edx, eax
mov eax, dword [var_a8h]
mov dword [var_b4h], eax
mov edi, dword [var_94h]
xor dword [var_b4h], edi
mov eax, dword [var_7ch]
xor dword [var_b4h], eax
mov edi, dword [var_74h]
xor dword [var_b4h], edi
rol dword [var_b4h], 1
mov eax, esi
add edx, dword [var_b4h]
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
rol ebx, 0x1e
lea eax, [edx + eax - 0x70e44324]
mov edx, esi
mov dword [var_14h], eax
or edx, ebx
mov eax, esi
mov edi, dword [var_ach]
and eax, ebx
and edx, ecx
mov dword [var_b8h], edi
or edx, eax
mov eax, dword [var_98h]
xor dword [var_b8h], eax
mov edi, dword [var_80h]
xor dword [var_b8h], edi
mov eax, dword [var_78h]
xor dword [var_b8h], eax
rol dword [var_b8h], 1
mov eax, dword [var_14h]
add edx, dword [var_b8h]
rol eax, 5
mov edi, dword [var_10h]
add edx, eax
rol esi, 0x1e
lea edi, [edx + edi - 0x70e44324]
mov edx, dword [var_14h]
mov eax, dword [var_14h]
or edx, esi
and eax, esi
and edx, ebx
or edx, eax
mov eax, dword [var_b0h]
mov dword [var_bch], eax
mov dword [var_10h], edi
mov edi, dword [var_9ch]
xor dword [var_bch], edi
mov eax, dword [var_84h]
xor dword [var_bch], eax
mov edi, dword [var_7ch]
xor dword [var_bch], edi
rol dword [var_bch], 1
mov eax, dword [var_10h]
add edx, dword [var_bch]
rol eax, 5
add edx, eax
rol dword [var_14h], 0x1e
lea ecx, [edx + ecx - 0x70e44324]
mov edx, dword [var_10h]
mov eax, dword [var_10h]
or edx, dword [var_14h]
and eax, dword [var_14h]
and edx, esi
or edx, eax
mov eax, dword [var_b4h]
mov dword [var_c0h], eax
mov edi, dword [var_a0h]
xor dword [var_c0h], edi
mov eax, dword [var_88h]
xor dword [var_c0h], eax
mov edi, dword [var_80h]
xor dword [var_c0h], edi
rol dword [var_c0h], 1
mov eax, ecx
add edx, dword [var_c0h]
rol eax, 5
add edx, eax
lea ebx, [edx + ebx - 0x70e44324]
rol dword [var_10h], 0x1e
mov edx, ecx
or edx, dword [var_10h]
mov eax, ecx
and eax, dword [var_10h]
and edx, dword [var_14h]
or edx, eax
mov eax, dword [var_b8h]
mov dword [var_c4h], eax
mov edi, dword [var_a4h]
xor dword [var_c4h], edi
mov eax, dword [var_8ch]
mov edi, dword [var_84h]
xor dword [var_c4h], eax
xor dword [var_c4h], edi
mov eax, ebx
rol dword [var_c4h], 1
add edx, dword [var_c4h]
rol eax, 5
add edx, eax
lea esi, [edx + esi - 0x70e44324]
rol ecx, 0x1e
mov edx, ebx
or edx, ecx
mov eax, ebx
and edx, dword [var_10h]
and eax, ecx
or edx, eax
mov eax, dword [var_bch]
mov dword [var_c8h], eax
mov edi, dword [var_a8h]
xor dword [var_c8h], edi
mov eax, dword [var_90h]
xor dword [var_c8h], eax
mov edi, dword [var_88h]
xor dword [var_c8h], edi
rol dword [var_c8h], 1
mov eax, esi
add edx, dword [var_c8h]
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
rol ebx, 0x1e
lea eax, [edx + eax - 0x70e44324]
mov edx, esi
mov dword [var_14h], eax
or edx, ebx
mov eax, esi
mov edi, dword [var_c0h]
and eax, ebx
and edx, ecx
mov dword [var_cch], edi
or edx, eax
mov eax, dword [var_ach]
xor dword [var_cch], eax
mov edi, dword [var_94h]
xor dword [var_cch], edi
mov eax, dword [var_8ch]
xor dword [var_cch], eax
rol dword [var_cch], 1
mov eax, dword [var_14h]
add edx, dword [var_cch]
rol eax, 5
add edx, eax
mov edi, dword [var_10h]
lea edi, [edx + edi - 0x70e44324]
mov dword [var_10h], edi
rol esi, 0x1e
mov edx, dword [var_14h]
mov eax, dword [var_14h]
or edx, esi
and eax, esi
and edx, ebx
or edx, eax
mov eax, dword [var_c4h]
mov dword [var_d0h], eax
mov edi, dword [var_b0h]
xor dword [var_d0h], edi
mov eax, dword [var_98h]
xor dword [var_d0h], eax
mov edi, dword [var_90h]
xor dword [var_d0h], edi
rol dword [var_d0h], 1
mov eax, dword [var_10h]
add edx, dword [var_d0h]
rol eax, 5
add edx, eax
lea ecx, [edx + ecx - 0x70e44324]
rol dword [var_14h], 0x1e
mov edx, dword [var_10h]
or edx, dword [var_14h]
mov eax, dword [var_10h]
and eax, dword [var_14h]
and edx, esi
or edx, eax
mov eax, dword [var_c8h]
mov dword [var_d4h], eax
mov edi, dword [var_b4h]
xor dword [var_d4h], edi
mov eax, dword [var_9ch]
xor dword [var_d4h], eax
mov edi, dword [var_94h]
mov eax, ecx
xor dword [var_d4h], edi
rol eax, 5
rol dword [var_d4h], 1
add edx, dword [var_d4h]
add edx, eax
rol dword [var_10h], 0x1e
lea ebx, [edx + ebx - 0x70e44324]
mov edx, ecx
or edx, dword [var_10h]
mov eax, ecx
and eax, dword [var_10h]
and edx, dword [var_14h]
or edx, eax
mov eax, dword [var_cch]
mov dword [var_d8h], eax
mov edi, dword [var_b8h]
xor dword [var_d8h], edi
mov eax, dword [var_a0h]
xor dword [var_d8h], eax
mov edi, dword [var_98h]
xor dword [var_d8h], edi
rol dword [var_d8h], 1
mov eax, dword [var_d8h]
add edx, eax
mov eax, ebx
mov edi, dword [var_d0h]
rol eax, 5
mov dword [var_dch], edi
add edx, eax
mov eax, dword [var_bch]
xor dword [var_dch], eax
lea esi, [edx + esi - 0x70e44324]
mov edi, dword [var_a4h]
rol ecx, 0x1e
mov edx, ebx
xor dword [var_dch], edi
mov eax, dword [var_9ch]
xor edx, ecx
xor edx, dword [var_10h]
xor dword [var_dch], eax
rol dword [var_dch], 1
mov eax, esi
mov edi, dword [var_dch]
add edx, edi
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
mov edi, dword [var_d4h]
lea eax, [edx + eax - 0x359d3e2a]
mov dword [var_e0h], edi
mov dword [var_14h], eax
mov eax, dword [var_c0h]
xor dword [var_e0h], eax
mov edi, dword [var_a8h]
xor dword [var_e0h], edi
mov eax, dword [var_a0h]
xor dword [var_e0h], eax
rol ebx, 0x1e
mov edx, esi
rol dword [var_e0h], 1
xor edx, ebx
mov edi, dword [var_e0h]
mov eax, dword [var_14h]
xor edx, ecx
add edx, edi
rol eax, 5
add edx, eax
mov eax, dword [var_10h]
mov edi, dword [var_d8h]
lea eax, [edx + eax - 0x359d3e2a]
mov dword [var_e4h], edi
mov dword [var_10h], eax
mov eax, dword [var_c4h]
xor dword [var_e4h], eax
mov edi, dword [var_ach]
rol esi, 0x1e
mov edx, dword [var_14h]
xor dword [var_e4h], edi
mov eax, dword [var_a4h]
xor edx, esi
xor dword [var_e4h], eax
xor edx, ebx
rol dword [var_e4h], 1
mov edi, dword [var_e4h]
mov eax, dword [var_10h]
add edx, edi
rol eax, 5
add edx, eax
mov eax, dword [var_dch]
mov dword [var_e8h], eax
mov edi, dword [var_c8h]
xor dword [var_e8h], edi
mov eax, dword [var_b0h]
xor dword [var_e8h], eax
mov edi, dword [var_a8h]
xor dword [var_e8h], edi
lea ecx, [edx + ecx - 0x359d3e2a]
rol dword [var_14h], 0x1e
mov edx, dword [var_10h]
xor edx, dword [var_14h]
rol dword [var_e8h], 1
mov eax, dword [var_e8h]
xor edx, esi
add edx, eax
mov eax, ecx
rol eax, 5
mov edi, dword [var_e0h]
add edx, eax
mov dword [var_ech], edi
lea ebx, [edx + ebx - 0x359d3e2a]
mov eax, dword [var_cch]
rol dword [var_10h], 0x1e
mov edx, ecx
xor dword [var_ech], eax
mov edi, dword [var_b4h]
xor edx, dword [var_10h]
mov eax, dword [var_ach]
xor edx, dword [var_14h]
xor dword [var_ech], edi
xor dword [var_ech], eax
rol dword [var_ech], 1
mov edi, dword [var_ech]
mov eax, ebx
add edx, edi
rol eax, 5
add edx, eax
mov eax, dword [var_e4h]
mov dword [var_f0h], eax
mov dword [0x804ca60], edi
mov edi, dword [var_d0h]
xor dword [var_f0h], edi
mov eax, dword [var_b8h]
xor dword [var_f0h], eax
mov edi, dword [var_b0h]
xor dword [var_f0h], edi
lea esi, [edx + esi - 0x359d3e2a]
rol ecx, 0x1e
mov edx, ebx
rol dword [var_f0h], 1
xor edx, ecx
mov eax, dword [var_f0h]
xor edx, dword [var_10h]
mov dword [0x804ca64], eax
add edx, eax
mov eax, esi
rol eax, 5
mov edi, dword [var_14h]
add edx, eax
lea edi, [edx + edi - 0x359d3e2a]
mov eax, dword [var_e8h]
mov dword [var_f4h], eax
mov dword [var_14h], edi
mov edi, dword [var_d4h]
xor dword [var_f4h], edi
mov eax, dword [var_bch]
rol ebx, 0x1e
mov edx, esi
xor dword [var_f4h], eax
mov edi, dword [var_b4h]
xor edx, ebx
xor dword [var_f4h], edi
xor edx, ecx
rol dword [var_f4h], 1
mov eax, dword [var_f4h]
mov dword [0x804ca68], eax
add edx, eax
mov eax, dword [var_14h]
rol eax, 5
mov edi, dword [var_10h]
add edx, eax
lea edi, [edx + edi - 0x359d3e2a]
mov eax, dword [var_ech]
mov dword [var_f8h], eax
mov dword [var_10h], edi
mov edi, dword [var_d8h]
xor dword [var_f8h], edi
mov eax, dword [var_c0h]
xor dword [var_f8h], eax
mov edi, dword [var_b8h]
xor dword [var_f8h], edi
mov edx, dword [var_14h]
rol esi, 0x1e
rol dword [var_f8h], 1
xor edx, esi
mov eax, dword [var_f8h]
xor edx, ebx
mov dword [0x804ca6c], eax
add edx, eax
mov eax, dword [var_10h]
rol eax, 5
mov edi, dword [var_f0h]
add edx, eax
lea ecx, [edx + ecx - 0x359d3e2a]
mov dword [var_fch], edi
mov eax, dword [var_dch]
rol dword [var_14h], 0x1e
mov edx, dword [var_10h]
mov edi, dword [var_c4h]
xor edx, dword [var_14h]
xor dword [var_fch], eax
xor dword [var_fch], edi
mov eax, dword [var_bch]
xor dword [var_fch], eax
rol dword [var_fch], 1
mov edi, dword [var_fch]
xor edx, esi
mov eax, ecx
add edx, edi
rol eax, 5
add edx, eax
mov eax, dword [var_f4h]
mov dword [var_100h], eax
mov dword [0x804ca70], edi
mov edi, dword [var_e0h]
xor dword [var_100h], edi
mov eax, dword [var_c8h]
xor dword [var_100h], eax
mov edi, dword [var_c0h]
xor dword [var_100h], edi
lea ebx, [edx + ebx - 0x359d3e2a]
rol dword [var_10h], 0x1e
mov edx, ecx
xor edx, dword [var_10h]
rol dword [var_100h], 1
mov eax, dword [var_100h]
xor edx, dword [var_14h]
mov dword [0x804ca74], eax
add edx, eax
mov eax, ebx
rol eax, 5
add edx, eax
lea esi, [edx + esi - 0x359d3e2a]
mov edi, dword [var_f8h]
rol ecx, 0x1e
mov edx, ebx
mov dword [var_104h], edi
mov eax, dword [var_e4h]
mov edi, dword [var_cch]
xor edx, ecx
xor edx, dword [var_10h]
xor dword [var_104h], eax
xor dword [var_104h], edi
mov eax, dword [var_c4h]
xor dword [var_104h], eax
rol dword [var_104h], 1
mov edi, dword [var_104h]
mov eax, esi
add edx, edi
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
lea eax, [edx + eax - 0x359d3e2a]
mov dword [0x804ca78], edi
mov edi, dword [var_fch]
mov dword [var_108h], edi
mov dword [var_14h], eax
mov eax, dword [var_e8h]
xor dword [var_108h], eax
mov edi, dword [var_d0h]
xor dword [var_108h], edi
mov eax, dword [var_c8h]
xor dword [var_108h], eax
rol ebx, 0x1e
mov edx, esi
rol dword [var_108h], 1
xor edx, ebx
mov edi, dword [var_108h]
mov eax, dword [var_14h]
xor edx, ecx
add edx, edi
rol eax, 5
add edx, eax
mov eax, dword [var_10h]
lea eax, [edx + eax - 0x359d3e2a]
mov dword [0x804ca7c], edi
mov edi, dword [var_100h]
mov dword [var_10ch], edi
mov dword [var_10h], eax
mov edi, dword [var_d4h]
mov eax, dword [var_ech]
mov edx, dword [var_14h]
xor dword [var_10ch], eax
xor dword [var_10ch], edi
mov eax, dword [var_cch]
xor dword [var_10ch], eax
rol esi, 0x1e
rol dword [var_10ch], 1
xor edx, esi
mov edi, dword [var_10ch]
mov eax, dword [var_10h]
xor edx, ebx
add edx, edi
rol eax, 5
add edx, eax
mov eax, dword [var_104h]
mov dword [var_110h], eax
mov dword [0x804ca80], edi
mov edi, dword [var_f0h]
xor dword [var_110h], edi
mov eax, dword [var_d8h]
xor dword [var_110h], eax
mov edi, dword [var_d0h]
xor dword [var_110h], edi
lea ecx, [edx + ecx - 0x359d3e2a]
rol dword [var_14h], 0x1e
mov edx, dword [var_10h]
xor edx, dword [var_14h]
rol dword [var_110h], 1
mov eax, dword [var_110h]
xor edx, esi
mov dword [0x804ca84], eax
add edx, eax
mov eax, ecx
mov edi, dword [var_108h]
rol eax, 5
add edx, eax
xor edi, dword [var_f4h]
lea ebx, [edx + ebx - 0x359d3e2a]
rol dword [var_10h], 0x1e
xor edi, dword [var_dch]
mov edx, ecx
xor edx, dword [var_10h]
xor edi, dword [var_d4h]
xor edx, dword [var_14h]
rol edi, 1
mov eax, ebx
add edx, edi
rol eax, 5
mov dword [0x804ca88], edi
add edx, eax
mov eax, dword [var_10ch]
xor eax, dword [var_f8h]
mov dword [var_114h], eax
mov eax, dword [var_e0h]
xor dword [var_114h], eax
mov eax, dword [var_d8h]
lea esi, [edx + esi - 0x359d3e2a]
xor dword [var_114h], eax
rol ecx, 0x1e
mov edx, ebx
rol dword [var_114h], 1
xor edx, ecx
mov eax, dword [var_114h]
xor edx, dword [var_10h]
mov dword [0x804ca8c], eax
add edx, eax
mov eax, esi
rol eax, 5
add edx, eax
mov eax, dword [var_14h]
lea eax, [edx + eax - 0x359d3e2a]
mov dword [var_14h], eax
mov eax, dword [var_110h]
xor eax, dword [var_fch]
mov dword [var_118h], eax
mov eax, dword [var_e4h]
xor dword [var_118h], eax
mov eax, dword [var_dch]
xor dword [var_118h], eax
rol ebx, 0x1e
mov edx, esi
rol dword [var_118h], 1
xor edx, ebx
mov eax, dword [var_118h]
xor edx, ecx
mov dword [0x804ca90], eax
add edx, eax
mov eax, dword [var_14h]
rol eax, 5
add edx, eax
mov eax, dword [var_10h]
lea eax, [edx + eax - 0x359d3e2a]
mov dword [var_10h], eax
xor edi, dword [var_100h]
mov eax, dword [var_e8h]
xor edi, eax
mov eax, dword [var_e0h]
rol esi, 0x1e
mov edx, dword [var_14h]
xor edi, eax
rol edi, 1
xor edx, esi
mov dword [var_11ch], edi
xor edx, ebx
mov eax, dword [var_10h]
mov dword [0x804ca94], edi
add edx, edi
rol eax, 5
mov edi, dword [var_114h]
xor edi, dword [var_104h]
add edx, eax
mov eax, dword [var_ech]
rol dword [var_14h], 0x1e
lea ecx, [edx + ecx - 0x359d3e2a]
xor edi, eax
mov edx, dword [var_10h]
mov eax, dword [var_e4h]
xor edx, dword [var_14h]
xor edi, eax
rol edi, 1
xor edx, esi
mov eax, ecx
mov dword [var_120h], edi
mov dword [0x804ca98], edi
add edx, edi
rol eax, 5
mov edi, dword [var_118h]
xor edi, dword [var_108h]
add edx, eax
mov eax, dword [var_f0h]
rol dword [var_10h], 0x1e
lea ebx, [edx + ebx - 0x359d3e2a]
xor edi, eax
mov edx, ecx
mov eax, dword [var_e8h]
xor edx, dword [var_10h]
xor edi, eax
xor edx, dword [var_14h]
rol edi, 1
mov eax, ebx
add edx, edi
rol eax, 5
add edx, eax
mov dword [var_124h], edi
mov dword [0x804ca9c], edi
lea esi, [edx + esi - 0x359d3e2a]
rol ecx, 0x1e
mov edx, dword [arg_8h]
add dword [edx + 4], ebx
add dword [edx], esi
add dword [edx + 8], ecx
mov ecx, dword [var_10h]
add dword [edx + 0xc], ecx
mov esi, dword [var_14h]
add dword [edx + 0x10], esi
add esp, 0x118
pop ebx
pop esi
pop edi
pop ebp
ret
pop ebx
add ebx, 0x1566
lea esi, [esi]
call fcn.08048bd0
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov edx, dword [0x804c860]
test edx, edx
jne 0x8048c29
mov edx, dword [0x804c85c]
mov eax, dword [edx]
test eax, eax
je 0x8048c06
lea esi, [esi]
lea eax, [edx + 4]
mov dword [0x804c85c], eax
call dword [edx]
mov edx, dword [0x804c85c]
mov ecx, dword [edx]
test ecx, ecx
jne 0x8048bf0
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x8048c1f
sub esp, 0xc
push section..eh_frame
call sym.imp.__deregister_frame_info
add esp, 0x10
mov eax, 1
mov dword [0x804c860], eax
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
call fcn.08048ba4
nop
call fcn.08048c40
call fcn.0804b3c0
leave
ret
push ebp
mov ebp, esp
push ebx
push eax
call fcn.08048bae
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov dword [0x804c888], 1
mov dword [arg_8h], 0
leave
jmp sym.imp.alarm
push ebp
mov ebp, esp
sub esp, 8
mov dword [arg_8h], 1
leave
jmp sym.imp.exit
push ebp
mov ebp, esp
sub esp, 8
mov dword [arg_8h], 0
leave
jmp sym.imp.wait
push ebp
mov ebp, esp
push ebx
sub esp, 8
mov ebx, dword [arg_8h]
push 0x804cae0
push 2
push 0
call sym.imp.tcsetattr
add esp, 0xc
push ebx
push str.Got_signal__d__exiting..._n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
mov dword [arg_8h], 0
mov ebx, dword [var_4h]
leave
jmp sym.imp.exit
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
xor edi, edi
cmp edi, dword [arg_10h]
mov esi, dword [arg_14h]
jge 0x804b295
lea eax, [var_dh]
mov dword [var_14h], eax
lea esi, [esi]
mov ecx, dword [arg_ch]
mov dl, byte [ecx]
mov ecx, dword [esi + 0x14]
mov al, byte [ecx + esi]
mov bl, dl
xor ebx, eax
add eax, edx
mov byte [ecx + esi], al
mov eax, dword [esi + 0x14]
inc eax
cmp eax, 0x14
mov dword [esi + 0x14], eax
jne 0x804b26c
push eax
push esi
push 0x14
push esi
call fcn.0804b0e8
add esp, 0x10
mov dword [esi + 0x14], 0
mov byte [var_dh], bl
mov eax, 4
mov ebx, dword [arg_8h]
mov ecx, dword [var_14h]
mov edx, 1
int 0x80
test eax, eax
jns 0x804b28c
mov eax, 0xffffffff
jmp 0x804b297
inc edi
inc dword [arg_ch]
cmp edi, dword [arg_10h]
jl 0x804b238
mov eax, edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
xor edi, edi
cmp edi, dword [arg_10h]
mov esi, dword [arg_14h]
jge 0x804b31b
lea eax, [var_dh]
mov dword [var_14h], eax
lea esi, [esi]
mov eax, 3
mov ebx, dword [arg_8h]
mov ecx, dword [var_14h]
mov edx, 1
int 0x80
test eax, eax
jns 0x804b2dc
mov eax, 0xffffffff
jmp 0x804b31d
lea esi, [esi]
mov eax, dword [esi + 0x14]
mov dl, byte [eax + esi]
mov bl, dl
xor bl, byte [var_dh]
add edx, ebx
mov byte [eax + esi], dl
mov eax, dword [esi + 0x14]
inc eax
cmp eax, 0x14
mov dword [esi + 0x14], eax
jne 0x804b30c
push edx
push esi
push 0x14
push esi
call fcn.0804b0e8
add esp, 0x10
mov dword [esi + 0x14], 0
mov eax, dword [arg_ch]
mov byte [eax], bl
inc edi
inc eax
cmp edi, dword [arg_10h]
mov dword [arg_ch], eax
jl 0x804b2bc
mov eax, edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
mov dl, byte [arg_ch]
mov ecx, dword [ebx + 0x14]
mov al, byte [ecx + ebx]
mov esi, edx
xor esi, eax
add eax, edx
mov byte [ecx + ebx], al
mov eax, dword [ebx + 0x14]
inc eax
cmp eax, 0x14
mov dword [ebx + 0x14], eax
jne 0x804b362
push ecx
push ebx
push 0x14
push ebx
call fcn.0804b0e8
add esp, 0x10
mov dword [ebx + 0x14], 0
lea esp, [var_8h]
mov edx, esi
pop ebx
movzx eax, dl
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
mov eax, dword [ebx + 0x14]
mov dl, byte [eax + ebx]
mov esi, edx
mov cl, byte [arg_ch]
xor esi, ecx
add edx, esi
mov byte [eax + ebx], dl
mov eax, dword [ebx + 0x14]
inc eax
cmp eax, 0x14
mov dword [ebx + 0x14], eax
jne 0x804b3aa
push eax
push ebx
push 0x14
push ebx
call fcn.0804b0e8
add esp, 0x10
mov dword [ebx + 0x14], 0
lea esp, [var_8h]
mov edx, esi
pop ebx
movzx eax, dl
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
push edx
call fcn.0804b40a
