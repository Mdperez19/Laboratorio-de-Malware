mov eax, section..text
pushal
call fcn.0805baad
popal
jmp eax
push ebp
mov ebp, esp
sub esp, 0x44
push edi
push esi
mov dword [var_4h], 0
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov dword [var_ch], eax
mov dword [var_8h], edx
mov edx, dword [arg_10h]
mov ecx, dword [arg_14h]
mov dword [var_14h], edx
mov dword [var_10h], ecx
cmp dword [var_8h], 0
jge 0x8054387
mov dword [var_4h], 0xffffffff
mov ecx, dword [var_ch]
neg ecx
mov dword [var_3ch], ecx
mov esi, ecx
mov eax, dword [var_8h]
neg eax
mov dword [var_44h], eax
test ecx, ecx
je 0x805437e
dec eax
mov dword [var_44h], eax
mov edi, dword [var_44h]
mov dword [var_ch], esi
mov dword [var_8h], edi
cmp dword [arg_14h], 0
jge 0x80543b1
not dword [var_4h]
mov eax, dword [arg_10h]
neg eax
mov dword [var_1ch], eax
mov esi, dword [arg_14h]
neg esi
test eax, eax
je 0x80543a2
dec esi
mov dword [var_18h], esi
mov edx, dword [var_1ch]
mov ecx, dword [var_18h]
mov dword [var_14h], edx
mov dword [var_10h], ecx
mov edi, dword [var_14h]
mov ecx, dword [var_10h]
mov dword [var_44h], ecx
mov eax, dword [var_ch]
mov dword [var_20h], eax
mov esi, dword [var_8h]
test ecx, ecx
jne 0x8054400
cmp edi, esi
jbe 0x80543d7
mov edx, esi
div edi
mov dword [var_3ch], eax
jmp 0x80544a0
cmp dword [var_14h], 0
jne 0x80543e8
mov eax, 1
xor edx, edx
div edi
mov edi, eax
mov eax, esi
xor edx, edx
div edi
mov dword [var_44h], eax
mov esi, edx
mov eax, dword [var_20h]
div edi
mov dword [var_3ch], eax
jmp 0x80544a7
cmp dword [var_44h], esi
jbe 0x8054411
mov dword [var_3ch], 0
jmp 0x80544a0
bsr edx, dword [var_44h]
xor edx, 0x1f
mov dword [var_40h], edx
jne 0x8054430
cmp esi, dword [var_44h]
ja 0x8054427
cmp dword [var_20h], edi
jb 0x8054405
mov dword [var_3ch], 1
jmp 0x80544a0
mov dword [var_24h], 0x20
mov ecx, dword [var_40h]
sub dword [var_24h], ecx
mov eax, dword [var_44h]
shl eax, cl
mov dword [var_44h], edi
mov ecx, dword [var_24h]
shr dword [var_44h], cl
mov edx, dword [var_44h]
or eax, edx
mov dword [var_3ch], eax
mov ecx, dword [var_40h]
shl edi, cl
mov dword [var_28h], esi
mov ecx, dword [var_24h]
shr dword [var_28h], cl
mov ecx, dword [var_40h]
shl esi, cl
mov eax, dword [var_20h]
mov dword [var_44h], eax
mov ecx, dword [var_24h]
shr dword [var_44h], cl
or esi, dword [var_44h]
mov ecx, dword [var_40h]
shl eax, cl
mov dword [var_20h], eax
mov eax, esi
mov edx, dword [var_28h]
div dword [var_3ch]
mov dword [var_3ch], eax
mov dword [var_44h], edx
mul edi
mov esi, eax
mov edi, edx
cmp edi, dword [var_44h]
ja 0x805449d
jne 0x80544a0
cmp esi, dword [var_20h]
jbe 0x80544a0
dec dword [var_3ch]
mov dword [var_44h], 0
mov ecx, dword [var_3ch]
mov dword [var_30h], ecx
mov eax, dword [var_44h]
mov dword [var_2ch], eax
mov esi, dword [var_30h]
mov edi, dword [var_2ch]
cmp dword [var_4h], 0
je 0x80544d8
mov eax, esi
neg eax
mov dword [var_38h], eax
mov esi, edi
neg esi
test eax, eax
je 0x80544cf
dec esi
mov dword [var_34h], esi
mov esi, dword [var_38h]
mov edi, dword [var_34h]
mov eax, esi
mov edx, edi
lea esp, [var_4ch]
pop esi
pop edi
leave
ret
jmp dword [reloc.strcpy]
jmp dword [reloc.ioctl]
jmp dword [reloc.getgid]
jmp dword [reloc.printf]
jmp dword [reloc.geteuid]
jmp dword [reloc.snprintf]
jmp dword [reloc.munmap]
jmp dword [reloc.getgrgid]
jmp dword [reloc.getenv]
jmp dword [reloc.getegid]
jmp dword [reloc.__strtol_internal]
jmp dword [reloc.bsearch]
jmp dword [reloc.getpid]
jmp dword [reloc.getpagesize]
jmp dword [reloc.qsort]
jmp dword [reloc.fscanf]
jmp dword [reloc.fgets]
jmp dword [reloc.memcpy]
jmp dword [reloc.perror]
jmp dword [reloc.readlink]
jmp dword [reloc.getuid]
jmp dword [reloc.feof]
jmp dword [reloc.malloc]
jmp dword [reloc.readdir]
jmp dword [reloc.lseek]
jmp dword [reloc.mmap]
jmp dword [reloc.uname]
jmp dword [reloc.strrchr]
jmp dword [reloc.calloc]
jmp dword [reloc.fprintf]
jmp dword [reloc.ctime]
jmp dword [reloc.strcat]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.strstr]
jmp dword [reloc.read]
jmp dword [reloc.strncmp]
jmp dword [reloc.strncpy]
jmp dword [reloc.strcasecmp]
jmp dword [reloc.realloc]
jmp dword [reloc.__strdup]
jmp dword [reloc.sigfillset]
jmp dword [reloc.sscanf]
jmp dword [reloc.sigaction]
jmp dword [reloc.index]
jmp dword [reloc.localtime]
jmp dword [reloc.memset]
jmp dword [reloc.time]
jmp dword [reloc.opendir]
jmp dword [reloc.strcmp]
jmp dword [reloc.getpwuid]
jmp dword [reloc.getpwnam]
jmp dword [reloc.fgetc]
jmp dword [reloc.sprintf]
jmp dword [reloc.fclose]
jmp dword [reloc.strftime]
jmp dword [reloc.__xstat]
jmp dword [reloc.exit]
jmp dword [reloc.__fxstat]
jmp dword [reloc.getgrnam]
jmp dword [reloc.fopen]
jmp dword [reloc._exit]
jmp dword [reloc.strspn]
jmp dword [reloc.__libc_start_main]
jmp dword [reloc.open]
jmp dword [reloc.strchr]
jmp dword [reloc.fputs]
jmp dword [reloc.closedir]
jmp dword [reloc.__register_frame_info]
jmp dword [reloc.close]
jmp dword [reloc.vfprintf]
jmp dword [reloc.strpbrk]
jmp dword [reloc.free]
pop ebx
add ebx, 0x135bb
cmp dword [ebx + 0x12c], 0
je 0x8048e7e
call loc.imp.__gmon_start__
mov esi, esi
call fcn.080493a0
call fcn.080544f0
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x80493bb
push 0x805c60c
push section..eh_frame
call sym.imp.__register_frame_info
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, 0x805c414
cmp dword [0x805c414], 0xffffffff
je 0x805450e
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x8054502
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push str.procps_version_2.0.7
push 0x805aea0
push dword [obj.stdout]
call sym.imp.fprintf
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
call sym.imp.getpid
push eax
push str._proc__d
push 0x8149120
call sym.imp.sprintf
add esp, 0xc
push str.stat
push 0x8149120
push str._s__s
push 0x8148ba0
call sym.imp.sprintf
push 0
push 0
push 0x8148ba0
call sym.imp.open
mov esi, eax
add esp, 0x1c
cmp esi, 0xffffffff
je 0x8052db4
push 0x1ff
push 0x8149140
push esi
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x8052d92
mov ebx, 0xffffffff
jmp 0x8052d99
mov byte [ebx + 0x8149140], 0
push esi
call sym.imp.close
add esp, 4
test ebx, ebx
jl 0x8052db4
push edi
push 0x8149140
call fcn.0805208c
add esp, 8
push str.statm
push 0x8149120
push str._s__s
push 0x8148ba0
call sym.imp.sprintf
push 0
push 0
push 0x8148ba0
call sym.imp.open
mov esi, eax
add esp, 0x1c
cmp esi, 0xffffffff
je 0x8052e59
push 0x1ff
push 0x8149140
push esi
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x8052e05
mov ebx, 0xffffffff
jmp 0x8052e0c
mov byte [ebx + 0x8149140], 0
push esi
call sym.imp.close
add esp, 4
test ebx, ebx
jl 0x8052e59
lea eax, [edi + 0x94]
push eax
lea eax, [edi + 0x90]
push eax
lea eax, [edi + 0x8c]
push eax
lea eax, [edi + 0x88]
push eax
lea eax, [edi + 0x84]
push eax
lea eax, [edi + 0x80]
push eax
lea eax, [edi + 0x7c]
push eax
push str._ld__ld__ld__ld__ld__ld__ld
push 0x8149140
call sym.imp.sscanf
add esp, 0x24
push str.status
push 0x8149120
push str._s__s
push 0x8148ba0
call sym.imp.sprintf
push 0
push 0
push 0x8148ba0
call sym.imp.open
mov esi, eax
add esp, 0x1c
cmp esi, 0xffffffff
je 0x8052ed1
push 0x1ff
push 0x8149140
push esi
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x8052eb0
mov ebx, 0xffffffff
jmp 0x8052eb7
lea esi, [esi]
mov byte [ebx + 0x8149140], 0
push esi
call sym.imp.close
add esp, 4
test ebx, ebx
jl 0x8052ed1
push 0
push edi
push 0x8149140
call fcn.08051e30
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push ebx
lea ebx, [var_8h]
push ebx
push 0x5413
push 1
call sym.imp.ioctl
add esp, 0xc
cmp eax, 0xffffffff
je 0x80496f3
mov ax, word [ebx + 2]
test ax, ax
je 0x80496f3
cmp word [var_8h], 0
je 0x80496f3
movzx eax, word [ebx + 2]
mov dword [0x805c104], eax
movzx eax, word [var_8h]
mov dword [0x805c108], eax
jmp 0x8049707
mov dword [0x805c104], 0x50
mov dword [0x805c108], 0x18
push str.COLUMNS
call sym.imp.getenv
mov edx, eax
add esp, 4
test edx, edx
je 0x804974c
cmp byte [edx], 0
je 0x804974c
lea eax, [var_ch]
push 0
push 0
push eax
push edx
call sym.imp.__strtol_internal
mov edx, eax
add esp, 0x10
mov eax, dword [var_ch]
cmp byte [eax], 0
jne 0x804974c
test edx, edx
jle 0x804974c
cmp edx, 0xc7fff
jg 0x804974c
mov dword [0x805c104], edx
push str.LINES
call sym.imp.getenv
mov edx, eax
add esp, 4
test edx, edx
je 0x8049791
cmp byte [edx], 0
je 0x8049791
lea eax, [var_10h]
push 0
push 0
push eax
push edx
call sym.imp.__strtol_internal
mov edx, eax
add esp, 0x10
mov eax, dword [var_10h]
cmp byte [eax], 0
jne 0x8049791
test edx, edx
jle 0x8049791
cmp edx, 0xc7fff
jg 0x8049791
mov dword [0x805c108], edx
mov eax, dword [0x805c104]
cmp eax, 8
jle 0x80497a4
cmp dword [0x805c108], 1
jg 0x80497bb
push dword [0x805c108]
push eax
push str.Your__dx_d_screen_size_is_bogus._Expect_trouble._n
push dword [obj.stderr]
call sym.imp.fprintf
mov ebx, dword [var_14h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x20
push edi
push esi
push ebx
lea esi, [var_10h]
mov dword [var_18h], esi
lea eax, [var_18h]
mov dword [key], eax
mov dword [eax + 4], 0
mov dword [obj.personality], 0
mov dword [0x805c100], 0
mov dword [0x805c0a0], 0x8054a43
mov dword [0x805c0a4], 0x8054a48
mov dword [0x805c0a8], 0x8054a4d
mov dword [0x805c0ac], 0x8054a52
mov dword [0x805c0b0], 0x8054a57
mov dword [0x805c118], 0
mov dword [0x805c11c], 0
mov dword [0x805c120], 0
mov dword [0x805c124], 0
push str.PS_PERSONALITY
call sym.imp.getenv
mov ebx, eax
add esp, 4
test ebx, ebx
je 0x8049862
cmp byte [ebx], 0
jne 0x8049871
push str.CMD_ENV
call sym.imp.getenv
mov ebx, eax
add esp, 4
test ebx, ebx
je 0x804987a
cmp byte [ebx], 0
jne 0x804987f
mov ebx, 0x80549c4
push str.I_WANT_A_BROKEN_PS
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x8049895
mov ebx, 0x8054a02
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea edi, [ecx - 1]
cmp edi, 0xf
ja 0x80498ee
push edi
push ebx
push esi
call sym.imp.strncpy
add esp, 0xc
mov byte [edi + esi], 0
lea eax, [var_10h]
push eax
call sym.imp.__strdup
add esp, 4
mov edx, eax
mov dword [0x805c098], edx
push fcn.08049e00
push 8
push 0x16
push 0x8054914
mov eax, dword [key]
push eax
call sym.imp.bsearch
mov edx, eax
add esp, 0x14
test edx, edx
jne 0x80498f8
mov eax, str.Environment_specified_an_unknown_personality.
jmp 0x8049b3c
jmp dword [edx + 4]
nop
lea esi, [esi]
mov dword [obj.personality], 0x16
mov dword [0x805c100], 1
mov dword [0x805c0a0], 0x8054ace
mov dword [0x805c0a4], 0x8054ad3
mov dword [0x805c0ac], 0x8054ad8
mov dword [0x805c0b0], 0x8054add
jmp 0x8049b3a
mov dword [obj.personality], 0x50
mov dword [0x805c100], 1
jmp 0x8049b3a
lea esi, [esi]
mov dword [obj.personality], 0x28
mov dword [0x805c100], 1
mov dword [0x805c118], 0x8054ae2
mov dword [0x805c120], 0x8054ae7
mov dword [0x805c124], 0x8054aec
jmp 0x8049b3a
mov dword [obj.personality], 0x320
jmp 0x8049b3a
push str.UNIX95
call sym.imp.getenv
add esp, 4
test eax, eax
jne 0x8049b30
push str.POSIXLY_CORRECT
call sym.imp.getenv
add esp, 4
test eax, eax
jne 0x8049b30
push str.POSIX2
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x8049b3a
push str.POSIX2
call sym.imp.getenv
add esp, 4
mov edx, eax
movzx eax, byte [edx]
lea ecx, [eax - 0x6f]
test ecx, ecx
jne 0x8049a0d
movzx eax, byte [edx + 1]
lea ecx, [eax - 0x6e]
test ecx, ecx
jne 0x8049a0d
movzx ecx, byte [edx + 2]
test ecx, ecx
jne 0x8049b3a
jmp 0x8049b30
lea esi, [esi]
mov dword [0x805c0a0], 0x8054ace
mov dword [0x805c0a4], 0x8054ad3
mov dword [0x805c0ac], 0x8054ad8
mov dword [0x805c0b0], 0x8054add
jmp 0x8049b3a
lea esi, [esi]
mov dword [obj.personality], 0x22
mov dword [0x805c100], 1
mov dword [0x805c118], 0x8054b12
mov dword [0x805c11c], 0x8054b18
mov dword [0x805c120], 0x8054b1f
mov dword [0x805c124], 0x8054b24
mov dword [0x805c0a0], 0x8054b1f
mov dword [0x805c0a4], 0x8054b2a
mov dword [0x805c0a8], 0x8054b2f
mov dword [0x805c0ac], 0x8054b34
mov dword [0x805c0b0], 0x8054b39
jmp 0x8049b3a
mov dword [obj.personality], 0x80
mov dword [0x805c100], 1
mov dword [0x805c0a0], 0x8054ace
mov dword [0x805c0a4], 0x8054ad3
mov dword [0x805c0ac], 0x8054ad8
mov dword [0x805c0b0], 0x8054add
jmp 0x8049b3a
mov esi, esi
push str._XPG
call sym.imp.getenv
mov ebx, eax
add esp, 4
test ebx, ebx
je 0x8049b1f
mov dl, byte [ebx]
cmp dl, 0x30
jle 0x8049b1f
cmp dl, 0x39
jle 0x8049b30
mov dword [obj.personality], 0x400
jmp 0x8049b3a
nop
lea esi, [esi]
mov dword [obj.personality], 1
xor eax, eax
lea esp, [var_2ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [0x805c10c]
jmp 0x804a127
mov eax, 1
jmp 0x804a131
nop
lea esi, [esi]
mov eax, dword [esi + 0xc]
dec eax
cmp eax, 0xc
ja case.default.0x8049e49
jmp dword [eax*4 + 0x80553b0]
push str.Internal_error_in_ps__Please_report_this_bug._n
call sym.imp.printf
add esp, 4
jmp 0x804a125
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1a0]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x8049e83
jmp 0x804a125
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1a8]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x8049eb6
jmp 0x804a125
lea esi, [esi]
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1b0]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x8049ef1
jmp 0x804a125
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1b8]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x8049f28
jmp 0x804a125
mov esi, esi
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1a4]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x8049f61
jmp 0x804a125
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1ac]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x8049f98
jmp 0x804a125
mov esi, esi
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1b4]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x8049fd1
jmp 0x804a125
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1bc]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x804a008
jmp 0x804a125
mov esi, esi
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1c8]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x804a041
jmp 0x804a125
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1c0]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x804a078
jmp 0x804a125
mov esi, esi
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1d0]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x804a0b1
jmp 0x804a125
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov ecx, dword [arg_8h]
mov dx, word [ecx + 0x1cc]
lea eax, [ebx*8]
add eax, dword [esi + 4]
cmp dx, word [eax]
je 0x8049e31
add eax, 0xfffffff8
sub ebx, 1
jae 0x804a0e1
jmp 0x804a125
mov ebx, dword [esi + 8]
dec ebx
cmp ebx, 0xffffffff
je 0x804a125
mov edi, dword [arg_8h]
add edi, 0x190
push 8
mov eax, dword [esi + 4]
lea eax, [eax + ebx*8]
push eax
push edi
call sym.imp.strncmp
add esp, 0xc
test eax, eax
je 0x8049e31
sub ebx, 1
jae 0x804a106
mov esi, dword [esi]
test esi, esi
jne 0x8049e40
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x20
mov eax, dword [arg_8h]
mov dword [key], eax
push fcn.0804c0f0
push 0x20
push 0xcc
push 0x8055b58
lea eax, [key]
push eax
call sym.imp.bsearch
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [arg_8h]
mov dword [key], eax
push fcn.0804c104
push 8
push 0x30
push 0x8057cd4
lea eax, [key]
push eax
call sym.imp.bsearch
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
push ebx
call fcn.0804c608
mov esi, eax
add esp, 4
test esi, esi
je 0x804a380
push 0x20
call sym.imp.malloc
mov ebx, eax
mov edx, dword [esi + 0x10]
add esp, 4
cmp dword [arg_ch], 0
je 0x804a330
mov edi, dword [arg_ch]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, edx
jge 0x804a30a
mov ecx, edx
mov dword [ebx + 0xc], ecx
mov edi, dword [arg_ch]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
push ecx
call sym.imp.malloc
mov edx, eax
mov dword [ebx + 4], edx
add esp, 4
mov eax, dword [arg_ch]
push eax
jmp 0x804a353
mov dword [ebx + 0xc], edx
mov edi, dword [esi + 4]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
push ecx
call sym.imp.malloc
mov edx, eax
mov dword [ebx + 4], edx
add esp, 4
push dword [esi + 4]
push edx
call sym.imp.strcpy
mov eax, dword [esi + 8]
mov dword [ebx + 8], eax
mov eax, dword [esi + 0x14]
mov dword [ebx + 0x10], eax
mov eax, dword [esi + 0x18]
mov dword [ebx + 0x14], eax
mov eax, dword [esi + 0x1c]
mov dword [ebx + 0x18], eax
mov dword [ebx], 0
mov eax, ebx
jmp 0x804a418
mov esi, esi
push ebx
call fcn.0804c630
mov edx, eax
add esp, 4
test edx, edx
je 0x804a400
mov dword [var_14h], 0
mov ebx, dword [edx + 4]
mov dl, byte [ebx]
test dl, dl
je 0x804a3f8
lea edi, [var_10h]
xor esi, esi
test dl, dl
je 0x804a3c2
cmp dl, 0x2c
je 0x804a3c2
mov edx, ebx
nop
cmp byte [edx], 0x20
je 0x804a3c2
inc edx
inc esi
mov cl, byte [edx]
test cl, cl
je 0x804a3c2
cmp cl, 0x2c
jne 0x804a3b0
push esi
push ebx
push edi
call sym.imp.strncpy
add esp, 0xc
mov byte [esi + edi], 0
mov eax, dword [arg_ch]
push eax
push edi
call fcn.0804a2c0
mov edx, eax
mov eax, dword [var_14h]
mov dword [edx], eax
mov dword [var_14h], edx
add ebx, esi
add esp, 8
cmp byte [ebx], 0
je 0x804a3f8
inc ebx
mov al, byte [ebx]
mov dl, al
test dl, dl
jne 0x804a3a2
mov eax, dword [var_14h]
jmp 0x804a418
lea esi, [esi]
push ebx
push str.spec_value__s_not_found_n
push dword [obj.stderr]
call sym.imp.fprintf
push 1
call sym.imp._exit
lea esp, [var_20h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, 0x8058b14
cmp dword [0x8058b14], 0x7e
je 0x804c5e0
cmp dword [eax], edx
je 0x804c5e2
add eax, 0xc
cmp dword [eax], 0x7e
jne 0x804c5d4
xor eax, eax
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, 0x8058bd8
cmp dword [0x8058bd8], 0x7e
je 0x804c604
cmp dword [eax], edx
je 0x804c606
add eax, 8
cmp dword [eax], 0x7e
jne 0x804c5f8
xor eax, eax
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov eax, dword [edi]
test eax, eax
je 0x804aaea
push eax
call fcn.0804aac8
mov esi, eax
add esp, 4
test esi, esi
jne 0x804adf2
mov eax, dword [edi + 0x10]
dec eax
cmp eax, 6
ja case.default.0x804aaf7
jmp dword [eax*4 + 0x8055824]
mov esi, esi
push edi
call fcn.0804a420
mov esi, eax
add esp, 4
test esi, esi
je 0x804ab30
push 0x25
push dword [edi + 0xc]
call sym.imp.strchr
add esp, 8
test eax, eax
je 0x804ab28
push edi
call fcn.0804a58c
mov esi, eax
test esi, esi
jne 0x804adf0
mov dword [0x805c150], 1
jmp 0x804adf0
nop
cmp dword [0x805c150], 0
je 0x804ab53
mov eax, str.option__O_can_not_follow_other_format_options.
jmp 0x804adf2
push edi
call fcn.0804a420
mov esi, eax
add esp, 4
test esi, esi
je 0x804ab90
push 0x25
push dword [edi + 0xc]
call sym.imp.strchr
add esp, 8
test eax, eax
je 0x804ab7e
push edi
call fcn.0804a58c
mov esi, eax
add esp, 4
test esi, esi
je 0x804ab90
mov eax, esi
jmp 0x804adf2
lea esi, [esi]
mov dword [0x805c150], 1
push 0
push 0x805546d
call fcn.0804a2c0
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804abc2
push str.Seriously_crashing._Goodbye_cruel_world._n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
mov edx, dword [edi + 4]
jmp 0x804abc9
mov edx, eax
mov eax, dword [edx]
test eax, eax
jne 0x804abc7
mov dword [edx], ebx
push 0
push 0x8055464
call fcn.0804a2c0
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804abf6
push str.Seriously_crashing._Goodbye_cruel_world._n
push dword [obj.stderr]
call sym.imp.fprintf
mov edx, ebx
cmp dword [ebx], 0
je 0x804ac07
lea esi, [esi]
mov edx, dword [edx]
cmp dword [edx], 0
jne 0x804ac00
mov eax, dword [edi + 4]
mov dword [edx], eax
mov dword [edi + 4], ebx
jmp 0x804adf0
cmp dword [0x805c148], 0
jne 0x804ac26
cmp dword [0x805c14c], 0
je 0x804ac30
mov esi, str.Multiple_sort_options.
jmp 0x804ac3d
lea esi, [esi]
push dword [edi + 0xc]
call fcn.0804a8c0
mov esi, eax
add esp, 4
test esi, esi
jne 0x804ac58
push edi
call fcn.0804a9ec
mov dword [0x805c14c], 1
xor eax, eax
jmp 0x804adf2
cmp dword [0x805c150], 0
je 0x804ac70
mov esi, str.option_O_is_neither_first_format_nor_sort_order.
jmp 0x804adf0
nop
lea esi, [esi]
push edi
call fcn.0804a420
mov ebx, eax
add esp, 4
test ebx, ebx
jne 0x804ad10
mov dword [0x805c150], 1
push 0
push 0x805546d
call fcn.0804a2c0
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804acb5
push str.Seriously_crashing._Goodbye_cruel_world._n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
mov edx, dword [edi + 4]
jmp 0x804acc2
lea esi, [esi]
mov edx, eax
mov eax, dword [edx]
test eax, eax
jne 0x804acc0
mov dword [edx], ebx
push 0
push 0x805545c
call fcn.0804a2c0
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804acef
push str.Seriously_crashing._Goodbye_cruel_world._n
push dword [obj.stderr]
call sym.imp.fprintf
mov edx, ebx
cmp dword [ebx], 0
je 0x804adad
lea esi, [esi]
mov edx, dword [edx]
cmp dword [edx], 0
jne 0x804ad00
jmp 0x804adad
lea esi, [esi]
push 0x25
push dword [edi + 0xc]
call sym.imp.strchr
add esp, 8
test eax, eax
je 0x804ad2c
push edi
call fcn.0804a58c
mov ebx, eax
add esp, 4
test ebx, ebx
jne 0x804adf0
mov dword [0x805c150], 1
push 0
push 0x805546d
call fcn.0804a2c0
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804ad66
push str.Seriously_crashing._Goodbye_cruel_world._n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
mov edx, dword [edi + 4]
jmp 0x804ad72
nop
lea esi, [esi]
mov edx, eax
mov eax, dword [edx]
test eax, eax
jne 0x804ad70
mov dword [edx], ebx
push 0
push 0x805545c
call fcn.0804a2c0
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804ad9f
push str.Seriously_crashing._Goodbye_cruel_world._n
push dword [obj.stderr]
call sym.imp.fprintf
mov edx, ebx
cmp dword [ebx], 0
je 0x804adad
mov edx, dword [edx]
cmp dword [edx], 0
jne 0x804ada6
mov eax, dword [edi + 4]
mov dword [edx], eax
mov dword [edi + 4], ebx
xor eax, eax
jmp 0x804adf2
lea esi, [esi]
cmp dword [0x805c14c], 0
je 0x804add0
mov esi, str.Multiple_sort_options.
jmp 0x804add8
push edi
call fcn.0804a748
mov esi, eax
mov dword [0x805c14c], 1
jmp 0x804adf0
mov eax, str.Bug:_parse_O_option_got_weirdness_
jmp 0x804adf2
nop
lea esi, [esi]
mov eax, esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
mov eax, dword [arg_8h]
mov edi, dword [eax + 0xc]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
push ecx
call sym.imp.malloc
mov dword [dest], eax
add esp, 4
mov eax, dword [arg_8h]
push dword [eax + 0xc]
mov eax, dword [dest]
push eax
call sym.imp.strcpy
add esp, 8
mov edx, 1
xor ebx, ebx
mov edi, dword [dest]
mov cl, byte [edi]
cmp cl, 0x20
je 0x804a488
jle 0x804a478
cmp cl, 0x2c
je 0x804a488
cmp cl, 0x3d
je 0x804a493
jmp 0x804a49c
test cl, cl
je 0x804a488
jl 0x804a49c
cmp cl, 0xa
jg 0x804a49c
cmp cl, 9
jl 0x804a49c
test edx, edx
jne 0x804a4c3
mov edx, 1
jmp 0x804a4a3
cmp dword [0x805c824], 0
jne 0x804a4ac
test edx, edx
je 0x804a4a1
inc ebx
xor edx, edx
inc edi
mov al, byte [edi]
mov cl, al
test cl, cl
jne 0x804a465
test ebx, ebx
jne 0x804a4f0
mov eax, dword [dest]
push eax
call sym.imp.free
mov eax, str.Empty_format_list.
jmp 0x804a582
mov eax, dword [dest]
push eax
call sym.imp.free
mov eax, str.Improper_format_list
jmp 0x804a582
mov eax, dword [dest]
push eax
call sym.imp.free
mov eax, str.Unknown_user_defined_format_specifier.
jmp 0x804a582
lea esi, [esi]
test edx, edx
je 0x804a4f8
mov byte [edi - 1], 0
mov edi, dword [dest]
sub ebx, 1
jb 0x804a56d
push str.___t_n
push edi
call sym.imp.strpbrk
add esp, 8
mov esi, eax
test ebx, ebx
je 0x804a520
test esi, esi
je 0x804a520
mov byte [esi], 0
nop
lea esi, [esi]
push 0x3d
push edi
call sym.imp.strchr
add esp, 8
mov edx, eax
test edx, edx
je 0x804a535
mov byte [edx], 0
inc edx
push edx
push edi
call fcn.0804a2c0
mov ecx, eax
add esp, 8
test ecx, ecx
je 0x804a4d6
mov edx, ecx
cmp dword [ecx], 0
je 0x804a557
lea esi, [esi]
mov edx, dword [edx]
cmp dword [edx], 0
jne 0x804a550
mov eax, dword [arg_8h]
mov eax, dword [eax + 4]
mov dword [edx], eax
mov eax, dword [arg_8h]
mov dword [eax + 4], ecx
lea edi, [esi + 1]
sub ebx, 1
jae 0x804a500
mov eax, dword [dest]
push eax
call sym.imp.free
mov dword [0x805c150], 1
xor eax, eax
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov dword [var_8h], 0
mov eax, dword [arg_8h]
mov edi, dword [eax + 0xc]
mov edx, edi
movsx ecx, byte [edi]
inc edi
cmp ecx, 0x25
je 0x804a5c3
test ecx, ecx
je 0x804a5d8
inc dword [var_8h]
movsx ecx, byte [edi]
inc edi
cmp ecx, 0x25
je 0x804a5c3
test ecx, ecx
jne 0x804a5b4
jmp 0x804a5d8
inc dword [var_8h]
movsx ecx, byte [edi]
inc edi
test ecx, ecx
jne 0x804a5a4
mov eax, str.Improper_AIX_field_descriptor.
jmp 0x804a73e
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
push ecx
call sym.imp.malloc
mov dword [dest], eax
add esp, 4
mov eax, dword [arg_8h]
push dword [eax + 0xc]
mov eax, dword [dest]
push eax
call sym.imp.strcpy
add esp, 8
mov eax, dword [arg_8h]
mov edi, dword [eax + 0xc]
sub dword [var_8h], 1
jb 0x804a716
mov dl, byte [edi]
cmp dl, 0x25
jne 0x804a663
inc edi
cmp byte [edi], 0x25
je 0x804a690
movsx eax, byte [edi]
push eax
call fcn.0804c5c0
mov edx, eax
inc edi
add esp, 4
test edx, edx
je 0x804a730
push dword [edx + 8]
push dword [edx + 4]
call fcn.0804a2c0
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804a6f0
mov eax, dword [dest]
push eax
call sym.imp.free
mov eax, str.AIX_field_descriptor_processing_bug.
jmp 0x804a73e
xor ecx, ecx
test dl, dl
je 0x804a67c
mov edx, edi
nop
lea esi, [esi]
cmp byte [edx], 0x25
je 0x804a67c
inc edx
inc ecx
cmp byte [edx], 0
jne 0x804a670
mov esi, ecx
push esi
push edi
mov eax, dword [dest]
push eax
call sym.imp.memcpy
add esp, 0xc
jmp 0x804a69b
mov esi, esi
mov esi, 1
mov eax, dword [dest]
mov byte [eax], 0x25
mov eax, dword [dest]
mov byte [esi + eax], 0
add edi, esi
push 0x20
call sym.imp.malloc
mov ebx, eax
mov dword [ebx + 0xc], esi
inc esi
push esi
call sym.imp.malloc
mov edx, eax
mov dword [ebx + 4], edx
add esp, 8
mov eax, dword [dest]
push eax
push dword [ebx + 4]
call sym.imp.strcpy
add esp, 8
mov dword [ebx + 8], 0
mov dword [ebx + 0x10], 0
mov dword [ebx + 0x14], 3
mov dword [ebx + 0x18], 0
mov dword [ebx], 0
mov edx, ebx
cmp dword [ebx], 0
je 0x804a6fe
mov edx, dword [edx]
cmp dword [edx], 0
jne 0x804a6f7
mov eax, dword [arg_8h]
mov eax, dword [eax + 4]
mov dword [edx], eax
mov eax, dword [arg_8h]
mov dword [eax + 4], ebx
sub dword [var_8h], 1
jae 0x804a614
mov eax, dword [dest]
push eax
call sym.imp.free
mov dword [0x805c150], 1
xor eax, eax
jmp 0x804a73e
lea esi, [esi]
mov eax, dword [dest]
push eax
call sym.imp.free
mov eax, str.Unknown_AIX_field_descriptor.
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x108
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edx, 0x80556d8
mov cl, byte [0x80556d8]
test cl, cl
je 0x804a953
mov bl, byte [edx + 1]
test bl, bl
jne 0x804a8f8
xor edx, edx
cmp byte [esi], cl
jne 0x804a955
nop
lea esi, [esi]
inc edx
cmp byte [edx + esi], cl
je 0x804a8f0
jmp 0x804a955
mov al, byte [edx + 2]
mov byte [var_101h], al
test al, al
jne 0x804a920
xor edi, edi
mov dl, byte [esi]
jmp 0x804a914
nop
lea esi, [esi]
inc edi
mov dl, byte [edi + esi]
cmp dl, cl
je 0x804a910
cmp dl, bl
je 0x804a910
mov edx, edi
jmp 0x804a955
cmp byte [edx + 3], 0
jne 0x804a948
xor edi, edi
mov dl, byte [esi]
jmp 0x804a934
lea esi, [esi]
inc edi
mov dl, byte [edi + esi]
cmp dl, cl
je 0x804a930
cmp dl, bl
je 0x804a930
cmp dl, byte [var_101h]
je 0x804a930
mov edx, edi
jmp 0x804a955
push edx
push esi
call sym.imp.strspn
mov edx, eax
jmp 0x804a955
xor edx, edx
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp edx, ecx
jne 0x804a9ce
mov ebx, 0xff
lea ecx, [var_100h]
mov edx, ecx
mov byte [ebx + edx], 0
sub ebx, 1
jae 0x804a975
mov edx, esi
movsx ebx, byte [edx]
cmp ebx, 0x2d
je 0x804a9a4
jg 0x804a995
test ebx, ebx
je 0x804a9a0
cmp ebx, 0x2b
je 0x804a9a4
jmp 0x804a9c8
cmp ebx, 0x50
je 0x804a9b8
jmp 0x804a9c8
lea esi, [esi]
xor eax, eax
jmp 0x804a9e0
movsx ebx, byte [edx + 1]
test ebx, ebx
je 0x804a9ce
cmp ebx, 0x2b
je 0x804a9ce
cmp ebx, 0x2d
jne 0x804a9d9
jmp 0x804a9ce
cmp dword [0x805c0cc], 0
je 0x804a9c8
mov eax, str.PPID_sort_and_forest_output_conflict.
jmp 0x804a9e0
cmp byte [ebx + ecx], 0
je 0x804a9d5
mov eax, str.Bad_sorting_code.
jmp 0x804a9e0
mov byte [ebx + ecx], 1
inc edx
jmp 0x804a980
lea esi, [esi]
lea esp, [var_114h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
xor edi, edi
mov ebx, dword [arg_8h]
mov ebx, dword [ebx + 0xc]
mov dword [var_4h], ebx
mov ebx, dword [var_4h]
movsx eax, byte [ebx]
cmp eax, 0x2b
je 0x804aab2
jg 0x804aa17
test eax, eax
je 0x804aa20
jmp 0x804aa38
cmp eax, 0x2d
je 0x804aa31
jmp 0x804aa38
mov esi, esi
mov dword [0x805c14c], 1
xor eax, eax
jmp 0x804aac0
mov edi, 1
jmp 0x804aab4
push eax
call fcn.0804c5e4
add esp, 4
test eax, eax
je 0x804aa89
mov eax, dword [eax + 4]
xor esi, esi
cmp byte [eax], 0x2d
jne 0x804aa51
inc esi
inc eax
push eax
call fcn.0804c608
mov dword [var_8h], eax
add esp, 4
test eax, eax
je 0x804aa83
push 0x20
call sym.imp.malloc
mov edx, eax
mov ebx, dword [var_8h]
mov eax, dword [ebx + 0xc]
mov dword [edx + 4], eax
mov dword [edx + 8], esi
mov dword [edx], 0
mov ecx, edx
add esp, 4
jmp 0x804aa85
xor ecx, ecx
test ecx, ecx
jne 0x804aa90
mov eax, str.Unknown_sort_specifier.
jmp 0x804aac0
mov dword [ecx + 8], edi
mov edx, ecx
cmp dword [ecx], 0
je 0x804aaa7
lea esi, [esi]
mov edx, dword [edx]
cmp dword [edx], 0
jne 0x804aaa0
mov ebx, dword [arg_8h]
mov eax, dword [ebx + 8]
mov dword [edx], eax
mov dword [ebx + 8], ecx
xor edi, edi
inc dword [var_4h]
jmp 0x804aa00
lea esi, [esi]
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0xc
push edi
push esi
push ebx
mov eax, dword [arg_8h]
mov edi, dword [eax + 0xc]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
push ecx
call sym.imp.malloc
mov dword [dest], eax
add esp, 4
mov eax, dword [arg_8h]
push dword [eax + 0xc]
mov eax, dword [dest]
push eax
call sym.imp.strcpy
add esp, 8
mov edx, 1
mov dword [var_8h], 0
mov ebx, dword [dest]
movsx ecx, byte [ebx]
cmp ecx, 0x2c
ja case.0x804a798.1
jmp dword [ecx*4 + 0x8055624]
nop
test edx, edx
jne 0x804a7d8
mov edx, 1
jmp 0x804a7b9
nop
lea esi, [esi]
test edx, edx
je 0x804a7b7
inc dword [var_8h]
xor edx, edx
inc ebx
cmp byte [ebx], 0
jne 0x804a790
cmp dword [var_8h], 0
jne 0x804a803
mov eax, dword [dest]
push eax
call sym.imp.free
mov eax, str.Empty_sort_list.
jmp 0x804a8b8
mov eax, dword [dest]
push eax
call sym.imp.free
mov eax, str.Improper_sort_list
jmp 0x804a8b8
nop
lea esi, [esi]
mov eax, dword [dest]
push eax
call sym.imp.free
mov eax, str.Unknown_sort_specifier.
jmp 0x804a8b8
test edx, edx
je 0x804a80b
mov byte [ebx - 1], 0
mov ebx, dword [dest]
sub dword [var_8h], 1
jb 0x804a8a3
push str.___t_n
push ebx
call sym.imp.strpbrk
add esp, 8
mov esi, eax
test esi, esi
je 0x804a830
mov byte [esi], 0
nop
mov edx, ebx
xor edi, edi
cmp byte [ebx], 0x2d
jne 0x804a83d
inc edi
lea edx, [ebx + 1]
push edx
call fcn.0804c608
mov ebx, eax
add esp, 4
test ebx, ebx
je 0x804a870
push 0x20
call sym.imp.malloc
mov edx, eax
mov eax, dword [ebx + 0xc]
mov dword [edx + 4], eax
mov dword [edx + 8], edi
mov dword [edx], 0
mov ecx, edx
add esp, 4
jmp 0x804a872
nop
lea esi, [esi]
xor ecx, ecx
test ecx, ecx
je 0x804a7f0
mov edx, ecx
cmp dword [ecx], 0
je 0x804a888
mov edx, dword [edx]
cmp dword [edx], 0
jne 0x804a881
mov eax, dword [arg_8h]
mov eax, dword [eax + 8]
mov dword [edx], eax
mov eax, dword [arg_8h]
mov dword [eax + 8], ecx
lea ebx, [esi + 1]
sub dword [var_8h], 1
jae 0x804a818
mov eax, dword [dest]
push eax
call sym.imp.free
mov dword [0x805c14c], 1
xor eax, eax
lea esp, [var_18h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
test byte [0x805c0d8], 4
je 0x804b054
test byte [0x805c0d0], 4
jne 0x804b054
mov eax, str.Modifier__y_without_format__l_makes_no_sense.
jmp 0x804b4e0
mov eax, dword [0x805c0d0]
cmp dword [0x805c100], 0
je 0x804b0c0
test eax, eax
je 0x804b070
push 0
push 0x805588e
jmp 0x804b077
nop
push 0
push 0x8055892
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
push 0
push 0x8055897
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
test byte [0x805c0d0], 4
jne 0x804b10c
push 0
push 0x805589f
jmp 0x804b0f5
mov esi, esi
test al, 1
je 0x804b0d0
push 0
push 0x805588e
jmp 0x804b0d7
lea esi, [esi]
push 0
push 0x80558a4
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
push 0
push 0x80558a9
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
push 0
push 0x80558ae
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
mov eax, dword [0x805c0d0]
add esp, 8
test al, 1
je 0x804b156
push 0
push 0x80558b4
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
mov eax, dword [0x805c0d0]
test al, 4
je 0x804b261
push 0
push 0x80558ba
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
test byte [0x805c0d0], 4
je 0x804b261
test byte [0x805c0fd], 4
je 0x804b1f8
push 0
push 0x80558c0
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
push 0x20
call sym.imp.malloc
mov ebx, eax
mov dword [ebx + 0xc], 1
push 2
call sym.imp.malloc
mov dword [ebx + 4], eax
add esp, 0x10
mov word [eax], 0x3a
mov dword [ebx + 8], 0
mov dword [ebx + 0x10], 0
mov dword [ebx + 0x14], 3
mov dword [ebx + 0x18], 0
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
push 0
push 0x80558ca
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
test byte [0x805c0d0], 4
je 0x804b261
test byte [0x805c0d8], 4
je 0x804b231
push 0
push 0x80558cd
jmp 0x804b24a
test byte [0x805c0fd], 5
je 0x804b243
push 0
push 0x80558d1
jmp 0x804b24a
push 0
push 0x80558d7
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
mov edx, dword [0x805c0d8]
test dl, 1
je 0x804b290
push 0
push 0x80558dc
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
push 0
push 0x80558e0
jmp 0x804b2bb
mov eax, dword [0x805c0d0]
test al, 4
je 0x804b2dd
push 0
push 0x80558e6
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
push 0
push 0x80558e9
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 0x10
mov edx, dword [0x805c0d8]
mov eax, dword [0x805c0d0]
test dl, 8
je 0x804b30f
test al, 1
je 0x804b30f
push 0
push str.nlwp
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
mov edx, dword [0x805c0d8]
mov eax, dword [0x805c0d0]
test al, 5
je 0x804b33c
test dl, 1
jne 0x804b33c
push 0
push 0x80558f3
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
mov edx, dword [0x805c0d8]
test dl, 0x10
je 0x804b365
push 0
push 0x80558f5
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
mov edx, dword [0x805c0d8]
test dl, 8
je 0x804b38e
push 0
push 0x80558f9
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
mov edx, dword [0x805c0d8]
test dl, 2
je 0x804b3cc
push 0
push 0x80558fd
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
push 0
push 0x8055901
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 0x10
test byte [0x805c0d0], 5
je 0x804b3f3
push 0
push 0x8055906
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
push 0
push 0x805546d
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
mov eax, dword [0x805c0d0]
add esp, 8
test al, 1
je 0x804b440
test byte [0x805c0fd], 2
je 0x804b430
push 0
push 0x805590b
jmp 0x804b44b
lea esi, [esi]
push 0
push 0x8055910
jmp 0x804b44b
lea esi, [esi]
test al, 4
je 0x804b4b0
push 0
push 0x8055919
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
test byte [0x805c0d0], 4
je 0x804b4b0
push 0
push 0x805591d
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
test byte [0x805c0d8], 4
jne 0x804b4b0
push 0
push 0x805591f
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
add esp, 8
test byte [0x805c0d8], 0x20
je 0x804b4d4
push 0
push 0x8055921
call fcn.0804a2c0
mov ebx, eax
mov eax, dword [0x805c0d4]
mov dword [ebx], eax
mov dword [0x805c0d4], ebx
mov dword [0x805c0d8], 0
xor eax, eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [s2]
mov edi, dword [arg_ch]
push esi
mov eax, dword [0x805c0d4]
push dword [eax + 4]
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804af81
mov eax, dword [0x805c0d4]
mov eax, dword [eax]
mov dword [edi], eax
mov eax, dword [0x805c0d4]
jmp 0x804af78
lea esi, [esi]
mov eax, dword [ebx]
mov eax, dword [eax]
mov dword [edi], eax
mov eax, dword [ebx]
mov dword [eax], edi
mov eax, 1
jmp 0x804afaa
mov ebx, dword [0x805c0d4]
jmp 0x804afa2
lea esi, [esi]
push esi
push dword [eax + 4]
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x804af70
mov ebx, dword [ebx]
mov eax, dword [ebx]
test eax, eax
jne 0x804af90
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [s2]
push esi
mov eax, dword [0x805c0d4]
push dword [eax + 4]
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804b003
mov edx, dword [0x805c0d4]
mov eax, dword [edx]
mov dword [0x805c0d4], eax
push edx
call sym.imp.free
mov eax, 1
jmp 0x804b02a
nop
lea esi, [esi]
mov edx, dword [ebx]
mov eax, dword [edx]
mov dword [ebx], eax
push edx
call sym.imp.free
mov eax, 1
jmp 0x804b02a
mov ebx, dword [0x805c0d4]
jmp 0x804b022
nop
lea esi, [esi]
push esi
push dword [eax + 4]
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x804aff0
mov ebx, dword [ebx]
mov eax, dword [ebx]
test eax, eax
jne 0x804b010
xor eax, eax
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ecx, 0x8149c60
mov edx, dword [0x805c154]
mov al, byte [0x8149c60]
test al, al
jne 0x804ba70
xor eax, eax
jmp 0x804bb25
mov esi, esi
cmp dword [0x805c0cc], 0x75
je 0x804bae5
mov ecx, 0x8149c61
cmp byte [0x8149c61], 0
je 0x804bb1d
mov edi, 0x20202020
mov ebx, 0x205f5c20
mov esi, 0x20207c20
lea esi, [esi]
mov al, byte [ecx]
cmp al, 0x4c
je 0x804bad0
jg 0x804bac0
cmp al, 0x20
je 0x804bac6
jg 0x804bab4
test al, al
je 0x804bb1d
jmp 0x804bada
cmp al, 0x2b
je 0x804bad0
jmp 0x804bada
lea esi, [esi]
cmp al, 0x7c
je 0x804bad4
jmp 0x804bada
mov dword [edx], edi
jmp 0x804bad6
lea esi, [esi]
mov dword [edx], ebx
jmp 0x804bad6
mov dword [edx], esi
mov byte [edx + 4], 0
add edx, 4
inc ecx
cmp byte [ecx], 0
jne 0x804baa0
jmp 0x804bb1d
mov ebx, 0x2020
lea esi, [esi]
cmp al, 0x4c
je 0x804bb0c
jg 0x804bb08
cmp al, 0x20
je 0x804bb0c
jg 0x804bb02
test al, al
je 0x804bb1d
jmp 0x804bb13
cmp al, 0x2b
je 0x804bb0c
jmp 0x804bb13
cmp al, 0x7c
jne 0x804bb13
mov word [edx], bx
mov byte [edx + 2], 0
add edx, 2
inc ecx
mov al, byte [ecx]
test al, al
jne 0x804baf0
sub edx, dword [0x805c154]
mov eax, edx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_10h]
mov edx, dword [arg_8h]
mov esi, dword [arg_ch]
xor ecx, ecx
cmp ecx, edi
jae 0x8049607
mov bl, byte [esi]
inc esi
movzx eax, bl
mov al, byte [eax + str.Z________________________________________________________________]
cmp al, 0x2d
je 0x8049600
jg 0x80495f1
cmp al, 0x2a
je 0x80495f7
jmp 0x80495d5
cmp al, 0x5a
jne 0x80495d5
jmp 0x8049607
inc ecx
mov byte [edx], bl
jmp 0x8049604
lea esi, [esi]
inc ecx
mov byte [edx], 0x3f
inc edx
jmp 0x80495d5
mov byte [edx], 0
mov eax, ecx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
xor esi, esi
jmp 0x8049694
mov ebx, dword [arg_10h]
mov dword [var_4h], ebx
sub dword [var_4h], esi
mov edx, dword [arg_8h]
add edx, esi
mov edi, eax
xor ecx, ecx
cmp ecx, dword [var_4h]
jae 0x8049670
mov bl, byte [edi]
mov byte [var_5h], bl
inc edi
movzx eax, bl
mov al, byte [eax + str.Z________________________________________________________________]
cmp al, 0x2d
je 0x8049668
jg 0x8049653
cmp al, 0x2a
je 0x8049660
jmp 0x8049633
cmp al, 0x5a
jne 0x8049633
jmp 0x8049670
lea esi, [esi]
inc ecx
mov bl, byte [var_5h]
mov byte [edx], bl
jmp 0x804966c
inc ecx
mov byte [edx], 0x3f
inc edx
jmp 0x8049633
nop
mov byte [edx], 0
add esi, ecx
mov eax, dword [arg_10h]
sub eax, esi
cmp eax, 1
jbe 0x8049690
mov ebx, dword [arg_ch]
cmp dword [ebx + 4], 0
je 0x8049690
mov ebx, dword [arg_8h]
mov byte [esi + ebx], 0x20
inc esi
add dword [arg_ch], 4
mov ebx, dword [arg_ch]
mov eax, dword [ebx]
test eax, eax
jne 0x8049621
mov eax, esi
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ecx, dword [0x805c0d4]
xor edx, edx
xor ebx, ebx
xor esi, esi
test ecx, ecx
je 0x804c18d
mov esi, esi
mov eax, dword [ecx + 0x18]
and eax, 0xf
cmp eax, 4
je 0x804c161
jg 0x804c143
test eax, eax
je 0x804c180
jmp 0x804c148
cmp eax, 6
je 0x804c154
add edx, dword [ecx + 0xc]
add edx, ebx
mov ebx, 1
jmp 0x804c185
inc esi
add edx, dword [ecx + 0xc]
add edx, ebx
mov ebx, 1
jmp 0x804c185
mov eax, dword [ecx]
test eax, eax
je 0x804c170
add edx, dword [ecx + 0xc]
jmp 0x804c173
lea esi, [esi]
add edx, 3
add edx, ebx
mov ebx, 1
jmp 0x804c187
lea esi, [esi]
add edx, dword [ecx + 0xc]
xor ebx, ebx
mov eax, dword [ecx]
mov ecx, eax
test ecx, ecx
jne 0x804c130
mov eax, dword [0x805c104]
mov dword [0x8127858], eax
cmp eax, edx
jae 0x804c1b2
mov ecx, eax
lea esi, [esi]
cmp eax, 0x63fff
ja 0x804c1b2
add eax, ecx
mov dword [0x8127858], eax
cmp eax, edx
jb 0x804c1a0
lea eax, [esi*8]
sub eax, esi
add eax, edx
cmp eax, dword [0x8127858]
setbe al
mov edi, eax
and edi, 1
mov dword [0x8127840], edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push edi
push esi
push ebx
mov dword [var_4h], 0
mov dword [var_8h], 0
xor ebx, ebx
mov dword [var_ch], 0
mov esi, dword [0x805c0d4]
cmp dword [arg_8h], 0xffffffff
jne 0x804c240
call fcn.0804c118
cmp dword [0x805c164], 0
jne 0x804c453
dec dword [0x805c0e8]
jne 0x804c236
mov eax, dword [0x805c0dc]
mov dword [0x805c0e8], eax
push 0
call fcn.0804c1dc
add esp, 4
push 1
call sym.imp.exit
lea esi, [esi]
cmp dword [arg_8h], 0
je 0x804c262
dec dword [0x805c0e8]
jne 0x804c262
mov eax, dword [0x805c0dc]
mov dword [0x805c0e8], eax
push 0
call fcn.0804c1dc
add esp, 4
mov dword [0x805c164], 1
mov eax, dword [arg_8h]
mov dword [0x8127844], eax
cmp dword [0x8127858], 0xc8000
jbe 0x804c293
push str.Fix_bigness_error._n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
mov dword [var_10h], 0
mov edx, dword [var_8h]
mov eax, dword [var_4h]
cmp edx, eax
jge 0x804c2a6
mov edx, eax
cmp dword [esi], 0
je 0x804c2b0
mov eax, dword [esi + 0xc]
jmp 0x804c2b7
mov eax, dword [0x8127858]
sub eax, edx
mov dword [0x805c15c], eax
mov eax, dword [var_8h]
add eax, dword [esi + 0xc]
sub eax, dword [var_4h]
mov dword [0x805c160], eax
cmp dword [arg_8h], 0
je 0x804c2e0
mov edx, dword [esi + 8]
test edx, edx
je 0x804c2e0
call edx
mov ecx, eax
jmp 0x804c300
lea esi, [esi]
push dword [esi + 4]
push dword [0x805c154]
call sym.imp.strcpy
add esp, 8
mov edi, eax
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
mov edx, dword [esi + 0x18]
and edx, 0xf
cmp edx, 6
ja case.default.0x804c30f
jmp dword [edx*4 + 0x8058ce8]
cmp dword [0x8127840], 0
je 0x804c330
mov ebx, 0x10
sub ebx, ecx
mov dword [var_10h], 7
jmp 0x804c35e
nop
mov ebx, 9
jmp 0x804c35c
mov ebx, dword [esi + 0xc]
sub ebx, ecx
jns 0x804c340
xor ebx, ebx
cmp dword [0x805c130], 0
jne 0x804c3c3
xor ebx, ebx
jmp 0x804c3c3
lea esi, [esi]
cmp dword [0x805c134], 0
je 0x804c364
mov ebx, dword [esi + 0xc]
sub ebx, ecx
test ebx, ebx
jge 0x804c3c3
jmp case.0x804c30f.0
cmp dword [esi], 0
je 0x804c384
mov edx, dword [0x805c154]
mov eax, dword [esi + 0xc]
jmp 0x804c3aa
cmp dword [esi], 0
je 0x804c384
mov edx, dword [0x805c154]
mov eax, dword [esi + 0xc]
jmp 0x804c3aa
mov ecx, dword [var_4h]
sub ecx, dword [var_8h]
test ecx, ecx
jg 0x804c391
mov ecx, dword [var_ch]
mov edx, dword [0x8127858]
sub edx, dword [var_8h]
sub edx, ecx
test edx, edx
jg 0x804c3a5
mov edx, 1
mov eax, dword [0x805c154]
mov byte [edx + eax], 0
jmp case.0x804c30f.0
push dword [obj.stderr]
push str.bad_alignment_code_n
call sym.imp.fputs
add esp, 8
mov eax, dword [var_4h]
sub eax, dword [var_8h]
lea edx, [ebx + eax]
test edx, edx
jg 0x804c3d3
mov edx, dword [var_ch]
cmp edx, 0x1000
jle 0x804c3e0
mov edx, 0x1000
mov eax, dword [0x805c154]
sub eax, edx
push eax
push 0x8055ade
push dword [obj.stdout]
call sym.imp.fprintf
mov edx, eax
add dword [var_8h], edx
mov eax, dword [esi + 0xc]
add dword [var_4h], eax
mov eax, dword [var_10h]
add dword [var_4h], eax
add esp, 0xc
cmp dword [esi + 8], 0
je 0x804c430
mov edx, dword [esi]
test edx, edx
je 0x804c430
cmp dword [edx + 8], 0
je 0x804c430
inc dword [var_4h]
mov dword [var_ch], 1
jmp 0x804c439
lea esi, [esi]
mov dword [var_ch], 0
mov edx, dword [esi]
mov esi, edx
test esi, esi
jne 0x804c293
push dword [obj.stdout]
push 0x8058ce5
call sym.imp.fputs
lea esp, [var_20h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x1c
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
mov dword [var_1ch], 0
mov dword [var_18h], 0
mov dword [var_14h], 0
mov dword [var_10h], 0
cmp dword [0x805c3e0], 0xffffffff
jne 0x80533f0
push 0
push str._proc_uptime
call sym.imp.open
mov dword [0x805c3e0], eax
add esp, 8
cmp eax, 0xffffffff
jne 0x80533f0
push str.Error:__proc_must_be_mounted_n__To_mount__proc_at_boot_you_need_an__etc_fstab_line_like:_n_______proc____proc___proc____defaults_n__In_the_meantime__mount__proc__proc__t_proc_n
push dword [obj.stderr]
call sym.imp.fprintf
push dword [0x805c3e0]
call sym.imp.close
push 1
call sym.imp._exit
mov esi, esi
push 0
push 0
push dword [0x805c3e0]
call sym.imp.lseek
push 0x3ff
push 0x8149640
push dword [0x805c3e0]
call sym.imp.read
mov edx, eax
mov dword [0x8149540], edx
add esp, 0x18
test edx, edx
jl 0x8053460
mov eax, 0x8149640
mov byte [edx + eax], 0
lea edx, [var_14h]
push edx
lea edx, [var_1ch]
push edx
push str._lf__lf
push eax
call sym.imp.sscanf
add esp, 0x10
cmp eax, 1
jg 0x8053483
push str.bad_data_in__proc_uptime_n
push dword [obj.stderr]
call sym.imp.fprintf
xor eax, eax
jmp 0x80534af
nop
lea esi, [esi]
push str._proc_uptime
call sym.imp.perror
push dword [0x805c3e0]
call sym.imp.close
mov dword [0x805c3e0], 0xffffffff
xor eax, eax
jmp 0x80534af
test ebx, ebx
je 0x805348c
fld qword [ebp - 0x1c]
fstp qword [ebx]
test esi, esi
je 0x8053495
fld qword [ebp - 0x14]
fstp qword [esi]
fld qword [ebp - 0x1c]
fnstcw word [ebp - 4]
mov ecx, dword [var_4h]
mov ch, 0xc
mov dword [var_ch], ecx
fldcw word [ebp - 0xc]
fistp dword [ebp - 0xc]
mov eax, dword [var_ch]
fldcw word [ebp - 4]
lea esp, [var_24h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
call fcn.08053b7c
test eax, eax
je 0x8054070
mov eax, dword [eax]
mov eax, dword [eax]
jmp 0x8054075
mov esi, esi
mov eax, 0xffffffff
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, dword [arg_8h]
test eax, eax
je 0x8051d20
cmp dword [0x8148b80], 0
je 0x8051cf5
push eax
call fcn.08051808
mov ebx, eax
add esp, 4
jmp 0x8051cfa
mov ebx, str.ERROR
push 4
push str.sys_
push ebx
call sym.imp.strncmp
test eax, eax
jne 0x8051d0e
add ebx, 4
cmp byte [ebx], 0x5f
jne 0x8051d25
inc ebx
cmp byte [ebx], 0x5f
je 0x8051d13
jmp 0x8051d25
nop
lea esi, [esi]
mov ebx, 0x805c3d8
mov eax, ebx
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x88
push edi
push esi
push ebx
mov eax, dword [arg_10h]
mov ebx, 0x81478a0
mov dword [var_7ch], 0
cmp ax, 0xffff
je 0x80514ac
mov edi, eax
sar edi, 8
mov esi, edi
and esi, 0xff
and eax, 0xff
mov dword [var_88h], eax
mov dword [var_80h], eax
push 2
mov ecx, dword [arg_14h]
push ecx
push 0x805a7ec
lea ecx, [s]
mov dword [var_84h], ecx
push ecx
call sym.imp.sprintf
push 0x1000
push ebx
mov ecx, dword [var_84h]
push ecx
call sym.imp.readlink
add esp, 0x1c
cmp eax, 0xffffffff
je 0x805139d
mov byte [eax + ebx], 0
lea eax, [var_58h]
push eax
push ebx
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jl 0x805139d
movzx eax, byte [var_38h]
cmp dword [var_88h], eax
jne 0x805139d
mov eax, dword [var_38h]
mov edx, dword [var_34h]
shrd eax, edx, 8
shr edx, 8
and eax, 0xff
cmp esi, eax
je 0x80514c0
mov esi, edi
and esi, 0xff
push 0xff
mov ecx, dword [arg_14h]
push ecx
push 0x805a7ec
mov ecx, dword [var_84h]
push ecx
call sym.imp.sprintf
push 0x1000
push ebx
mov ecx, dword [var_84h]
push ecx
call sym.imp.readlink
add esp, 0x1c
cmp eax, 0xffffffff
je 0x8051416
mov byte [eax + ebx], 0
lea eax, [var_58h]
push eax
push ebx
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jl 0x8051416
movzx eax, byte [var_38h]
cmp dword [var_88h], eax
jne 0x8051416
mov eax, dword [var_38h]
mov edx, dword [var_34h]
shrd eax, edx, 8
shr edx, 8
and eax, 0xff
cmp esi, eax
je 0x80514c0
mov ecx, dword [var_80h]
push ecx
mov esi, edi
and esi, 0xff
push esi
push ebx
call fcn.080511a4
add esp, 0xc
test eax, eax
jne 0x80514c0
mov eax, dword [0x805c3b4]
test eax, eax
jne 0x8051447
call fcn.080510c0
mov eax, dword [0x805c3b4]
cmp eax, 0xffffffff
je 0x80514ac
jmp 0x8051452
mov esi, esi
mov eax, dword [eax]
test eax, eax
je 0x80514ac
cmp dword [eax + 4], esi
jne 0x8051450
mov ecx, dword [var_88h]
push ecx
add eax, 8
push eax
push str._dev_tty_s_d
push ebx
call sym.imp.sprintf
add esp, 0x10
mov ecx, dword [var_84h]
push ecx
push ebx
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jl 0x80514ac
movzx eax, byte [var_58h]
cmp dword [var_88h], eax
jne 0x80514ac
mov eax, dword [var_58h]
mov edx, dword [var_54h]
shrd eax, edx, 8
shr edx, 8
and eax, 0xff
cmp esi, eax
je 0x80514c0
mov ecx, dword [arg_8h]
mov word [ecx], 0x3f
mov eax, 1
jmp 0x8051566
mov esi, esi
mov ecx, dword [arg_18h]
test cl, 1
je 0x80514e5
push 5
push str._dev_
push ebx
call sym.imp.strncmp
add esp, 0xc
test eax, eax
jne 0x80514e5
cmp byte [ebx + 5], 0
je 0x80514e5
add ebx, 5
mov ecx, dword [arg_18h]
test cl, 2
je 0x805150a
push 3
push 0x805a803
push ebx
call sym.imp.strncmp
add esp, 0xc
test eax, eax
jne 0x805150a
cmp byte [ebx + 3], 0
je 0x805150a
add ebx, 3
mov ecx, dword [arg_18h]
test cl, 4
je 0x805152c
push 4
push str.pts_
push ebx
call sym.imp.strncmp
test eax, eax
jne 0x805152c
cmp byte [ebx + 4], 0
je 0x805152c
add ebx, 4
mov eax, dword [arg_ch]
mov byte [eax + ebx], 0
jmp 0x8051555
inc dword [var_7ch]
cmp eax, 0x20
jg 0x8051542
mov eax, 0x3f
cmp eax, 0x7e
jle 0x805154c
mov eax, 0x3f
mov ecx, dword [arg_8h]
mov byte [ecx], al
inc ecx
mov dword [arg_8h], ecx
movsx eax, byte [ebx]
inc ebx
test eax, eax
jne 0x8051535
mov ecx, dword [arg_8h]
mov byte [ecx], 0
mov eax, dword [var_7ch]
lea esp, [var_94h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push ebx
mov ebx, dword [arg_8h]
mov edx, ebx
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp dword [0x8127840], 0
je 0x804c0b0
cmp ecx, 8
jle 0x804c0a6
push ebx
jmp 0x804c0d8
push ebx
push str.00000000_s
jmp 0x804c0dd
mov esi, esi
xor edx, edx
cmp byte [ebx], 0x30
jne 0x804c0be
inc edx
cmp byte [edx + ebx], 0x30
je 0x804c0b7
mov eax, ecx
sub eax, edx
cmp eax, 8
jbe 0x804c0d3
lea eax, [ecx + ebx - 8]
push eax
push 0x8055b52
jmp 0x804c0dd
lea eax, [ecx + ebx - 8]
push eax
push 0x8055ade
push dword [0x805c154]
call sym.imp.sprintf
lea esp, [var_8h]
pop ebx
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
push 0x10
call sym.imp.malloc
mov dword [var_4h], eax
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ecx, [ecx*8 - 8]
push ecx
call sym.imp.malloc
mov edx, eax
mov esi, dword [var_4h]
mov dword [esi + 4], edx
mov dword [esi + 8], 0
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
push ecx
call sym.imp.malloc
mov dword [ptr], eax
add esp, 0xc
push ebx
mov esi, eax
push esi
call sym.imp.strcpy
add esp, 8
mov edx, 1
xor edi, edi
mov ecx, dword [ptr]
mov dword [var_18h], str.Improper_list.
mov bl, byte [esi]
lea esi, [esi]
cmp bl, 0x20
je 0x804df17
jg 0x804df12
test bl, bl
je 0x804df17
cmp bl, 9
je 0x804df17
jmp 0x804df26
cmp bl, 0x2c
jne 0x804df26
test edx, edx
jne 0x804dfc0
mov edx, 1
jmp 0x804df2d
test edx, edx
je 0x804df2b
inc edi
xor edx, edx
inc ecx
mov al, byte [ecx]
mov bl, al
test bl, bl
jne 0x804df00
test edx, edx
jne 0x804dfc0
mov eax, dword [var_4h]
mov dword [eax + 8], edi
mov ecx, dword [ptr]
sub edi, 1
jb 0x804dfa0
lea esi, [esi]
mov edx, ecx
mov bl, byte [ecx]
jmp 0x804df5e
cmp byte [edx], 9
je 0x804df6c
inc edx
mov bl, byte [edx]
test bl, bl
je 0x804df75
cmp bl, 0x20
je 0x804df6c
cmp bl, 0x2c
jne 0x804df56
cmp byte [edx], 0
je 0x804df75
mov ebx, edx
jmp 0x804df77
xor ebx, ebx
test ebx, ebx
je 0x804df7e
mov byte [ebx], 0
mov esi, dword [var_4h]
mov esi, dword [esi + 4]
lea eax, [esi + edi*8]
push eax
push ecx
mov esi, dword [arg_ch]
call esi
mov dword [var_18h], eax
add esp, 8
test eax, eax
jne 0x804dfc0
lea ecx, [ebx + 1]
sub edi, 1
jae 0x804df50
mov eax, dword [ptr]
push eax
call sym.imp.free
mov esi, dword [0x805c10c]
mov eax, dword [var_4h]
mov dword [eax], esi
mov dword [0x805c10c], eax
xor eax, eax
jmp 0x804dfe0
lea esi, [esi]
mov esi, dword [ptr]
push esi
call sym.imp.free
mov eax, dword [var_4h]
push dword [eax + 4]
call sym.imp.free
mov esi, dword [var_4h]
push esi
call sym.imp.free
mov eax, dword [var_18h]
lea esp, [var_24h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov dword [var_14h], 1
push 0x14
call sym.imp.malloc
mov ebx, eax
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
push ecx
call sym.imp.malloc
mov edx, eax
mov dword [ebx + 0xc], edx
add esp, 8
push esi
push edx
call sym.imp.strcpy
add esp, 8
mov eax, dword [arg_ch]
mov dword [ebx + 0x10], eax
mov dword [ebx + 8], 0
mov dword [ebx + 4], 0
mov eax, dword [0x805c144]
mov dword [ebx], eax
mov dword [0x805c144], ebx
cmp dword [arg_ch], 6
jne 0x804ae6f
mov dword [0x805c148], 1
cmp dword [arg_ch], 2
je 0x804ae80
mov eax, 1
jmp 0x804af2e
nop
mov dl, byte [esi]
lea edi, [var_10h]
cmp dl, 0x2c
je 0x804aea0
jg 0x804ae97
test dl, dl
je 0x804aea0
cmp dl, 0x20
je 0x804aea0
jmp 0x804aeb8
cmp dl, 0x3d
je 0x804aeb0
jmp 0x804aeb8
mov esi, esi
cmp dword [var_14h], 0
jne 0x804ae75
mov dword [var_14h], 1
jmp 0x804af1f
nop
cmp dword [var_14h], 0
jne 0x804ae75
jmp 0x804af2c
cmp dword [var_14h], 0
je 0x804af1f
mov dword [var_14h], 0
xor ebx, ebx
test dl, dl
je 0x804aeee
cmp dl, 0x2c
je 0x804aeee
cmp dl, 0x20
je 0x804aeee
mov edx, esi
cmp byte [edx], 0x3d
je 0x804aeee
inc edx
inc ebx
mov cl, byte [edx]
test cl, cl
je 0x804aeee
cmp cl, 0x2c
je 0x804aeee
cmp cl, 0x20
jne 0x804aed7
cmp ebx, 0xf
jg 0x804ae75
push ebx
push esi
push edi
call sym.imp.strncpy
add esp, 0xc
mov byte [ebx + edi], 0
push edi
call fcn.0804c608
mov edx, eax
add esp, 4
test edx, edx
je 0x804ae75
cmp dword [edx + 0x18], 0
jne 0x804ae75
inc esi
mov al, byte [esi]
mov dl, al
test dl, dl
jne 0x804ae85
xor eax, eax
lea esp, [var_20h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, 0x8055b58
mov eax, dword [0x8055b58]
cmp byte [eax], 0x7e
je 0x804c5b7
mov ebx, 0x8055b5c
lea esi, [esi]
cmp dword [ebx + 4], 0x804d0b0
je 0x804c5aa
push dword [ebx]
push dword [esi]
push str.__12.12s___8.8s_n
call sym.imp.printf
add esp, 0xc
add ebx, 0x20
add esi, 0x20
mov eax, dword [esi]
cmp byte [eax], 0x7e
jne 0x804c590
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x805c124]
test eax, eax
jne 0x8049b55
mov eax, str._none_
push eax
mov eax, dword [0x805c120]
test eax, eax
jne 0x8049b64
mov eax, str._none_
push eax
mov eax, dword [0x805c11c]
test eax, eax
jne 0x8049b73
mov eax, str._none_
push eax
mov eax, dword [0x805c118]
test eax, eax
jne 0x8049b82
mov eax, str._none_
push eax
mov eax, dword [0x805c0b0]
test eax, eax
jne 0x8049b91
mov eax, str._none_
push eax
mov eax, dword [0x805c0ac]
test eax, eax
jne 0x8049ba0
mov eax, str._none_
push eax
mov eax, dword [0x805c0a8]
test eax, eax
jne 0x8049baf
mov eax, str._none_
push eax
mov eax, dword [0x805c0a4]
test eax, eax
jne 0x8049bbe
mov eax, str._none_
push eax
mov eax, dword [0x805c0a0]
test eax, eax
jne 0x8049bcd
mov eax, str._none_
push eax
push str.BSD_j_____s_nBSD_l_____s_nBSD_s_____s_nBSD_u_____s_nBSD_v_____s_nSysV__f___s_nSysV__fl__s_nSysV__j___s_nSysV__l___s_n_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x2c
call fcn.08054080
mov edx, dword [0x805c404]
mov eax, edx
and eax, 0xff
push eax
sar edx, 8
mov eax, edx
and eax, 0xff
push eax
sar edx, 8
movzx edx, dl
push edx
push str.Linux_version__d._d._d_n
push dword [obj.stderr]
call sym.imp.fprintf
push 1
push 2
push 6
push str.Compiled_with:_libc__d__internal_version__d._d_n_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x28
push dword [0x805c108]
push dword [0x805c104]
push dword [0x805c0ec]
push dword [0x805c0e8]
push dword [0x805c0dc]
push str.header_gap_d_lines_to_next_header_d_max_line_width_d_nscreen_cols_d_screen_rows_d_n_n
push dword [obj.stderr]
call sym.imp.fprintf
push dword [0x8169d48]
movzx eax, byte [0x805c0c4]
push eax
mov eax, dword [0x805c0c4]
mov edx, dword [0x805c0c8]
shrd eax, edx, 8
shr edx, 8
and eax, 0xff
push eax
push dword [0x805c0bc]
push dword [0x805c098]
push dword [obj.personality]
push str.personality0x_08x__from___s___nEUID_d_TTY_d__d_Hertz_ld_n
push dword [obj.stderr]
call sym.imp.fprintf
leave
ret
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
movsx edx, byte [ecx]
lea eax, [edx - 0x61]
cmp eax, 0x19
jbe 0x804f8fd
lea eax, [edx - 0x41]
cmp eax, 0x19
ja 0x804f907
mov eax, 5
jmp 0x804f985
lea eax, [edx - 0x30]
cmp eax, 9
ja 0x804f916
mov eax, 4
jmp 0x804f985
cmp edx, 0x2b
jne 0x804f922
mov eax, 7
jmp 0x804f985
cmp edx, 0x2d
jne 0x804f974
movsx edx, byte [ecx + 1]
lea eax, [edx - 0x61]
cmp eax, 0x19
jbe 0x804f93b
lea eax, [edx - 0x41]
cmp eax, 0x19
ja 0x804f942
mov eax, 3
jmp 0x804f985
lea eax, [edx - 0x30]
cmp eax, 9
ja 0x804f951
mov eax, 2
jmp 0x804f985
cmp edx, 0x2d
jne 0x804f974
movsx edx, byte [ecx + 2]
lea eax, [edx - 0x61]
cmp eax, 0x19
jbe 0x804f96a
lea eax, [edx - 0x41]
cmp eax, 0x19
ja 0x804f970
xor eax, eax
jmp 0x804f985
mov esi, esi
test edx, edx
je 0x804f980
mov eax, 6
jmp 0x804f985
nop
lea esi, [esi]
mov eax, 1
leave
ret
push ebp
mov ebp, esp
sub esp, 0x2c
push edi
push esi
push ebx
lea esi, [var_10h]
mov dword [var_18h], esi
lea ebx, [var_18h]
mov dword [key], ebx
mov dword [ebx + 4], 0
mov eax, dword [0x8127864]
mov edx, dword [0x8127860]
mov eax, dword [edx + eax*4]
lea edi, [eax + 2]
mov dword [src], edi
xor ecx, ecx
mov al, byte [eax + 2]
test al, al
je 0x804ee08
cmp al, 0x3a
je 0x804ee08
mov edx, edi
cmp byte [edx], 0x3d
je 0x804ee08
inc edx
inc ecx
mov al, byte [edx]
test al, al
je 0x804ee08
cmp al, 0x3a
jne 0x804edf7
mov dword [var_28h], ecx
cmp ecx, 0xf
ja 0x804ee50
mov ebx, dword [var_28h]
push ebx
mov edi, dword [src]
push edi
push esi
call sym.imp.strncpy
add esp, 0xc
mov byte [ebx + esi], 0
add edi, ebx
mov dword [0x8127868], edi
push fcn.0804eda4
push 8
push 0x24
push 0x8059a44
mov ebx, dword [key]
push ebx
call sym.imp.bsearch
add esp, 0x14
test eax, eax
jne 0x804ee60
nop
lea esi, [esi]
mov eax, str.Unknown_gnu_long_option.
jmp 0x804f700
lea esi, [esi]
jmp dword [eax + 4]
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804ee7b
jg 0x804ee77
test al, al
je 0x804ee90
jmp 0x804eec1
cmp al, 0x3d
jne 0x804eec1
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804eec1
mov edx, eax
jmp 0x804eebd
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804eec1
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804eec1
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
jne 0x804eed0
mov eax, str.List_of_real_groups_must_follow___Group.
jmp 0x804f700
nop
lea esi, [esi]
push fcn.0804fc6c
push edx
call fcn.0804de84
add esp, 8
test eax, eax
jne 0x804f700
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 5
xor eax, eax
jmp 0x804f700
lea esi, [esi]
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804ef18
jg 0x804ef14
test al, al
je 0x804ef30
jmp 0x804ef61
cmp al, 0x3d
jne 0x804ef61
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804ef61
mov edx, eax
jmp 0x804ef5d
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804ef61
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804ef61
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
jne 0x804ef70
mov eax, str.List_of_real_users_must_follow___User.
jmp 0x804f700
nop
lea esi, [esi]
push fcn.0804fc00
push edx
call fcn.0804de84
add esp, 8
test eax, eax
jne 0x804f700
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 1
xor eax, eax
jmp 0x804f700
lea esi, [esi]
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804efbf
jg 0x804efb7
test al, al
je 0x804efd4
jmp 0x804f040
cmp al, 0x3d
jne 0x804f040
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804f040
mov edx, eax
jmp 0x804f001
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804f040
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804f040
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
je 0x804f040
cmp byte [edx], 0
je 0x804f040
lea eax, [ebp - 0x1c]
push 0
push 0
push eax
push edx
call sym.imp.__strtol_internal
mov edx, eax
add esp, 0x10
mov eax, dword [ebp - 0x1c]
cmp byte [eax], 0
jne 0x804f040
test edx, edx
jle 0x804f040
cmp edx, 0x773593ff
jg 0x804f040
mov dword [0x805c104], edx
xor eax, eax
jmp 0x804f700
mov esi, esi
mov eax, str.Number_of_columns_must_follow___cols____width__or___columns.
jmp 0x804f700
lea esi, [esi]
mov edi, dword [ebp - 0x24]
mov ebx, dword [ebp - 0x28]
cmp byte [ebx + edi], 0
je 0x804f066
mov eax, str.Option___cumulative_does_not_take_an_argument.
jmp 0x804f700
mov dword [0x805c0e4], 1
xor eax, eax
jmp 0x804f700
mov edi, dword [ebp - 0x24]
mov ebx, dword [ebp - 0x28]
cmp byte [ebx + edi], 0
je 0x804f090
mov eax, str.Option___deselect_does_not_take_an_argument.
jmp 0x804f700
lea esi, [esi]
mov dword [0x805c0f4], 1
xor eax, eax
jmp 0x804f700
mov edi, dword [ebp - 0x24]
mov ebx, dword [ebp - 0x28]
cmp byte [ebx + edi], 0
je 0x804f0b7
mov eax, str.Option___no_heading_does_not_take_an_argument.
jmp 0x804f700
cmp dword [0x805c0e0], 0
jne 0x804f0f0
mov dword [0x805c0e0], 1
xor eax, eax
jmp 0x804f700
mov edi, dword [ebp - 0x24]
mov ebx, dword [ebp - 0x28]
cmp byte [ebx + edi], 0
je 0x804f0e7
mov eax, str.Option___heading_does_not_take_an_argument.
jmp 0x804f700
cmp dword [0x805c0e0], 0
je 0x804f100
mov eax, str.Only_one_heading_option_may_be_specified.
jmp 0x804f700
lea esi, [esi]
mov dword [0x805c0e0], 2
xor eax, eax
jmp 0x804f700
mov edi, dword [ebp - 0x24]
mov ebx, dword [ebp - 0x28]
cmp byte [ebx + edi], 0
je 0x804f127
mov eax, str.Option___forest_does_not_take_an_argument.
jmp 0x804f700
mov dword [0x805c0cc], 0x67
xor eax, eax
jmp 0x804f700
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804f154
jg 0x804f150
test al, al
je 0x804f170
jmp 0x804f1a1
lea esi, [esi]
cmp al, 0x3d
jne 0x804f1a1
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804f1a1
mov edx, eax
jmp 0x804f19d
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804f1a1
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804f1a1
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
jne 0x804f1b0
mov eax, str.Format_specification_must_follow___format.
jmp 0x804f700
nop
lea esi, [esi]
push 7
jmp 0x804f582
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804f1d4
jg 0x804f1d0
test al, al
je 0x804f1f0
jmp 0x804f221
nop
lea esi, [esi]
cmp al, 0x3d
jne 0x804f221
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804f221
mov edx, eax
jmp 0x804f21d
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804f221
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804f221
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
jne 0x804f230
mov eax, str.List_of_effective_groups_must_follow___group.
jmp 0x804f700
nop
lea esi, [esi]
push fcn.0804fc6c
push edx
call fcn.0804de84
add esp, 8
test eax, eax
jne 0x804f700
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 6
xor eax, eax
jmp 0x804f700
lea esi, [esi]
cmp dword [0x812785c], 2
jne 0x804f282
mov eax, dword [0x8127860]
mov esi, dword [eax + 4]
mov edi, str.__help
mov ecx, 7
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
je 0x804f290
mov eax, str.The___help_option_is_exclusive.
jmp 0x804f700
lea esi, [esi]
push dword [obj.stdout]
push dword [0x805c13c]
call sym.imp.fputs
push 0
call sym.imp.exit
cmp dword [0x812785c], 2
jne 0x804f2ca
mov eax, dword [0x8127860]
mov esi, dword [eax + 4]
mov edi, str.__info
mov ecx, 7
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
je 0x804f2d4
mov eax, str.The___info_option_is_exclusive.
jmp 0x804f700
call fcn.08049b44
push 0
call sym.imp.exit
mov edi, dword [ebp - 0x24]
mov ebx, dword [ebp - 0x28]
cmp byte [ebx + edi], 0
je 0x804f2f6
mov eax, str.Option___html_does_not_take_an_argument.
jmp 0x804f700
mov eax, str.Sorry____html_is_not_implemented
jmp 0x804f700
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804f318
jg 0x804f314
test al, al
je 0x804f330
jmp 0x804f361
cmp al, 0x3d
jne 0x804f361
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804f361
mov edx, eax
jmp 0x804f35d
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804f361
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804f361
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
jne 0x804f370
mov eax, str.List_of_process_IDs_must_follow___pid.
jmp 0x804f700
nop
lea esi, [esi]
push fcn.0804fbbc
push edx
call fcn.0804de84
add esp, 8
test eax, eax
jne 0x804f700
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 0xa
xor eax, eax
jmp 0x804f700
lea esi, [esi]
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804f3bf
jg 0x804f3b7
test al, al
je 0x804f3d4
jmp 0x804f440
cmp al, 0x3d
jne 0x804f440
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804f440
mov edx, eax
jmp 0x804f401
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804f440
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804f440
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
je 0x804f440
cmp byte [edx], 0
je 0x804f440
lea eax, [ebp - 0x20]
push 0
push 0
push eax
push edx
call sym.imp.__strtol_internal
mov edx, eax
add esp, 0x10
mov eax, dword [ebp - 0x20]
cmp byte [eax], 0
jne 0x804f440
test edx, edx
jle 0x804f440
cmp edx, 0x773593ff
jg 0x804f440
mov dword [0x805c108], edx
xor eax, eax
jmp 0x804f700
mov esi, esi
mov eax, str.Number_of_rows_must_follow___rows_or___lines.
jmp 0x804f700
lea esi, [esi]
mov edi, dword [ebp - 0x24]
mov ebx, dword [ebp - 0x28]
cmp byte [ebx + edi], 0
je 0x804f466
mov eax, str.Option___null_does_not_take_an_argument.
jmp 0x804f700
mov eax, str.Sorry____null_is_not_implemented
jmp 0x804f700
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804f488
jg 0x804f484
test al, al
je 0x804f4a0
jmp 0x804f4d1
cmp al, 0x3d
jne 0x804f4d1
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804f4d1
mov edx, eax
jmp 0x804f4cd
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804f4d1
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804f4d1
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
jne 0x804f4e0
mov eax, str.Some_sid_thing_s__must_follow___sid.
jmp 0x804f700
nop
lea esi, [esi]
push fcn.0804fbbc
push edx
call fcn.0804de84
add esp, 8
test eax, eax
jne 0x804f700
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 0xc
xor eax, eax
jmp 0x804f700
lea esi, [esi]
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804f528
jg 0x804f524
test al, al
je 0x804f540
jmp 0x804f571
cmp al, 0x3d
jne 0x804f571
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804f571
mov edx, eax
jmp 0x804f56d
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804f571
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804f571
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
jne 0x804f580
mov eax, str.Long_sort_specification_must_follow___sort.
jmp 0x804f700
nop
lea esi, [esi]
push 6
push edx
call fcn.0804adfc
xor eax, eax
add esp, 8
jmp 0x804f700
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804f5aa
jg 0x804f5a6
test al, al
je 0x804f5c0
jmp 0x804f5f1
cmp al, 0x3d
jne 0x804f5f1
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804f5f1
mov edx, eax
jmp 0x804f5ed
nop
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804f5f1
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804f5f1
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
jne 0x804f600
mov eax, str.List_of_ttys_must_follow___tty.
jmp 0x804f700
nop
lea esi, [esi]
push fcn.0804dd00
push edx
call fcn.0804de84
add esp, 8
test eax, eax
jne 0x804f700
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 0xb
xor eax, eax
jmp 0x804f700
lea esi, [esi]
mov edx, dword [0x8127868]
mov al, byte [edx]
cmp al, 0x3a
je 0x804f648
jg 0x804f644
test al, al
je 0x804f660
jmp 0x804f691
cmp al, 0x3d
jne 0x804f691
lea edi, [edx + 1]
mov dword [0x8127868], edi
mov eax, edi
cmp byte [edx + 1], 0
je 0x804f691
mov edx, eax
jmp 0x804f68d
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804f691
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804f691
lea ebx, [edx + 1]
mov dword [0x8127864], ebx
mov edx, dword [ecx + edx*4 + 4]
test edx, edx
jne 0x804f698
mov eax, str.List_of_effective_users_must_follow___user.
jmp 0x804f700
push fcn.0804fc00
push edx
call fcn.0804de84
add esp, 8
test eax, eax
jne 0x804f700
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 2
xor eax, eax
jmp 0x804f700
lea esi, [esi]
cmp dword [0x812785c], 2
jne 0x804f6e2
mov eax, dword [0x8127860]
mov esi, dword [eax + 4]
mov edi, str.__version
mov ecx, 0xa
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
je 0x804f6f0
mov eax, str.The___version_option_is_exclusive.
jmp 0x804f700
lea esi, [esi]
call fcn.08054080
push 0
call sym.imp.exit
lea esi, [esi]
lea esp, [var_38h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [0x8127864]
mov edx, dword [0x8127860]
mov eax, dword [edx + eax*4]
jmp 0x804e6cd
mov eax, dword [0x8127868]
movsx eax, byte [eax]
push eax
push str.aAdefgGlnoptuU
call sym.imp.strchr
add esp, 8
test eax, eax
jne 0x804e024
mov dword [0x805c16c], 1
mov eax, dword [0x8127868]
mov edx, eax
movsx ecx, byte [eax]
cmp ecx, 0x7a
ja case.0x804e037.1
jmp dword [ecx*4 + 0x8059308]
mov esi, esi
cmp byte [edx + 1], 0
je 0x804e055
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e082
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e086
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e086
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e090
mov eax, str.List_of_command_names_must_follow__C.
jmp 0x804e6e2
push fcn.0804fcd0
push ebx
call fcn.0804de84
test eax, eax
jne 0x804e6e2
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 0xd
xor eax, eax
jmp 0x804e6e2
cmp byte [edx + 1], 0
je 0x804e0d0
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e0fd
nop
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e101
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e101
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e110
mov eax, str.List_of_real_groups_must_follow__G.
jmp 0x804e6e2
nop
lea esi, [esi]
push fcn.0804fc6c
push ebx
call fcn.0804de84
test eax, eax
jne 0x804e6e2
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 5
xor eax, eax
jmp 0x804e6e2
mov dword [0x805c0cc], 0x75
jmp 0x804e6c8
or byte [0x805c0d8], 8
mov eax, str.Use__m_to_print_threads__not_Suns_nonstandard__L.
jmp 0x804e6e2
or byte [0x805c0d8], 0x20
mov eax, str.Sorry__no_Mandatory_Access_Control_support.
jmp 0x804e6e2
mov dword [0x805c0f4], 1
jmp 0x804e6c8
cmp byte [edx + 1], 0
je 0x804e190
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e1bd
nop
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e1c1
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e1c1
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e1d0
mov eax, str.Format_or_sort_specification_must_follow__O.
jmp 0x804e6e2
nop
lea esi, [esi]
push 1
push ebx
call fcn.0804adfc
jmp 0x804e6e0
lea esi, [esi]
cmp byte [edx + 1], 0
je 0x804e1f5
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e222
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e226
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e226
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e230
mov eax, str.List_of_real_groups_must_follow__U.
jmp 0x804e6e2
push fcn.0804fc00
push ebx
call fcn.0804de84
test eax, eax
jne 0x804e6e2
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 1
xor eax, eax
jmp 0x804e6e2
cmp dword [0x812785c], 2
jne 0x804e280
mov eax, dword [0x8127860]
mov edx, dword [eax + 4]
movzx eax, byte [edx]
add eax, 0xffffffd3
jne 0x804e27c
movzx eax, byte [edx + 1]
add eax, 0xffffffaa
jne 0x804e27c
movzx eax, byte [edx + 2]
test eax, eax
je 0x804e290
mov eax, str.The__V_option_is_exclusive.
jmp 0x804e6e2
lea esi, [esi]
call fcn.08054080
push 0
call sym.imp.exit
lea esi, [esi]
or byte [0x805c110], 8
jmp 0x804e6c8
lea esi, [esi]
or byte [0x805c0d8], 1
jmp 0x804e6c8
lea esi, [esi]
or byte [0x805c110], 4
jmp 0x804e6c8
lea esi, [esi]
mov dword [0x805c09c], 1
jmp 0x804e6c8
nop
or byte [0x805c0d0], 1
mov dword [0x805c128], 1
jmp 0x804e6c8
cmp byte [edx + 1], 0
je 0x804e310
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e33d
nop
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e341
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e341
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e350
mov eax, str.List_of_session_leaders_OR_effective_group_names_must_follow__g.
jmp 0x804e6e2
nop
lea esi, [esi]
push fcn.0804fbbc
push ebx
call fcn.0804de84
add esp, 8
test eax, eax
je 0x804e573
push fcn.0804fc6c
push ebx
call fcn.0804de84
test eax, eax
jne 0x804e388
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 6
xor eax, eax
jmp 0x804e6e2
mov eax, str.List_of_session_leaders_OR_effective_group_IDs_was_invalid.
jmp 0x804e6e2
cmp dword [0x805c120], 0
je 0x804e3a7
or byte [0x805c0d0], 2
jmp 0x804e6c8
or byte [0x805c0d8], 2
jmp 0x804e6c8
or byte [0x805c0d0], 4
jmp 0x804e6c8
nop
mov eax, str.Thread_display_not_implemented.
jmp 0x804e6e2
lea esi, [esi]
cmp byte [edx + 1], 0
je 0x804e3e5
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e412
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e416
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e416
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e420
mov eax, str.System.map_or_psdatabase_must_follow__n.
jmp 0x804e6e2
mov dword [0x805c0f0], ebx
xor eax, eax
jmp 0x804e6e2
lea esi, [esi]
cmp byte [edx + 1], 0
je 0x804e445
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e472
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e476
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e476
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e480
mov eax, str.Format_specification_must_follow__o.
jmp 0x804e6e2
push 2
push ebx
call fcn.0804adfc
or dword [0x805c16c], eax
jmp 0x804e6e0
cmp byte [edx + 1], 0
je 0x804e4a8
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e4d5
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e4d9
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e4d9
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e4e3
mov eax, str.List_of_process_IDs_must_follow__p.
jmp 0x804e6e2
push fcn.0804fbbc
push ebx
call fcn.0804de84
test eax, eax
jne 0x804e6e2
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 0xa
xor eax, eax
jmp 0x804e6e2
lea esi, [esi]
cmp byte [edx + 1], 0
je 0x804e525
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e552
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e556
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e556
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e560
mov eax, str.List_of_session_IDs_must_follow__s.
jmp 0x804e6e2
push fcn.0804fbbc
push ebx
call fcn.0804de84
test eax, eax
jne 0x804e6e2
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 0xc
xor eax, eax
jmp 0x804e6e2
cmp byte [edx + 1], 0
je 0x804e5a0
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e5cd
nop
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e5d1
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e5d1
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e5e0
mov eax, str.List_of_terminals__pty__tty...__must_follow__t.
jmp 0x804e6e2
nop
lea esi, [esi]
push fcn.0804dd00
push ebx
call fcn.0804de84
test eax, eax
jne 0x804e6e2
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 0xb
xor eax, eax
jmp 0x804e6e2
cmp byte [edx + 1], 0
je 0x804e620
mov dword [0x805c16c], 1
lea ebx, [eax + 1]
jmp 0x804e64d
nop
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e651
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e651
lea esi, [edx + 1]
mov dword [0x8127864], esi
mov ebx, dword [ecx + edx*4 + 4]
test ebx, ebx
jne 0x804e660
mov eax, str.List_of_users_must_follow__p.
jmp 0x804e6e2
nop
lea esi, [esi]
push fcn.0804fc00
push ebx
call fcn.0804de84
test eax, eax
jne 0x804e6e2
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 2
xor eax, eax
jmp 0x804e6e2
nop
inc dword [0x805c168]
jmp 0x804e6c8
or byte [0x805c0d8], 4
jmp 0x804e6c8
mov eax, str.Dont_understand_MAC_on_Linux.
jmp 0x804e6e2
push str.ARRRGH______n
call sym.imp.printf
mov eax, str.Embedded___among_SysV_options_makes_no_sense.
jmp 0x804e6e2
lea esi, [esi]
push str.ARRRGH____0_n
call sym.imp.printf
mov eax, str.Please_report_the__SysV_0_cant_happen__bug.
jmp 0x804e6e2
mov eax, str.Unsupported_SysV_option.
jmp 0x804e6e2
mov eax, dword [0x8127868]
lea esi, [eax + 1]
mov dword [0x8127868], esi
cmp byte [eax + 1], 0
jne 0x804e000
xor eax, eax
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov edx, dword [0x8127864]
mov eax, dword [0x8127860]
mov eax, dword [eax + edx*4]
mov dword [0x8127868], eax
cmp byte [eax], 0x2d
jne 0x804e724
cmp dword [0x805c170], 0
jne 0x804ed80
mov eax, 0x80594f4
jmp 0x804ed9a
dec eax
mov dword [0x8127868], eax
test byte [obj.personality], 0x10
je 0x804e750
cmp dword [0x805c170], 0
jne 0x804ed80
mov eax, str.Cant_happen___Problem_2.
jmp 0x804ed9a
lea esi, [esi]
cmp dword [0x805c170], 0
je 0x804ed80
mov eax, str.2nd_chance_parse_failed__not_BSD_or_SysV.
jmp 0x804ed9a
mov eax, str.Only_one_heading_option_may_be_specified.
jmp 0x804ed9a
mov edx, dword [0x8127868]
mov eax, edx
movsx ecx, byte [edx]
cmp ecx, 0x78
ja case.0x804e785.1
jmp dword [ecx*4 + 0x8059860]
lea esi, [esi]
mov eax, str.Option_A_is_reserved.
jmp 0x804ed9a
lea esi, [esi]
mov eax, str.Option_C_is_reserved.
jmp 0x804ed9a
lea esi, [esi]
cmp dword [0x812785c], 2
jne 0x804e7d1
mov eax, dword [0x8127860]
mov edx, dword [eax + 4]
movzx eax, byte [edx]
add eax, 0xffffffb4
jne 0x804e7cd
movzx eax, byte [edx + 1]
test eax, eax
je 0x804e7e0
mov eax, str.The_L_option_is_exclusive.
jmp 0x804ed9a
nop
lea esi, [esi]
call fcn.0804c574
push 0
call sym.imp.exit
lea esi, [esi]
mov eax, str.Option_M_is_unsupported__try_N_or__n_instead.
jmp 0x804ed9a
lea esi, [esi]
cmp byte [edx + 1], 0
je 0x804e813
mov dword [0x805c16c], 1
inc eax
jmp 0x804e840
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e844
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e844
lea edi, [edx + 1]
mov dword [0x8127864], edi
mov eax, dword [ecx + edx*4 + 4]
test eax, eax
jne 0x804e850
mov eax, str.System.map_or_psdatabase_must_follow_N.
jmp 0x804ed9a
mov esi, esi
mov dword [0x805c0f0], eax
xor eax, eax
jmp 0x804ed9a
lea esi, [esi]
cmp byte [edx + 1], 0
je 0x804e873
mov dword [0x805c16c], 1
inc eax
jmp 0x804e8a0
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e8a4
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e8a4
lea edi, [edx + 1]
mov dword [0x8127864], edi
mov eax, dword [ecx + edx*4 + 4]
test eax, eax
jne 0x804e8b0
mov eax, str.Format_or_sort_specification_must_follow_O.
jmp 0x804ed9a
mov esi, esi
push 3
push eax
call fcn.0804adfc
jmp 0x804ed98
lea esi, [esi]
mov dword [0x805c0e4], 1
jmp 0x804ed80
nop
push 0x10
call sym.imp.malloc
mov ebx, eax
push 8
call sym.imp.malloc
mov ecx, eax
mov dword [ebx + 4], ecx
mov eax, dword [0x805c0c4]
mov edx, dword [0x805c0c8]
mov dword [ecx], eax
mov dword [ecx + 4], edx
mov dword [ebx + 0xc], 0xb
mov dword [ebx + 8], 1
mov eax, dword [0x805c10c]
mov dword [ebx], eax
mov dword [0x805c10c], ebx
add esp, 8
jmp 0x804ed80
cmp byte [edx + 1], 0
je 0x804e930
mov dword [0x805c16c], 1
inc eax
jmp 0x804e95d
nop
lea esi, [esi]
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804e961
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804e961
lea edi, [edx + 1]
mov dword [0x8127864], edi
mov eax, dword [ecx + edx*4 + 4]
test eax, eax
jne 0x804e970
mov eax, str.List_of_users_must_follow_U.
jmp 0x804ed9a
nop
lea esi, [esi]
push fcn.0804fc00
push eax
call fcn.0804de84
test eax, eax
jne 0x804ed9a
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 2
xor eax, eax
jmp 0x804ed9a
cmp dword [0x812785c], 2
jne 0x804e9b7
mov eax, dword [0x8127860]
mov edx, dword [eax + 4]
movzx eax, byte [edx]
add eax, 0xffffffaa
jne 0x804e9b3
movzx eax, byte [edx + 1]
test eax, eax
je 0x804e9c1
mov eax, str.The_V_option_is_exclusive.
jmp 0x804ed9a
call fcn.08054080
push 0
call sym.imp.exit
lea esi, [esi]
mov eax, str.Obsolete_W_option_not_supported.__You_have_a__dev_drum__
jmp 0x804ed9a
lea esi, [esi]
or byte [0x805c0d1], 1
jmp 0x804ed80
lea esi, [esi]
or byte [0x805c110], 0x10
jmp 0x804ed80
lea esi, [esi]
mov dword [0x805c0b4], 1
jmp 0x804ed80
nop
mov dword [0x805c0b8], 1
jmp 0x804ed80
nop
mov dword [0x805c0cc], 0x62
jmp 0x804ed80
nop
or byte [0x805c110], 2
jmp 0x804ed80
lea esi, [esi]
cmp dword [0x805c0e0], 0
jne 0x804e767
test byte [obj.personality], 2
je 0x804ea65
mov dword [0x805c0e0], 2
jmp 0x804ed80
mov dword [0x805c0e0], 1
jmp 0x804ed80
or byte [0x805c0d0], 8
jmp 0x804ed80
mov eax, str.Obsolete_k_option_not_supported.
jmp 0x804ed9a
lea esi, [esi]
or byte [0x805c0d0], 0x10
jmp 0x804ed80
lea esi, [esi]
mov eax, dword [obj.personality]
test al, 0x40
je 0x804eab5
or byte [0x805c0d1], 2
jmp 0x804ed80
test al, 4
je 0x804ead0
push 5
push str.pmem
call fcn.0804adfc
add esp, 8
jmp 0x804ed80
lea esi, [esi]
mov eax, str.Thread_display_not_implemented.
jmp 0x804ed9a
lea esi, [esi]
mov dword [0x805c134], 1
mov dword [0x805c130], 1
jmp 0x804ed80
lea esi, [esi]
cmp byte [edx + 1], 0
je 0x804eb13
mov dword [0x805c16c], 1
inc eax
jmp 0x804eb40
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804eb44
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804eb44
lea edi, [edx + 1]
mov dword [0x8127864], edi
mov eax, dword [ecx + edx*4 + 4]
test eax, eax
jne 0x804eb50
mov eax, str.Format_specification_must_follow__o.
jmp 0x804ed9a
mov esi, esi
push 4
push eax
call fcn.0804adfc
jmp 0x804ed98
lea esi, [esi]
cmp byte [edx + 1], 0
je 0x804eb73
mov dword [0x805c16c], 1
inc eax
jmp 0x804eba0
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804eba4
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804eba4
lea edi, [edx + 1]
mov dword [0x8127864], edi
mov eax, dword [ecx + edx*4 + 4]
test eax, eax
jne 0x804ebb0
mov eax, str.List_of_process_IDs_must_follow_p.
jmp 0x804ed9a
mov esi, esi
push fcn.0804fbbc
push eax
call fcn.0804de84
test eax, eax
jne 0x804ed9a
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 0xa
xor eax, eax
jmp 0x804ed9a
mov dword [0x805c0f8], 1
jmp 0x804ed80
or byte [0x805c0d0], 0x20
jmp 0x804ed80
cmp byte [edx + 1], 0
je 0x804ec04
mov dword [0x805c16c], 1
inc eax
jmp 0x804ec31
mov edx, dword [0x8127864]
lea eax, [edx + 2]
cmp eax, dword [0x812785c]
jg 0x804ec35
mov ecx, dword [0x8127860]
mov eax, dword [ecx + edx*4 + 4]
cmp byte [eax], 0
je 0x804ec35
lea edi, [edx + 1]
mov dword [0x8127864], edi
mov eax, dword [ecx + edx*4 + 4]
test eax, eax
jne 0x804ec80
push 0x10
call sym.imp.malloc
mov ebx, eax
push 8
call sym.imp.malloc
mov ecx, eax
mov dword [ebx + 4], ecx
mov eax, dword [0x805c0c4]
mov edx, dword [0x805c0c8]
mov dword [ecx], eax
mov dword [ecx + 4], edx
mov dword [ebx + 0xc], 0xb
mov dword [ebx + 8], 1
mov eax, dword [0x805c10c]
mov dword [ebx], eax
mov dword [0x805c10c], ebx
jmp 0x804ed98
lea esi, [esi]
push fcn.0804dd00
push eax
call fcn.0804de84
test eax, eax
jne 0x804ed9a
mov eax, dword [0x805c10c]
mov dword [eax + 0xc], 0xb
xor eax, eax
jmp 0x804ed9a
or byte [0x805c0d0], 0x40
jmp 0x804ed80
or byte [0x805c0d0], 0x80
jmp 0x804ed80
mov esi, esi
inc dword [0x805c168]
jmp 0x804ed80
nop
lea esi, [esi]
or byte [0x805c110], 1
jmp 0x804ed80
lea esi, [esi]
push str.ARRRGH______n
call sym.imp.printf
mov eax, str.Embedded___among_BSD_options_makes_no_sense.
jmp 0x804ed9a
push str.ARRRGH____0_n
call sym.imp.printf
mov eax, str.Please_report_the__BSD_0_cant_happen__bug.
jmp 0x804ed9a
mov al, byte [edx]
add al, 0xd0
cmp al, 9
ja 0x804ed76
push 0x10
push 1
call sym.imp.calloc
mov ebx, eax
push 8
push 1
call sym.imp.calloc
mov esi, eax
mov dword [ebx + 4], esi
mov dword [ebx + 8], 1
add esp, 0x10
lea eax, [var_4h]
push 0
push 0
push eax
push dword [0x8127868]
call sym.imp.__strtol_internal
mov edx, eax
mov eax, dword [var_4h]
cmp byte [eax], 0
jne 0x804ed5e
cmp edx, 0x7fff
jg 0x804ed5e
test edx, edx
jl 0x804ed5e
mov dword [esi], edx
mov eax, dword [0x805c10c]
mov dword [ebx], eax
mov dword [0x805c10c], ebx
mov dword [ebx + 0xc], 0xa
xor eax, eax
jmp 0x804ed9a
mov eax, str.Unsupported_option__BSD_syntax_
jmp 0x804ed9a
lea esi, [esi]
mov eax, dword [0x8127868]
lea edi, [eax + 1]
mov dword [0x8127868], edi
cmp byte [eax + 1], 0
jne 0x804e771
xor eax, eax
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x1c
push edi
push esi
push ebx
mov edx, dword [0x8127864]
mov ecx, dword [0x812785c]
mov dword [var_18h], ecx
sub dword [var_18h], edx
mov eax, dword [0x8127860]
lea edx, [eax + edx*4]
mov dword [var_14h], edx
dec ecx
mov dword [0x8127864], ecx
push 0x10
call sym.imp.malloc
mov dword [var_10h], eax
mov esi, dword [var_18h]
lea ebx, [esi*8]
push ebx
call sym.imp.malloc
mov ecx, dword [var_10h]
mov dword [ecx + 4], eax
mov dword [ecx + 8], 0
push 0x10
call sym.imp.malloc
mov edi, eax
push ebx
call sym.imp.malloc
mov dword [edi + 4], eax
mov dword [edi + 8], 0
push 0x10
call sym.imp.malloc
mov dword [var_1ch], eax
push ebx
call sym.imp.malloc
mov esi, dword [var_1ch]
mov dword [esi + 4], eax
mov dword [esi + 8], 0
add esp, 0x18
sub dword [var_18h], 1
jb 0x804f885
nop
mov ecx, dword [var_14h]
mov edx, dword [ecx]
add ecx, 4
mov dword [var_14h], ecx
mov al, byte [edx]
cmp al, 0x2b
je 0x804f820
cmp al, 0x2d
je 0x804f7e3
mov esi, dword [var_10h]
mov esi, dword [esi + 8]
lea ebx, [esi*8]
mov ecx, dword [var_10h]
add ebx, dword [ecx + 4]
inc dword [ecx + 8]
lea eax, [var_4h]
push 0
push 0
push eax
push edx
call sym.imp.__strtol_internal
mov edx, eax
add esp, 0x10
mov eax, dword [var_4h]
jmp 0x804f80a
inc edx
mov esi, dword [edi + 8]
lea ebx, [esi*8]
add ebx, dword [edi + 4]
inc dword [edi + 8]
lea eax, [var_8h]
push 0
push 0
push eax
push edx
call sym.imp.__strtol_internal
mov edx, eax
add esp, 0x10
mov eax, dword [var_8h]
cmp byte [eax], 0
jne 0x804f852
cmp edx, 0x7fff
jg 0x804f86c
test edx, edx
jl 0x804f86c
mov dword [ebx], edx
jmp 0x804f87b
nop
inc edx
mov ecx, dword [var_1ch]
mov ecx, dword [ecx + 8]
lea ebx, [ecx*8]
mov esi, dword [var_1ch]
add ebx, dword [esi + 4]
inc dword [esi + 8]
lea eax, [var_ch]
push 0
push 0
push eax
push edx
call sym.imp.__strtol_internal
mov edx, eax
add esp, 0x10
mov eax, dword [var_ch]
cmp byte [eax], 0
je 0x804f860
mov eax, dword [0x805c178]
jmp 0x804f877
lea esi, [esi]
cmp edx, 0x7fff
jg 0x804f86c
test edx, edx
jge 0x804f873
mov eax, dword [0x805c174]
jmp 0x804f877
mov dword [ebx], edx
xor eax, eax
test eax, eax
jne 0x804f8db
sub dword [var_18h], 1
jae 0x804f7a0
mov ecx, dword [var_10h]
cmp dword [ecx + 8], 0
je 0x804f8a2
mov eax, dword [0x805c10c]
mov dword [ecx], eax
mov dword [0x805c10c], ecx
mov dword [ecx + 0xc], 0xa
cmp dword [edi + 8], 0
je 0x804f8bc
mov eax, dword [0x805c10c]
mov dword [edi], eax
mov dword [0x805c10c], edi
mov dword [edi + 0xc], 9
mov esi, dword [var_1ch]
cmp dword [esi + 8], 0
je 0x804f8d9
mov eax, dword [0x805c10c]
mov dword [esi], eax
mov dword [0x805c10c], esi
mov dword [esi + 0xc], 0xc
xor eax, eax
lea esp, [var_28h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
jmp 0x804fa44
mov edx, dword [0x8127864]
mov eax, dword [0x8127860]
push dword [eax + edx*4]
call fcn.0804f8e4
add esp, 4
cmp eax, 3
je 0x804f9b5
mov dword [0x805c16c], 1
cmp eax, 7
ja case.default.0x804f9ba
jmp dword [eax*4 + 0x805a228]
call fcn.0804edb8
jmp 0x804fa40
cmp dword [0x805c170], 0
jne 0x804f9f1
call fcn.0804dfe8
jmp 0x804fa40
cmp dword [0x805c170], 0
je 0x804f9f1
test byte [obj.personality], 0x10
jne 0x804f9f1
mov eax, str.way_bad
jmp 0x804fa62
mov dword [0x805c100], 1
call fcn.0804e6ec
jmp 0x804fa40
mov dword [0x805c100], 1
call fcn.0804f708
jmp 0x804fa40
mov eax, str.Garbage_option.
jmp 0x804fa62
lea esi, [esi]
mov edx, dword [0x8127864]
mov eax, dword [0x8127860]
push dword [eax + edx*4]
push str.________________________s_n
call sym.imp.printf
mov eax, str.Something_broke.
jmp 0x804fa62
nop
test eax, eax
jne 0x804fa62
mov eax, dword [0x8127864]
lea ecx, [eax + 1]
mov dword [0x8127864], ecx
mov eax, ecx
cmp eax, dword [0x812785c]
jl 0x804f990
xor eax, eax
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [arg_8h]
mov edx, dword [obj.personality]
test dl, 1
je 0x804b500
mov eax, 1
test dl, 0x20
je 0x804b507
xor eax, eax
mov dword [0x805c824], eax
mov eax, dword [0x805c144]
test eax, eax
je 0x804b526
push eax
call fcn.0804aac8
add esp, 4
test eax, eax
jne 0x804b90e
cmp dword [0x805c0d4], 0
je 0x804b53c
push str.Bug:_must_reset_the_list_first__n
call sym.imp.printf
add esp, 4
mov ebx, dword [0x805c144]
test ebx, ebx
je 0x804b56f
mov ecx, dword [ebx + 4]
mov dword [ebx + 4], 0
test ecx, ecx
je 0x804b569
mov edx, ecx
mov ecx, dword [ecx]
mov eax, dword [0x805c0d4]
mov dword [edx], eax
mov dword [0x805c0d4], edx
test ecx, ecx
jne 0x804b554
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804b546
mov ebx, dword [0x805c144]
test ebx, ebx
je 0x804b5ab
lea esi, [esi]
mov ecx, dword [ebx + 8]
mov dword [ebx + 8], 0
test ecx, ecx
je 0x804b5a5
mov esi, esi
mov edx, ecx
mov ecx, dword [ecx]
mov eax, dword [0x805c114]
mov dword [edx], eax
mov dword [0x805c114], edx
test ecx, ecx
jne 0x804b590
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804b580
cmp dword [0x805c0d4], 0
je 0x804b5d0
cmp dword [0x805c0d0], 0
jne 0x804b647
mov esi, 1
jmp 0x804b729
nop
lea esi, [esi]
mov eax, dword [0x805c0d0]
cmp eax, 6
je 0x804b678
ja 0x804b602
cmp eax, 2
je 0x804b670
ja 0x804b5f6
test eax, eax
je 0x804b651
cmp eax, 1
je 0x804b660
jmp 0x804b647
cmp eax, 4
je 0x804b668
ja 0x804b655
jmp 0x804b680
cmp eax, 0x40
je 0x804b6a0
ja 0x804b627
cmp eax, 0x10
je 0x804b690
ja 0x804b620
cmp eax, 8
je 0x804b687
jmp 0x804b647
nop
cmp eax, 0x20
je 0x804b698
jmp 0x804b647
cmp eax, 0x100
je 0x804b6b0
ja 0x804b640
cmp eax, 0x80
je 0x804b6a8
jmp 0x804b647
lea esi, [esi]
cmp eax, 0x200
je 0x804b6b7
mov eax, str.Conflicting_format_options.
jmp 0x804b90e
xor ebx, ebx
jmp 0x804b6bc
mov ebx, dword [0x805c11c]
jmp 0x804b6bc
lea esi, [esi]
mov ebx, dword [0x805c118]
jmp 0x804b6bc
mov ebx, dword [0x805c124]
jmp 0x804b6bc
mov ebx, dword [0x805c120]
jmp 0x804b6bc
mov ebx, 0x805597d
jmp 0x804b6bc
nop
mov ebx, 0x8055983
jmp 0x804b6bc
mov ebx, dword [0x805c0a0]
jmp 0x804b6bc
nop
mov ebx, dword [0x805c0a4]
jmp 0x804b6bc
mov ebx, dword [0x805c0a8]
jmp 0x804b6bc
mov ebx, dword [0x805c0ac]
jmp 0x804b6bc
mov ebx, dword [0x805c0b0]
jmp 0x804b6bc
mov ebx, 0x8055989
jmp 0x804b6bc
mov ebx, 0x805598e
xor esi, esi
test eax, eax
jne 0x804b6e8
cmp dword [0x805c0d8], 0
jne 0x804b6e8
push str.PS_FORMAT
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x804b6e8
cmp byte [eax], 0
je 0x804b6e8
mov ebx, eax
mov esi, 2
test ebx, ebx
je 0x804b717
push 0
push ebx
call fcn.0804a2c0
mov edx, eax
add esp, 8
test edx, edx
je 0x804b729
lea esi, [esi]
mov ecx, edx
mov edx, dword [edx]
mov eax, dword [0x805c0d4]
mov dword [ecx], eax
mov dword [0x805c0d4], ecx
test edx, edx
jne 0x804b700
jmp 0x804b729
call fcn.0804b034
test eax, eax
jne 0x804b90e
mov esi, 3
mov eax, dword [0x805c0d8]
test eax, eax
je 0x804b891
test esi, esi
je 0x804b744
mov eax, str.Cant_use_output_modifiers_with_user_defined_output
jmp 0x804b90e
test al, 2
je 0x804b7b0
push 0
push 0x8055901
call fcn.0804a2c0
mov ebx, eax
push ebx
push 0x80559d4
call fcn.0804af38
add esp, 0x10
test eax, eax
jne 0x804b784
push ebx
push 0x80559d9
call fcn.0804af38
add esp, 8
test eax, eax
jne 0x804b784
mov eax, str.Internal_error__no_PID_or_PPID_for__j_option.
jmp 0x804b90e
push 0
push 0x80558fd
call fcn.0804a2c0
mov ebx, eax
push ebx
push 0x8055a0e
call fcn.0804af38
add esp, 0x10
test eax, eax
jne 0x804b7b0
mov eax, str.Lost_my_PGID_
jmp 0x804b90e
mov esi, esi
test byte [0x805c0d8], 4
je 0x804b7f0
push 0x8055a21
call fcn.0804afb4
push 0
push 0x80558cd
call fcn.0804a2c0
mov ebx, eax
push ebx
push 0x8055a23
call fcn.0804af38
add esp, 0x14
test eax, eax
je 0x804b7f0
push 0x8055a23
call fcn.0804afb4
add esp, 4
test byte [0x805c0d8], 1
je 0x804b891
push 0x8055a28
call fcn.0804afb4
push 0x8055a2d
call fcn.0804afb4
push 0x8055a31
call fcn.0804afb4
push 0x8055a34
call fcn.0804afb4
push 0x8055a36
call fcn.0804afb4
push 0
push 0x80558e0
call fcn.0804a2c0
mov ebx, eax
push ebx
push 0x8055a39
call fcn.0804af38
add esp, 0x24
test eax, eax
jne 0x804b860
mov eax, str.Internal_error__no_PRI_for__c_option.
jmp 0x804b90e
lea esi, [esi]
push 0x8055a39
call fcn.0804afb4
push 0
push 0x80558dc
call fcn.0804a2c0
mov ebx, eax
push ebx
push 0x8055a66
call fcn.0804af38
add esp, 0x14
test eax, eax
jne 0x804b891
mov eax, str.Lost_my_CLS_
jmp 0x804b90e
test esi, esi
jne 0x804b90c
test byte [0x805c0fd], 1
je 0x804b8d2
test byte [0x805c0d0], 4
je 0x804b8d2
push 0
push 0x80558d1
call fcn.0804a2c0
push eax
push 0x8055a23
call fcn.0804af38
add esp, 0x10
test eax, eax
je 0x804b8d2
push 0x8055a23
call fcn.0804afb4
add esp, 4
test byte [0x805c0fd], 2
je 0x804b90c
test byte [0x805c0d0], 1
je 0x804b90c
push 0
push 0x805590b
call fcn.0804a2c0
push eax
push 0x8055a77
call fcn.0804af38
add esp, 0x10
test eax, eax
je 0x804b90c
push 0x8055a77
call fcn.0804afb4
xor eax, eax
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x805c110]
test eax, eax
jne 0x804a207
mov dword [0x805c140], 0xaa00
jmp 0x804a2b0
cmp byte [obj.personality], 0
jl 0x804a21b
test al, 0xc
jne 0x804a21b
or al, 2
mov dword [0x805c110], eax
dec eax
cmp eax, 0x12
ja case.0x804a225.5
jmp dword [eax*4 + 0x80553e4]
lea esi, [esi]
mov dword [0x805c140], 0x3333
jmp 0x804a2b0
lea esi, [esi]
mov dword [0x805c140], 0x303
jmp 0x804a2b0
lea esi, [esi]
mov dword [0x805c140], 0x3300
jmp 0x804a2b0
lea esi, [esi]
mov dword [0x805c140], 0x2222
jmp 0x804a2b0
lea esi, [esi]
mov dword [0x805c140], 0xf00
jmp 0x804a2b0
lea esi, [esi]
mov dword [0x805c140], 0xaaaa
jmp 0x804a2b0
lea esi, [esi]
mov dword [0x805c09c], 1
mov dword [0x805c110], 0
jmp 0x804a2b0
mov eax, str.Process_selection_options_conflict.
jmp 0x804a2b2
lea esi, [esi]
xor eax, eax
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [0x805c10c]
cmp esi, 0xdeadbeef
je 0x8049cd9
jmp 0x8049cd5
lea esi, [esi]
mov ebx, esi
mov esi, dword [esi]
push dword [ebx + 4]
call sym.imp.free
push ebx
call sym.imp.free
add esp, 8
test esi, esi
jne 0x8049cc0
mov dword [0x805c10c], 0
push 0x805c640
call fcn.08052d20
call fcn.080496b0
call fcn.080497c0
mov dword [0x805c09c], 0
mov dword [0x805c0b4], 0
mov dword [0x805c0b8], 0
call sym.imp.geteuid
mov dword [0x805c0bc], eax
call sym.imp.getpid
mov dword [0x805c0c0], eax
mov eax, dword [0x805c810]
cdq
mov dword [0x805c0c4], eax
mov dword [0x805c0c8], edx
mov dword [0x805c0cc], 0
mov dword [0x805c0d0], 0
mov dword [0x805c0d4], 0
mov dword [0x805c0d8], 0
mov dword [0x805c0dc], 0xffffffff
mov dword [0x805c0e0], 0
mov dword [0x805c0e4], 0
mov dword [0x805c0e8], 1
mov dword [0x805c0ec], 0x50
mov dword [0x805c0f0], 0
mov dword [0x805c0f4], 0
mov dword [0x805c0f8], 0
mov dword [0x805c10c], 0
mov dword [0x805c110], 0
mov dword [0x805c114], 0
mov dword [0x805c128], 0
mov dword [0x805c12c], 0
mov dword [0x805c130], 0
mov dword [0x805c134], 0
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
mov dword [0x805c144], 0
mov dword [0x805c0d4], 0
mov dword [0x805c148], 0
mov dword [0x805c14c], 0
mov dword [0x805c150], 0
leave
ret
push ebp
mov ebp, esp
push ebx
mov dword [0x805c194], 0
xor edx, edx
mov ebx, 0x8169d20
mov ecx, 0x8169ce0
lea eax, [edx*4]
mov dword [eax + ebx], 0
mov dword [eax + ecx], 0
inc edx
cmp edx, 9
jle 0x8051066
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
push 0x1c
call fcn.08054198
mov ebx, eax
mov esi, edi
and esi, 0x100
add esp, 4
test esi, esi
jne 0x8051dc5
push str._proc
call sym.imp.opendir
mov dword [ebx], eax
test eax, eax
jne 0x8051dcb
xor eax, eax
jmp 0x8051e28
mov dword [ebx], 0
mov dword [ebx + 4], edi
test esi, esi
je 0x8051de0
mov eax, dword [arg_ch]
mov dword [ebx + 8], eax
jmp 0x8051e14
lea esi, [esi]
test edi, 0x200
je 0x8051df0
mov eax, dword [arg_ch]
mov dword [ebx + 0xc], eax
jmp 0x8051e14
test edi, 0x400
je 0x8051e06
mov eax, dword [arg_ch]
mov dword [ebx + 0x10], eax
mov eax, dword [arg_10h]
mov dword [ebx + 0x14], eax
jmp 0x8051e14
test edi, 0x800
je 0x8051e14
mov eax, dword [arg_ch]
mov dword [ebx + 0x18], eax
and edi, 0x1200
cmp edi, 0x1200
jne 0x8051e26
and byte [ebx + 5], 0xfd
mov eax, ebx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
test edi, edi
je 0x804fdb5
mov esi, dword [0x8169cc8]
cmp dword [esi], 0
je 0x804fdb5
lea ebx, [esi + 8]
push 0
push 0xa
push 0
push ebx
call sym.imp.__strtol_internal
add esp, 0x10
mov edx, dword [esi + 4]
cmp edx, 1
je 0x804fd60
jg 0x804fd35
test edx, edx
je 0x804fd41
jmp 0x804fdaa
cmp edx, 2
je 0x804fd80
cmp edx, 3
je 0x804fd96
jmp 0x804fdaa
cmp eax, dword [edi + 0x1a8]
je 0x804fd77
cmp eax, dword [edi + 0x1a0]
je 0x804fd77
cmp eax, dword [edi + 0x1b0]
jne 0x804fdaa
jmp 0x804fd77
nop
lea esi, [esi]
push 0
push 0xa
push 0
push ebx
call sym.imp.__strtol_internal
add esp, 0x10
cmp dword [edi + 0x1d0], eax
jne 0x804fdaa
mov eax, 1
jmp 0x804fdb7
mov esi, esi
push ebx
lea eax, [edi + 0x190]
push eax
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804fdaa
jmp 0x804fd77
push ebx
lea eax, [edi + 0x190]
push eax
call sym.imp.strstr
add esp, 8
test eax, eax
jne 0x804fd77
mov esi, dword [esi]
cmp dword [esi], 0
jne 0x804fd10
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, 1
cmp dword [0x805c09c], 0
jne 0x804a1be
cmp dword [0x805c110], 0
jne 0x804a164
cmp dword [0x805c10c], 0
jne 0x804a1b2
mov ax, word [0x805c0bc]
cmp word [esi + 0x1a8], ax
sete al
movzx edx, al
mov eax, dword [esi + 0x1c0]
cmp dword [esi + 0x1cc], eax
jne 0x804a188
or edx, 2
mov ecx, edx
mov ax, word [esi + 0x1d0]
cmp ax, 0xffff
jne 0x804a19a
or ecx, 4
cmp ax, word [0x805c0c4]
jne 0x804a1a6
or ecx, 8
mov eax, ebx
shl eax, cl
test dword [0x805c140], eax
jne 0x804a1be
push esi
call fcn.08049e20
test eax, eax
jne 0x804a1be
xor ebx, ebx
cmp dword [0x805c0f8], 0
je 0x804a1d7
mov al, byte [esi + 0x1dc]
cmp al, 0x52
je 0x804a1d7
cmp al, 0x44
je 0x804a1d7
xor ebx, ebx
cmp dword [0x805c0f4], 0
je 0x804a1e3
xor ebx, 1
mov eax, ebx
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov dword [var_4h], 0
xor esi, esi
jmp 0x80529a9
mov al, byte [eax + 0xb]
add al, 0xd0
cmp al, 9
jbe 0x80529bf
mov edx, dword [arg_8h]
push dword [edx]
call sym.imp.readdir
mov dword [0x8148e80], eax
add esp, 4
test eax, eax
jne 0x80529a0
mov eax, dword [0x8148e80]
test eax, eax
je 0x80529cd
add eax, 0xb
jne 0x80529d4
xor eax, eax
jmp 0x8052d18
push eax
push str._proc__s
push 0x8148f00
call sym.imp.sprintf
add esp, 0xc
push 0x8148ea0
push 0x8148f00
push 3
call sym.imp.__xstat
add esp, 0xc
cmp eax, 0xffffffff
je 0x80529a9
cmp dword [var_4h], 0
jne 0x8052a28
cmp dword [arg_ch], 0
je 0x8052a11
mov esi, dword [arg_ch]
jmp 0x8052a21
push 0x1e4
push esi
call fcn.08054150
add esp, 8
mov esi, eax
mov dword [var_4h], 1
mov eax, dword [0x8148eb8]
mov dword [esi + 0x1a8], eax
push str.stat
push 0x8148f00
push str._s__s
push 0x8148ba0
call sym.imp.sprintf
push 0
push 0
push 0x8148ba0
call sym.imp.open
mov edi, eax
add esp, 0x1c
cmp edi, 0xffffffff
je 0x8052a96
push 0x1ff
push 0x8148f20
push edi
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x8052a84
mov ebx, 0xffffffff
jmp 0x8052a8b
mov byte [ebx + 0x8148f20], 0
push edi
call sym.imp.close
mov eax, ebx
add esp, 4
cmp eax, 0xffffffff
je 0x80529a9
push esi
push 0x8148f20
call fcn.0805208c
add esp, 8
push str.statm
push 0x8148f00
push str._s__s
push 0x8148ba0
call sym.imp.sprintf
push 0
push 0
push 0x8148ba0
call sym.imp.open
mov edi, eax
add esp, 0x1c
cmp edi, 0xffffffff
je 0x8052b12
push 0x1ff
push 0x8148f20
push edi
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x8052b00
mov ebx, 0xffffffff
jmp 0x8052b07
mov esi, esi
mov byte [ebx + 0x8148f20], 0
push edi
call sym.imp.close
mov eax, ebx
add esp, 4
cmp eax, 0xffffffff
je 0x8052b57
lea eax, [esi + 0x94]
push eax
lea eax, [esi + 0x90]
push eax
lea eax, [esi + 0x8c]
push eax
lea eax, [esi + 0x88]
push eax
lea eax, [esi + 0x84]
push eax
lea eax, [esi + 0x80]
push eax
lea eax, [esi + 0x7c]
push eax
push str._ld__ld__ld__ld__ld__ld__ld
push 0x8148f20
call sym.imp.sscanf
add esp, 0x24
push str.status
push 0x8148f00
push str._s__s
push 0x8148ba0
call sym.imp.sprintf
push 0
push 0
push 0x8148ba0
call sym.imp.open
mov edi, eax
add esp, 0x1c
cmp edi, 0xffffffff
je 0x8052bba
push 0x1ff
push 0x8148f20
push edi
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x8052ba8
mov ebx, 0xffffffff
jmp 0x8052baf
mov byte [ebx + 0x8148f20], 0
push edi
call sym.imp.close
mov eax, ebx
add esp, 4
cmp eax, 0xffffffff
je 0x8052bcf
push 0
push esi
push 0x8148f20
call fcn.08051e30
add esp, 0xc
push 0x10
push dword [esi + 0x1a8]
call fcn.08054230
add esp, 4
push eax
lea eax, [esi + 0x120]
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
push dword [esi + 0x1ac]
call fcn.080542a8
add esp, 4
push eax
lea eax, [esi + 0x160]
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
push dword [esi + 0x1a0]
call fcn.08054230
add esp, 4
push eax
lea eax, [esi + 0x110]
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
push dword [esi + 0x1a4]
call fcn.080542a8
add esp, 4
push eax
lea eax, [esi + 0x150]
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
push dword [esi + 0x1b0]
call fcn.08054230
add esp, 4
push eax
lea eax, [esi + 0x130]
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
push dword [esi + 0x1b4]
call fcn.080542a8
add esp, 4
push eax
lea eax, [esi + 0x170]
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
push dword [esi + 0x1b8]
call fcn.08054230
add esp, 4
push eax
lea eax, [esi + 0x140]
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
push dword [esi + 0x1bc]
call fcn.080542a8
add esp, 4
push eax
lea eax, [esi + 0x180]
push eax
call sym.imp.strncpy
add esp, 0xc
push str.cmdline
push 0x8148f00
call fcn.08052224
mov dword [esi + 0x10c], eax
push str.environ
push 0x8148f00
call fcn.08052224
mov dword [esi + 0x108], eax
add esp, 0x10
cmp byte [esi + 0x1dc], 0x5a
jne 0x8052d16
push str.__defunct_
lea eax, [esi + 0x190]
push eax
call sym.imp.strcat
mov eax, esi
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
mov eax, dword [ebx]
test eax, eax
je 0x8053196
push eax
call sym.imp.closedir
add esp, 4
test ebx, ebx
je 0x80531a0
push ebx
call sym.imp.free
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push edi
push esi
push ebx
xor edi, edi
mov ecx, dword [arg_8h]
shl ecx, 2
mov dword [var_4h], ecx
mov dword [var_14h], ecx
mov esi, 0x81278a0
mov eax, dword [ecx + esi]
cmp dword [eax + 0x1e0], 0
jne 0x805075c
cmp dword [arg_10h], 0
je 0x805065c
cmp dword [arg_14h], 0
je 0x8050640
mov dword [var_ch], 0x8149c60
mov ebx, dword [arg_10h]
mov ecx, dword [var_ch]
mov byte [ecx + ebx - 1], 0x2b
jmp 0x8050652
lea esi, [esi]
mov dword [var_ch], 0x8149c60
mov ebx, dword [arg_10h]
mov ecx, dword [var_ch]
mov byte [ecx + ebx - 1], 0x4c
mov ebx, dword [var_ch]
mov ecx, dword [arg_10h]
mov byte [ecx + ebx], 0
mov ebx, 0x81278a0
mov ecx, dword [var_4h]
push dword [ecx + ebx]
call fcn.0804c1dc
add esp, 4
cmp edi, dword [arg_ch]
jge 0x805075c
mov eax, dword [esi + edi*4]
mov ebx, dword [var_14h]
mov edx, dword [ebx + esi]
mov edx, dword [edx + 0x1c0]
cmp dword [eax + 0x1c4], edx
je 0x80506b5
mov esi, 0x81278a0
inc edi
cmp edi, dword [arg_ch]
jge 0x805075c
mov eax, dword [esi + edi*4]
mov ecx, dword [var_14h]
mov edx, dword [ecx + esi]
mov edx, dword [edx + 0x1c0]
cmp dword [eax + 0x1c4], edx
jne 0x8050694
mov dword [var_ch], 0x8149c60
cmp dword [arg_10h], 0
je 0x80506e6
mov eax, dword [arg_10h]
dec eax
cmp dword [arg_14h], 0
je 0x80506d5
mov ebx, dword [var_ch]
mov byte [eax + ebx], 0x7c
jmp 0x80506dc
mov ecx, dword [var_ch]
mov byte [eax + ecx], 0x20
mov ebx, dword [var_ch]
mov ecx, dword [arg_10h]
mov byte [ecx + ebx], 0
mov esi, 1
cmp edi, dword [arg_ch]
jge 0x8050752
mov ebx, dword [arg_10h]
inc ebx
mov dword [var_8h], ebx
lea ecx, [edi + 1]
mov dword [var_14h], ecx
mov dword [var_10h], ecx
mov ebx, dword [arg_ch]
cmp ecx, ebx
jge 0x805072a
mov ecx, dword [var_14h]
mov eax, dword [ecx*4 + 0x81278a0]
mov ebx, 0x81278a0
mov ecx, dword [var_4h]
mov edx, dword [ecx + ebx]
mov edx, dword [edx + 0x1c0]
cmp dword [eax + 0x1c4], edx
je 0x805072c
xor esi, esi
push esi
mov ebx, dword [var_8h]
push ebx
mov ecx, dword [arg_ch]
push ecx
push edi
mov edi, dword [var_10h]
call fcn.080505f0
add esp, 0x10
test esi, esi
je 0x8050752
mov esi, 1
mov ebx, dword [arg_ch]
cmp dword [var_14h], ebx
jl 0x80506f7
mov ecx, dword [var_ch]
mov ebx, dword [arg_10h]
mov byte [ebx + ecx], 0
lea esp, [var_20h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov ecx, dword [arg_8h]
mov dword [var_8h], ecx
mov dword [var_4h], ecx
sub dword [var_8h], 1
jb 0x805017d
mov ecx, dword [var_8h]
lea ecx, [ecx*4 + 0x81278a0]
mov dword [var_ch], ecx
mov edx, dword [var_4h]
dec edx
mov ecx, dword [var_8h]
lea eax, [ecx*4]
cmp edx, 0xffffffff
je 0x80500c6
mov ebx, 0x81278a0
mov eax, dword [eax + ebx]
mov esi, dword [eax + 0x1c4]
mov eax, dword [ebx + edx*4]
cmp dword [eax + 0x1c0], esi
je 0x805016f
sub edx, 1
jae 0x80500b2
xor esi, esi
mov ecx, dword [var_ch]
mov eax, dword [ecx]
cmp dword [eax + 0x1e0], 0
jne 0x805016f
push eax
call fcn.0804c1dc
add esp, 4
cmp esi, dword [var_4h]
jge 0x805016f
mov eax, dword [0x81278a0]
jmp 0x8050100
inc esi
cmp esi, dword [var_4h]
jge 0x805016f
mov eax, dword [esi*4 + 0x81278a0]
mov ecx, dword [var_ch]
mov edx, dword [ecx]
mov edx, dword [edx + 0x1c0]
cmp dword [eax + 0x1c4], edx
jne 0x80500f3
mov ebx, 1
cmp esi, dword [var_4h]
jge 0x8050168
lea esi, [esi]
lea edi, [esi + 1]
mov dword [var_10h], edi
cmp edi, dword [var_4h]
jge 0x8050145
mov eax, dword [edi*4 + 0x81278a0]
mov ecx, dword [var_ch]
mov edx, dword [ecx]
mov edx, dword [edx + 0x1c0]
cmp dword [eax + 0x1c4], edx
je 0x8050147
xor ebx, ebx
push ebx
push 1
mov ecx, dword [var_4h]
push ecx
push esi
mov esi, dword [var_10h]
call fcn.080505f0
add esp, 0x10
test ebx, ebx
je 0x8050168
mov ebx, 1
cmp edi, dword [var_4h]
jl 0x8050120
mov byte [0x8149c60], 0
add dword [var_ch], 0xfffffffc
sub dword [var_8h], 1
jae 0x8050091
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
xor ebx, ebx
mov dword [0x812785c], esi
mov dword [0x8127860], edi
mov dword [0x8127864], 0
test byte [obj.personality], 0x10
jne 0x804fac5
call fcn.0804f988
mov ebx, eax
test ebx, ebx
jne 0x804fac5
cmp dword [0x805c16c], 0
sete al
and eax, 0xff
push eax
call fcn.0804b4e8
mov ebx, eax
add esp, 4
test ebx, ebx
jne 0x804fac5
call fcn.0804a1ec
mov ebx, eax
test ebx, ebx
je 0x804fb40
call fcn.08049ca8
mov dword [0x805c168], 0
call fcn.0804b918
call fcn.0805104c
mov dword [0x805c0d0], 0
mov dword [0x812785c], esi
mov dword [0x8127860], edi
mov dword [0x8127864], 0
mov dword [0x805c16c], 1
mov dword [0x805c170], 1
call fcn.0804f988
test eax, eax
jne 0x804fb72
cmp dword [0x805c16c], 0
sete al
and eax, 0xff
push eax
call fcn.0804b4e8
add esp, 4
test eax, eax
jne 0x804fb72
call fcn.0804a1ec
test eax, eax
jne 0x804fb72
mov eax, dword [0x805c168]
test eax, eax
je 0x804fb5f
cmp dword [0x805c104], 0x83
jg 0x804fb5f
mov dword [0x805c104], 0x84
cmp eax, 1
jle 0x804fb6e
mov dword [0x805c104], 0xc8000
xor eax, eax
jmp 0x804fbb4
mov dword [0x805c168], 0
test byte [obj.personality], 0x10
je 0x804fb88
push eax
jmp 0x804fb89
push ebx
push 0x805a248
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0xc
push dword [obj.stderr]
push dword [0x805c138]
call sym.imp.fputs
push 1
call sym.imp.exit
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x84
push edi
push esi
push ebx
push 0x88
call sym.imp.malloc
mov ebx, eax
add esp, 4
test ebx, ebx
je 0x804fec2
mov edi, ebx
xor eax, eax
cld
mov ecx, 0x22
rep stosd dword es:[edi], eax
mov dword [0x8169cc8], ebx
push 0x805a260
push str._usr_lib_locale_ro_RO_uboot_etc_procrc
call sym.imp.fopen
mov dword [stream], eax
add esp, 8
test eax, eax
je 0x804febc
lea esi, [var_80h]
jmp 0x804fe96
lea esi, [esi]
movsx edx, byte [var_80h]
mov eax, dword [obj.__ctype_b]
test byte [eax + edx*2 + 1], 8
je 0x804fe96
push 0
push 0xa
push 0
push esi
call sym.imp.__strtol_internal
add esp, 0x10
mov dword [ebx + 4], eax
push 0x20
push esi
call sym.imp.index
lea edi, [eax + 1]
add esp, 8
test edi, edi
je 0x804fe96
push 0xa
push edi
call sym.imp.index
add esp, 8
test eax, eax
je 0x804fe66
mov byte [eax], 0
push 0x7f
push edi
lea eax, [ebx + 8]
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x88
call sym.imp.malloc
mov edi, eax
mov dword [ebx], edi
add esp, 4
test edi, edi
je 0x804feb0
xor eax, eax
cld
mov ecx, 0x22
rep stosd dword es:[edi], eax
mov ebx, dword [ebx]
mov ecx, dword [stream]
push ecx
push 0x7f
push esi
call sym.imp.fgets
add esp, 0xc
test eax, eax
jne 0x804fe20
mov ecx, dword [stream]
push ecx
call sym.imp.fclose
mov dword [ebx], 0
lea esp, [var_90h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push 0x1000
push 0x20
push dword [0x805c158]
call sym.imp.memset
add esp, 0xc
push 0
push 0
call fcn.08053380
mov dword [0x8169cc4], eax
push 0
call sym.imp.time
mov dword [0x8127848], eax
sub eax, dword [0x8169cc4]
mov dword [0x812784c], eax
call fcn.0805405c
mov dword [0x8127850], eax
add esp, 0xc
call sym.imp.getpagesize
cmp eax, 0x2000
je 0x804c520
jg 0x804c4e0
cmp eax, 0x800
je 0x804c550
jg 0x804c4d0
cmp eax, 0x400
je 0x804c560
jmp 0x804c530
mov esi, esi
cmp eax, 0x1000
je 0x804c543
jmp 0x804c530
lea esi, [esi]
cmp eax, 0x8000
je 0x804c505
jg 0x804c4f2
cmp eax, 0x4000
je 0x804c511
jmp 0x804c530
cmp eax, 0x10000
jne 0x804c530
mov dword [0x8127854], 0x10
jmp 0x804c56a
mov dword [0x8127854], 0xf
jmp 0x804c56a
mov dword [0x8127854], 0xe
jmp 0x804c56a
lea esi, [esi]
mov dword [0x8127854], 0xd
jmp 0x804c56a
lea esi, [esi]
push str.Unknown_page_size___assume_4096__n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
mov dword [0x8127854], 0xc
jmp 0x804c56a
nop
mov dword [0x8127854], 0xb
jmp 0x804c56a
lea esi, [esi]
mov dword [0x8127854], 0xa
call fcn.0804c118
leave
ret
push ebp
mov ebp, esp
push fcn.08051a94
push dword [arg_8h]
call fcn.08051aac
leave
ret
push ebp
mov ebp, esp
sub esp, 0x1c8
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
call sym.imp.getuid
mov ebx, eax
call sym.imp.geteuid
cmp ebx, eax
je 0x8051ae0
push str.The__proc_library_is_not_secure_for_setuid_operation.
call sym.imp.printf
push 1
call sym.imp.exit
nop
call sym.imp.getgid
mov ebx, eax
call sym.imp.getegid
cmp ebx, eax
je 0x8051b01
push str.The__proc_library_is_not_secure_for_setgid_operation.
call sym.imp.printf
push 1
call sym.imp.exit
lea eax, [var_1c8h]
push eax
call sym.imp.uname
add esp, 4
test esi, esi
je 0x8051b21
push edi
push esi
call fcn.08051620
test eax, eax
jne 0x8051b5f
jmp 0x8051b9b
push str.PS_SYSMAP
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x8051b40
push edi
push eax
call fcn.08051620
add esp, 8
test eax, eax
jne 0x8051b5f
push str.PS_SYSTEM_MAP
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x8051b63
push edi
push eax
call fcn.08051620
add esp, 8
test eax, eax
je 0x8051b63
xor eax, eax
jmp 0x8051ba0
mov ebx, 0x805c3c0
cmp dword [0x805c3c0], 0
je 0x8051b9b
lea esi, [var_40h]
lea eax, [var_146h]
push eax
push dword [ebx]
push 0x40
push esi
call sym.imp.snprintf
push edi
push esi
call fcn.08051620
add esp, 0x18
test eax, eax
jne 0x8051b5f
add ebx, 4
cmp dword [ebx], 0
jne 0x8051b74
mov eax, 0xffffffff
lea esp, [var_1d4h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x80
push edi
push esi
push ebx
mov esi, dword [arg_8h]
cmp dword [0x8148b80], 0
je 0x8051642
mov eax, 1
jmp 0x80517fc
push 0
push esi
call sym.imp.open
mov ebx, eax
add esp, 8
test ebx, ebx
jl 0x8051686
lea eax, [var_58h]
push eax
push ebx
push 3
call sym.imp.__fxstat
add esp, 0xc
test eax, eax
jl 0x8051686
push 0
push ebx
push 1
push 1
mov eax, dword [var_2ch]
inc eax
push eax
push 0
call sym.imp.mmap
mov dword [0x8148b80], eax
add esp, 0x18
cmp eax, 0xffffffff
jne 0x80516a0
push ebx
call sym.imp.close
mov dword [0x8148b80], 0
xor eax, eax
jmp 0x80517fc
lea esi, [esi]
push ebx
call sym.imp.close
mov eax, dword [var_2ch]
mov dword [0x8148b94], eax
mov edx, dword [0x8148b80]
lea ecx, [eax + edx - 2]
add esp, 4
test ecx, ecx
je 0x80516cb
jmp 0x80516c6
cmp byte [ecx], 0xa
je 0x80516cb
dec ecx
cmp ecx, edx
ja 0x80516c1
inc ecx
mov dword [0x8148b84], ecx
mov ebx, dword [0x8148b80]
mov dl, byte [ebx]
cmp dl, 0x20
je 0x8051700
lea ecx, [ebx + 0x20]
mov al, dl
add al, 0xd0
cmp al, 9
jbe 0x80516f2
add dl, 0x9f
cmp dl, 5
ja 0x8051700
cmp ebx, ecx
jae 0x8051700
inc ebx
mov al, byte [ebx]
mov dl, al
cmp dl, 0x20
jne 0x80516e2
cmp byte [ebx + 2], 0x20
sete al
mov byte [var_7ch], al
and eax, 1
mov dword [0x805c3bc], eax
mov dword [var_80h], ebx
mov eax, dword [0x8148b80]
sub dword [var_80h], eax
mov eax, dword [var_80h]
mov dword [0x8148b98], eax
push eax
push str.__0_dlx
push 0xa
push 0x8148b88
call sym.imp.snprintf
add esp, 0x10
cmp byte [ebx], 0x20
jne 0x8051770
push str.0123456789___._n_t__abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
push dword [0x8148b80]
call sym.imp.strspn
add esp, 8
mov edx, eax
mov edi, dword [0x8148b80]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp edx, ecx
je 0x80517a0
nop
lea esi, [esi]
push esi
push str.Warning:__s_not_parseable_as_a_System.map_n
mov eax, dword [arg_ch]
call eax
push dword [0x8148b94]
push dword [0x8148b80]
call sym.imp.munmap
mov dword [0x8148b80], 0
xor eax, eax
jmp 0x80517fc
lea esi, [esi]
lea ebx, [var_78h]
jmp 0x80517d0
push esi
push str.Warning:__s_has_an_incorrect_kernel_version._n
mov eax, dword [arg_ch]
call eax
push dword [0x8148b94]
push dword [0x8148b80]
call sym.imp.munmap
mov dword [0x8148b80], 0
xor eax, eax
jmp 0x80517fc
nop
push dword [0x805c404]
push str._Version__d_n
push ebx
call sym.imp.sprintf
add esp, 0xc
push ebx
push dword [0x8148b80]
call sym.imp.strstr
add esp, 8
test eax, eax
je 0x80517a5
mov eax, 1
lea esp, [var_8ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
push edi
push esi
push ebx
mov dword [nmemb], 0
push 0x3f
call fcn.08051d90
mov dword [var_4h], eax
jmp 0x8050296
push esi
call fcn.0804fcf0
add esp, 4
test eax, eax
je 0x80501be
mov dword [esi + 0x1e0], 1
mov dword [var_ch], 0
mov ebx, dword [esi + 0xdc]
add ebx, dword [esi + 0xd8]
cmp dword [0x805c0e4], 0
je 0x80501e2
mov eax, dword [esi + 0x64]
add eax, dword [esi + 0x60]
add ebx, eax
mov ecx, dword [esi + 0xf4]
mov eax, dword [0x8169d48]
mov dword [var_10h], eax
mov eax, ecx
xor edx, edx
div dword [var_10h]
mov edi, eax
mov eax, dword [0x8169cc4]
sub eax, edi
mov edi, eax
test edi, edi
je 0x8050257
mov eax, 0x3e8
mul ebx
mov ecx, eax
mov ebx, edx
mov edx, dword [var_10h]
mov dword [var_18h], edx
mov dword [var_14h], 0
mov eax, dword [var_18h]
mov edx, dword [var_14h]
push edx
push eax
push ebx
push ecx
call sym.__divdi3
add esp, 0x10
mov ecx, eax
mov ebx, edx
mov dword [var_18h], edi
mov dword [var_14h], 0
mov eax, dword [var_18h]
mov edx, dword [var_14h]
push edx
push eax
push ebx
push ecx
call sym.__divdi3
add esp, 0x10
mov ecx, eax
mov ebx, edx
mov dword [var_ch], ecx
mov ecx, dword [var_ch]
cmp ecx, 0x3e7
jbe 0x8050267
mov ecx, 0x3e7
mov dword [esi + 0x1d8], ecx
push esi
call fcn.0804a13c
add esp, 4
test eax, eax
je 0x8050290
mov edx, dword [nmemb]
mov dword [edx*4 + 0x81278a0], esi
inc edx
mov dword [nmemb], edx
jmp 0x8050299
lea esi, [esi]
push esi
call sym.imp.free
add esp, 4
push 0
mov eax, dword [var_4h]
push eax
call fcn.0805298c
mov esi, eax
add esp, 8
test esi, esi
jne 0x80501a7
mov edx, dword [var_4h]
push edx
call fcn.08053180
add esp, 4
cmp dword [nmemb], 0
je 0x80503d9
cmp dword [0x805c0cc], 0
je 0x8050383
cmp dword [0x805c114], 0
jne 0x8050330
push str.start_time
call fcn.0804c608
mov ebx, eax
add esp, 4
test ebx, ebx
jne 0x8050303
push str.Could_not_find_start_time__n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
push 0x10
call sym.imp.malloc
mov ecx, eax
mov dword [ecx + 8], 0
mov dword [ecx + 0xc], 0x3f
mov eax, dword [ebx + 0xc]
mov dword [ecx + 4], eax
mov eax, dword [0x805c114]
mov dword [ecx], eax
mov dword [0x805c114], ecx
add esp, 4
push str.ppid
call fcn.0804c608
mov ebx, eax
add esp, 4
test ebx, ebx
jne 0x8050356
push str.Could_not_find_ppid__n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
push 0x10
call sym.imp.malloc
mov ecx, eax
mov dword [ecx + 8], 0
mov dword [ecx + 0xc], 0x3f
mov eax, dword [ebx + 0xc]
mov dword [ecx + 4], eax
mov eax, dword [0x805c114]
mov dword [ecx], eax
mov dword [0x805c114], ecx
add esp, 4
push fcn.080505a8
push 4
mov eax, dword [nmemb]
push eax
push 0x81278a0
call sym.imp.qsort
add esp, 0x10
cmp dword [0x805c0cc], 0
je 0x80503b0
mov edx, dword [nmemb]
push edx
call fcn.08050068
jmp 0x80503d9
nop
mov ebx, 0x81278a0
mov esi, dword [nmemb]
dec esi
cmp esi, 0xffffffff
je 0x80503d9
mov esi, esi
push dword [ebx]
call fcn.0804c1dc
push dword [ebx]
call sym.imp.free
add ebx, 4
add esp, 8
sub esi, 1
jae 0x80503c0
lea esp, [var_24h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x1fc
push edi
push esi
push ebx
push 0x3f
call fcn.08051d90
mov dword [var_1e8h], eax
add esp, 4
push 0x1e4
push 0x23
lea eax, [var_1e4h]
mov dword [var_1ech], eax
mov dword [var_1f0h], eax
push eax
jmp 0x8050027
nop
lea esi, [esi]
mov edx, dword [var_1f0h]
push edx
call fcn.0804fcf0
mov ecx, eax
add esp, 4
test ecx, ecx
jne 0x805002f
xor edi, edi
mov ebx, dword [var_108h]
add ebx, dword [var_10ch]
cmp dword [0x805c0e4], 0
je 0x804ff4e
mov eax, dword [var_180h]
add eax, dword [var_184h]
add ebx, eax
mov ecx, dword [var_f0h]
mov eax, dword [0x8169d48]
mov dword [var_1f4h], eax
mov eax, ecx
xor edx, edx
div dword [var_1f4h]
mov esi, eax
mov eax, dword [0x8169cc4]
sub eax, esi
mov esi, eax
test esi, esi
je 0x804ffe3
mov eax, 0x3e8
mul ebx
mov ecx, eax
mov ebx, edx
mov edx, dword [var_1f4h]
mov dword [var_1fch], edx
mov dword [var_1f8h], 0
mov eax, dword [var_1fch]
mov edx, dword [var_1f8h]
push edx
push eax
push ebx
push ecx
call sym.__divdi3
add esp, 0x10
mov ecx, eax
mov ebx, edx
mov dword [var_1fch], esi
mov dword [var_1f8h], 0
mov eax, dword [var_1fch]
mov edx, dword [var_1f8h]
push edx
push eax
push ebx
push ecx
call sym.__divdi3
add esp, 0x10
mov ecx, eax
mov ebx, edx
mov edi, ecx
mov ecx, edi
cmp ecx, 0x3e7
jbe 0x804fff2
mov ecx, 0x3e7
mov dword [var_ch], ecx
mov edx, dword [var_1f0h]
push edx
call fcn.0804a13c
mov ecx, eax
add esp, 4
test ecx, ecx
je 0x8050019
mov eax, dword [var_1f0h]
push eax
call fcn.0804c1dc
add esp, 4
push 0x1e4
push 0x23
mov edx, dword [var_1f0h]
push edx
call sym.imp.memset
add esp, 0xc
mov eax, dword [var_1ech]
push eax
mov edx, dword [var_1e8h]
push edx
call fcn.0805298c
mov ecx, eax
add esp, 8
test ecx, ecx
jne 0x804ff10
mov eax, dword [var_1e8h]
push eax
call fcn.08053180
lea esp, [var_208h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x58
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
mov ebx, dword [arg_10h]
mov ecx, ebx
lea eax, [edi - 3]
cmp eax, 0x8c
ja case.0x80511c6.5
jmp dword [eax*4 + 0x805a5b8]
lea esi, [esi]
cmp ebx, 0x3f
jg 0x80511e0
push ebx
push str._dev_tty_d
jmp 0x80512a2
cmp ebx, 0x7f
jg 0x80511f3
lea eax, [ebx - 0x40]
push eax
push str._dev_ttyS_d
jmp 0x80512a2
mov ecx, ebx
and ecx, 0x3f
mov eax, ecx
sar eax, 4
movsx edx, byte [eax + str.pqrstuvwxyzabcde]
and ecx, 0xf
movsx eax, byte [ecx + str.0123456789abcdef]
push eax
push edx
push str._dev_tty_c_c
push esi
call sym.imp.sprintf
add esp, 0x10
jmp 0x80512ab
push ebx
push str._dev_ttyH_d
jmp 0x80512a2
nop
lea esi, [esi]
push ebx
push str._dev_ttyC_d
jmp 0x80512a2
push ebx
push str._dev_ttyD_d
jmp 0x80512a2
push ebx
push str._dev_ttyE_d
jmp 0x80512a2
push ebx
push str._dev_ttyX_d
jmp 0x80512a2
push ebx
push str._dev_ttyI_d
jmp 0x80512a2
push ebx
push str._dev_ttyR_d
jmp 0x80512a2
push ebx
push str._dev_ttyL_d
jmp 0x80512a2
push ebx
push str._dev_ttyP_d
jmp 0x80512a2
push ebx
push str._dev_ttyF_d
jmp 0x80512a2
push ebx
push str._dev_ttyW_d
jmp 0x80512a2
push ebx
push str._dev_ttyM_d
jmp 0x80512a2
push ebx
push str._dev_ttyV_d
jmp 0x80512a2
mov eax, edi
shl eax, 8
lea eax, [ebx + eax - 0x8800]
push eax
push str._dev_pts__d
push esi
call sym.imp.sprintf
add esp, 0xc
lea eax, [var_58h]
push eax
push esi
push 3
call sym.imp.__xstat
test eax, eax
jl case.0x80511c6.5
movzx eax, byte [var_38h]
cmp ebx, eax
jne case.0x80511c6.5
mov eax, dword [var_38h]
mov edx, dword [var_34h]
shrd eax, edx, 8
shr edx, 8
and eax, 0xff
cmp edi, eax
jne case.0x80511c6.5
mov eax, 1
jmp 0x80512e2
xor eax, eax
lea esp, [var_64h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x2710
push edi
push esi
push ebx
push 0
push str._proc_tty_drivers
call sym.imp.open
mov edi, eax
add esp, 8
cmp edi, 0xffffffff
je 0x8051186
push 0x270f
lea ebx, [ebp - 0x2710]
push ebx
push edi
call sym.imp.read
add esp, 0xc
cmp eax, 0xffffffff
je 0x805117b
mov byte [eax + ebx], 0
jmp 0x8051167
add ebx, 9
push str.ABCDEFGHIJKLMNOPQRSTUVWXYZ
push ebx
call sym.imp.strspn
add esp, 8
test eax, eax
je 0x8051167
cmp eax, 3
jg 0x8051167
cmp byte [ebx], 0x53
je 0x8051167
push 0xc
call sym.imp.malloc
mov esi, eax
mov eax, dword [0x805c3b4]
mov dword [esi], eax
mov dword [0x805c3b4], esi
add esp, 4
mov dword [esi + 8], 0
push 1
push ebx
lea eax, [esi + 8]
push eax
call sym.imp.strncpy
add esp, 0xc
inc ebx
push 0
push 0xa
push 0
push ebx
call sym.imp.__strtol_internal
add esp, 0x10
mov dword [esi + 4], eax
push str.__dev_tty
push ebx
call sym.imp.strstr
add esp, 8
mov ebx, eax
test ebx, ebx
jne 0x8051106
cmp edi, 0xffffffff
je 0x8051186
push edi
call sym.imp.close
cmp dword [0x805c3b4], 0
jne 0x8051199
mov dword [0x805c3b4], 0xffffffff
lea esp, [ebp - 0x271c]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
push edi
push esi
push ebx
fild dword [0x805c3b8]
fidivr dword [0x8148b94]
fnstcw word [ebp - 4]
mov ebx, dword [var_4h]
mov bh, 0xc
mov dword [var_ch], ebx
fldcw word [ebp - 0xc]
fistp dword [ebp - 0xc]
mov esi, dword [var_ch]
fldcw word [ebp - 4]
push dword [arg_8h]
push 0x8148b88
push 0x8148960
call sym.imp.sprintf
mov dword [var_10h], 0
mov eax, dword [0x8148b80]
mov dword [0x8148940], eax
add esp, 0xc
test esi, esi
je 0x80518e0
sar esi, 1
mov dword [var_14h], esi
mov edi, dword [var_10h]
add edi, esi
push dword [0x8148b98]
mov eax, edi
imul eax, dword [0x805c3b8]
mov esi, dword [0x8148b80]
lea ecx, [eax + esi]
test edi, edi
jne 0x8051890
mov eax, esi
jmp 0x80518be
lea esi, [esi]
mov edx, ecx
sub edx, esi
mov ebx, dword [0x8148b94]
mov dword [var_18h], ebx
mov eax, ebx
add eax, 0xfffffffe
cmp edx, eax
jle 0x80518aa
lea ecx, [ebx + esi - 2]
cmp byte [ecx], 0xa
je 0x80518bb
mov eax, esi
cmp ecx, eax
jbe 0x80518bb
dec ecx
cmp byte [ecx], 0xa
jne 0x80518b1
lea eax, [ecx + 1]
mov dword [0x8148940], eax
push eax
push 0x8148960
call sym.imp.strncmp
add esp, 0xc
test eax, eax
jle 0x80518d9
inc edi
mov dword [var_10h], edi
mov esi, dword [var_14h]
test esi, esi
jne 0x8051862
mov eax, dword [0x8148940]
cmp eax, dword [0x8148b84]
jne 0x8051945
lea edx, [eax + 1]
cmp byte [eax], 0x20
je 0x80518fc
mov al, byte [edx]
inc edx
cmp al, 0x20
jne 0x80518f5
cmp dword [0x805c3bc], 0
je 0x805190c
mov al, byte [edx]
inc edx
cmp al, 0x20
jne 0x8051905
push 0x80
push edx
push 0x81488c0
call sym.imp.strncpy
mov edx, 0x81488c0
mov eax, edx
cmp edx, 0x8148940
jae 0x8051a80
nop
cmp byte [eax], 0xa
jne 0x8051938
mov byte [eax], 0
inc eax
cmp eax, 0x8148940
jb 0x8051930
jmp 0x8051a80
push dword [0x8148b98]
push eax
push 0x8148960
call sym.imp.strncmp
add esp, 0xc
test eax, eax
jle 0x8051975
push 0xa
push dword [0x8148940]
call sym.imp.strchr
add esp, 8
inc eax
mov dword [0x8148940], eax
jmp 0x8051945
mov eax, dword [0x8148940]
cmp eax, dword [0x8148b80]
jne 0x80519e5
lea edx, [eax + 1]
cmp byte [eax], 0x20
je 0x8051997
lea esi, [esi]
mov al, byte [edx]
inc edx
cmp al, 0x20
jne 0x8051990
cmp dword [0x805c3bc], 0
je 0x80519a7
mov al, byte [edx]
inc edx
cmp al, 0x20
jne 0x80519a0
push 0x80
push edx
push 0x81488c0
call sym.imp.strncpy
mov edx, 0x81488c0
mov eax, edx
cmp edx, 0x8148940
jae 0x8051a80
lea esi, [esi]
cmp byte [eax], 0xa
jne 0x80519d8
mov byte [eax], 0
inc eax
cmp eax, 0x8148940
jb 0x80519d0
jmp 0x8051a80
push dword [0x8148b98]
push eax
push 0x8148960
call sym.imp.strncmp
add esp, 0xc
test eax, eax
jge 0x8051a30
mov edx, dword [0x8148940]
lea eax, [edx - 1]
mov ecx, dword [0x8148b80]
test eax, eax
je 0x8051a21
lea eax, [edx - 2]
cmp eax, ecx
jbe 0x8051a21
cmp byte [eax], 0xa
je 0x8051a21
dec eax
cmp eax, ecx
ja 0x8051a17
inc eax
mov dword [0x8148940], eax
jmp 0x80519e5
lea esi, [esi]
mov edx, dword [0x8148940]
mov al, byte [edx]
inc edx
cmp al, 0x20
jne 0x8051a36
cmp dword [0x805c3bc], 0
je 0x8051a4d
mov al, byte [edx]
inc edx
cmp al, 0x20
jne 0x8051a46
push 0x80
push edx
push 0x81488c0
call sym.imp.strncpy
mov edx, 0x81488c0
mov eax, edx
cmp edx, 0x8148940
jae 0x8051a80
lea esi, [esi]
cmp byte [eax], 0xa
jne 0x8051a78
mov byte [eax], 0
inc eax
cmp eax, 0x8148940
jb 0x8051a70
mov byte [0x814893f], 0
mov eax, edx
lea esp, [var_24h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
test ebx, ebx
jne 0x80541a8
mov ebx, 1
push ebx
call sym.imp.malloc
add esp, 4
test eax, eax
jne 0x80541d4
push ebx
push str.xmalloc:_malloc__d__failed
push dword [obj.stderr]
call sym.imp.fprintf
push 0
call sym.imp.perror
push 1
call sym.imp.exit
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_ch]
test ebx, ebx
jne 0x80541ec
mov ebx, 1
push ebx
push dword [ptr]
call sym.imp.realloc
add esp, 8
test eax, eax
jne 0x8054220
push ebx
push str.xrealloc:_realloc__d__failed
push dword [obj.stderr]
call sym.imp.fprintf
push 0
call sym.imp.perror
push 1
call sym.imp.exit
nop
lea esi, [esi]
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, dword [arg_8h]
mov ebx, dword [arg_ch]
test eax, eax
je 0x8054167
push eax
call sym.imp.free
add esp, 4
push ebx
push 1
call sym.imp.calloc
add esp, 8
test eax, eax
jne 0x8054190
push ebx
push str.xcalloc:_allocation_error__size___d_n
push dword [obj.stderr]
call sym.imp.fprintf
push 1
call sym.imp.exit
mov esi, esi
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, dword [s]
mov esi, dword [arg_ch]
push 0x29
push ebx
call sym.imp.strrchr
mov edi, eax
mov byte [edi], 0
add esp, 8
lea eax, [esi + 0x190]
mov dword [esi + 0x190], 0
mov dword [esi + 0x194], 0
mov dword [esi + 0x198], 0
mov dword [esi + 0x19c], 0
push eax
lea eax, [esi + 0x1c0]
push eax
push str._d___15c
push ebx
call sym.imp.sscanf
lea eax, [esi + 0xfc]
push eax
lea eax, [esi + 0xd4]
push eax
lea eax, [esi + 0xd0]
push eax
lea eax, [esi + 0xf8]
push eax
lea eax, [esi + 0xf0]
push eax
lea eax, [esi + 0xec]
push eax
lea eax, [esi + 0xe8]
push eax
lea eax, [esi + 0xe4]
push eax
lea eax, [esi + 0xe0]
push eax
lea eax, [esi + 0xb8]
push eax
lea eax, [esi + 0x74]
push eax
lea eax, [esi + 0xb4]
push eax
lea eax, [esi + 0xf4]
push eax
lea eax, [esi + 0x78]
push eax
lea eax, [esi + 0x6c]
push eax
lea eax, [esi + 0x70]
push eax
lea eax, [esi + 0x68]
push eax
lea eax, [esi + 0x64]
push eax
lea eax, [esi + 0x60]
push eax
lea eax, [esi + 0xdc]
push eax
lea eax, [esi + 0xd8]
push eax
lea eax, [esi + 0xcc]
push eax
lea eax, [esi + 0xc4]
push eax
lea eax, [esi + 0xc8]
push eax
lea eax, [esi + 0xc0]
push eax
lea eax, [esi + 0xbc]
push eax
lea eax, [esi + 0x1d4]
push eax
lea eax, [esi + 0x1d0]
push eax
lea eax, [esi + 0x1cc]
push eax
lea eax, [esi + 0x1c8]
push eax
lea eax, [esi + 0x1c4]
push eax
lea eax, [esi + 0x1dc]
push eax
push str._c__d__d__d__d__d__lu__lu__lu__lu__lu__lu__lu__ld__ld__ld__ld__ld__ld__lu__lu__ld__lu__lu__lu__lu__lu__lu__s__s__s__s__lu__lu__lu__d__d
lea eax, [edi + 2]
push eax
call sym.imp.sscanf
cmp dword [esi + 0x1d0], 0
jne 0x80521d5
mov dword [esi + 0x1d0], 0xffffffff
mov eax, dword [0x805c404]
cmp eax, 0x10326
jg 0x80521fc
mov eax, 0x1e
sub eax, dword [esi + 0x68]
mov dword [esi + 0x68], eax
mov eax, 0xf
sub eax, dword [esi + 0x70]
mov dword [esi + 0x70], eax
mov eax, dword [0x805c404]
cmp eax, 0x1011d
jg 0x8052219
mov eax, dword [esi + 0x1d0]
cmp eax, 0xffffffff
je 0x8052219
add eax, 0x400
mov dword [esi + 0x1d0], eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
cmp dword [arg_10h], 1
jne 0x8051eb4
lea ebx, [esi + 0x190]
mov dword [esi + 0x190], 0
mov dword [esi + 0x194], 0
mov dword [esi + 0x198], 0
mov dword [esi + 0x19c], 0
push ebx
push str.Name:_t_15c
push edi
call sym.imp.sscanf
add esp, 0xc
push 0xa
push ebx
call sym.imp.strchr
add esp, 8
mov edx, eax
mov byte [edx], 0
push str.State
push edi
call sym.imp.strstr
add esp, 8
mov edx, eax
lea eax, [esi + 0x1dc]
push eax
push str.State:_t_c
push edx
call sym.imp.sscanf
add esp, 0xc
push str.Pid:
push edi
call sym.imp.strstr
add esp, 8
mov edx, eax
test edx, edx
je 0x8051ee6
lea eax, [esi + 0x1c4]
push eax
lea eax, [esi + 0x1c0]
push eax
push str.Pid:_t_d_nPPid:_t_d_n
push edx
call sym.imp.sscanf
add esp, 0x10
jmp 0x8051ef9
push str.Internal_error__n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
push str.Uid:
push edi
call sym.imp.strstr
add esp, 8
mov edx, eax
test edx, edx
je 0x8051f40
lea eax, [esi + 0x1b8]
push eax
lea eax, [esi + 0x1b0]
push eax
lea eax, [esi + 0x1a8]
push eax
lea eax, [esi + 0x1a0]
push eax
push str.Uid:_t_d_t_d_t_d_t_d
push edx
call sym.imp.sscanf
add esp, 0x18
jmp 0x8051f53
lea esi, [esi]
push str.Internal_error__n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
push str.Gid:
push edi
call sym.imp.strstr
add esp, 8
mov edx, eax
test edx, edx
je 0x8051f93
lea eax, [esi + 0x1bc]
push eax
lea eax, [esi + 0x1b4]
push eax
lea eax, [esi + 0x1ac]
push eax
lea eax, [esi + 0x1a4]
push eax
push str.Gid:_t_d_t_d_t_d_t_d
push edx
call sym.imp.sscanf
add esp, 0x18
jmp 0x8051fa6
push str.Internal_error__n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
push str.VmSize:
push edi
call sym.imp.strstr
add esp, 8
mov edx, eax
test edx, edx
je 0x8052000
lea eax, [esi + 0xb0]
push eax
lea eax, [esi + 0xac]
push eax
lea eax, [esi + 0xa8]
push eax
lea eax, [esi + 0xa4]
push eax
lea eax, [esi + 0xa0]
push eax
lea eax, [esi + 0x9c]
push eax
lea eax, [esi + 0x98]
push eax
push str.VmSize:__lu_kB_nVmLck:__lu_kB_nVmRSS:__lu_kB_nVmData:__lu_kB_nVmStk:__lu_kB_nVmExe:__lu_kB_nVmLib:__lu_kB_n
push edx
call sym.imp.sscanf
add esp, 0x24
jmp 0x8052046
nop
lea esi, [esi]
mov dword [esi + 0x98], 0
mov dword [esi + 0x9c], 0
mov dword [esi + 0xa0], 0
mov dword [esi + 0xa4], 0
mov dword [esi + 0xa8], 0
mov dword [esi + 0xac], 0
mov dword [esi + 0xb0], 0
push str.SigPnd:
push edi
call sym.imp.strstr
add esp, 8
mov edx, eax
test edx, edx
je 0x8052074
lea eax, [esi + 0x48]
push eax
lea eax, [esi + 0x30]
push eax
lea eax, [esi + 0x18]
push eax
push esi
push str.SigPnd:__s_SigBlk:__s_SigIgn:__s__s__s
push edx
call sym.imp.sscanf
jmp 0x8052084
push str.Internal_error__n
push dword [obj.stderr]
call sym.imp.fprintf
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov eax, esi
and eax, 0xf
shl eax, 2
mov ebx, eax
add ebx, 0x8149be0
cmp dword [eax + 0x8149be0], 0
je 0x8054260
mov eax, dword [ebx]
cmp dword [eax], esi
je 0x805429d
lea ebx, [eax + 0x14]
cmp dword [eax + 0x14], 0
jne 0x8054251
push 0x18
call fcn.08054198
mov dword [ebx], eax
mov dword [eax], esi
push esi
call sym.imp.getpwuid
add esp, 8
test eax, eax
jne 0x8054280
push esi
push 0x805af7e
jmp 0x8054287
push dword [eax]
push str.__.15s
mov eax, dword [ebx]
add eax, 4
push eax
call sym.imp.sprintf
mov eax, dword [ebx]
mov dword [eax + 0x14], 0
mov eax, dword [ebx]
add eax, 4
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov eax, esi
and eax, 0xf
shl eax, 2
mov ebx, eax
add ebx, 0x8149c20
cmp dword [eax + 0x8149c20], 0
je 0x80542df
lea esi, [esi]
mov eax, dword [ebx]
cmp dword [eax], esi
je 0x805431d
lea ebx, [eax + 0x14]
cmp dword [eax + 0x14], 0
jne 0x80542d0
push 0x18
call sym.imp.malloc
mov dword [ebx], eax
mov dword [eax], esi
push esi
call sym.imp.getgrgid
add esp, 8
test eax, eax
jne 0x8054300
push esi
push 0x805af7e
jmp 0x8054307
nop
push dword [eax]
push str.__.15s
mov eax, dword [ebx]
add eax, 4
push eax
call sym.imp.sprintf
mov eax, dword [ebx]
mov dword [eax + 0x14], 0
mov eax, dword [ebx]
add eax, 4
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x818
push edi
push esi
push ebx
mov dword [ptr], 0
mov dword [s1], 0
mov dword [var_810h], 0
push dword [arg_ch]
push dword [arg_8h]
push str._s__s
lea edi, [s]
mov dword [buf], edi
mov dword [var_814h], edi
push edi
call sym.imp.sprintf
push 0
push 0
push edi
call sym.imp.open
mov dword [fildes], eax
add esp, 0x1c
cmp eax, 0xffffffff
jne 0x8052304
xor eax, eax
jmp 0x80523ea
cmp esi, 0x7fe
ja 0x80522a2
mov dword [var_810h], 1
cmp dword [var_810h], 0
je 0x80522c3
mov edi, dword [buf]
cmp byte [edi + esi - 1], 0
je 0x80522c3
mov edi, dword [var_814h]
mov byte [esi + edi], 0
inc esi
mov ebx, dword [s1]
add ebx, esi
push ebx
mov edi, dword [ptr]
push edi
call fcn.080541dc
mov dword [ptr], eax
add eax, dword [s1]
push esi
mov edi, dword [buf]
push edi
push eax
call sym.imp.memcpy
mov dword [s1], ebx
add esp, 0x14
cmp dword [var_810h], 0
jne 0x8052329
push 0x7ff
mov edi, dword [buf]
push edi
mov edi, dword [fildes]
push edi
call sym.imp.read
mov esi, eax
add esp, 0xc
test esi, esi
jg 0x8052290
mov edi, dword [fildes]
push edi
call sym.imp.close
add esp, 4
test esi, esi
jg 0x8052363
cmp dword [var_810h], 0
jne 0x8052363
cmp dword [ptr], 0
je 0x8052289
mov edi, dword [ptr]
push edi
call sym.imp.free
jmp 0x8052289
mov ecx, dword [ptr]
add ecx, dword [s1]
mov ebx, dword [s1]
add ebx, 3
not ebx
and ebx, 3
xor edx, edx
mov eax, dword [ptr]
cmp eax, ecx
jae 0x805239d
lea esi, [esi]
cmp byte [eax], 0
jne 0x8052398
add edx, 4
inc eax
cmp eax, ecx
jb 0x8052390
mov edi, dword [s1]
lea eax, [edi + edx + 4]
add eax, ebx
push eax
mov edi, dword [ptr]
push edi
call fcn.080541dc
mov dword [ptr], eax
mov ecx, eax
add ecx, dword [s1]
add ebx, ecx
mov dword [ebx], eax
lea edx, [ebx + 4]
dec ecx
jmp 0x80523dd
mov esi, esi
cmp byte [eax], 0
jne 0x80523dd
lea edi, [eax + 1]
mov dword [edx], edi
add edx, 4
inc eax
cmp eax, ecx
jb 0x80523d0
mov dword [edx], 0
mov eax, ebx
lea esp, [var_824h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
test ebx, ebx
je 0x805336b
cmp dword [ebx + 0x1c0], esi
jne 0x8053340
mov eax, ebx
jmp 0x805336d
nop
push esi
push dword [ebx + 0x100]
call fcn.08053324
add esp, 8
test eax, eax
jne 0x805336d
push esi
push eax
call fcn.08053324
add esp, 8
test eax, eax
jne 0x805336d
mov ebx, dword [ebx + 0x104]
test ebx, ebx
jne 0x8053353
xor eax, eax
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x20
push edi
push esi
push ebx
mov dword [var_4h], 0
mov dword [var_8h], 0
mov dword [dest], 0
mov edx, dword [arg_8h]
test byte [edx + 5], 1
je 0x8052451
mov eax, dword [edx + 8]
mov eax, dword [eax]
test eax, eax
je 0x8052475
push eax
mov ecx, dword [arg_8h]
add dword [ecx + 8], 4
push str._proc__d
push 0x8148c60
call sym.imp.sprintf
mov dword [var_8h], 1
jmp 0x8052490
mov al, byte [eax + 0xb]
add al, 0xd0
cmp al, 9
jbe 0x8052467
mov edx, dword [arg_8h]
push dword [edx]
call sym.imp.readdir
mov dword [0x8148bf0], eax
add esp, 4
test eax, eax
jne 0x8052448
mov eax, dword [0x8148bf0]
test eax, eax
je 0x8052475
add eax, 0xb
jne 0x8052480
xor eax, eax
jmp 0x8052982
lea esi, [esi]
push eax
push str._proc__s
push 0x8148c60
call sym.imp.sprintf
add esp, 0xc
push 0x8148c00
push 0x8148c60
push 3
call sym.imp.__xstat
add esp, 0xc
cmp eax, 0xffffffff
je 0x8052416
mov ecx, dword [arg_8h]
test byte [ecx + 5], 4
je 0x80524ff
mov ebx, dword [0x8148c18]
mov esi, dword [ecx + 0x10]
mov dword [var_20h], 0
mov edi, dword [ecx + 0x14]
cmp dword [var_20h], edi
jge 0x80524e2
mov eax, esi
cmp dword [eax], ebx
je 0x80524e2
add eax, 4
inc dword [var_20h]
cmp dword [var_20h], edi
jl 0x80524d3
xor eax, eax
cmp dword [var_20h], edi
jge 0x80524f7
mov edx, dword [var_20h]
cmp dword [esi + edx*4], ebx
sete al
and eax, 0xff
test eax, eax
je 0x8052416
cmp dword [var_4h], 0
jne 0x805252e
cmp dword [arg_ch], 0
je 0x8052513
mov ecx, dword [arg_ch]
mov dword [dest], ecx
jmp 0x8052527
push 0x1e4
mov edx, dword [dest]
push edx
call fcn.08054150
add esp, 8
mov dword [dest], eax
mov dword [var_4h], 1
mov eax, dword [0x8148c18]
mov ecx, dword [dest]
mov dword [ecx + 0x1a8], eax
push str.stat
push 0x8148c60
push str._s__s
push 0x8148ba0
call sym.imp.sprintf
push 0
push 0
push 0x8148ba0
call sym.imp.open
mov esi, eax
add esp, 0x1c
cmp esi, 0xffffffff
je 0x80525a2
push 0x1ff
push 0x8148c80
push esi
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x8052590
mov ebx, 0xffffffff
jmp 0x8052597
lea esi, [esi]
mov byte [ebx + 0x8148c80], 0
push esi
call sym.imp.close
mov eax, ebx
add esp, 4
cmp eax, 0xffffffff
je 0x8052416
mov edx, dword [dest]
push edx
push 0x8148c80
call fcn.0805208c
add esp, 8
cmp dword [var_8h], 0
jne 0x8052677
mov ecx, dword [arg_8h]
mov ecx, dword [ecx + 4]
mov dword [var_18h], ecx
mov dword [var_14h], ecx
test ch, 2
je 0x8052630
mov edx, dword [dest]
mov eax, dword [edx + 0x1d0]
mov edx, eax
mov ecx, edx
sar ecx, 0x1f
mov esi, edx
mov edi, ecx
mov ecx, dword [arg_8h]
mov ecx, dword [ecx + 0xc]
mov dword [var_20h], ecx
jmp 0x8052606
cmp ebx, esi
jne 0x80525ff
cmp dword [var_10h], edi
je 0x8052617
add dword [var_20h], 8
mov ecx, dword [var_20h]
mov ebx, dword [ecx]
mov edx, dword [ecx + 4]
mov dword [var_1ch], edx
mov dword [var_10h], edx
mov eax, ebx
or eax, edx
jne 0x80525f6
xor eax, eax
cmp ebx, esi
jne 0x8052628
cmp dword [var_1ch], edi
sete al
and eax, 0xff
test eax, eax
je 0x8052416
cmp dword [var_8h], 0
jne 0x8052677
mov ecx, dword [var_14h]
test ch, 0x10
je 0x805264e
mov edx, dword [dest]
cmp dword [edx + 0x1d0], 0xffffffff
je 0x8052416
mov ecx, dword [var_18h]
test ch, 8
je 0x8052677
mov edx, dword [dest]
movsx eax, byte [edx + 0x1dc]
push eax
mov ecx, dword [arg_8h]
push dword [ecx + 0x18]
call sym.imp.strchr
add esp, 8
test eax, eax
je 0x8052416
mov edx, dword [arg_8h]
test byte [edx + 4], 1
je 0x8052739
push str.statm
push 0x8148c60
push str._s__s
push 0x8148ba0
call sym.imp.sprintf
push 0
push 0
push 0x8148ba0
call sym.imp.open
mov esi, eax
add esp, 0x1c
cmp esi, 0xffffffff
je 0x80526e7
push 0x1ff
push 0x8148c80
push esi
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x80526d5
mov ebx, 0xffffffff
jmp 0x80526dc
mov byte [ebx + 0x8148c80], 0
push esi
call sym.imp.close
mov eax, ebx
add esp, 4
cmp eax, 0xffffffff
je 0x8052739
mov eax, dword [dest]
add eax, 0x94
push eax
mov eax, dword [dest]
add eax, 0x90
push eax
mov eax, dword [dest]
add eax, 0x8c
push eax
mov eax, dword [dest]
add eax, 0x88
push eax
mov eax, dword [dest]
add eax, 0x84
push eax
mov eax, dword [dest]
sub eax, 0xffffff80
push eax
mov eax, dword [dest]
add eax, 0x7c
push eax
push str._ld__ld__ld__ld__ld__ld__ld
push 0x8148c80
call sym.imp.sscanf
add esp, 0x24
mov ecx, dword [arg_8h]
test byte [ecx + 4], 0x10
je 0x80527bd
push str.status
push 0x8148c60
push str._s__s
push 0x8148ba0
call sym.imp.sprintf
push 0
push 0
push 0x8148ba0
call sym.imp.open
mov esi, eax
add esp, 0x1c
cmp esi, 0xffffffff
je 0x80527a5
push 0x1ff
push 0x8148c80
push esi
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x8052793
mov ebx, 0xffffffff
jmp 0x805279a
mov byte [ebx + 0x8148c80], 0
push esi
call sym.imp.close
mov eax, ebx
add esp, 4
cmp eax, 0xffffffff
je 0x80527bd
push 0
mov edx, dword [dest]
push edx
push 0x8148c80
call fcn.08051e30
add esp, 0xc
mov ecx, dword [arg_8h]
mov ecx, dword [ecx + 4]
mov dword [var_18h], ecx
test cl, 8
je 0x8052912
push 0x10
mov edx, dword [dest]
push dword [edx + 0x1a8]
call fcn.08054230
add esp, 4
push eax
mov eax, dword [dest]
add eax, 0x120
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
mov ecx, dword [dest]
push dword [ecx + 0x1ac]
call fcn.080542a8
add esp, 4
push eax
mov eax, dword [dest]
add eax, 0x160
push eax
call sym.imp.strncpy
add esp, 0xc
mov edx, dword [arg_8h]
mov edx, dword [edx + 4]
mov dword [var_18h], edx
test dl, 0x10
je 0x8052912
push 0x10
mov ecx, dword [dest]
push dword [ecx + 0x1a0]
call fcn.08054230
add esp, 4
push eax
mov eax, dword [dest]
add eax, 0x110
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
mov edx, dword [dest]
push dword [edx + 0x1a4]
call fcn.080542a8
add esp, 4
push eax
mov eax, dword [dest]
add eax, 0x150
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
mov ecx, dword [dest]
push dword [ecx + 0x1b0]
call fcn.08054230
add esp, 4
push eax
mov eax, dword [dest]
add eax, 0x130
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
mov edx, dword [dest]
push dword [edx + 0x1b4]
call fcn.080542a8
add esp, 4
push eax
mov eax, dword [dest]
add eax, 0x170
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
mov ecx, dword [dest]
push dword [ecx + 0x1b8]
call fcn.08054230
add esp, 4
push eax
mov eax, dword [dest]
add eax, 0x140
push eax
call sym.imp.strncpy
add esp, 0xc
push 0x10
mov edx, dword [dest]
push dword [edx + 0x1bc]
call fcn.080542a8
add esp, 4
push eax
mov eax, dword [dest]
add eax, 0x180
push eax
call sym.imp.strncpy
add esp, 0xc
mov ecx, dword [arg_8h]
mov ecx, dword [ecx + 4]
mov dword [var_18h], ecx
mov edx, dword [var_18h]
test dl, 2
je 0x805293e
push str.cmdline
push 0x8148c60
call fcn.08052224
mov ecx, dword [dest]
mov dword [ecx + 0x10c], eax
add esp, 8
mov edx, dword [arg_8h]
mov edx, dword [edx + 4]
mov dword [var_18h], edx
mov ecx, dword [var_18h]
test cl, 4
je 0x8052961
push str.environ
push 0x8148c60
call fcn.08052224
mov edx, dword [dest]
mov dword [edx + 0x108], eax
add esp, 8
mov ecx, dword [dest]
cmp byte [ecx + 0x1dc], 0x5a
jne 0x805297f
push str.__defunct_
mov eax, ecx
add eax, 0x190
push eax
call sym.imp.strcat
mov eax, dword [dest]
lea esp, [var_2ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x20
push edi
push esi
push ebx
cmp dword [0x805c3e8], 0xffffffff
jne 0x8053bd0
push 0
push str._proc_meminfo
call sym.imp.open
mov dword [0x805c3e8], eax
add esp, 8
cmp eax, 0xffffffff
jne 0x8053bd0
push str.Error:__proc_must_be_mounted_n__To_mount__proc_at_boot_you_need_an__etc_fstab_line_like:_n_______proc____proc___proc____defaults_n__In_the_meantime__mount__proc__proc__t_proc_n
push dword [obj.stderr]
call sym.imp.fprintf
push dword [0x805c3e8]
call sym.imp.close
push 1
call sym.imp._exit
lea esi, [esi]
push 0
push 0
push dword [0x805c3e8]
call sym.imp.lseek
push 0x3ff
push 0x8149640
push dword [0x805c3e8]
call sym.imp.read
mov dword [0x8149628], eax
add esp, 0x18
test eax, eax
jge 0x8053c26
push str._proc_meminfo
call sym.imp.perror
push dword [0x805c3e8]
call sym.imp.close
mov dword [0x805c3e8], 0xffffffff
xor eax, eax
jmp 0x8054051
mov byte [eax + 0x8149640], 0
cmp dword [0x8149568], 0
jne 0x8053c5e
mov ebx, 0x8149568
mov dword [var_1ch], 2
mov ecx, 0x81495f0
mov edx, 8
lea esi, [esi]
mov dword [ebx + edx], ecx
add ecx, 0xffffffc8
add edx, 0xfffffffc
dec dword [var_1ch]
jns 0x8053c50
mov ebx, 0x8149640
mov dword [var_1ch], 0
mov ecx, 0x8149568
nop
mov dword [var_20h], 0
mov esi, dword [var_1ch]
lea edx, [esi*4]
mov eax, dword [edx + ecx]
mov edi, dword [var_20h]
mov dword [eax + edi*8], 0
mov dword [eax + edi*8 + 4], 0
inc edi
mov dword [var_20h], edi
cmp edi, 6
jle 0x8053c81
inc dword [var_1ch]
cmp dword [var_1ch], 2
jle 0x8053c70
cmp dword [0x805c404], 0x1ffff
jg 0x8053d56
mov dword [var_1ch], 0
mov dl, byte [0x8149640]
test dl, dl
je 0x805404c
movsx eax, byte [ebx]
mov ecx, dword [obj.__ctype_b]
test byte [ecx + eax*2 + 1], 8
jne 0x8053cf1
lea esi, [esi]
inc ebx
mov dl, byte [ebx]
test dl, dl
je 0x8053cf1
movsx eax, dl
test byte [ecx + eax*2 + 1], 8
je 0x8053ce0
mov dword [var_20h], 0
mov esi, dword [var_1ch]
shl esi, 2
mov dword [var_14h], esi
test dl, dl
je 0x8053d44
lea eax, [var_10h]
push eax
mov edi, 0x8149568
mov esi, dword [var_14h]
mov eax, dword [esi + edi]
mov edi, dword [var_20h]
lea eax, [eax + edi*8]
push eax
push str._u_n
push ebx
call sym.imp.sscanf
mov ecx, eax
add ebx, dword [var_10h]
mov al, byte [ebx]
mov dl, al
add esp, 0x10
cmp dl, 0xa
je 0x8053d44
test ecx, ecx
jle 0x8053d44
inc edi
mov dword [var_20h], edi
cmp edi, 6
jle 0x8053d01
inc dword [var_1ch]
cmp dword [var_1ch], 2
jg 0x805404c
jmp 0x8053cc5
cmp byte [0x8149640], 0
je 0x8054020
lea eax, [var_10h]
push eax
lea esi, [var_ch]
mov dword [var_18h], esi
push esi
push str._11s_n
push ebx
call sym.imp.sscanf
add esp, 0x10
mov dword [var_20h], esi
mov eax, dword [var_18h]
mov edx, str.MemTotal:
mov ecx, 0xa
mov edi, edx
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x8053de0
add ebx, dword [var_10h]
push dword [0x8149568]
push str.__Ld
push ebx
call sym.imp.sscanf
mov eax, dword [0x8149568]
mov edx, dword [eax]
mov ecx, dword [eax + 4]
shld ecx, edx, 0xa
shl edx, 0xa
mov dword [eax], edx
mov dword [eax + 4], ecx
add esp, 0xc
mov al, byte [ebx]
inc ebx
cmp al, 0xa
je 0x8054017
lea esi, [esi]
mov al, byte [ebx]
inc ebx
cmp al, 0xa
jne 0x8053dd0
jmp 0x8054017
lea esi, [esi]
mov esi, eax
mov edi, str.MemFree:
mov ecx, 9
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x8053e40
add ebx, dword [var_10h]
mov eax, dword [0x8149568]
add eax, 0x10
push eax
push str.__Ld
push ebx
call sym.imp.sscanf
mov ecx, dword [0x8149568]
mov eax, dword [ecx + 0x10]
mov edx, dword [ecx + 0x14]
shld edx, eax, 0xa
shl eax, 0xa
mov dword [ecx + 0x10], eax
mov dword [ecx + 0x14], edx
add esp, 0xc
mov al, byte [ebx]
inc ebx
cmp al, 0xa
je 0x8054017
mov al, byte [ebx]
inc ebx
cmp al, 0xa
jne 0x8053e31
jmp 0x8054017
lea esi, [esi]
mov esi, eax
mov edi, str.MemShared:
mov ecx, 0xb
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x8053ea0
add ebx, dword [var_10h]
mov eax, dword [0x8149568]
add eax, 0x18
push eax
push str.__Ld
push ebx
call sym.imp.sscanf
mov ecx, dword [0x8149568]
mov eax, dword [ecx + 0x18]
mov edx, dword [ecx + 0x1c]
shld edx, eax, 0xa
shl eax, 0xa
mov dword [ecx + 0x18], eax
mov dword [ecx + 0x1c], edx
add esp, 0xc
mov al, byte [ebx]
inc ebx
cmp al, 0xa
je 0x8054017
mov al, byte [ebx]
inc ebx
cmp al, 0xa
jne 0x8053e91
jmp 0x8054017
lea esi, [esi]
mov esi, eax
mov edi, str.Buffers:
mov ecx, 9
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x8053f00
add ebx, dword [var_10h]
mov eax, dword [0x8149568]
add eax, 0x20
push eax
push str.__Ld
push ebx
call sym.imp.sscanf
mov ecx, dword [0x8149568]
mov eax, dword [ecx + 0x20]
mov edx, dword [ecx + 0x24]
shld edx, eax, 0xa
shl eax, 0xa
mov dword [ecx + 0x20], eax
mov dword [ecx + 0x24], edx
add esp, 0xc
mov al, byte [ebx]
inc ebx
cmp al, 0xa
je 0x8054017
mov al, byte [ebx]
inc ebx
cmp al, 0xa
jne 0x8053ef1
jmp 0x8054017
lea esi, [esi]
mov esi, eax
mov edi, str.Cached:
mov ecx, 8
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x8053f60
add ebx, dword [var_10h]
mov eax, dword [0x8149568]
add eax, 0x28
push eax
push str.__Ld
push ebx
call sym.imp.sscanf
mov ecx, dword [0x8149568]
mov eax, dword [ecx + 0x28]
mov edx, dword [ecx + 0x2c]
shld edx, eax, 0xa
shl eax, 0xa
mov dword [ecx + 0x28], eax
mov dword [ecx + 0x2c], edx
add esp, 0xc
mov al, byte [ebx]
inc ebx
cmp al, 0xa
je 0x8054017
mov al, byte [ebx]
inc ebx
cmp al, 0xa
jne 0x8053f51
jmp 0x8054017
lea esi, [esi]
mov esi, eax
mov edi, str.SwapTotal:
mov ecx, 0xb
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x8053fb0
add ebx, dword [var_10h]
push dword [0x814956c]
push str.__Ld
push ebx
call sym.imp.sscanf
mov eax, dword [0x814956c]
mov edx, dword [eax]
mov ecx, dword [eax + 4]
shld ecx, edx, 0xa
shl edx, 0xa
mov dword [eax], edx
mov dword [eax + 4], ecx
add esp, 0xc
mov al, byte [ebx]
inc ebx
cmp al, 0xa
je 0x8054017
mov al, byte [ebx]
inc ebx
cmp al, 0xa
jne 0x8053fa7
jmp 0x8054017
mov esi, dword [var_18h]
mov edi, str.SwapFree:
mov ecx, 0xa
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x8054010
add ebx, dword [var_10h]
mov eax, dword [0x814956c]
add eax, 0x10
push eax
push str.__Ld
push ebx
call sym.imp.sscanf
mov ecx, dword [0x814956c]
mov eax, dword [ecx + 0x10]
mov edx, dword [ecx + 0x14]
shld edx, eax, 0xa
shl eax, 0xa
mov dword [ecx + 0x10], eax
mov dword [ecx + 0x14], edx
add esp, 0xc
mov al, byte [ebx]
inc ebx
cmp al, 0xa
je 0x8054017
mov esi, esi
mov al, byte [ebx]
inc ebx
cmp al, 0xa
jne 0x8054000
jmp 0x8054017
lea esi, [esi]
mov al, byte [ebx]
inc ebx
cmp al, 0xa
jne 0x8054010
cmp byte [ebx], 0
jne 0x8053d63
mov eax, dword [0x814956c]
mov esi, dword [eax]
mov edi, dword [eax + 4]
sub esi, dword [eax + 0x10]
sbb edi, dword [eax + 0x14]
mov dword [eax + 8], esi
mov dword [eax + 0xc], edi
mov eax, dword [0x8149568]
mov esi, dword [eax]
mov edi, dword [eax + 4]
sub esi, dword [eax + 0x10]
sbb edi, dword [eax + 0x14]
mov dword [eax + 8], esi
mov dword [eax + 0xc], edi
mov eax, 0x8149568
lea esp, [var_2ch]
pop ebx
pop esi
pop edi
leave
ret
pop ebx
add ebx, 0x7eff
call fcn.08049350
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
cmp dword [0x805c094], 0
jne 0x8049394
jmp 0x804936d
mov esi, esi
lea edx, [eax + 4]
mov dword [0x805c090], edx
mov eax, dword [eax]
call eax
mov eax, dword [0x805c090]
cmp dword [eax], 0
jne 0x8049360
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x804938a
push section..eh_frame
call sym.imp.__deregister_frame_info
mov dword [0x805c094], 1
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
lea eax, [var_4h]
push eax
call fcn.0805b2b5
mov edi, eax
add esp, 4
test edi, edi
je 0x805bb39
call fcn.0805ba19
call edi
call fcn.0805b97d
test eax, eax
jne 0x805bb39
push 0x1000
call fcn.0805b105
mov esi, eax
add esp, 4
test esi, esi
je 0x805bb30
mov eax, 0xb7
mov ebx, esi
mov ecx, 0x1000
int 0x80
test eax, eax
je 0x805bb30
push 4
call fcn.0805b0e5
mov edx, eax
add esp, 4
mov eax, 0xc
mov ebx, edx
int 0x80
push dword [var_4h]
push edi
call fcn.0805b8f5
add esp, 8
mov eax, 0xc
mov ebx, esi
int 0x80
push esi
call fcn.0805b13d
add esp, 4
push dword [var_4h]
push edi
call fcn.0805b8f5
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
push edi
push esi
push ebx
xor edi, edi
push 5
call fcn.0805b0e5
push eax
call fcn.0805b1a1
inc eax
push eax
call fcn.0805b105
mov dword [var_8h], eax
add esp, 0xc
test eax, eax
je 0x805b41b
push 5
call fcn.0805b0e5
mov esi, eax
push esi
call fcn.0805b1a1
mov esi, eax
inc esi
push esi
push 5
call fcn.0805b0e5
add esp, 4
mov esi, eax
push esi
mov eax, dword [var_8h]
push eax
call fcn.0805b1bd
mov edx, dword [var_8h]
add edx, 6
push edx
mov eax, 0x14
int 0x80
mov esi, eax
push esi
call fcn.0805b261
add esp, 0x1c
mov eax, 5
mov ebx, dword [var_8h]
xor ecx, ecx
xor edx, edx
int 0x80
mov esi, eax
test esi, esi
jge 0x805b345
push ebx
call fcn.0805b13d
jmp 0x805b41b
mov esi, esi
mov eax, 0x13
mov ebx, esi
mov ecx, 0xc
xor edx, edx
int 0x80
lea eax, [var_4h]
mov ecx, eax
mov eax, 3
mov edx, 4
int 0x80
cmp eax, 4
jne 0x805b409
mov eax, 0x13
xor ecx, ecx
mov edx, 2
int 0x80
mov dword [var_18h], eax
mov ebx, dword [var_4h]
mov dword [var_14h], ebx
mov eax, 0x13
mov ebx, esi
mov ecx, dword [var_14h]
xor edx, edx
int 0x80
sub dword [var_18h], ecx
push 5
call fcn.0805b0e5
mov dword [var_14h], eax
push eax
call fcn.0805b1a1
mov dword [var_10h], eax
mov eax, dword [var_18h]
mov dword [var_14h], eax
mov edx, dword [var_10h]
sub dword [var_14h], edx
mov ecx, dword [var_14h]
dec ecx
push ecx
call fcn.0805b105
mov dword [var_14h], eax
add esp, 0xc
test eax, eax
je 0x805b409
mov ebx, dword [var_8h]
mov dword [var_14h], ebx
cmp edi, dword [var_18h]
jge 0x805b3f2
mov edx, dword [var_18h]
sub edx, edi
mov eax, 3
mov ebx, esi
mov ecx, dword [var_14h]
int 0x80
add edi, eax
add ecx, edi
mov dword [var_14h], ecx
cmp edi, dword [var_18h]
jl 0x805b3d5
mov eax, 6
mov ebx, esi
int 0x80
mov edx, dword [var_18h]
mov eax, dword [arg_8h]
mov dword [eax], edx
mov eax, dword [var_8h]
jmp 0x805b41d
nop
mov ecx, dword [var_8h]
push ecx
call fcn.0805b13d
mov eax, 6
mov ebx, esi
int 0x80
xor eax, eax
lea esp, [var_24h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov eax, 0x40
int 0x80
mov dword [var_4h], eax
mov eax, 2
int 0x80
mov esi, eax
test esi, esi
jne 0x805ba96
mov eax, 0x40
int 0x80
mov esi, eax
push 0
push 0
push esi
push 0x10
call fcn.0805b205
mov edx, eax
add esp, 0x10
test edx, edx
je 0x805ba75
push 0
push 0
push dword [var_4h]
push 0x10
call fcn.0805b205
add esp, 0x10
mov eax, 0x25
mov ebx, esi
mov ecx, 9
int 0x80
push 0x3e8
push 0
call fcn.0805b1e1
push 0
push 0
push esi
push 0x11
call fcn.0805b205
mov eax, 1
xor ebx, ebx
int 0x80
lea ecx, [var_4h]
mov eax, 7
mov ebx, esi
xor edx, edx
int 0x80
lea esp, [var_ch]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push ebx
push ecx
push edx
push esi
mov eax, 0x1a
mov ebx, dword [arg_18h]
mov ecx, dword [arg_1ch]
mov edx, dword [arg_20h]
mov esi, dword [arg_24h]
int 0x80
pop esi
pop edx
pop ecx
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push ebx
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov dword [var_8h], eax
lea ebx, [var_8h]
mov dword [ebx + 4], edx
mov eax, 0xa2
mov ecx, ebx
int 0x80
mov ebx, dword [var_ch]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov dword [var_8h], 0
mov dword [var_4h], 0
mov dword [var_8h], 2
lea ecx, [var_8h]
mov dword [var_ch], ecx
mov dword [ecx + 4], 3
push 0x1000
call fcn.0805b105
mov edi, eax
add esp, 4
mov eax, 0xb7
mov ebx, edi
mov ecx, 0x1000
int 0x80
test eax, eax
jne 0x805b9d9
push edi
call fcn.0805b13d
mov eax, 0xffffffff
jmp 0x805ba11
lea esi, [esi]
xor esi, esi
mov esi, esi
mov ecx, dword [var_ch]
push dword [ecx + esi*4]
call fcn.0805b0e5
mov dword [var_10h], eax
push eax
call fcn.0805b1a1
push eax
mov ebx, dword [var_10h]
push ebx
push edi
call fcn.0805b16d
add esp, 0x14
test eax, eax
jg 0x805b9c9
inc esi
cmp esi, 1
jle 0x805b9dd
push edi
call fcn.0805b13d
xor eax, eax
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov eax, 0x2d
xor ebx, ebx
int 0x80
mov edx, eax
mov eax, dword [arg_8h]
lea esi, [eax + edx]
mov eax, 0x2d
mov ebx, esi
int 0x80
mov ecx, eax
cmp ecx, esi
jne 0x805b131
mov eax, edx
jmp 0x805b133
lea esi, [esi]
xor eax, eax
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
call fcn.0805b099
test ebx, ebx
jle 0x805b100
cmp byte [eax], 0
jne 0x805b0fb
dec ebx
inc eax
test ebx, ebx
jg 0x805b0f5
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
mov esi, 0x64
push 0x10c
call fcn.0805b105
mov edi, eax
add esp, 4
test edi, edi
je 0x805b975
push 0
call fcn.0805b0e5
mov ebx, eax
add esp, 4
mov eax, 5
xor ecx, ecx
xor edx, edx
int 0x80
mov ebx, eax
test ebx, ebx
jl 0x805b96f
lea eax, [edi + 0xa]
mov dword [var_4h], eax
jmp 0x805b95d
mov esi, esi
test esi, esi
jl 0x805b96f
mov edx, dword [arg_ch]
push edx
mov ecx, dword [arg_8h]
push ecx
mov eax, dword [var_4h]
push eax
call fcn.0805b4ed
mov dword [var_8h], eax
add esp, 0xc
test eax, eax
jne 0x805b95d
dec esi
mov eax, 0x59
mov ecx, edi
mov edx, 1
int 0x80
test eax, eax
jg 0x805b93d
push edi
call fcn.0805b13d
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0x2d
mov ebx, dword [arg_8h]
pop ebp
or ch, cl
invalid
mov ebx, dword [ebp - 4]
leave
ret
pop eax
jmp loc.0805b0e3
leave
ret
push ebp
mov ebp, esp
jmp 0x805b0a1
pop eax
jmp loc.0805b0e3
call fcn.0805b09e
add byte cs:[edi], ch
je 0x805b118
jo 0x805b0dc
js 0x805b124
jae fcn.0805b105
dec esi
push esi
xor dh, byte [ebx]
jp 0x805b0b9
das
jbe 0x805b0be
das
jo 0x805b133
outsd dx, dword [esi]
arpl word [eax], ax
das
bound ebp, qword [ecx + 0x6e]
add byte [edi], ch
jo 0x805b13e
outsd dx, dword [esi]
arpl word [edi], bp
das
das
das
das
das
das
das
das
das
das
das
das
das
das
das
das
js 0x805b147
add cl, cl
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
call fcn.0805b099
test ebx, ebx
jle 0x805b100
cmp byte [eax], 0
jne 0x805b0fb
dec ebx
inc eax
test ebx, ebx
jg 0x805b0f5
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov eax, 0x2d
xor ebx, ebx
int 0x80
mov edx, eax
mov eax, dword [arg_8h]
lea esi, [eax + edx]
mov eax, 0x2d
mov ebx, esi
int 0x80
mov ecx, eax
cmp ecx, esi
jne 0x805b131
mov eax, edx
jmp 0x805b133
lea esi, [esi]
xor eax, eax
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
lea esi, [esi]
push ebp
mov ebp, esp
push ebx
mov eax, 0x2d
mov ebx, dword [arg_8h]
pop ebp
or ch, cl
or byte [ebx - 0x3c3603a3], 0x90
push ebp
mov ebp, esp
mov edx, dword [ebp + 8]
mov eax, dword [ebp + 0x10]
mov cl, byte [ebp + 0xc]
test eax, eax
jle 0x805b169
mov byte [edx], cl
dec eax
inc edx
test eax, eax
jg 0x805b161
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov esi, dword [arg_8h]
xor ecx, ecx
test esi, esi
jle 0x805b258
mov ebx, 0x66666667
mov esi, esi
mov eax, esi
imul ebx
sar edx, 2
sar esi, 0x1f
mov dword [var_4h], esi
mov esi, edx
sub esi, dword [var_4h]
inc ecx
test esi, esi
jg 0x805b241
mov eax, ecx
lea esp, [var_ch]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
xor eax, eax
cmp byte [edx], 0
je 0x805b1b8
lea esi, [esi]
inc edx
inc eax
cmp byte [edx], 0
jne 0x805b1b1
leave
ret
push ebp
mov ebp, esp
push ebx
mov edx, dword [arg_10h]
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
test edx, edx
jle 0x805b1dc
lea esi, [esi]
mov al, byte [ecx]
mov byte [ebx], al
inc ebx
inc ecx
dec edx
test edx, edx
jg 0x805b1d1
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov edi, dword [arg_ch]
push ebx
call fcn.0805b229
lea ecx, [eax - 1]
test ecx, ecx
jl 0x805b2ad
mov esi, 0x66666667
lea esi, [esi]
mov eax, ebx
imul esi
sar edx, 2
mov dword [var_4h], ebx
sar dword [var_4h], 0x1f
sub edx, dword [var_4h]
lea eax, [edx + edx*4]
add eax, eax
sub ebx, eax
mov dword [var_4h], ebx
mov ebx, edx
mov al, byte [var_4h]
add al, 0x30
mov byte [ecx + edi], al
dec ecx
jns 0x805b285
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
pop eax
sub eax, 0x3ae
jmp 0x805b437
call fcn.0805b42a
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
mov dword [var_4h], 0xffffffff
mov eax, 0x13
mov ebx, esi
xor ecx, ecx
mov edx, 1
int 0x80
mov dword [var_8h], eax
mov eax, dword [arg_14h]
push eax
call fcn.0805b105
mov dword [var_ch], eax
add esp, 4
test eax, eax
je 0x805b4df
mov eax, 0x13
mov ecx, edi
xor edx, edx
int 0x80
cmp eax, edi
jne 0x805b4d6
mov eax, 3
mov ecx, dword [var_ch]
mov edx, dword [arg_14h]
int 0x80
mov edi, eax
cmp edi, edx
jne 0x805b4d6
mov eax, 0x13
mov ecx, dword [arg_10h]
xor edx, edx
int 0x80
cmp eax, ecx
jne 0x805b4d6
mov eax, 4
mov ecx, dword [var_ch]
mov edx, edi
int 0x80
cmp eax, edi
jne 0x805b4d6
mov eax, 0x13
mov ecx, dword [var_8h]
xor edx, edx
int 0x80
mov dword [var_4h], 0
mov ebx, dword [var_ch]
push ebx
call fcn.0805b13d
mov eax, dword [var_4h]
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
jmp 0x805b432
pop eax
sub eax, 0x3ae
jmp 0x805b437
call fcn.0805b42a
push ebp
mov ebp, esp
mov eax, 0xcb0
leave
ret
push ebp
mov ebp, esp
sub esp, 0xf4
push edi
push esi
push ebx
mov dword [var_c4h], 0xffffffff
mov eax, 5
mov ebx, dword [arg_8h]
mov ecx, 2
xor edx, edx
int 0x80
mov dword [var_f4h], eax
test eax, eax
jl 0x805b8e2
mov eax, 0x13
mov ebx, dword [var_f4h]
xor ecx, ecx
mov edx, 2
int 0x80
mov dword [var_cch], eax
mov eax, 0x13
xor edx, edx
int 0x80
mov esi, eax
test esi, esi
jne 0x805b8d5
lea ebx, [var_34h]
mov dword [var_d0h], ebx
mov eax, 3
mov ebx, dword [var_f4h]
mov ecx, dword [var_d0h]
mov edx, 0x34
int 0x80
mov esi, eax
cmp esi, 0x34
jne 0x805b8d5
mov eax, 0x13
mov ecx, 0x40
mov edx, 1
int 0x80
lea esi, [var_54h]
mov eax, 3
mov ecx, esi
mov edx, 0x20
int 0x80
mov esi, eax
cmp esi, 0x20
jne 0x805b8d5
lea ecx, [var_74h]
mov eax, 3
mov edx, esi
int 0x80
mov ecx, eax
cmp ecx, 0x20
jne 0x805b8d5
cmp word [var_24h], 2
jne 0x805b8d5
cmp dword [var_50h], 0
jne 0x805b8d5
mov edi, dword [var_44h]
mov esi, edi
add esi, dword [var_4ch]
mov eax, dword [var_6ch]
sub eax, esi
cmp eax, 0xfff
jg 0x805b5f9
mov dword [var_c4h], 1
jmp 0x805b8d5
mov esi, esi
mov dword [var_c0h], edi
mov dword [var_c8h], esi
mov eax, 0x13
mov ebx, dword [var_f4h]
mov ecx, 0x34
xor edx, edx
int 0x80
xor esi, esi
cmp word [var_8h], 0
je 0x805b706
lea eax, [var_94h]
mov dword [var_d4h], eax
mov dword [var_d8h], 0x20
mov dword [var_e0h], edi
lea esi, [esi]
mov dword [var_ech], 0
mov eax, 3
mov ebx, dword [var_f4h]
mov ecx, dword [var_d4h]
mov edx, dword [var_d8h]
int 0x80
mov edi, eax
cmp edi, 0x20
jne 0x805b8d5
mov eax, dword [var_90h]
mov dword [var_f0h], eax
mov edx, dword [var_e0h]
cmp eax, edx
jb 0x805b6a0
add eax, 0x1000
mov dword [var_90h], eax
inc dword [var_ech]
mov dword [var_f0h], eax
cmp dword [var_f0h], 0
jne 0x805b6c0
add dword [var_84h], 0x1000
add dword [var_80h], 0x1000
inc dword [var_ech]
movzx ecx, word [var_8h]
mov dword [var_f0h], ecx
cmp dword [var_ech], 0
jle 0x805b6f9
mov eax, 0x13
mov ebx, dword [var_f4h]
mov ecx, 0xffffffe0
mov edx, 1
int 0x80
mov eax, 4
mov ecx, dword [var_d4h]
mov edx, edi
int 0x80
inc esi
cmp esi, dword [var_f0h]
jl 0x805b645
mov ecx, dword [var_14h]
mov eax, 0x13
mov ebx, dword [var_f4h]
xor edx, edx
int 0x80
cmp eax, ecx
jne 0x805b8d5
xor esi, esi
movzx eax, word [var_4h]
mov dword [var_f0h], eax
cmp esi, eax
jge 0x805b7c9
lea edi, [var_bch]
mov dword [var_dch], 0x28
mov edx, dword [var_c0h]
mov dword [var_e4h], edx
nop
mov eax, 3
mov ebx, dword [var_f4h]
mov ecx, edi
mov edx, dword [var_dch]
int 0x80
mov dword [var_ech], eax
cmp eax, 0x28
jne 0x805b8d5
mov eax, dword [var_ach]
mov dword [var_e8h], eax
mov edx, dword [var_e4h]
cmp eax, edx
jbe 0x805b7c0
add eax, 0x1000
mov dword [var_ach], eax
mov eax, 0x13
mov ecx, 0xffffffd8
mov edx, 1
int 0x80
mov eax, 4
mov ecx, edi
mov edx, dword [var_ech]
int 0x80
movzx ebx, word [var_4h]
mov dword [var_f0h], ebx
inc esi
cmp esi, dword [var_f0h]
jl 0x805b751
mov eax, dword [var_c0h]
sub dword [var_cch], eax
mov edx, dword [var_cch]
push edx
add eax, 0x1000
push eax
mov ecx, dword [var_c0h]
push ecx
mov ebx, dword [var_f4h]
push ebx
call fcn.0805b445
mov esi, eax
add esp, 0x10
test esi, esi
jne 0x805b8d5
mov ecx, dword [var_c0h]
mov eax, 0x13
xor edx, edx
int 0x80
cmp eax, ecx
jne 0x805b8d5
call fcn.0805b425
mov esi, eax
call fcn.0805b439
mov edx, eax
mov eax, 4
mov ecx, esi
int 0x80
mov esi, eax
call fcn.0805b439
mov edx, eax
cmp esi, edx
jne 0x805b8d5
mov ecx, dword [var_c0h]
inc ecx
mov eax, 0x13
xor edx, edx
int 0x80
lea ecx, [var_1ch]
mov eax, 4
mov edx, 4
int 0x80
cmp eax, 4
jne 0x805b8d5
mov eax, 0x13
xor ecx, ecx
mov edx, 2
int 0x80
mov dword [var_c0h], eax
mov eax, 4
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
int 0x80
add dword [var_14h], 0x1000
mov ebx, dword [var_c8h]
mov dword [var_1ch], ebx
push 4
lea eax, [var_c0h]
push eax
lea edx, [var_28h]
push edx
call fcn.0805b1bd
mov eax, 0x13
mov ebx, dword [var_f4h]
xor ecx, ecx
xor edx, edx
int 0x80
mov eax, 4
mov ecx, dword [var_d0h]
mov edx, 0x34
int 0x80
mov dword [var_c4h], 0
mov eax, 6
mov ebx, dword [var_f4h]
int 0x80
mov eax, dword [var_c4h]
lea esp, [var_100h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
test edx, edx
jle 0x805b194
lea esi, [esi]
mov al, byte [ecx]
cmp byte [ebx], al
je 0x805b18d
xor eax, eax
jmp 0x805b199
mov esi, esi
inc ebx
inc ecx
dec edx
test edx, edx
jg 0x805b181
mov eax, 1
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.08048e69
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edx, dword [arg_8h]
mov edi, dword [arg_ch]
mov esi, dword [arg_10h]
xor ecx, ecx
cmp ecx, esi
jae 0x80494a0
mov bl, byte [edi]
inc edi
movzx eax, bl
mov al, byte [eax + str.Z_______________________________q___________________________________]
cmp al, 0x3e
je 0x8049462
jg 0x8049411
cmp al, 0x2a
je 0x8049420
jg 0x8049407
cmp al, 0x26
je 0x8049430
jmp 0x80493e1
cmp al, 0x2d
je 0x8049425
cmp al, 0x3c
je 0x8049450
jmp 0x80493e1
cmp al, 0x5a
je 0x80494a0
cmp al, 0x71
je 0x8049474
jmp 0x80493e1
nop
inc ecx
mov byte [edx], bl
jmp 0x8049494
inc ecx
mov byte [edx], 0x3f
jmp 0x8049494
nop
lea esi, [esi]
lea eax, [ecx + 5]
cmp eax, esi
ja 0x80494a0
mov ecx, eax
mov byte [edx], 0x26
inc edx
mov byte [edx], 0x61
inc edx
mov byte [edx], 0x6d
inc edx
mov byte [edx], 0x70
jmp 0x8049490
lea esi, [esi]
lea eax, [ecx + 4]
cmp eax, esi
ja 0x80494a0
mov ecx, eax
mov byte [edx], 0x26
inc edx
mov byte [edx], 0x6c
jmp 0x804948c
lea eax, [ecx + 4]
cmp eax, esi
ja 0x80494a0
mov ecx, eax
mov byte [edx], 0x26
inc edx
mov byte [edx], 0x67
jmp 0x804948c
lea eax, [ecx + 6]
cmp eax, esi
ja 0x80494a0
mov ecx, eax
mov byte [edx], 0x26
inc edx
mov byte [edx], 0x71
inc edx
mov byte [edx], 0x75
inc edx
mov byte [edx], 0x6f
inc edx
mov byte [edx], 0x74
inc edx
mov byte [edx], 0x3b
inc edx
jmp 0x80493e1
lea esi, [esi]
mov byte [edx], 0
mov eax, ecx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
mov edx, dword [arg_8h]
mov esi, dword [arg_ch]
mov edi, dword [arg_10h]
xor ebx, ebx
cmp ebx, edi
jae 0x804955e
lea esi, [esi]
mov cl, byte [esi]
mov byte [var_4h], cl
inc esi
movzx eax, cl
mov al, byte [eax + str.Z______abtnvfr_____________e______________________________________]
mov byte [var_5h], al
cmp al, 0x2d
je 0x8049500
jg 0x80494f0
cmp al, 0x2a
je 0x80494f8
jmp 0x8049543
mov esi, esi
cmp byte [var_5h], 0x5a
jne 0x8049543
jmp 0x804955e
inc ebx
mov cl, byte [var_4h]
jmp 0x8049553
mov esi, esi
lea eax, [ebx + 4]
cmp eax, edi
ja 0x804955e
mov ebx, eax
mov byte [edx], 0x5c
inc edx
mov al, byte [var_4h]
shr al, 6
and eax, 0xff
mov al, byte [eax + str.01234567]
mov byte [edx], al
inc edx
mov al, byte [var_4h]
shr al, 3
and eax, 7
mov al, byte [eax + str.01234567]
mov byte [edx], al
inc edx
mov al, byte [var_4h]
and eax, 7
mov al, byte [eax + str.01234567]
mov byte [edx], al
jmp 0x8049555
lea eax, [ebx + 2]
cmp eax, edi
ja 0x804955e
mov ebx, eax
mov byte [edx], 0x5c
inc edx
mov cl, byte [var_5h]
mov byte [edx], cl
inc edx
cmp ebx, edi
jb 0x80494d0
mov byte [edx], 0
mov eax, ebx
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ecx, dword [arg_8h]
mov esi, dword [arg_ch]
mov edi, dword [arg_10h]
xor edx, edx
cmp edx, edi
jae 0x80495b7
mov bl, byte [esi]
inc esi
movzx eax, bl
mov al, byte [eax + str.Z________________________________________________________________]
cmp al, 0x2d
je 0x80495b0
jg 0x80495a0
cmp al, 0x2a
je 0x80495a6
jmp 0x804957d
lea esi, [esi]
cmp al, 0x5a
jne 0x804957d
jmp 0x80495b7
inc edx
mov byte [ecx], bl
jmp 0x80495b4
nop
lea esi, [esi]
inc edx
mov byte [ecx], 0x3f
inc ecx
jmp 0x804957d
mov byte [ecx], 0
mov eax, edx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
push dword [eax]
push dword [edx]
call sym.imp.strcasecmp
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
add eax, 0x110
push eax
mov eax, dword [arg_8h]
add eax, 0x110
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
add eax, 0x120
push eax
mov eax, dword [arg_8h]
add eax, 0x120
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
add eax, 0x130
push eax
mov eax, dword [arg_8h]
add eax, 0x130
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
add eax, 0x140
push eax
mov eax, dword [arg_8h]
add eax, 0x140
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
add eax, 0x150
push eax
mov eax, dword [arg_8h]
add eax, 0x150
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
add eax, 0x160
push eax
mov eax, dword [arg_8h]
add eax, 0x160
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
add eax, 0x170
push eax
mov eax, dword [arg_8h]
add eax, 0x170
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
add eax, 0x180
push eax
mov eax, dword [arg_8h]
add eax, 0x180
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
add eax, 0x190
push eax
mov eax, dword [arg_8h]
add eax, 0x190
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
sub esp, 0x6000
push esi
push ebx
call fcn.0804ba4c
mov esi, eax
add esi, dword [0x805c154]
cmp dword [0x805c0b4], 0
je 0x804bb70
push 0x1000
mov eax, dword [0x8127844]
add eax, 0x190
push eax
push esi
call fcn.080495c4
jmp 0x804bb90
lea esi, [esi]
mov eax, dword [0x8127844]
mov edx, dword [eax + 0x10c]
test edx, edx
je 0x804bb97
cmp dword [edx], 0
je 0x804bb97
push 0xc8000
push edx
push esi
call fcn.08049614
add esi, eax
add esp, 0xc
jmp 0x804bbbf
push 0x6000
add eax, 0x190
push eax
lea ebx, [ebp - 0x6000]
push ebx
call fcn.080495c4
push ebx
push str.__s_
push esi
call sym.imp.sprintf
add esi, eax
add esp, 0x18
cmp dword [0x805c0b8], 0
je 0x804bbee
mov eax, dword [0x8127844]
mov eax, dword [eax + 0x108]
test eax, eax
je 0x804bbee
cmp dword [eax], 0
je 0x804bbee
mov byte [esi], 0x20
inc esi
push 0xc8000
push eax
push esi
call fcn.08049614
add esi, eax
sub esi, dword [0x805c154]
mov eax, esi
lea esp, [ebp - 0x6008]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x6000
push esi
push ebx
call fcn.0804ba4c
mov esi, eax
add esi, dword [0x805c154]
cmp dword [0x805c128], 0
jne 0x804bc40
push 0x1000
mov eax, dword [0x8127844]
add eax, 0x190
push eax
push esi
call fcn.080495c4
jmp 0x804bc60
lea esi, [esi]
mov eax, dword [0x8127844]
mov edx, dword [eax + 0x10c]
test edx, edx
je 0x804bc67
cmp dword [edx], 0
je 0x804bc67
push 0xc8000
push edx
push esi
call fcn.08049614
add esi, eax
add esp, 0xc
jmp 0x804bc8f
push 0x6000
add eax, 0x190
push eax
lea ebx, [ebp - 0x6000]
push ebx
call fcn.080495c4
push ebx
push str.__s_
push esi
call sym.imp.sprintf
add esi, eax
add esp, 0x18
cmp dword [0x805c0b8], 0
je 0x804bcbe
mov eax, dword [0x8127844]
mov eax, dword [eax + 0x108]
test eax, eax
je 0x804bcbe
cmp dword [eax], 0
je 0x804bcbe
mov byte [esi], 0x20
inc esi
push 0xc8000
push eax
push esi
call fcn.08049614
add esi, eax
sub esi, dword [0x805c154]
mov eax, esi
lea esp, [ebp - 0x6008]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov eax, dword [0x8127844]
mov edx, dword [eax + 0xf4]
mov eax, edx
xor edx, edx
div dword [0x8169d48]
mov ecx, eax
mov eax, dword [0x8169cc4]
sub eax, ecx
mov dword [var_4h], eax
mov ecx, 0x88888889
mul ecx
shr edx, 5
mov ebx, edx
mov dword [var_10h], ebx
shl dword [var_10h], 4
sub dword [var_10h], ebx
mov eax, dword [var_10h]
shl eax, 2
mov dword [var_10h], eax
mov eax, dword [var_4h]
sub eax, dword [var_10h]
mov dword [var_ch], eax
mov eax, ebx
mul ecx
shr edx, 5
mov ecx, edx
mov dword [var_10h], ecx
shl dword [var_10h], 4
sub dword [var_10h], ecx
mov eax, dword [var_10h]
shl eax, 2
sub ebx, eax
mov dword [var_8h], ebx
mov eax, 0xaaaaaaab
mul ecx
shr edx, 4
mov esi, edx
lea eax, [esi + esi*2]
shl eax, 3
mov edi, ecx
sub edi, eax
test esi, esi
je 0x804bd70
push esi
push 0x8055a9a
push dword [0x805c154]
call sym.imp.sprintf
add esp, 0xc
jmp 0x804bd83
push 0x8055a9e
push dword [0x805c154]
call sym.imp.sprintf
add esp, 8
mov ebx, eax
test esi, esi
jne 0x804bd8d
test edi, edi
je 0x804bda6
push edi
push str._02u:
mov eax, ebx
add eax, dword [0x805c154]
push eax
call sym.imp.sprintf
add esp, 0xc
jmp 0x804bdbc
push 0x8055a9e
mov eax, ebx
add eax, dword [0x805c154]
push eax
call sym.imp.sprintf
add esp, 8
add ebx, eax
mov eax, dword [var_ch]
push eax
mov eax, dword [var_8h]
push eax
push str._02u:_02u
mov edx, ebx
add edx, dword [0x805c154]
push edx
call sym.imp.sprintf
mov edx, eax
add ebx, edx
mov eax, ebx
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
xor esi, esi
mov eax, dword [0x8127844]
mov ecx, dword [eax + 0xdc]
add ecx, dword [eax + 0xd8]
mov eax, ecx
xor edx, edx
div dword [0x8169d48]
mov ecx, eax
mov edi, 0x3c
cdq
idiv edi
mov dword [var_4h], edx
mov eax, 0x88888889
imul ecx
mov ebx, edx
add ebx, ecx
sar ebx, 5
mov dword [var_ch], ebx
sar ecx, 0x1f
sub dword [var_ch], ecx
mov eax, 0x88888889
imul dword [var_ch]
mov ecx, edx
add ecx, dword [var_ch]
sar ecx, 5
mov edi, dword [var_ch]
mov dword [var_8h], edi
sar dword [var_8h], 0x1f
sub ecx, dword [var_8h]
mov dword [var_8h], ecx
shl dword [var_8h], 4
sub dword [var_8h], ecx
mov eax, dword [var_8h]
shl eax, 2
mov ebx, edi
sub ebx, eax
mov eax, 0x2aaaaaab
imul ecx
sar edx, 2
mov dword [var_8h], ecx
sar dword [var_8h], 0x1f
mov edi, dword [var_8h]
sub edx, edi
mov dword [var_ch], edx
lea eax, [edx + edx*2]
shl eax, 3
sub ecx, eax
mov dword [var_10h], ecx
test edx, edx
je 0x804bea1
push edx
push 0x8055ac4
push dword [0x805c154]
call sym.imp.sprintf
add esp, 0xc
mov esi, eax
mov edx, dword [var_4h]
push edx
push ebx
mov edi, dword [var_10h]
push edi
push str._02d:_02d:_02d
mov ecx, esi
add ecx, dword [0x805c154]
push ecx
call sym.imp.sprintf
mov ecx, eax
add esi, ecx
mov eax, esi
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
mov eax, dword [0x8127844]
mov eax, dword [eax + 0xf4]
xor edx, edx
div dword [0x8169d48]
add eax, dword [0x812784c]
mov dword [var_4h], eax
mov ecx, dword [0x8127848]
sub ecx, eax
mov eax, ecx
test eax, eax
jge 0x804befe
xor eax, eax
cmp eax, 0x15180
jle 0x804bf16
lea eax, [var_4h]
push eax
call sym.imp.ctime
add esp, 4
add eax, 4
jmp 0x804bf25
lea eax, [var_4h]
push eax
call sym.imp.ctime
add esp, 4
add eax, 0xa
push eax
push dword [0x805c154]
call sym.imp.strcpy
mov eax, dword [0x805c154]
mov byte [eax + 6], 0
mov eax, 6
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov eax, dword [0x8127844]
mov ecx, dword [0x8169cc4]
imul ecx, dword [0x8169d48]
mov ebx, dword [0x805c154]
mov esi, dword [eax + 0x6c]
test esi, esi
jne 0x804bf78
push str._____
push ebx
call sym.imp.sprintf
jmp 0x804bfdd
cmp esi, 0xffffffff
jne 0x804bf90
push str.___xx
push ebx
call sym.imp.sprintf
jmp 0x804bfdd
lea esi, [esi]
sub esi, ecx
jns 0x804bf96
xor esi, esi
cmp esi, 0x270f
jbe 0x804bfb6
mov eax, 0x51eb851f
mul esi
shr edx, 5
push edx
push str._5lu
push ebx
call sym.imp.sprintf
jmp 0x804bfdd
mov eax, 0x51eb851f
mul esi
mov ecx, edx
shr ecx, 5
lea eax, [ecx + ecx*4]
mov dword [var_4h], eax
lea edx, [eax + eax*4]
shl edx, 2
sub esi, edx
push esi
push ecx
push str._2lu._02lu
push ebx
call sym.imp.sprintf
mov ecx, eax
mov eax, ecx
lea esp, [var_ch]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov eax, dword [0x8127844]
mov ebx, dword [0x805c154]
mov esi, dword [eax + 0x78]
test esi, esi
jne 0x804c010
push str._____
push ebx
call sym.imp.sprintf
jmp 0x804c06f
nop
cmp esi, 0xffffffff
jne 0x804c022
push str.___xx
push ebx
call sym.imp.sprintf
jmp 0x804c06f
test esi, esi
jge 0x804c028
xor esi, esi
cmp esi, 0x270f
jbe 0x804c048
mov eax, 0x51eb851f
mul esi
shr edx, 5
push edx
push str._5lu
push ebx
call sym.imp.sprintf
jmp 0x804c06f
mov eax, 0x51eb851f
mul esi
mov ecx, edx
shr ecx, 5
lea eax, [ecx + ecx*4]
mov dword [var_4h], eax
lea edx, [eax + eax*4]
shl edx, 2
sub esi, edx
push esi
push ecx
push str._2lu._02lu
push ebx
call sym.imp.sprintf
mov ecx, eax
mov eax, ecx
lea esp, [var_ch]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
push dword [eax]
push dword [edx]
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
push dword [eax]
push dword [edx]
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
xor eax, eax
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x60]
mov eax, dword [edx + 0x60]
cmp ecx, eax
jge 0x804c680
mov eax, 0xffffffff
jmp 0x804c68d
lea esi, [esi]
cmp ecx, eax
jg 0x804c688
xor eax, eax
jmp 0x804c68d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x64]
mov eax, dword [edx + 0x64]
cmp ecx, eax
jge 0x804c6b0
mov eax, 0xffffffff
jmp 0x804c6bd
lea esi, [esi]
cmp ecx, eax
jg 0x804c6b8
xor eax, eax
jmp 0x804c6bd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x68]
mov eax, dword [edx + 0x68]
cmp ecx, eax
jge 0x804c6e0
mov eax, 0xffffffff
jmp 0x804c6ed
lea esi, [esi]
cmp ecx, eax
jg 0x804c6e8
xor eax, eax
jmp 0x804c6ed
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x6c]
mov eax, dword [edx + 0x6c]
cmp ecx, eax
jge 0x804c710
mov eax, 0xffffffff
jmp 0x804c71d
lea esi, [esi]
cmp ecx, eax
jg 0x804c718
xor eax, eax
jmp 0x804c71d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x70]
mov eax, dword [edx + 0x70]
cmp ecx, eax
jge 0x804c740
mov eax, 0xffffffff
jmp 0x804c74d
lea esi, [esi]
cmp ecx, eax
jg 0x804c748
xor eax, eax
jmp 0x804c74d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x74]
mov eax, dword [edx + 0x74]
cmp ecx, eax
jge 0x804c770
mov eax, 0xffffffff
jmp 0x804c77d
lea esi, [esi]
cmp ecx, eax
jg 0x804c778
xor eax, eax
jmp 0x804c77d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x78]
mov eax, dword [edx + 0x78]
cmp ecx, eax
jge 0x804c7a0
mov eax, 0xffffffff
jmp 0x804c7ad
lea esi, [esi]
cmp ecx, eax
jg 0x804c7a8
xor eax, eax
jmp 0x804c7ad
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x7c]
mov eax, dword [edx + 0x7c]
cmp ecx, eax
jge 0x804c7d0
mov eax, 0xffffffff
jmp 0x804c7dd
lea esi, [esi]
cmp ecx, eax
jg 0x804c7d8
xor eax, eax
jmp 0x804c7dd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x80]
mov eax, dword [edx + 0x80]
cmp ecx, eax
jge 0x804c800
mov eax, 0xffffffff
jmp 0x804c80d
cmp ecx, eax
jg 0x804c808
xor eax, eax
jmp 0x804c80d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x84]
mov eax, dword [edx + 0x84]
cmp ecx, eax
jge 0x804c830
mov eax, 0xffffffff
jmp 0x804c83d
cmp ecx, eax
jg 0x804c838
xor eax, eax
jmp 0x804c83d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x88]
mov eax, dword [edx + 0x88]
cmp ecx, eax
jge 0x804c860
mov eax, 0xffffffff
jmp 0x804c86d
cmp ecx, eax
jg 0x804c868
xor eax, eax
jmp 0x804c86d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x8c]
mov eax, dword [edx + 0x8c]
cmp ecx, eax
jge 0x804c890
mov eax, 0xffffffff
jmp 0x804c89d
cmp ecx, eax
jg 0x804c898
xor eax, eax
jmp 0x804c89d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x90]
mov eax, dword [edx + 0x90]
cmp ecx, eax
jge 0x804c8c0
mov eax, 0xffffffff
jmp 0x804c8cd
cmp ecx, eax
jg 0x804c8c8
xor eax, eax
jmp 0x804c8cd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x94]
mov eax, dword [edx + 0x94]
cmp ecx, eax
jge 0x804c8f0
mov eax, 0xffffffff
jmp 0x804c8fd
cmp ecx, eax
jg 0x804c8f8
xor eax, eax
jmp 0x804c8fd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x98]
mov eax, dword [edx + 0x98]
cmp ecx, eax
jae 0x804c920
mov eax, 0xffffffff
jmp 0x804c92d
cmp ecx, eax
ja 0x804c928
xor eax, eax
jmp 0x804c92d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x9c]
mov eax, dword [edx + 0x9c]
cmp ecx, eax
jae 0x804c950
mov eax, 0xffffffff
jmp 0x804c95d
cmp ecx, eax
ja 0x804c958
xor eax, eax
jmp 0x804c95d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xa0]
mov eax, dword [edx + 0xa0]
cmp ecx, eax
jae 0x804c980
mov eax, 0xffffffff
jmp 0x804c98d
cmp ecx, eax
ja 0x804c988
xor eax, eax
jmp 0x804c98d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xa4]
mov eax, dword [edx + 0xa4]
cmp ecx, eax
jae 0x804c9b0
mov eax, 0xffffffff
jmp 0x804c9bd
cmp ecx, eax
ja 0x804c9b8
xor eax, eax
jmp 0x804c9bd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xa8]
mov eax, dword [edx + 0xa8]
cmp ecx, eax
jae 0x804c9e0
mov eax, 0xffffffff
jmp 0x804c9ed
cmp ecx, eax
ja 0x804c9e8
xor eax, eax
jmp 0x804c9ed
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xac]
mov eax, dword [edx + 0xac]
cmp ecx, eax
jae 0x804ca10
mov eax, 0xffffffff
jmp 0x804ca1d
cmp ecx, eax
ja 0x804ca18
xor eax, eax
jmp 0x804ca1d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xb0]
mov eax, dword [edx + 0xb0]
cmp ecx, eax
jae 0x804ca40
mov eax, 0xffffffff
jmp 0x804ca4d
cmp ecx, eax
ja 0x804ca48
xor eax, eax
jmp 0x804ca4d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xb4]
mov eax, dword [edx + 0xb4]
cmp ecx, eax
jae 0x804ca70
mov eax, 0xffffffff
jmp 0x804ca7d
cmp ecx, eax
ja 0x804ca78
xor eax, eax
jmp 0x804ca7d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xb8]
mov eax, dword [edx + 0xb8]
cmp ecx, eax
jae 0x804caa0
mov eax, 0xffffffff
jmp 0x804caad
cmp ecx, eax
ja 0x804caa8
xor eax, eax
jmp 0x804caad
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xbc]
mov eax, dword [edx + 0xbc]
cmp ecx, eax
jae 0x804cad0
mov eax, 0xffffffff
jmp 0x804cadd
cmp ecx, eax
ja 0x804cad8
xor eax, eax
jmp 0x804cadd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xc0]
mov eax, dword [edx + 0xc0]
cmp ecx, eax
jae 0x804cb00
mov eax, 0xffffffff
jmp 0x804cb0d
cmp ecx, eax
ja 0x804cb08
xor eax, eax
jmp 0x804cb0d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xc4]
mov eax, dword [edx + 0xc4]
cmp ecx, eax
jae 0x804cb30
mov eax, 0xffffffff
jmp 0x804cb3d
cmp ecx, eax
ja 0x804cb38
xor eax, eax
jmp 0x804cb3d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xc8]
mov eax, dword [edx + 0xc8]
cmp ecx, eax
jae 0x804cb60
mov eax, 0xffffffff
jmp 0x804cb6d
cmp ecx, eax
ja 0x804cb68
xor eax, eax
jmp 0x804cb6d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xcc]
mov eax, dword [edx + 0xcc]
cmp ecx, eax
jae 0x804cb90
mov eax, 0xffffffff
jmp 0x804cb9d
cmp ecx, eax
ja 0x804cb98
xor eax, eax
jmp 0x804cb9d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xd0]
mov eax, dword [edx + 0xd0]
cmp ecx, eax
jae 0x804cbc0
mov eax, 0xffffffff
jmp 0x804cbcd
cmp ecx, eax
ja 0x804cbc8
xor eax, eax
jmp 0x804cbcd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xd4]
mov eax, dword [edx + 0xd4]
cmp ecx, eax
jae 0x804cbf0
mov eax, 0xffffffff
jmp 0x804cbfd
cmp ecx, eax
ja 0x804cbf8
xor eax, eax
jmp 0x804cbfd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xd8]
mov eax, dword [edx + 0xd8]
cmp ecx, eax
jae 0x804cc20
mov eax, 0xffffffff
jmp 0x804cc2d
cmp ecx, eax
ja 0x804cc28
xor eax, eax
jmp 0x804cc2d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xdc]
mov eax, dword [edx + 0xdc]
cmp ecx, eax
jae 0x804cc50
mov eax, 0xffffffff
jmp 0x804cc5d
cmp ecx, eax
ja 0x804cc58
xor eax, eax
jmp 0x804cc5d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xe0]
mov eax, dword [edx + 0xe0]
cmp ecx, eax
jae 0x804cc80
mov eax, 0xffffffff
jmp 0x804cc8d
cmp ecx, eax
ja 0x804cc88
xor eax, eax
jmp 0x804cc8d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xe4]
mov eax, dword [edx + 0xe4]
cmp ecx, eax
jae 0x804ccb0
mov eax, 0xffffffff
jmp 0x804ccbd
cmp ecx, eax
ja 0x804ccb8
xor eax, eax
jmp 0x804ccbd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xe8]
mov eax, dword [edx + 0xe8]
cmp ecx, eax
jae 0x804cce0
mov eax, 0xffffffff
jmp 0x804cced
cmp ecx, eax
ja 0x804cce8
xor eax, eax
jmp 0x804cced
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xec]
mov eax, dword [edx + 0xec]
cmp ecx, eax
jae 0x804cd10
mov eax, 0xffffffff
jmp 0x804cd1d
cmp ecx, eax
ja 0x804cd18
xor eax, eax
jmp 0x804cd1d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xf0]
mov eax, dword [edx + 0xf0]
cmp ecx, eax
jae 0x804cd40
mov eax, 0xffffffff
jmp 0x804cd4d
cmp ecx, eax
ja 0x804cd48
xor eax, eax
jmp 0x804cd4d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xf4]
mov eax, dword [edx + 0xf4]
cmp ecx, eax
jae 0x804cd70
mov eax, 0xffffffff
jmp 0x804cd7d
cmp ecx, eax
ja 0x804cd78
xor eax, eax
jmp 0x804cd7d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0xf8]
mov eax, dword [edx + 0xf8]
cmp ecx, eax
jae 0x804cda0
mov eax, 0xffffffff
jmp 0x804cdad
cmp ecx, eax
ja 0x804cda8
xor eax, eax
jmp 0x804cdad
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1a0]
mov eax, dword [edx + 0x1a0]
cmp ecx, eax
jge 0x804cdd0
mov eax, 0xffffffff
jmp 0x804cddd
cmp ecx, eax
jg 0x804cdd8
xor eax, eax
jmp 0x804cddd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1a4]
mov eax, dword [edx + 0x1a4]
cmp ecx, eax
jge 0x804ce00
mov eax, 0xffffffff
jmp 0x804ce0d
cmp ecx, eax
jg 0x804ce08
xor eax, eax
jmp 0x804ce0d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1a8]
mov eax, dword [edx + 0x1a8]
cmp ecx, eax
jge 0x804ce30
mov eax, 0xffffffff
jmp 0x804ce3d
cmp ecx, eax
jg 0x804ce38
xor eax, eax
jmp 0x804ce3d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1ac]
mov eax, dword [edx + 0x1ac]
cmp ecx, eax
jge 0x804ce60
mov eax, 0xffffffff
jmp 0x804ce6d
cmp ecx, eax
jg 0x804ce68
xor eax, eax
jmp 0x804ce6d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1b0]
mov eax, dword [edx + 0x1b0]
cmp ecx, eax
jge 0x804ce90
mov eax, 0xffffffff
jmp 0x804ce9d
cmp ecx, eax
jg 0x804ce98
xor eax, eax
jmp 0x804ce9d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1b4]
mov eax, dword [edx + 0x1b4]
cmp ecx, eax
jge 0x804cec0
mov eax, 0xffffffff
jmp 0x804cecd
cmp ecx, eax
jg 0x804cec8
xor eax, eax
jmp 0x804cecd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1b8]
mov eax, dword [edx + 0x1b8]
cmp ecx, eax
jge 0x804cef0
mov eax, 0xffffffff
jmp 0x804cefd
cmp ecx, eax
jg 0x804cef8
xor eax, eax
jmp 0x804cefd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1bc]
mov eax, dword [edx + 0x1bc]
cmp ecx, eax
jge 0x804cf20
mov eax, 0xffffffff
jmp 0x804cf2d
cmp ecx, eax
jg 0x804cf28
xor eax, eax
jmp 0x804cf2d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1c0]
mov eax, dword [edx + 0x1c0]
cmp ecx, eax
jge 0x804cf50
mov eax, 0xffffffff
jmp 0x804cf5d
cmp ecx, eax
jg 0x804cf58
xor eax, eax
jmp 0x804cf5d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1c4]
mov eax, dword [edx + 0x1c4]
cmp ecx, eax
jge 0x804cf80
mov eax, 0xffffffff
jmp 0x804cf8d
cmp ecx, eax
jg 0x804cf88
xor eax, eax
jmp 0x804cf8d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1c8]
mov eax, dword [edx + 0x1c8]
cmp ecx, eax
jge 0x804cfb0
mov eax, 0xffffffff
jmp 0x804cfbd
cmp ecx, eax
jg 0x804cfb8
xor eax, eax
jmp 0x804cfbd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1cc]
mov eax, dword [edx + 0x1cc]
cmp ecx, eax
jge 0x804cfe0
mov eax, 0xffffffff
jmp 0x804cfed
cmp ecx, eax
jg 0x804cfe8
xor eax, eax
jmp 0x804cfed
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1d0]
mov eax, dword [edx + 0x1d0]
cmp ecx, eax
jge 0x804d010
mov eax, 0xffffffff
jmp 0x804d01d
cmp ecx, eax
jg 0x804d018
xor eax, eax
jmp 0x804d01d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1d4]
mov eax, dword [edx + 0x1d4]
cmp ecx, eax
jge 0x804d040
mov eax, 0xffffffff
jmp 0x804d04d
cmp ecx, eax
jg 0x804d048
xor eax, eax
jmp 0x804d04d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov ecx, dword [eax + 0x1d8]
mov eax, dword [edx + 0x1d8]
cmp ecx, eax
jae 0x804d070
mov eax, 0xffffffff
jmp 0x804d07d
cmp ecx, eax
ja 0x804d078
xor eax, eax
jmp 0x804d07d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov cl, byte [eax + 0x1dc]
mov al, byte [edx + 0x1dc]
cmp cl, al
jge 0x804d0a0
mov eax, 0xffffffff
jmp 0x804d0ad
cmp cl, al
jg 0x804d0a8
xor eax, eax
jmp 0x804d0ad
mov eax, 1
leave
ret
push ebp
mov ebp, esp
push 0x2d
push 0x8055a80
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.0804ba4c
mov ebx, eax
add ebx, dword [0x805c154]
push 8
mov eax, dword [0x8127844]
add eax, 0x190
push eax
push ebx
call fcn.080495c4
add ebx, eax
sub ebx, dword [0x805c154]
mov eax, ebx
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x70]
push 0x8055ab2
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
mov edx, dword [eax + 0x1d8]
mov eax, 0xcccccccd
mul edx
shr edx, 3
push edx
push 0x8055ab6
push dword [0x805c154]
call sym.imp.sprintf
mov edx, eax
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push ebx
mov ebx, dword [0x8127844]
mov eax, dword [ebx + 0x1d8]
mov dword [var_4h], eax
mov ecx, 0xcccccccd
mul ecx
shr edx, 3
lea edx, [edx + edx*4]
add edx, edx
sub dword [var_4h], edx
mov eax, dword [var_4h]
push eax
mov ebx, dword [ebx + 0x1d8]
mov eax, ebx
mul ecx
shr edx, 3
push edx
push str._2u._u
push dword [0x805c154]
call sym.imp.sprintf
mov edx, eax
mov ebx, dword [var_ch]
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1c8]
push 0x8055ac1
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1c0]
push 0x8055ac1
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1c4]
push 0x8055ac1
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x98]
push 0x8055ad7
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
cmp dword [0x805c130], 0
jne 0x804d253
mov edx, dword [0x8127844]
add edx, 0x110
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, dword [0x805c15c]
jbe 0x804d265
mov eax, dword [0x8127844]
push dword [eax + 0x1a0]
push 0x8055adb
jmp 0x804d26b
push edx
push 0x8055ade
push dword [0x805c154]
call sym.imp.sprintf
mov edi, dword [var_8h]
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push ebx
mov ebx, dword [0x8127844]
lea edx, [ebx + 0x160]
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, dword [0x805c15c]
jbe 0x804d2b4
push dword [ebx + 0x1ac]
push 0x8055adb
jmp 0x804d2ba
push edx
push 0x8055ade
push dword [0x805c154]
call sym.imp.sprintf
lea esp, [var_ch]
pop ebx
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push ebx
mov ebx, dword [0x8127844]
lea edx, [ebx + 0x150]
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, dword [0x805c15c]
jbe 0x804d304
push dword [ebx + 0x1a4]
push 0x8055adb
jmp 0x804d30a
push edx
push 0x8055ade
push dword [0x805c154]
call sym.imp.sprintf
lea esp, [var_ch]
pop ebx
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
cmp dword [0x805c130], 0
jne 0x804d34f
mov edx, dword [0x8127844]
add edx, 0x120
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, dword [0x805c15c]
jbe 0x804d361
mov eax, dword [0x8127844]
push dword [eax + 0x1a8]
push 0x8055adb
jmp 0x804d367
push edx
push 0x8055ade
push dword [0x805c154]
call sym.imp.sprintf
mov edi, dword [var_8h]
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x68]
push 0x8055ab2
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov edx, dword [0x8127844]
mov eax, 0x27
sub eax, dword [edx + 0x68]
push eax
push 0x8055ab2
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
mov eax, dword [eax + 0x68]
add eax, 0x3c
push eax
push 0x8055ab2
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
mov edx, dword [eax + 0xf8]
mov eax, edx
and eax, 0xffffff
jne 0x804d400
push 0x8055ae1
jmp 0x804d418
mov esi, esi
cmp dword [0x805c134], 0
je 0x804d411
push eax
push 0x8055ae3
jmp 0x804d41d
push edx
call fcn.08051cd4
push eax
push 0x8055ade
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
push 7
mov eax, dword [0x8127844]
push dword [eax + 0x1c0]
push dword [eax + 0x1d0]
push 4
push dword [0x805c154]
call fcn.080512ec
leave
ret
push ebp
mov ebp, esp
push 1
mov eax, dword [0x8127844]
push dword [eax + 0x1c0]
push dword [eax + 0x1d0]
push 0xfff
push dword [0x805c154]
call fcn.080512ec
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x805c154]
mov edx, dword [0x8127844]
mov dl, byte [edx + 0x1dc]
mov byte [eax], dl
mov edx, 1
mov eax, dword [0x8127844]
cmp dword [eax + 0x74], 0
jne 0x804d4be
cmp byte [eax + 0x1dc], 0x5a
je 0x804d4be
mov eax, dword [0x805c154]
mov byte [eax + 1], 0x57
mov edx, 2
mov eax, dword [0x8127844]
cmp dword [eax + 0x70], 0
jge 0x804d4d3
mov eax, dword [0x805c154]
mov byte [edx + eax], 0x3c
inc edx
mov eax, dword [0x8127844]
cmp dword [eax + 0x70], 0
jle 0x804d4e8
mov eax, dword [0x805c154]
mov byte [edx + eax], 0x4e
inc edx
mov eax, dword [0x8127844]
cmp dword [eax + 0x9c], 0
je 0x804d4fb
mov eax, dword [0x805c154]
mov byte [edx + eax], 0x4c
inc edx
mov eax, dword [0x805c154]
mov byte [edx + eax], 0
mov eax, edx
leave
ret
push ebp
mov ebp, esp
mov edx, dword [0x805c154]
mov eax, dword [0x8127844]
mov al, byte [eax + 0x1dc]
mov byte [edx], al
mov eax, dword [0x805c154]
mov byte [eax + 1], 0
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
mov eax, dword [eax + 0xbc]
and eax, 0x777
push eax
push str._03lx
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1a8]
push 0x8055adb
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0xe8]
push str._08lx
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0xec]
push str._08lx
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0xf0]
push str._08lx
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov ebx, dword [0x8127844]
mov ecx, dword [ebx + 0xdc]
add ecx, dword [ebx + 0xd8]
cmp dword [0x805c0e4], 0
je 0x804d603
mov eax, dword [ebx + 0x64]
add eax, dword [ebx + 0x60]
add ecx, eax
mov eax, ecx
xor edx, edx
div dword [0x8169d48]
mov ecx, eax
mov eax, 0x88888889
mul ecx
mov ebx, edx
shr ebx, 5
mov esi, ebx
shl esi, 4
sub esi, ebx
shl esi, 2
sub ecx, esi
push ecx
push ebx
push str._3ld:_02d
push dword [0x805c154]
call sym.imp.sprintf
mov ecx, eax
lea esp, [var_ch]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
mov eax, dword [eax + 0x98]
shr eax, 2
push eax
push 0x8055ad7
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
xor eax, eax
mov edx, dword [0x8127844]
mov ecx, dword [edx + 0xb4]
test ecx, ecx
je 0x804d68e
mov eax, ecx
sub eax, dword [edx + 0xe4]
add eax, dword [edx + 0xe0]
shr eax, 0xa
push eax
push 0x8055ab2
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
xor eax, eax
mov edx, dword [0x8127844]
cmp dword [edx + 0xb4], 0
je 0x804d6cb
mov eax, dword [edx + 0xe0]
mov edx, dword [edx + 0xe4]
sub edx, eax
mov eax, edx
shr eax, 0xa
push eax
push 0x8055ab2
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
xor eax, eax
mov edx, dword [0x8127844]
mov ecx, dword [edx + 0xb4]
test ecx, ecx
je 0x804d706
mov eax, ecx
sub eax, dword [edx + 0xe4]
add eax, dword [edx + 0xe0]
shr eax, 0xa
push eax
push 0x8055ab2
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
xor eax, eax
mov edx, dword [0x8127844]
cmp dword [edx + 0xb4], 0
je 0x804d743
mov eax, dword [edx + 0xe0]
mov edx, dword [edx + 0xe4]
sub edx, eax
mov eax, edx
shr eax, 0xa
push eax
push 0x8055ab2
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov edx, dword [0x8127844]
mov eax, dword [edx + 0xc0]
cmp dword [0x805c0e4], 0
je 0x804d776
add eax, dword [edx + 0xc8]
push eax
push 0x8055ab2
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov edx, dword [0x8127844]
mov eax, dword [edx + 0xc4]
cmp dword [0x805c0e4], 0
je 0x804d7aa
add eax, dword [edx + 0xcc]
push eax
push 0x8055ab2
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
mov eax, dword [eax + 0xb8]
cmp eax, 0x7fffffff
jne 0x804d7e1
push 0x8055b19
push 0x8055ade
jmp 0x804d7ea
shr eax, 0xa
push eax
push str._5ld
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
mov eax, dword [eax + 0xf8]
and eax, 0xffffff
jne 0x804d820
push 0x8055ae1
push dword [0x805c154]
call sym.imp.sprintf
jmp 0x804d831
nop
push eax
push 0x8055ae3
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
mov ecx, dword [0x8127854]
add ecx, 0xfffffff6
mov eax, dword [eax + 0x74]
shl eax, cl
push eax
push 0x8055ad7
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
sub esp, 4
mov eax, dword [0x8127844]
mov edx, dword [eax + 0x74]
mov dword [var_4h], edx
shl dword [var_4h], 5
sub dword [var_4h], edx
mov eax, dword [var_4h]
lea edx, [edx + eax*4]
shl edx, 3
mov ecx, dword [0x8127854]
mov eax, dword [0x8127850]
shr eax, cl
mov dword [var_4h], eax
mov eax, edx
xor edx, edx
div dword [var_4h]
mov ecx, eax
mov eax, 0xcccccccd
mul ecx
shr edx, 3
lea eax, [edx + edx*4]
add eax, eax
sub ecx, eax
push ecx
push edx
push str._2u._u
push dword [0x805c154]
call sym.imp.sprintf
mov edx, eax
leave
ret
push ebp
mov ebp, esp
sub esp, 4
mov eax, dword [0x8127844]
mov eax, dword [eax + 0xf4]
xor edx, edx
div dword [0x8169d48]
add eax, dword [0x812784c]
mov dword [var_4h], eax
lea eax, [var_4h]
push eax
call sym.imp.ctime
push eax
push str._24.24s
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
push 0x8127848
call sym.imp.localtime
mov esi, dword [eax + 0x14]
mov ebx, dword [eax + 0x1c]
mov eax, dword [0x8127844]
mov eax, dword [eax + 0xf4]
xor edx, edx
div dword [0x8169d48]
add eax, dword [0x812784c]
mov dword [var_4h], eax
lea eax, [var_4h]
push eax
call sym.imp.localtime
mov edx, str._H:_M
add esp, 8
cmp ebx, dword [eax + 0x1c]
je 0x804d953
mov edx, str._b_d
cmp esi, dword [eax + 0x14]
je 0x804d95d
mov edx, 0x8055b34
push eax
push edx
push 0x2a
push dword [0x805c154]
call sym.imp.strftime
lea esp, [var_ch]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
mov eax, dword [0x8127844]
mov eax, dword [eax + 0xf4]
xor edx, edx
div dword [0x8169d48]
add eax, dword [0x812784c]
mov dword [var_4h], eax
lea eax, [var_4h]
push eax
call sym.imp.ctime
mov edx, eax
add esp, 4
cmp byte [edx + 8], 0x20
jne 0x804d9ae
mov byte [edx + 8], 0x30
cmp byte [edx + 0xb], 0x20
jne 0x804d9b8
mov byte [edx + 0xb], 0x30
mov eax, dword [var_4h]
add eax, 0x15180
cmp eax, dword [0x8127848]
jbe 0x804d9d3
lea eax, [edx + 0xb]
push eax
push str._8.8s
jmp 0x804d9dc
lea eax, [edx + 4]
push eax
push str.___6.6s
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
push dword [0x8127844]
call fcn.0804c07c
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
add eax, 0x18
push eax
call fcn.0804c07c
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
add eax, 0x30
push eax
call fcn.0804c07c
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
add eax, 0x48
push eax
call fcn.0804c07c
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1ac]
push 0x8055adb
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1a4]
push 0x8055adb
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1b4]
push 0x8055adb
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1bc]
push 0x8055adb
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1a0]
push 0x8055adb
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1b0]
push 0x8055adb
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1b8]
push 0x8055adb
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push ebx
mov ebx, dword [0x8127844]
lea edx, [ebx + 0x180]
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, dword [0x805c15c]
jbe 0x804db50
push dword [ebx + 0x1bc]
push 0x8055adb
jmp 0x804db56
push edx
push 0x8055ade
push dword [0x805c154]
call sym.imp.sprintf
lea esp, [var_ch]
pop ebx
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push ebx
mov ebx, dword [0x8127844]
lea edx, [ebx + 0x170]
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, dword [0x805c15c]
jbe 0x804dba0
push dword [ebx + 0x1b4]
push 0x8055adb
jmp 0x804dba6
push edx
push 0x8055ade
push dword [0x805c154]
call sym.imp.sprintf
lea esp, [var_ch]
pop ebx
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
cmp dword [0x805c130], 0
jne 0x804dbeb
mov edx, dword [0x8127844]
add edx, 0x140
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, dword [0x805c15c]
jbe 0x804dc00
mov eax, dword [0x8127844]
push dword [eax + 0x1b8]
push 0x8055adb
jmp 0x804dc06
lea esi, [esi]
push edx
push 0x8055ade
push dword [0x805c154]
call sym.imp.sprintf
mov edi, dword [var_8h]
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
cmp dword [0x805c130], 0
jne 0x804dc4b
mov edx, dword [0x8127844]
add edx, 0x130
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, dword [0x805c15c]
jbe 0x804dc60
mov eax, dword [0x8127844]
push dword [eax + 0x1b0]
push 0x8055adb
jmp 0x804dc66
lea esi, [esi]
push edx
push 0x8055ade
push dword [0x805c154]
call sym.imp.sprintf
mov edi, dword [var_8h]
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1cc]
push 0x8055ac1
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
push dword [eax + 0x1d4]
push 0x8055adb
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8127844]
cmp byte [eax + 0x1dc], 0x52
jne 0x804dce0
push 0
push 0x8055adb
push dword [0x805c154]
call sym.imp.sprintf
jmp 0x804dcf0
lea esi, [esi]
push 0x8055b56
push dword [0x805c154]
call sym.imp.sprintf
leave
ret
push ebp
mov ebp, esp
sub esp, 0x1058
push edi
push esi
push ebx
mov esi, dword [arg_8h]
cmp byte [esi], 0x2f
jne 0x804dd32
lea eax, [var_58h]
push eax
push esi
push 3
call sym.imp.__xstat
test eax, eax
jge 0x804de50
mov eax, dword [0x805c18c]
jmp 0x804de76
push esi
push 0x8058e2c
push 0x1000
lea ebx, [var_1058h]
push ebx
call sym.imp.snprintf
lea edi, [var_58h]
add esp, 0x10
push edi
push ebx
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jge 0x804de50
push esi
push 0x8058e38
push 0x1000
push ebx
call sym.imp.snprintf
add esp, 0x10
push edi
push ebx
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jge 0x804de50
push esi
push 0x8058e40
push 0x1000
push ebx
call sym.imp.snprintf
add esp, 0x10
push edi
push ebx
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jge 0x804de50
push esi
push str._dev_pty_s
push 0x1000
push ebx
call sym.imp.snprintf
add esp, 0x10
push edi
push ebx
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jge 0x804de50
push esi
push str._dev__snsole
push 0x1000
push ebx
call sym.imp.snprintf
add esp, 0x10
push edi
push ebx
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jge 0x804de50
movzx edx, byte [esi]
lea eax, [edx - 0x2d]
test eax, eax
jne 0x804de09
movzx eax, byte [esi + 1]
test eax, eax
je 0x804de37
lea eax, [edx - 0x3f]
test eax, eax
jne 0x804de18
movzx eax, byte [esi + 1]
test eax, eax
je 0x804de37
cmp byte [esi + 1], 0
jne 0x804dd28
push edi
push esi
push 3
call sym.imp.__xstat
test eax, eax
jl 0x804dd28
mov ecx, dword [arg_ch]
mov dword [ecx], 0xffffffff
mov dword [ecx + 4], 0xffffffff
xor eax, eax
jmp 0x804de76
nop
lea esi, [esi]
mov eax, dword [var_48h]
and eax, 0xf000
cmp eax, 0x2000
jne 0x804de71
mov eax, dword [var_38h]
mov edx, dword [var_34h]
mov ecx, dword [arg_ch]
mov dword [ecx], eax
mov dword [ecx + 4], edx
xor eax, eax
jmp 0x804de76
mov eax, dword [0x805c190]
lea esp, [var_1064h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
push dword [eax]
push dword [edx]
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
sub esp, 4
lea eax, [var_4h]
push 0
push 0
push eax
push dword [arg_8h]
call sym.imp.__strtol_internal
mov edx, eax
mov eax, dword [var_4h]
cmp byte [eax], 0
je 0x804fbe3
mov eax, dword [0x805c178]
jmp 0x804fbfd
cmp edx, 0x7fff
jg 0x804fbf8
test edx, edx
jl 0x804fbf8
mov eax, dword [arg_ch]
mov dword [eax], edx
xor eax, eax
jmp 0x804fbfd
mov eax, dword [0x805c174]
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push ebx
mov ebx, dword [arg_8h]
lea eax, [var_4h]
push 0
push 0
push eax
push ebx
call sym.imp.__strtol_internal
mov edx, eax
add esp, 0x10
mov eax, dword [var_4h]
cmp byte [eax], 0
je 0x804fc39
push ebx
call sym.imp.getpwnam
test eax, eax
jne 0x804fc36
mov eax, dword [0x805c180]
jmp 0x804fc65
mov edx, dword [eax + 8]
cmp edx, 0xfffe
jg 0x804fc60
cmp edx, 0xffff8000
jl 0x804fc60
cmp edx, 0xffffffff
je 0x804fc60
movzx edx, dx
mov eax, dword [arg_ch]
mov dword [eax], edx
xor eax, eax
jmp 0x804fc65
lea esi, [esi]
mov eax, dword [0x805c17c]
mov ebx, dword [var_8h]
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push ebx
mov ebx, dword [arg_8h]
lea eax, [var_4h]
push 0
push 0
push eax
push ebx
call sym.imp.__strtol_internal
mov edx, eax
add esp, 0x10
mov eax, dword [var_4h]
cmp byte [eax], 0
je 0x804fca5
push ebx
call sym.imp.getgrnam
test eax, eax
jne 0x804fca2
mov eax, dword [0x805c188]
jmp 0x804fccb
mov edx, dword [eax + 8]
cmp edx, 0xfffe
jg 0x804fcc6
cmp edx, 0xffff8000
jl 0x804fcc6
cmp edx, 0xffffffff
je 0x804fcc6
movzx edx, dx
mov eax, dword [arg_ch]
mov dword [eax], edx
xor eax, eax
jmp 0x804fccb
mov eax, dword [0x805c184]
mov ebx, dword [var_8h]
leave
ret
push ebp
mov ebp, esp
push 8
push dword [arg_8h]
push dword [arg_ch]
call sym.imp.strncpy
xor eax, eax
leave
ret
push ebp
mov ebp, esp
sub esp, 0x8c
push edi
push ebx
call sym.imp.getuid
mov ebx, eax
call sym.imp.geteuid
cmp ebx, eax
je 0x8050416
push str.This__bin_ps_is_not_secure_for_setuid_operation._n
push dword [obj.stderr]
call sym.imp.fprintf
push 1
call sym.imp.exit
call sym.imp.getgid
mov ebx, eax
call sym.imp.getegid
cmp ebx, eax
je 0x8050440
push str.This__bin_ps_is_not_secure_for_setgid_operation._n
push dword [obj.stderr]
call sym.imp.fprintf
push 1
call sym.imp.exit
lea esi, [esi]
lea ebx, [var_8ch]
mov edi, ebx
xor eax, eax
cld
mov ecx, 0x23
rep stosd dword es:[edi], eax
mov dword [var_8ch], fcn.08050570
lea eax, [var_88h]
push eax
call sym.imp.sigfillset
add esp, 4
mov edi, 0x1f
cmp edi, 0x1c
ja case.0x8050475.1
jmp dword [edi*4 + 0x805a3d4]
lea esi, [esi]
push 0
push ebx
push edi
call sym.imp.sigaction
add esp, 0xc
sub edi, 1
jae 0x8050470
call fcn.08049ca8
push dword [arg_ch]
push dword [arg_8h]
call fcn.0804fa64
call fcn.0804fdc0
call fcn.0804c45c
add esp, 8
mov edx, dword [0x805c0d4]
xor ebx, ebx
mov eax, dword [0x805c0e0]
cmp eax, 2
jne 0x80504d0
mov ecx, dword [0x805c108]
dec ecx
mov dword [0x805c0dc], ecx
jmp 0x8050518
nop
cmp eax, 1
jne 0x8050506
mov dword [0x805c0e8], edi
jmp 0x8050518
lea esi, [esi]
mov eax, dword [edx + 0x18]
and eax, 0xf
cmp eax, 5
jne 0x80504f5
mov dword [0x8127880], 1
mov eax, dword [edx + 4]
cmp byte [eax], 0
je 0x8050504
cmp dword [edx + 8], 0
je 0x8050504
inc ebx
mov edx, dword [edx]
test edx, edx
jne 0x80504e0
test ebx, ebx
jne 0x8050518
mov dword [0x805c0e8], 0xffffffff
cmp dword [0x8127880], 0
je 0x8050533
push dword [0x805c0f0]
call fcn.08051d4c
add esp, 4
test eax, eax
je 0x805053d
mov dword [0x805c134], 1
cmp dword [0x805c0cc], 0
jne 0x805054f
cmp dword [0x805c114], 0
je 0x8050556
call fcn.08050188
jmp 0x805055b
call fcn.0804fed0
push 0xffffffffffffffff
call fcn.0804c1dc
xor eax, eax
lea esp, [var_94h]
pop ebx
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
cmp ebx, 0xd
jne 0x8050583
push 0
call sym.imp._exit
push str.procps_version_2.0.7
push ebx
push str._n_nSignal__d_caught_by_ps___s_._nPlease_send_bug_reports_to__procps_bugs_redhat.com__n
push dword [obj.stderr]
call sym.imp.fprintf
lea eax, [ebx + 0x80]
push eax
call sym.imp._exit
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [0x805c114]
test ebx, ebx
je 0x80505e6
mov esi, esi
push dword [esi]
push dword [edi]
mov eax, dword [ebx + 4]
call eax
add esp, 8
test eax, eax
je 0x80505e0
cmp dword [ebx + 8], 0
je 0x80505e8
neg eax
jmp 0x80505e8
lea esi, [esi]
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80505c0
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov eax, dword [eax]
add eax, 0x110
push eax
mov eax, dword [edx]
add eax, 0x110
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov eax, dword [eax]
add eax, 0x120
push eax
mov eax, dword [edx]
add eax, 0x120
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
mov eax, dword [eax]
add eax, 0x190
push eax
mov eax, dword [edx]
add eax, 0x190
push eax
call sym.imp.strcmp
leave
ret
push ebp
mov ebp, esp
sub esp, 0xc
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov dword [var_4h], 1
mov al, byte [esi]
test al, al
je 0x80508c1
mov bl, byte [str.uuser]
mov byte [var_6h], bl
cmp al, 0x2d
je 0x8050800
cmp al, 0x2b
jne 0x8050810
jmp 0x8050807
mov dword [var_4h], 0xffffffff
inc esi
jmp 0x80508b6
lea esi, [esi]
xor ecx, ecx
cmp byte [var_6h], 0
je 0x805084f
mov byte [var_5h], al
mov dword [var_ch], str.uuser
xor edx, edx
mov eax, edx
mov bl, byte [var_5h]
mov edi, dword [var_ch]
cmp bl, byte [edi]
je 0x8050841
add edi, 0x14
mov dword [var_ch], edi
lea edx, [eax + 4]
inc ecx
mov eax, edx
cmp byte [edi], 0
jne 0x8050824
add eax, ecx
shl eax, 2
cmp byte [eax + str.uuser], 0
jne 0x8050887
mov dword [0x805c194], 0
xor ecx, ecx
mov esi, 0x8169d20
mov edx, 0x8169ce0
lea eax, [ecx*4]
mov dword [eax + esi], 0
mov dword [eax + edx], 0
inc ecx
cmp ecx, 9
jle 0x8050865
mov eax, str.Unknown_sort_key.
jmp 0x80508c3
mov ebx, dword [0x805c194]
lea edx, [ebx*4]
mov eax, dword [eax + 0x805c1a8]
mov dword [edx + 0x8169ce0], eax
mov edi, dword [var_4h]
mov dword [edx + 0x8169d20], edi
inc dword [0x805c194]
mov dword [var_4h], 1
inc esi
mov al, byte [esi]
test al, al
jne 0x80507f6
xor eax, eax
lea esp, [var_18h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push edi
push esi
push ebx
mov dword [var_ch], 1
lea esi, [esi]
mov ecx, dword [arg_8h]
mov al, byte [ecx]
cmp al, 0x2d
je 0x80508f0
cmp al, 0x2b
jne 0x8050906
jmp 0x80508f7
nop
mov dword [var_ch], 0xffffffff
mov dword [var_8h], 1
inc dword [arg_8h]
jmp 0x80509f8
push 0x2c
mov esi, dword [arg_8h]
push esi
call sym.imp.index
mov dword [var_4h], eax
add esp, 8
test eax, eax
setne al
movzx ecx, al
mov dword [var_8h], ecx
test ecx, ecx
je 0x805092c
mov esi, dword [var_4h]
mov byte [esi], 0
xor ebx, ebx
cmp byte [str.uuser], 0
je 0x8050989
mov dword [var_10h], 0
xor eax, eax
mov edi, 0x805c199
mov dword [var_14h], eax
push edi
mov ecx, dword [arg_8h]
push ecx
call sym.imp.strcmp
add esp, 8
test eax, eax
je 0x8050978
add dword [var_10h], 0x14
mov eax, dword [var_14h]
add eax, 4
add edi, 0x14
inc ebx
mov dword [var_14h], eax
mov esi, dword [var_10h]
mov ecx, str.uuser
cmp byte [ecx + esi], 0
jne 0x8050945
mov eax, dword [var_14h]
add eax, ebx
shl eax, 2
cmp byte [eax + str.uuser], 0
jne 0x80509c2
mov dword [0x805c194], 0
xor ebx, ebx
mov edi, 0x8169d20
mov edx, 0x8169ce0
nop
lea eax, [ebx*4]
mov dword [eax + edi], 0
mov dword [eax + edx], 0
inc ebx
cmp ebx, 9
jle 0x80509a0
mov eax, str.Unknown_sort_key.
jmp 0x8050a04
mov esi, dword [0x805c194]
lea edx, [esi*4]
mov eax, dword [eax + 0x805c1a8]
mov dword [edx + 0x8169ce0], eax
mov ecx, dword [var_ch]
mov dword [edx + 0x8169d20], ecx
inc dword [0x805c194]
mov dword [var_ch], 1
mov esi, dword [var_4h]
inc esi
mov dword [arg_8h], esi
cmp dword [var_8h], 0
jne 0x80508e0
xor eax, eax
lea esp, [var_20h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_ch]
xor esi, esi
cmp esi, dword [0x805c194]
jge 0x8050a4b
nop
lea ebx, [esi*4]
push edi
mov edx, dword [arg_8h]
push edx
mov eax, dword [ebx + 0x8169ce0]
call eax
imul eax, dword [ebx + 0x8169d20]
add esp, 8
test eax, eax
jne 0x8050a4d
inc esi
cmp esi, dword [0x805c194]
jl 0x8050a20
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_ch]
xor esi, esi
cmp esi, dword [0x805c194]
jge 0x8050a9b
nop
lea esi, [esi]
lea ebx, [esi*4]
push edi
mov edx, dword [arg_8h]
push edx
mov eax, dword [ebx + 0x8169ce0]
call eax
imul eax, dword [ebx + 0x8169d20]
add esp, 8
test eax, eax
jne 0x8050a9d
inc esi
cmp esi, dword [0x805c194]
jl 0x8050a70
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x1a8]
mov eax, dword [edx + 0x1a8]
cmp ecx, eax
jge 0x8050ad0
mov eax, 0xffffffff
jmp 0x8050add
lea esi, [esi]
cmp ecx, eax
jg 0x8050ad8
xor eax, eax
jmp 0x8050add
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x1c0]
mov eax, dword [edx + 0x1c0]
cmp ecx, eax
jge 0x8050b04
mov eax, 0xffffffff
jmp 0x8050b15
cmp ecx, eax
jg 0x8050b10
xor eax, eax
jmp 0x8050b15
lea esi, [esi]
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x1c4]
mov eax, dword [edx + 0x1c4]
cmp ecx, eax
jge 0x8050b40
mov eax, 0xffffffff
jmp 0x8050b4d
lea esi, [esi]
cmp ecx, eax
jg 0x8050b48
xor eax, eax
jmp 0x8050b4d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x1c8]
mov eax, dword [edx + 0x1c8]
cmp ecx, eax
jge 0x8050b74
mov eax, 0xffffffff
jmp 0x8050b85
cmp ecx, eax
jg 0x8050b80
xor eax, eax
jmp 0x8050b85
lea esi, [esi]
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x1cc]
mov eax, dword [edx + 0x1cc]
cmp ecx, eax
jge 0x8050bb0
mov eax, 0xffffffff
jmp 0x8050bbd
lea esi, [esi]
cmp ecx, eax
jg 0x8050bb8
xor eax, eax
jmp 0x8050bbd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x1d0]
mov eax, dword [edx + 0x1d0]
cmp ecx, eax
jge 0x8050be4
mov eax, 0xffffffff
jmp 0x8050bf5
cmp ecx, eax
jg 0x8050bf0
xor eax, eax
jmp 0x8050bf5
lea esi, [esi]
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x1d4]
mov eax, dword [edx + 0x1d4]
cmp ecx, eax
jge 0x8050c20
mov eax, 0xffffffff
jmp 0x8050c2d
lea esi, [esi]
cmp ecx, eax
jg 0x8050c28
xor eax, eax
jmp 0x8050c2d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0xd8]
mov eax, dword [edx + 0xd8]
cmp ecx, eax
jae 0x8050c54
mov eax, 0xffffffff
jmp 0x8050c65
cmp ecx, eax
ja 0x8050c60
xor eax, eax
jmp 0x8050c65
lea esi, [esi]
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0xdc]
mov eax, dword [edx + 0xdc]
cmp ecx, eax
jae 0x8050c90
mov eax, 0xffffffff
jmp 0x8050c9d
lea esi, [esi]
cmp ecx, eax
ja 0x8050c98
xor eax, eax
jmp 0x8050c9d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x60]
mov eax, dword [edx + 0x60]
cmp ecx, eax
jge 0x8050cc0
mov eax, 0xffffffff
jmp 0x8050ccd
mov esi, esi
cmp ecx, eax
jg 0x8050cc8
xor eax, eax
jmp 0x8050ccd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x64]
mov eax, dword [edx + 0x64]
cmp ecx, eax
jge 0x8050cf0
mov eax, 0xffffffff
jmp 0x8050cfd
mov esi, esi
cmp ecx, eax
jg 0x8050cf8
xor eax, eax
jmp 0x8050cfd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x70]
mov eax, dword [edx + 0x70]
cmp ecx, eax
jge 0x8050d20
mov eax, 0xffffffff
jmp 0x8050d2d
mov esi, esi
cmp ecx, eax
jg 0x8050d28
xor eax, eax
jmp 0x8050d2d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0xf4]
mov eax, dword [edx + 0xf4]
cmp ecx, eax
jae 0x8050d54
mov eax, 0xffffffff
jmp 0x8050d65
cmp ecx, eax
ja 0x8050d60
xor eax, eax
jmp 0x8050d65
lea esi, [esi]
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0xbc]
mov eax, dword [edx + 0xbc]
cmp ecx, eax
jae 0x8050d90
mov eax, 0xffffffff
jmp 0x8050d9d
lea esi, [esi]
cmp ecx, eax
ja 0x8050d98
xor eax, eax
jmp 0x8050d9d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0xc0]
mov eax, dword [edx + 0xc0]
cmp ecx, eax
jae 0x8050dc4
mov eax, 0xffffffff
jmp 0x8050dd5
cmp ecx, eax
ja 0x8050dd0
xor eax, eax
jmp 0x8050dd5
lea esi, [esi]
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0xc8]
mov eax, dword [edx + 0xc8]
cmp ecx, eax
jae 0x8050e00
mov eax, 0xffffffff
jmp 0x8050e0d
lea esi, [esi]
cmp ecx, eax
ja 0x8050e08
xor eax, eax
jmp 0x8050e0d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0xc4]
mov eax, dword [edx + 0xc4]
cmp ecx, eax
jae 0x8050e34
mov eax, 0xffffffff
jmp 0x8050e45
cmp ecx, eax
ja 0x8050e40
xor eax, eax
jmp 0x8050e45
lea esi, [esi]
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0xcc]
mov eax, dword [edx + 0xcc]
cmp ecx, eax
jae 0x8050e70
mov eax, 0xffffffff
jmp 0x8050e7d
lea esi, [esi]
cmp ecx, eax
ja 0x8050e78
xor eax, eax
jmp 0x8050e7d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0xb4]
mov eax, dword [edx + 0xb4]
cmp ecx, eax
jae 0x8050ea4
mov eax, 0xffffffff
jmp 0x8050eb5
cmp ecx, eax
ja 0x8050eb0
xor eax, eax
jmp 0x8050eb5
lea esi, [esi]
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x74]
mov eax, dword [edx + 0x74]
cmp ecx, eax
jge 0x8050ed6
mov eax, 0xffffffff
jmp 0x8050ee5
cmp ecx, eax
jg 0x8050ee0
xor eax, eax
jmp 0x8050ee5
mov esi, esi
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x1d8]
mov eax, dword [edx + 0x1d8]
cmp ecx, eax
jae 0x8050f10
mov eax, 0xffffffff
jmp 0x8050f1d
lea esi, [esi]
cmp ecx, eax
ja 0x8050f18
xor eax, eax
jmp 0x8050f1d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x7c]
mov eax, dword [edx + 0x7c]
cmp ecx, eax
jge 0x8050f40
mov eax, 0xffffffff
jmp 0x8050f4d
mov esi, esi
cmp ecx, eax
jg 0x8050f48
xor eax, eax
jmp 0x8050f4d
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x80]
mov eax, dword [edx + 0x80]
cmp ecx, eax
jge 0x8050f74
mov eax, 0xffffffff
jmp 0x8050f85
cmp ecx, eax
jg 0x8050f80
xor eax, eax
jmp 0x8050f85
lea esi, [esi]
mov eax, 1
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
mov eax, dword [eax]
mov edx, dword [edx]
mov ecx, dword [eax + 0x84]
mov eax, dword [edx + 0x84]
cmp ecx, eax
jge 0x8050fb0
mov eax, 0xffffffff
jmp 0x8050fbd
lea esi, [esi]
cmp ecx, eax
jg 0x8050fb8
xor eax, eax
jmp 0x8050fbd
mov eax, 1
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
xor esi, esi
cmp byte [str.uuser], 0
je 0x805102b
mov ebx, str.uuser
mov edi, 0x805c199
nop
lea esi, [esi]
mov edx, esi
and edx, 1
je 0x8050ff0
mov eax, 0x805a448
jmp 0x8050ff5
mov esi, esi
mov eax, 0x805a44a
push eax
push edi
movsx eax, byte [ebx]
push eax
test edx, edx
je 0x8051006
mov eax, 0x805a44a
jmp 0x805100b
mov eax, str.___________
push eax
push str._s_O_c_____sort:__15.15s_s
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x18
add ebx, 0x14
add edi, 0x14
inc esi
cmp byte [ebx], 0
jne 0x8050fe0
test esi, 1
je 0x8051043
push 0x805a448
push dword [obj.stderr]
call sym.imp.fprintf
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov ecx, dword [arg_8h]
mov edx, dword [arg_ch]
mov ebx, dword [0x805c194]
lea eax, [ebx*4]
mov dword [eax + 0x8169ce0], edx
mov dword [eax + 0x8169d20], ecx
inc dword [0x805c194]
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x58
push esi
push ebx
mov esi, dword [arg_8h]
lea ebx, [var_58h]
push ebx
push esi
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jge 0x8051611
push esi
push str._dev__s
push 0x20
push 0x81488a0
call sym.imp.snprintf
add esp, 0x10
push ebx
push 0x81488a0
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jge 0x8051611
push esi
push str._dev_tty_s
push 0x20
push 0x81488a0
call sym.imp.snprintf
add esp, 0x10
push ebx
push 0x81488a0
push 3
call sym.imp.__xstat
add esp, 0xc
test eax, eax
jge 0x8051611
push esi
push str._dev_pts__s
push 0x20
push 0x81488a0
call sym.imp.snprintf
add esp, 0x10
push ebx
push 0x81488a0
push 3
call sym.imp.__xstat
test eax, eax
jge 0x8051611
mov eax, 0xffffffff
jmp 0x8051614
mov eax, dword [var_38h]
lea esp, [var_60h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
lea eax, [arg_ch]
push eax
push dword [arg_8h]
push dword [obj.stderr]
call sym.imp.vfprintf
leave
ret
push ebp
mov ebp, esp
sub esp, 0x54
push edi
push esi
push ebx
mov dword [var_48h], 0
mov byte [var_20h], 1
mov byte [0x8148980], 0
push 0x805aa2e
push str._proc_ksyms
call sym.imp.fopen
mov edi, eax
add esp, 8
test edi, edi
jne 0x8051bf0
mov eax, str._no_proc_
jmp 0x8051ccc
lea esi, [esi]
lea esi, [var_20h]
mov dword [var_50h], esi
jmp 0x8051cb0
nop
lea esi, [esi]
cmp byte [var_20h], 0
je 0x8051cc1
lea esi, [var_40h]
mov dword [var_4ch], esi
push esi
lea eax, [var_44h]
push eax
push str._lx__s_n
push edi
call sym.imp.fscanf
push edi
call sym.imp.fgetc
add esp, 0x14
mov ebx, dword [arg_8h]
sub ebx, dword [var_48h]
cmp al, 0x5b
je 0x8051c40
mov byte [var_20h], 0
jmp 0x8051c52
lea esi, [esi]
mov esi, dword [var_50h]
push esi
push 0x805aa4e
push edi
call sym.imp.fscanf
add esp, 0xc
mov esi, dword [var_44h]
mov dword [var_54h], esi
mov ecx, dword [arg_8h]
sub ecx, esi
mov edx, ecx
jns 0x8051c63
neg edx
mov eax, ebx
test eax, eax
jge 0x8051c6b
neg eax
cmp edx, eax
jge 0x8051cb0
mov eax, ecx
test eax, eax
jge 0x8051c77
neg eax
cmp eax, 0x9ff
jg 0x8051cb0
mov esi, dword [var_54h]
mov dword [var_48h], esi
mov eax, 0x8148980
mov byte [0x8148980], 0x5b
cmp ecx, 0x100
jbe 0x8051ca3
mov esi, dword [var_50h]
push esi
push 0x8148981
jmp 0x8051ca8
mov esi, dword [var_4ch]
push esi
push eax
call sym.imp.strcpy
add esp, 8
push edi
call sym.imp.feof
add esp, 4
test eax, eax
je 0x8051c00
push edi
call sym.imp.fclose
mov eax, 0x8148980
lea esp, [var_60h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
cmp dword [0x8148b80], 0
je 0x8051d42
push dword [arg_8h]
call fcn.08051808
jmp 0x8051d47
mov eax, str.ERROR
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x8148b80]
test eax, eax
je 0x8051d78
push dword [0x8148b94]
push eax
call sym.imp.munmap
mov dword [0x8148b80], 0
leave
ret
push ebp
mov ebp, esp
sub esp, 0xc
push edi
push esi
push ebx
mov eax, dword [arg_8h]
test ah, 4
je 0x8052f01
push dword [arg_10h]
push dword [arg_ch]
push eax
call fcn.08051d90
mov dword [var_4h], eax
add esp, 0xc
jmp 0x8052f23
test ah, 0xb
je 0x8052f17
push dword [arg_ch]
push eax
call fcn.08051d90
mov dword [var_4h], eax
add esp, 8
jmp 0x8052f23
push eax
call fcn.08051d90
mov dword [var_4h], eax
add esp, 4
mov dword [0x8149444], 0
mov dword [0x8149440], 0
mov dword [var_8h], 0x8149340
jmp 0x8052fd5
mov ebx, dword [var_8h]
mov edi, dword [esi + 0x1c4]
test ebx, ebx
je 0x8052fc4
mov ecx, dword [var_8h]
cmp dword [ecx + 0x1c0], edi
jne 0x8052f60
mov edx, ecx
jmp 0x8052fa0
nop
push edi
mov ecx, dword [var_8h]
push dword [ecx + 0x100]
call fcn.08053324
add esp, 8
test eax, eax
je 0x8052f80
mov edx, eax
jmp 0x8052fa0
lea esi, [esi]
cmp dword [var_8h], 0
je 0x8052f9e
push edi
push eax
call fcn.08053324
add esp, 8
test eax, eax
jne 0x8052f76
mov ebx, dword [ebx + 0x104]
test ebx, ebx
jne 0x8052f86
xor edx, edx
test edx, edx
je 0x8052fc4
mov eax, dword [edx + 0x100]
mov eax, dword [eax + 0x104]
mov dword [esi + 0x104], eax
mov eax, dword [edx + 0x100]
mov dword [eax + 0x104], esi
jmp 0x8052fd5
mov eax, dword [0x8149444]
mov dword [esi + 0x104], eax
mov dword [0x8149444], esi
push 0
mov ecx, dword [var_4h]
push ecx
call fcn.080523f8
mov esi, eax
add esp, 8
test esi, esi
jne 0x8052f43
mov esi, dword [var_8h]
test esi, esi
je 0x80530a8
mov ecx, dword [esi + 0x104]
mov dword [var_ch], ecx
mov ebx, dword [var_8h]
mov edi, dword [ecx + 0x1c4]
test ebx, ebx
je 0x805309d
cmp dword [ebx + 0x1c0], edi
jne 0x8053020
mov edx, ebx
jmp 0x8053063
mov esi, esi
push edi
push dword [ebx + 0x100]
call fcn.08053324
add esp, 8
test eax, eax
je 0x8053054
mov edx, eax
jmp 0x805305a
mov edx, eax
jmp 0x805305a
nop
lea esi, [esi]
push edi
push eax
call fcn.08053324
add esp, 8
test eax, eax
jne 0x8053037
mov ebx, dword [ebx + 0x104]
test ebx, ebx
jne 0x8053040
xor edx, edx
mov ecx, dword [esi + 0x104]
mov dword [var_ch], ecx
test edx, edx
je 0x805309d
mov ecx, dword [var_ch]
mov eax, dword [ecx + 0x104]
mov dword [esi + 0x104], eax
mov eax, dword [edx + 0x100]
mov eax, dword [eax + 0x104]
mov dword [ecx + 0x104], eax
mov eax, dword [edx + 0x100]
mov dword [eax + 0x104], esi
mov esi, dword [esi + 0x104]
mov dword [var_ch], esi
mov esi, dword [var_ch]
test esi, esi
jne 0x8052ff8
mov ecx, dword [var_4h]
mov eax, dword [ecx]
test eax, eax
je 0x80530ba
push eax
call sym.imp.closedir
add esp, 4
cmp dword [var_4h], 0
je 0x80530c9
mov ecx, dword [var_4h]
push ecx
call sym.imp.free
mov eax, 0x8149340
lea esp, [var_18h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov eax, dword [arg_8h]
xor edi, edi
mov dword [var_4h], 0
test ah, 4
je 0x8053105
push dword [arg_10h]
push dword [arg_ch]
push eax
call fcn.08051d90
mov esi, eax
add esp, 0xc
jmp 0x8053130
test ah, 0xb
je 0x8053120
push dword [arg_ch]
push eax
call fcn.08051d90
mov esi, eax
add esp, 8
jmp 0x8053130
lea esi, [esi]
push eax
call fcn.08051d90
mov esi, eax
add esp, 4
nop
lea esi, [esi]
mov ebx, dword [var_4h]
inc ebx
lea eax, [ebx*4]
push eax
push edi
call fcn.080541dc
mov edi, eax
push 0
push esi
call fcn.080523f8
mov edx, dword [var_4h]
mov dword [edi + edx*4], eax
add esp, 0x10
mov dword [var_4h], ebx
test eax, eax
jne 0x8053130
mov eax, dword [esi]
test eax, eax
je 0x805316b
push eax
call sym.imp.closedir
add esp, 4
test esi, esi
je 0x8053175
push esi
call sym.imp.free
mov eax, edi
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
test ebx, ebx
je 0x80531e1
mov eax, dword [ebx + 0x10c]
test eax, eax
je 0x80531c7
push dword [eax]
call sym.imp.free
add esp, 4
mov eax, dword [ebx + 0x108]
test eax, eax
je 0x80531db
push dword [eax]
call sym.imp.free
add esp, 4
push ebx
call sym.imp.free
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, edi
cmp dword [edi], 0
je 0x8053237
mov ebx, dword [esi]
test ebx, ebx
je 0x805322f
mov eax, dword [ebx + 0x10c]
test eax, eax
je 0x8053212
push dword [eax]
call sym.imp.free
add esp, 4
mov eax, dword [ebx + 0x108]
test eax, eax
je 0x8053226
push dword [eax]
call sym.imp.free
add esp, 4
push ebx
call sym.imp.free
add esp, 4
add esi, 4
cmp dword [esi], 0
jne 0x80531f8
push edi
call sym.imp.free
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_10h]
push dword [arg_ch]
push dword [arg_8h]
push str._s__s
push 0x8148ba0
call sym.imp.sprintf
push 0
push 0
push 0x8148ba0
call sym.imp.open
mov esi, eax
add esp, 0x1c
cmp esi, 0xffffffff
je 0x80532ac
mov eax, dword [arg_14h]
dec eax
push eax
push edi
push esi
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x80532a0
mov ebx, 0xffffffff
jmp 0x80532a4
lea esi, [esi]
mov byte [ebx + edi], 0
push esi
call sym.imp.close
mov eax, ebx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_ch]
lea edx, [eax + 0x94]
push edx
lea edx, [eax + 0x90]
push edx
lea edx, [eax + 0x8c]
push edx
lea edx, [eax + 0x88]
push edx
lea edx, [eax + 0x84]
push edx
lea edx, [eax + 0x80]
push edx
add eax, 0x7c
push eax
push str._ld__ld__ld__ld__ld__ld__ld
push dword [arg_8h]
call sym.imp.sscanf
leave
ret
push ebp
mov ebp, esp
push ebx
mov ecx, dword [arg_ch]
mov bl, byte [arg_10h]
xor edx, edx
cmp edx, ecx
jge 0x805331d
mov eax, dword [arg_8h]
nop
lea esi, [esi]
cmp byte [eax], 0
jne 0x8053317
mov byte [eax], bl
inc eax
inc edx
cmp edx, ecx
jl 0x8053310
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x34
push edi
push esi
push ebx
mov dword [var_18h], 0
jmp 0x80534d0
fstp st(0)
fstp st(0)
mov esi, esi
cmp dword [0x805c3e0], 0xffffffff
jne 0x8053514
push 0
push str._proc_uptime
call sym.imp.open
mov dword [0x805c3e0], eax
add esp, 8
cmp eax, 0xffffffff
jne 0x8053514
push str.Error:__proc_must_be_mounted_n__To_mount__proc_at_boot_you_need_an__etc_fstab_line_like:_n_______proc____proc___proc____defaults_n__In_the_meantime__mount__proc__proc__t_proc_n
push dword [obj.stderr]
call sym.imp.fprintf
push dword [0x805c3e0]
call sym.imp.close
push 1
call sym.imp._exit
push 0
push 0
push dword [0x805c3e0]
call sym.imp.lseek
push 0x3ff
push 0x8149640
push dword [0x805c3e0]
call sym.imp.read
mov dword [0x8149544], eax
add esp, 0x18
test eax, eax
jl 0x80538a0
mov byte [eax + 0x8149640], 0
lea eax, [var_14h]
push eax
push 0x805ad8f
push 0x8149640
call sym.imp.sscanf
add esp, 0xc
cmp dword [0x805c3dc], 0xffffffff
jne 0x80535b0
push 0
push str._proc_stat
call sym.imp.open
mov dword [0x805c3dc], eax
add esp, 8
cmp eax, 0xffffffff
jne 0x80535b0
push str.Error:__proc_must_be_mounted_n__To_mount__proc_at_boot_you_need_an__etc_fstab_line_like:_n_______proc____proc___proc____defaults_n__In_the_meantime__mount__proc__proc__t_proc_n
push dword [obj.stderr]
call sym.imp.fprintf
push dword [0x805c3dc]
call sym.imp.close
push 1
call sym.imp._exit
lea esi, [esi]
push 0
push 0
push dword [0x805c3dc]
call sym.imp.lseek
push 0x3ff
push 0x8149640
push dword [0x805c3dc]
call sym.imp.read
mov dword [0x8149548], eax
add esp, 0x18
test eax, eax
jl 0x80538c1
mov byte [eax + 0x8149640], 0
lea eax, [var_18h]
push eax
lea ecx, [var_1ch]
mov dword [var_34h], ecx
push ecx
lea edi, [var_20h]
push edi
lea esi, [var_24h]
push esi
lea ebx, [var_28h]
push ebx
push str.cpu__lu__lu__lu__lu_n_n
push 0x8149640
call sym.imp.sscanf
mov ecx, dword [var_34h]
push ecx
push edi
push esi
push ebx
push str.cpu0__lu__lu__lu__lu
mov eax, dword [var_18h]
add eax, 0x8149640
push eax
call sym.imp.sscanf
add esp, 0x34
cmp dword [0x805c3e0], 0xffffffff
jne 0x8053672
push 0
push str._proc_uptime
call sym.imp.open
mov dword [0x805c3e0], eax
add esp, 8
cmp eax, 0xffffffff
jne 0x8053672
push str.Error:__proc_must_be_mounted_n__To_mount__proc_at_boot_you_need_an__etc_fstab_line_like:_n_______proc____proc___proc____defaults_n__In_the_meantime__mount__proc__proc__t_proc_n
push dword [obj.stderr]
call sym.imp.fprintf
push dword [0x805c3e0]
call sym.imp.close
push 1
call sym.imp._exit
push 0
push 0
push dword [0x805c3e0]
call sym.imp.lseek
push 0x3ff
push 0x8149640
push dword [0x805c3e0]
call sym.imp.read
mov dword [0x814954c], eax
add esp, 0x18
test eax, eax
jl 0x80538a0
mov byte [eax + 0x8149640], 0
lea eax, [var_30h]
push eax
push 0x805ad8f
push 0x8149640
call sym.imp.sscanf
fld qword [ebp - 0x30]
fld qword [ebp - 0x14]
fld st(1)
fsub st(1)
fld qword [0x805add0]
fmulp st(1)
fdiv st(1)
add esp, 0xc
fnstcw word [ebp - 4]
mov ecx, dword [var_4h]
mov ch, 0xc
mov dword [var_ch], ecx
fldcw word [ebp - 0xc]
fistp dword [ebp - 0xc]
mov eax, dword [var_ch]
fldcw word [ebp - 4]
test eax, eax
jne 0x80534ca
mov eax, dword [var_24h]
faddp st(1)
add eax, dword [var_28h]
add eax, dword [var_20h]
add eax, dword [var_1ch]
xor edx, edx
fld qword [0x805add8]
fmulp st(1)
push edx
push eax
fild qword [esp]
add esp, 8
fdivrp st(1)
fnstcw word [ebp - 4]
mov ecx, dword [var_4h]
mov ch, 0xc
mov dword [var_ch], ecx
fldcw word [ebp - 0xc]
fistp qword [ebp - 0xc]
mov eax, dword [var_ch]
mov edx, dword [var_8h]
fldcw word [ebp - 4]
cmp eax, 0xcc
ja 0x80537a0
cmp eax, 0xc3
jae 0x8053841
cmp eax, 0x3e
ja 0x8053770
cmp eax, 0x3a
jae 0x8053823
cmp eax, 0x34
ja 0x80538e2
cmp eax, 0x30
jb 0x80538e2
jmp 0x8053814
lea esi, [esi]
cmp eax, 0x5f
jb 0x80538e2
cmp eax, 0x69
jbe 0x80538e2
cmp eax, 0x84
ja 0x80538e2
cmp eax, 0x7c
jb 0x80538e2
jmp 0x8053832
nop
lea esi, [esi]
cmp eax, 0x328
ja 0x80537e3
cmp eax, 0x316
jae 0x8053870
cmp eax, 0xfd
jb 0x80538e2
cmp eax, 0x104
jbe 0x8053850
cmp eax, 0x198
ja 0x80538e2
cmp eax, 0x189
jb 0x80538e2
jmp 0x8053860
cmp eax, 0x3de
jb 0x80538e2
cmp eax, 0x3f2
jbe 0x8053880
cmp eax, 0x40b
ja 0x80538e2
cmp eax, 0x3f7
jb 0x80538e2
jmp 0x8053890
mov dword [0x8169d48], 0x32
jmp 0x80538ec
mov dword [0x8169d48], 0x3c
jmp 0x80538ec
mov dword [0x8169d48], 0x80
jmp 0x80538ec
mov dword [0x8169d48], 0xc8
jmp 0x80538ec
mov dword [0x8169d48], 0x100
jmp 0x80538ec
nop
mov dword [0x8169d48], 0x190
jmp 0x80538ec
nop
mov dword [0x8169d48], 0x320
jmp 0x80538ec
lea esi, [esi]
mov dword [0x8169d48], 0x3e8
jmp 0x80538ec
lea esi, [esi]
mov dword [0x8169d48], 0x400
jmp 0x80538ec
lea esi, [esi]
push str._proc_uptime
call sym.imp.perror
push dword [0x805c3e0]
call sym.imp.close
mov dword [0x805c3e0], 0xffffffff
jmp 0x80538ec
push str._proc_stat
call sym.imp.perror
push dword [0x805c3dc]
call sym.imp.close
mov dword [0x805c3dc], 0xffffffff
jmp 0x80538ec
mov dword [0x8169d48], 0x64
xor eax, eax
lea esp, [var_40h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov esi, dword [arg_ch]
mov edi, dword [arg_10h]
cmp dword [0x805c3dc], 0xffffffff
jne 0x8053950
push 0
push str._proc_stat
call sym.imp.open
mov dword [0x805c3dc], eax
add esp, 8
cmp eax, 0xffffffff
jne 0x8053950
push str.Error:__proc_must_be_mounted_n__To_mount__proc_at_boot_you_need_an__etc_fstab_line_like:_n_______proc____proc___proc____defaults_n__In_the_meantime__mount__proc__proc__t_proc_n
push dword [obj.stderr]
call sym.imp.fprintf
push dword [0x805c3dc]
call sym.imp.close
push 1
call sym.imp._exit
nop
lea esi, [esi]
push 0
push 0
push dword [0x805c3dc]
call sym.imp.lseek
push 0x3ff
push 0x8149640
push dword [0x805c3dc]
call sym.imp.read
mov dword [0x8149560], eax
add esp, 0x18
test eax, eax
jge 0x80539a4
push str._proc_stat
call sym.imp.perror
push dword [0x805c3dc]
call sym.imp.close
mov dword [0x805c3dc], 0xffffffff
jmp 0x8053a32
mov edx, 0x8149640
mov byte [eax + edx], 0
lea eax, [var_4h]
push eax
lea eax, [var_8h]
push eax
lea eax, [var_ch]
push eax
lea eax, [var_10h]
push eax
push 0x805ade0
push edx
call sym.imp.sscanf
cmp dword [arg_8h], 0
je 0x80539dd
mov eax, dword [0x8149550]
mov ebx, dword [var_10h]
sub ebx, eax
mov ecx, dword [arg_8h]
mov dword [ecx], ebx
test esi, esi
je 0x80539ed
mov eax, dword [0x8149554]
mov ecx, dword [var_ch]
sub ecx, eax
mov dword [esi], ecx
test edi, edi
je 0x80539fd
mov eax, dword [0x8149558]
mov ebx, dword [var_8h]
sub ebx, eax
mov dword [edi], ebx
cmp dword [arg_14h], 0
je 0x8053a12
mov eax, dword [0x814955c]
mov ebx, dword [var_4h]
sub ebx, eax
mov ecx, dword [arg_14h]
mov dword [ecx], ebx
mov eax, dword [var_10h]
mov dword [0x8149550], eax
mov eax, dword [var_ch]
mov dword [0x8149554], eax
mov eax, dword [var_8h]
mov dword [0x8149558], eax
mov eax, dword [var_4h]
mov dword [0x814955c], eax
xor eax, eax
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
mov edi, dword [arg_10h]
mov dword [var_18h], 0
mov dword [var_14h], 0
mov dword [var_10h], 0
mov dword [var_ch], 0
mov dword [var_8h], 0
mov dword [var_4h], 0
cmp dword [0x805c3e4], 0xffffffff
jne 0x8053ac0
push 0
push str._proc_loadavg
call sym.imp.open
mov dword [0x805c3e4], eax
add esp, 8
cmp eax, 0xffffffff
jne 0x8053ac0
push str.Error:__proc_must_be_mounted_n__To_mount__proc_at_boot_you_need_an__etc_fstab_line_like:_n_______proc____proc___proc____defaults_n__In_the_meantime__mount__proc__proc__t_proc_n
push dword [obj.stderr]
call sym.imp.fprintf
push dword [0x805c3e4]
call sym.imp.close
push 1
call sym.imp._exit
lea esi, [esi]
push 0
push 0
push dword [0x805c3e4]
call sym.imp.lseek
push 0x3ff
push 0x8149640
push dword [0x805c3e4]
call sym.imp.read
mov dword [0x8149564], eax
add esp, 0x18
test eax, eax
jl 0x8053b30
mov edx, 0x8149640
mov byte [eax + edx], 0
lea eax, [var_8h]
push eax
lea eax, [var_10h]
push eax
lea eax, [var_18h]
push eax
push str._lf__lf__lf
push edx
call sym.imp.sscanf
add esp, 0x14
cmp eax, 2
jg 0x8053b53
push str.bad_data_in__proc_loadavg_n
push dword [obj.stderr]
call sym.imp.fprintf
push 1
call sym.imp.exit
nop
push str._proc_loadavg
call sym.imp.perror
push dword [0x805c3e4]
call sym.imp.close
mov dword [0x805c3e4], 0xffffffff
xor eax, eax
jmp 0x8053b73
test ebx, ebx
je 0x8053b5c
fld qword [ebp - 0x18]
fstp qword [ebx]
test esi, esi
je 0x8053b65
fld qword [ebp - 0x10]
fstp qword [esi]
test edi, edi
je 0x8053b6e
fld qword [ebp - 8]
fstp qword [edi]
mov eax, 1
lea esp, [var_24h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0xc
push ebx
mov dword [var_ch], 0
mov dword [var_8h], 0
mov dword [var_4h], 0
cmp dword [0x805c404], 0
jne 0x8054149
push 0x8149a40
call sym.imp.uname
add esp, 4
cmp eax, 0xffffffff
jne 0x80540e0
push 1
call sym.imp.exit
mov esi, esi
lea eax, [var_4h]
push eax
lea eax, [var_8h]
push eax
lea eax, [var_ch]
push eax
push str._d._d._d
push 0x8149ac2
call sym.imp.sscanf
add esp, 0x14
cmp eax, 2
jg 0x8054133
mov ebx, dword [var_ch]
mov edx, ebx
shl edx, 0x10
mov ecx, dword [var_8h]
mov eax, ecx
shl eax, 8
add edx, eax
mov eax, dword [var_4h]
add edx, eax
push edx
push eax
push ecx
push ebx
push 0x8149ac2
push str.Non_standard_uts_for_running_kernel:_nrelease__s_d._d._d_gives_version_code__d_n
push dword [obj.stderr]
call sym.imp.fprintf
mov eax, dword [var_ch]
shl eax, 0x10
mov edx, dword [var_8h]
shl edx, 8
add eax, edx
add eax, dword [var_4h]
mov dword [0x805c404], eax
mov ebx, dword [var_10h]
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.08054525
push ebp
mov ebp, esp
push ebx
mov eax, 1
mov ebx, dword [arg_8h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0x2d
mov ebx, dword [arg_8h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 5
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 6
mov ebx, dword [arg_8h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0x13
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 3
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 4
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0x66
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0xa2
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, 2
int 0x80
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0x3f
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0xb
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0x37
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, 0x18
int 0x80
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 7
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov eax, 0x30
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov ecx, dword [ecx]
int 0x80
mov esi, eax
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0x59
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
mov edx, dword [arg_10h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0xb7
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0xc
mov ebx, dword [arg_8h]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, 0x40
int 0x80
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, 0x25
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
int 0x80
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, 0x14
int 0x80
leave
ret
