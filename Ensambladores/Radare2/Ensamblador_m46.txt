xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff8
push eax
push esp
push edx
push fcn.0804cf7c
push fcn.08048e2c
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
push dword [arg_8h]
call fcn.0804b3dc
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
test ebx, ebx
je 0x804b498
mov esi, dword [0x804f33c]
cmp byte [ebx], 0
je 0x804b470
mov edx, str.messages
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, 3
ja 0x804b460
movzx edx, byte [ebx]
movzx eax, byte [str.messages]
sub edx, eax
test ecx, ecx
je 0x804b46c
test edx, edx
jne 0x804b46c
movzx edx, byte [ebx + 1]
movzx eax, byte [0x804dc05]
sub edx, eax
cmp ecx, 1
jbe 0x804b46c
test edx, edx
jne 0x804b46c
movzx edx, byte [ebx + 2]
movzx eax, byte [0x804dc06]
sub edx, eax
cmp ecx, 2
jbe 0x804b46c
test edx, edx
jne 0x804b46c
movzx edx, byte [ebx + 3]
movzx eax, byte [0x804dc07]
sub edx, eax
jmp 0x804b46c
push edx
push ebx
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
jne 0x804b47c
mov dword [0x804f33c], 0x804dc04
jmp 0x804b48a
push ebx
call sym.imp.__strdup
add esp, 4
mov dword [0x804f33c], eax
cmp esi, str.messages
je 0x804b498
push esi
call sym.imp.free
mov eax, dword [0x804f33c]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push dword [arg_ch]
push dword [arg_8h]
call fcn.0804aacc
leave
ret
push ebp
mov ebp, esp
push 5
push dword [arg_ch]
push dword [arg_8h]
call fcn.0804a348
leave
ret
push ebp
mov ebp, esp
sub esp, 0x20
push edi
push esi
push ebx
call sym.imp.__errno_location
mov edx, eax
mov edx, dword [edx]
mov dword [var_18h], edx
cmp dword [var_ch], 0
jne 0x804a36c
xor eax, eax
jmp 0x804a5ea
mov esi, esi
cmp dword [s1], 0
jne 0x804a37a
mov eax, dword [0x804f33c]
mov dword [s1], eax
mov ecx, dword [obj._nl_domain_bindings]
mov dword [var_4h], ecx
test ecx, ecx
je 0x804a3b4
nop
mov eax, dword [var_4h]
push dword [eax + 4]
mov ecx, dword [s1]
push ecx
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
je 0x804a3ae
jl 0x804a3b4
mov eax, dword [var_4h]
mov eax, dword [eax]
mov dword [var_4h], eax
test eax, eax
jne 0x804a388
cmp dword [var_4h], 0
jne 0x804a3c0
mov dword [var_ch_2], obj._nl_default_dirname
jmp 0x804a469
mov ecx, dword [var_4h]
mov edi, dword [ecx + 8]
cmp byte [edi], 0x2f
jne 0x804a3d4
mov dword [var_ch_2], edi
jmp 0x804a469
nop
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov ebx, ecx
not ebx
mov esi, 0x1001
lea eax, [esi + ebx + 3]
and al, 0xfc
sub esp, eax
mov dword [var_ch_2], esp
call sym.imp.__errno_location
mov edx, eax
mov dword [edx], 0
lea edi, [ebx + 0x1004]
jmp 0x804a429
nop
call sym.imp.__errno_location
mov edx, eax
cmp dword [edx], 0x22
jne 0x804a43c
add edi, 0x20
add esi, 0x20
mov eax, edi
and al, 0xfc
sub esp, eax
mov dword [var_ch_2], esp
mov dword [edx], 0
push esi
mov ecx, dword [var_ch_2]
push ecx
call sym.imp.getcwd
mov ebx, eax
add esp, 8
test ebx, ebx
je 0x804a408
test ebx, ebx
je 0x804a56a
mov ecx, dword [var_4h]
push dword [ecx + 8]
push 0
mov eax, dword [var_ch_2]
push eax
call sym.imp.__rawmemchr
add esp, 8
mov edx, eax
mov word [edx], 0x2f
inc edx
push edx
call sym.imp.__stpcpy
add esp, 8
mov ecx, dword [var_10h]
push ecx
call fcn.0804aa18
mov ebx, eax
push ebx
mov eax, dword [var_10h]
push eax
call fcn.0804aa6c
mov dword [var_8h_2], eax
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov edx, ecx
not edx
mov edi, dword [s1]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov esi, ecx
not esi
lea esi, [edx + esi + 6]
and esi, 0xfffffffc
add esp, 0xc
sub esp, esi
mov dword [var_10h_2], esp
mov eax, dword [s1]
push eax
push ebx
mov ecx, dword [var_10h_2]
push ecx
call sym.imp.__stpcpy
add esp, 8
mov edx, eax
mov word [edx], 0x2f
inc edx
push edx
call sym.imp.__stpcpy
add esp, 8
mov edx, eax
mov dword [edx], 0x6f6d2e
mov edi, dword [var_8h_2]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov edx, ecx
not edx
add edx, 3
and edx, 0xfffffffc
sub esp, edx
mov dword [var_14h], esp
lea esi, [esi]
mov eax, dword [var_8h_2]
mov bl, byte [eax]
cmp bl, 0x3a
jne 0x804a511
mov esi, esi
inc dword [var_8h_2]
mov ecx, dword [var_8h_2]
mov bl, byte [ecx]
cmp bl, 0x3a
je 0x804a504
test bl, bl
jne 0x804a524
mov eax, dword [var_14h]
mov byte [eax], 0x43
mov byte [eax + 1], 0
jmp 0x804a541
lea esi, [esi]
mov edx, dword [var_14h]
nop
cmp bl, 0x3a
je 0x804a53e
mov byte [edx], bl
inc dword [var_8h_2]
inc edx
mov ecx, dword [var_8h_2]
mov cl, byte [ecx]
mov bl, cl
test bl, bl
jne 0x804a528
mov byte [edx], 0
mov ecx, dword [var_14h]
movzx eax, byte [ecx]
mov edx, eax
add edx, 0xffffffbd
jne 0x804a552
movzx edx, byte [ecx + 1]
test edx, edx
je 0x804a56a
mov esi, dword [var_14h]
mov edi, str.POSIX
mov ecx, 6
cld
test al, 0
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x804a57c
call sym.imp.__errno_location
mov edx, eax
mov eax, dword [var_18h]
mov dword [edx], eax
mov eax, dword [var_ch]
jmp 0x804a5ea
nop
mov ecx, dword [var_10h_2]
push ecx
mov eax, dword [var_14h]
push eax
mov ecx, dword [var_ch_2]
push ecx
call fcn.0804aaf0
mov esi, eax
add esp, 0xc
test esi, esi
je 0x804a4f8
mov eax, dword [var_ch]
push eax
push esi
call fcn.0804a5f4
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804a5dc
lea edx, [esi + 0x10]
cmp dword [esi + 0x10], 0
je 0x804a5d4
mov edi, edx
mov ecx, dword [var_ch]
push ecx
push dword [edi]
call fcn.0804a5f4
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804a5dc
add edi, 4
cmp dword [edi], 0
jne 0x804a5b8
test ebx, ebx
je 0x804a4f8
call sym.imp.__errno_location
mov edx, eax
mov eax, dword [var_18h]
mov dword [edx], eax
mov eax, ebx
lea esp, [var_2ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x28
push edi
push esi
lea edx, [var_8h]
mov dword [var_ch], edx
mov ecx, dword [arg_10h]
mov dword [var_10h], ecx
mov edx, dword [arg_14h]
mov dword [var_14h], edx
mov edx, dword [arg_8h]
mov dword [var_18h], edx
mov ecx, dword [arg_ch]
mov dword [var_28h], ecx
cmp dword [var_14h], 0
jne 0x804cdf8
cmp dword [var_10h], ecx
jbe 0x804cdb4
mov eax, edx
mov edx, ecx
div dword [var_10h]
jmp 0x804cdd8
mov esi, esi
cmp dword [arg_10h], 0
jne 0x804cdc7
mov eax, 1
xor edx, edx
div dword [var_10h]
mov dword [var_10h], eax
mov eax, dword [var_28h]
xor edx, edx
div dword [var_10h]
mov dword [var_28h], edx
mov eax, dword [var_18h]
div dword [var_10h]
mov dword [var_18h], edx
cmp dword [var_ch], 0
je 0x804cef5
mov esi, dword [var_18h]
xor edi, edi
mov ecx, dword [var_ch]
mov dword [ecx], esi
mov dword [ecx + 4], edi
jmp 0x804cef5
nop
mov edx, dword [var_28h]
cmp dword [var_14h], edx
jbe 0x804ce10
mov esi, dword [arg_8h]
mov edi, edx
mov dword [var_8h], esi
mov dword [var_4h], edi
jmp 0x804cef5
bsr ecx, dword [var_14h]
xor ecx, 0x1f
mov dword [var_1ch], ecx
jne 0x804ce54
mov edx, dword [var_14h]
cmp dword [var_28h], edx
ja 0x804ce2c
mov ecx, dword [var_10h]
cmp dword [var_18h], ecx
jb 0x804ce3e
mov ecx, dword [var_28h]
mov edx, dword [var_18h]
sub edx, dword [var_10h]
sbb ecx, dword [var_14h]
mov dword [var_28h], ecx
mov dword [var_18h], edx
cmp dword [var_ch], 0
je 0x804cef5
mov esi, dword [var_18h]
mov edi, dword [var_28h]
jmp 0x804ceed
nop
mov dword [var_20h], 0x20
mov ecx, dword [var_1ch]
sub dword [var_20h], ecx
shl dword [var_14h], cl
mov eax, dword [var_10h]
mov ecx, dword [var_20h]
shr eax, cl
or dword [var_14h], eax
mov ecx, dword [var_1ch]
shl dword [var_10h], cl
mov edx, dword [var_28h]
mov dword [var_24h], edx
mov ecx, dword [var_20h]
shr dword [var_24h], cl
mov ecx, dword [var_1ch]
shl edx, cl
mov eax, dword [var_18h]
mov ecx, dword [var_20h]
shr eax, cl
or edx, eax
mov dword [var_28h], edx
mov ecx, dword [var_1ch]
shl dword [var_18h], cl
mov eax, edx
mov edx, dword [var_24h]
div dword [var_14h]
mov dword [var_28h], edx
mul dword [var_10h]
mov dword [var_24h], edx
mov ecx, dword [var_28h]
cmp edx, ecx
ja 0x804ceb8
jne 0x804cec4
cmp eax, dword [var_18h]
jbe 0x804cec4
mov edx, dword [var_24h]
sub eax, dword [var_10h]
sbb edx, dword [var_14h]
mov dword [var_24h], edx
cmp dword [var_ch], 0
je 0x804cef5
mov ecx, dword [var_28h]
mov edx, dword [var_18h]
sub edx, eax
sbb ecx, dword [var_24h]
mov dword [var_28h], ecx
mov eax, ecx
mov ecx, dword [var_20h]
shl eax, cl
mov ecx, dword [var_1ch]
shr edx, cl
mov esi, edx
or esi, eax
mov edi, dword [var_28h]
shr edi, cl
mov edx, dword [var_ch]
mov dword [edx], esi
mov dword [edx + 4], edi
mov eax, dword [var_8h]
mov edx, dword [var_4h]
lea esp, [var_30h]
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x20
push edi
push esi
mov edi, dword [arg_10h]
mov eax, dword [arg_14h]
mov dword [var_20h], eax
mov edx, dword [arg_8h]
mov dword [var_4h], edx
mov ecx, dword [arg_ch]
mov dword [var_1ch], ecx
test eax, eax
jne 0x804ccac
cmp edi, ecx
jbe 0x804cc7c
mov eax, edx
mov edx, ecx
div edi
mov dword [var_18h], eax
jmp 0x804cd58
nop
cmp dword [arg_10h], 0
jne 0x804cc8f
mov ecx, 1
mov eax, ecx
xor edx, edx
div edi
mov edi, eax
mov eax, dword [var_1ch]
xor edx, edx
div edi
mov dword [var_20h], eax
mov dword [var_1ch], edx
mov eax, dword [var_4h]
div edi
mov dword [var_18h], eax
jmp 0x804cd5f
lea esi, [esi]
mov edx, dword [var_1ch]
cmp dword [var_20h], edx
jbe 0x804ccc0
mov dword [var_18h], 0
jmp 0x804cd58
bsr esi, dword [var_20h]
xor esi, 0x1f
jne 0x804cce4
mov ecx, dword [var_20h]
cmp dword [var_1ch], ecx
ja 0x804ccd8
cmp dword [var_4h], edi
jb 0x804ccb4
mov esi, esi
mov dword [var_18h], 1
jmp 0x804cd58
lea esi, [esi]
mov dword [var_8h], 0x20
sub dword [var_8h], esi
mov eax, dword [var_20h]
mov ecx, esi
shl eax, cl
mov dword [var_20h], edi
mov ecx, dword [var_8h]
shr dword [var_20h], cl
mov edx, dword [var_20h]
or eax, edx
mov dword [var_18h], eax
mov ecx, esi
shl edi, cl
mov eax, dword [var_1ch]
mov dword [var_ch], eax
mov ecx, dword [var_8h]
shr dword [var_ch], cl
mov ecx, esi
shl eax, cl
mov dword [var_20h], eax
mov eax, dword [var_4h]
mov dword [var_1ch], eax
mov ecx, dword [var_8h]
shr dword [var_1ch], cl
mov eax, dword [var_1ch]
or dword [var_20h], eax
mov ecx, esi
shl dword [var_4h], cl
mov eax, dword [var_20h]
mov edx, dword [var_ch]
div dword [var_18h]
mov dword [var_18h], eax
mov dword [var_20h], edx
mul edi
mov esi, eax
mov edi, edx
cmp edi, dword [var_20h]
ja 0x804cd55
jne 0x804cd58
cmp esi, dword [var_4h]
jbe 0x804cd58
dec dword [var_18h]
mov dword [var_20h], 0
mov ecx, dword [var_18h]
mov dword [var_14h], ecx
mov eax, dword [var_20h]
mov dword [var_10h], eax
mov eax, dword [var_14h]
mov edx, dword [var_10h]
lea esp, [var_28h]
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push dword [arg_10h]
push dword [arg_ch]
push dword [arg_8h]
call fcn.0804a348
leave
ret
push ebp
mov ebp, esp
push dword [arg_8h]
call fcn.0804aae0
leave
ret
push ebp
mov ebp, esp
push dword [arg_8h]
push 0
call fcn.0804aacc
leave
ret
push ebp
mov ebp, esp
push dword [arg_ch]
push dword [dirname]
call fcn.0804a0bc
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
cmp dword [s1], 0
je 0x804a1e1
mov eax, dword [s1]
cmp byte [eax], 0
jne 0x804a0e0
jmp 0x804a1e1
xor ebx, ebx
jmp 0x804a109
mov ebx, dword [obj._nl_domain_bindings]
test ebx, ebx
je 0x804a109
mov esi, esi
push dword [ebx + 4]
mov eax, dword [s1]
push eax
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
je 0x804a109
jl 0x804a0dc
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804a0ec
cmp dword [arg_ch], 0
jne 0x804a124
test ebx, ebx
je 0x804a118
mov edx, dword [ebx + 8]
jmp 0x804a11d
mov edx, obj._nl_default_dirname
mov eax, edx
jmp 0x804a33e
test ebx, ebx
je 0x804a204
push dword [ebx + 8]
mov eax, dword [arg_ch]
push eax
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
je 0x804a33b
mov esi, obj._nl_default_dirname
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, 3
ja 0x804a1bc
mov eax, dword [arg_ch]
movzx edx, byte [eax]
movzx eax, byte [obj._nl_default_dirname]
sub edx, eax
test ecx, ecx
je 0x804a1cb
test edx, edx
jne 0x804a1cb
mov eax, dword [arg_ch]
movzx edx, byte [eax + 1]
movzx eax, byte [0x804dc0e]
sub edx, eax
cmp ecx, 1
jbe 0x804a1cb
test edx, edx
jne 0x804a1cb
mov eax, dword [arg_ch]
movzx edx, byte [eax + 2]
movzx eax, byte [0x804dc0f]
sub edx, eax
cmp ecx, 2
jbe 0x804a1cb
test edx, edx
jne 0x804a1cb
mov eax, dword [arg_ch]
movzx edx, byte [eax + 3]
movzx eax, byte [0x804dc10]
sub edx, eax
jmp 0x804a1cb
lea esi, [esi]
push esi
mov eax, dword [arg_ch]
push eax
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
je 0x804a1e8
mov eax, dword [arg_ch]
push eax
call sym.imp.__strdup
add esp, 4
mov edi, eax
test edi, edi
jne 0x804a1ea
xor eax, eax
jmp 0x804a33e
mov edi, esi
mov edx, dword [ebx + 8]
cmp edx, obj._nl_default_dirname
je 0x804a1fb
push edx
call sym.imp.free
mov dword [ebx + 8], edi
jmp 0x804a33b
nop
push 0xc
call sym.imp.malloc
mov esi, eax
add esp, 4
test esi, esi
je 0x804a1e1
mov eax, dword [s1]
push eax
call sym.imp.__strdup
add esp, 4
mov edx, eax
mov dword [esi + 4], edx
test edx, edx
je 0x804a1e1
mov edx, obj._nl_default_dirname
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, 3
ja 0x804a2a0
mov eax, dword [arg_ch]
movzx edx, byte [eax]
movzx eax, byte [obj._nl_default_dirname]
sub edx, eax
test ecx, ecx
je 0x804a2af
test edx, edx
jne 0x804a2af
mov eax, dword [arg_ch]
movzx edx, byte [eax + 1]
movzx eax, byte [0x804dc0e]
sub edx, eax
cmp ecx, 1
jbe 0x804a2af
test edx, edx
jne 0x804a2af
mov eax, dword [arg_ch]
movzx edx, byte [eax + 2]
movzx eax, byte [0x804dc0f]
sub edx, eax
cmp ecx, 2
jbe 0x804a2af
test edx, edx
jne 0x804a2af
mov eax, dword [arg_ch]
movzx edx, byte [eax + 3]
movzx eax, byte [0x804dc10]
sub edx, eax
jmp 0x804a2af
lea esi, [esi]
push edx
mov eax, dword [arg_ch]
push eax
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
je 0x804a2d0
mov eax, dword [arg_ch]
push eax
call sym.imp.__strdup
add esp, 4
mov edx, eax
mov dword [esi + 8], edx
test edx, edx
jne 0x804a2d7
jmp 0x804a1e1
lea esi, [esi]
mov dword [esi + 8], 0x804dc0d
mov edx, dword [obj._nl_domain_bindings]
test edx, edx
je 0x804a2f6
push dword [edx + 4]
mov eax, dword [s1]
push eax
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
jge 0x804a308
mov eax, dword [obj._nl_domain_bindings]
mov dword [esi], eax
mov dword [obj._nl_domain_bindings], esi
jmp 0x804a339
lea esi, [esi]
mov ebx, dword [obj._nl_domain_bindings]
mov edx, dword [ebx]
test edx, edx
je 0x804a333
push dword [edx + 4]
mov eax, dword [s1]
push eax
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
jle 0x804a333
mov ebx, dword [ebx]
mov eax, dword [ebx]
mov edx, eax
test edx, edx
jne 0x804a314
mov eax, dword [ebx]
mov dword [esi], eax
mov dword [ebx], esi
mov ebx, esi
mov eax, dword [ebx + 8]
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
jmp dword [reloc.strcpy]
jmp dword [reloc.printf]
jmp dword [reloc.getopt_long]
jmp dword [reloc.munmap]
jmp dword [reloc.getenv]
jmp dword [reloc.__rawmemchr]
jmp dword [reloc.__strtol_internal]
jmp dword [reloc.bsearch]
jmp dword [reloc.qsort]
jmp dword [reloc.fgets]
jmp dword [reloc.fchdir]
jmp dword [reloc.memcpy]
jmp dword [reloc.puts]
jmp dword [reloc.feof]
jmp dword [reloc.malloc]
jmp dword [reloc.__strtoul_internal]
jmp dword [reloc.__xstat64]
jmp dword [reloc.abort]
jmp dword [reloc.fprintf]
jmp dword [reloc.__stpcpy]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.chdir]
jmp dword [reloc.ferror]
jmp dword [reloc.strstr]
jmp dword [reloc.read]
jmp dword [reloc.__argz_count]
jmp dword [reloc.strncmp]
jmp dword [reloc.strcasecmp]
jmp dword [reloc.realloc]
jmp dword [reloc.__strdup]
jmp dword [reloc.readdir64]
jmp dword [reloc._IO_getc]
jmp dword [reloc.fnmatch]
jmp dword [reloc.open64]
jmp dword [reloc.opendir]
jmp dword [reloc.__assert_fail]
jmp dword [reloc.strcmp]
jmp dword [reloc.getcwd]
jmp dword [reloc.sprintf]
jmp dword [reloc.__mempcpy]
jmp dword [reloc.fclose]
jmp dword [reloc.setlocale]
jmp dword [reloc.mmap64]
jmp dword [reloc.error]
jmp dword [reloc.__lxstat64]
jmp dword [reloc.fflush_unlocked]
jmp dword [reloc.__fxstat64]
jmp dword [reloc.__argz_stringify]
jmp dword [reloc.__errno_location]
jmp dword [reloc.exit]
jmp dword [reloc.strchr]
jmp dword [reloc.closedir]
jmp dword [reloc.__register_frame_info]
jmp dword [reloc.close]
jmp dword [reloc.free]
jmp dword [reloc.fopen64]
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov edi, dword [envp]
xor esi, esi
xor ebx, ebx
mov dword [var_8h], 0x804d809
lea edx, [var_8h]
mov dword [var_10h], edx
mov dword [edx + 4], 0
mov eax, dword [edi]
mov dword [0x804f600], eax
push 0x804d80b
push 6
call sym.imp.setlocale
push 0x804d80c
push str.fileutils
call sym.bindtextdomain
push str.fileutils
call sym.textdomain
call fcn.0804bcc0
mov dword [0x804f5f0], eax
mov dword [0x804f5e0], 0x804cf28
push 0x804f560
push 0
push str.DU_BLOCK_SIZE
call sym.imp.getenv
add esp, 4
push eax
call fcn.0804c3c8
add esp, 0x20
jmp case.0x80494d3.0
mov esi, esi
cmp eax, 0x82
ja case.0x80494d3.1
jmp dword [eax*4 + 0x804d954]
mov esi, esi
mov dword [0x804f318], 1
jmp case.0x80494d3.0
nop
mov dword [0x804f560], 1
jmp case.0x80494d3.0
nop
mov dword [0x804f324], 1
jmp case.0x80494d3.0
nop
mov dword [0x804f560], 0xfffffc00
jmp case.0x80494d3.0
nop
mov dword [0x804f560], 0xfffffc18
jmp case.0x80494d3.0
nop
mov dword [0x804f560], 0x400
jmp case.0x80494d3.0
nop
push 0
lea eax, [var_ch]
push eax
push 0
push 0
push dword [obj.optarg]
call fcn.0804c7fc
add esp, 0x14
test eax, eax
jne 0x8049566
mov eax, dword [var_ch]
test eax, eax
jl 0x8049566
cmp eax, 0x7fffffff
jle 0x8049589
push dword [obj.optarg]
push str.invalid_maximum_depth___s
call sym.gettext
add esp, 4
push eax
push 0
push 1
call sym.imp.error
add esp, 0x10
mov eax, dword [var_ch]
mov esi, 1
mov dword [0x804f330], eax
jmp case.0x80494d3.0
mov dword [0x804f560], 0x100000
jmp case.0x80494d3.0
nop
mov dword [0x804f31c], 1
jmp case.0x80494d3.0
nop
mov ebx, 1
jmp case.0x80494d3.0
mov esi, esi
mov dword [0x804f320], 1
jmp case.0x80494d3.0
nop
mov dword [0x804f32c], 1
jmp case.0x80494d3.0
nop
mov dword [0x804f5e0], 0x804cf04
jmp case.0x80494d3.0
mov dword [0x804f328], 1
jmp case.0x80494d3.0
push 0xa
push dword [obj.optarg]
push dword [0x804f5f0]
call fcn.0804bd78
add esp, 0xc
test eax, eax
je case.0x80494d3.0
push dword [obj.optarg]
push 0x804d867
call sym.imp.__errno_location
push dword [eax]
push 1
call sym.imp.error
add esp, 0x10
jmp case.0x80494d3.0
push dword [obj.optarg]
push dword [0x804f5f0]
call fcn.0804bd38
jmp 0x8049669
nop
push 0x804f560
push 1
push dword [obj.optarg]
call fcn.0804c3c8
add esp, 0xc
jmp case.0x80494d3.0
nop
push 0
push 1
call fcn.08049398
add esp, 8
push 0
push 0x804cfd8
push str.abchHklmsxDLSX:
push edi
mov edx, dword [argv]
push edx
call sym.imp.getopt_long
add esp, 0x14
cmp eax, 0xffffffff
jne 0x80494c8
cmp dword [0x804f5ec], 0
je 0x80496b8
push 0x804d86a
push str.GNU_fileutils
push str.du___s___s_n
call sym.imp.printf
call fcn.0804bcb4
push 0
call sym.imp.exit
nop
cmp dword [0x804f5e8], 0
je 0x80496cd
push 0
push 0
call fcn.08049398
add esp, 8
cmp dword [0x804f318], 0
je 0x80496f3
test ebx, ebx
je 0x804975e
push str.cannot_both_summarize_and_show_all_entries
call sym.gettext
push eax
push 1
call fcn.08049398
add esp, 0xc
test ebx, ebx
je 0x804975e
test esi, esi
je 0x804971b
cmp dword [0x804f330], 0
jne 0x804971b
push str.warning:_summarizing_is_the_same_as_using___max_depth0
call sym.gettext
push eax
push 0
push 0
call sym.imp.error
add esp, 0x10
test ebx, ebx
je 0x804975e
test esi, esi
je 0x8049750
mov eax, dword [0x804f330]
test eax, eax
je 0x8049750
push eax
push str.warning:_summarizing_conflicts_with___max_depth_d
call sym.gettext
add esp, 4
push eax
push 0
push 0
call sym.imp.error
push 0
push 1
call fcn.08049398
add esp, 0x18
test ebx, ebx
je 0x804975e
mov dword [0x804f330], 0
call fcn.08049298
push 0x46
push 0x64
call fcn.08049dd4
push 0x64
push 0x804f564
call fcn.08049f64
add esp, 0x10
mov eax, dword [obj.optind]
cmp eax, dword [argv]
jne 0x804978c
mov eax, dword [var_10h]
jmp 0x804978f
mov esi, esi
lea eax, [edi + eax*4]
push eax
call fcn.080497e8
call fcn.0804bcb4
push dword [0x804f5e4]
call sym.imp.exit
pop ebx
add ebx, 0x6547
cmp dword [ebx + 0xf0], 0
je 0x8048e4a
call loc.imp.__gmon_start__
mov esi, esi
call fcn.08049270
call fcn.0804cf4c
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x804928b
push 0x804f53c
push section..eh_frame
call sym.imp.__register_frame_info
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, section..ctors
cmp dword [section..ctors], 0xffffffff
je 0x804cf6c
mov esi, esi
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x804cf60
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push 1
call fcn.0804bc54
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
push dword [obj.stdout]
call sym.imp.ferror
add esp, 4
test eax, eax
je 0x804bc83
push str.write_error
call sym.gettext
push eax
push 0
push ebx
call sym.imp.error
add esp, 0x10
push dword [obj.stdout]
call sym.imp.fclose
add esp, 4
test eax, eax
je 0x804bcad
push str.write_error
call sym.gettext
push eax
call sym.imp.__errno_location
push dword [eax]
push ebx
call sym.imp.error
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
push 0xc
call fcn.0804c738
mov ebx, eax
mov dword [ebx + 8], 0
mov dword [ebx + 4], 0x40
push 0x100
call fcn.0804c738
mov dword [ebx], eax
mov eax, ebx
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
push dword [size]
call sym.imp.malloc
mov ebx, eax
add esp, 4
test ebx, ebx
jne 0x804c752
call fcn.0804c714
mov eax, ebx
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x804f364]
test eax, eax
je 0x804c722
call eax
push str.Memory_exhausted
push 0
push dword [0x804f360]
call sym.imp.error
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
push dword [arg_10h]
push ebx
call fcn.0804c324
add esp, 8
test eax, eax
je 0x804c44d
cmp dword [arg_ch], 0
je 0x804c44d
cmp eax, 1
je 0x804c400
jb 0x804c3f8
cmp eax, 2
je 0x804c418
cmp eax, 3
je 0x804c430
jmp 0x804c44d
call sym.imp.abort
lea esi, [esi]
push ebx
push str.block_size
call sym.gettext
add esp, 4
push eax
push str.invalid__s___s
jmp 0x804c444
mov esi, esi
push ebx
push str.block_size
call sym.gettext
add esp, 4
push eax
push str.invalid_character_following__s___s
jmp 0x804c444
mov esi, esi
push ebx
push str.block_size
call sym.gettext
add esp, 4
push eax
push str._s___s_larger_than_maximum_long_int
push 0
push 2
call sym.imp.error
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0xc
push edi
push esi
push ebx
mov edi, dword [arg_18h]
cmp dword [arg_10h], 0x24
jbe 0x804c827
push str.xstrtol
push 0x76
push 0x804dea8
push 0x804dec0
call sym.imp.__assert_fail
add esp, 0x10
mov esi, dword [arg_ch]
test esi, esi
jne 0x804c831
lea esi, [var_4h]
call sym.imp.__errno_location
mov ebx, eax
mov dword [ebx], 0
push 0
mov ecx, dword [arg_10h]
push ecx
push esi
mov ecx, dword [arg_8h]
push ecx
call sym.imp.__strtol_internal
mov dword [var_8h], eax
add esp, 0x10
cmp dword [ebx], 0
jne 0x804c934
mov edx, dword [esi]
cmp edx, dword [arg_8h]
jne 0x804c870
mov eax, 1
jmp 0x804c94b
mov esi, esi
test edi, edi
je 0x804c944
cmp byte [edx], 0
je 0x804c941
mov ebx, 0x400
mov dword [var_ch], 1
movsx eax, byte [edx]
push eax
push edi
call sym.imp.strchr
add esp, 8
test eax, eax
jne 0x804c8a8
mov eax, 2
jmp 0x804c94b
push 0x30
push edi
call sym.imp.strchr
add esp, 8
test eax, eax
je 0x804c8d0
mov eax, dword [esi]
mov al, byte [eax + 1]
cmp al, 0x42
je 0x804c8c9
cmp al, 0x44
jne 0x804c8d0
mov ebx, 0x3e8
mov dword [var_ch], 2
mov eax, dword [esi]
mov al, byte [eax]
add al, 0xbe
movsx eax, al
cmp eax, 0x35
ja case.0x804c8de.189
jmp dword [eax*4 + 0x804dee8]
lea esi, [esi]
push 0x200
jmp 0x804c912
nop
push 0x400
jmp 0x804c912
nop
push 6
jmp 0x804c926
push 3
jmp 0x804c926
push 1
jmp 0x804c926
push 2
jmp 0x804c926
push 5
jmp 0x804c926
push 4
jmp 0x804c926
push 2
lea eax, [var_8h]
push eax
call fcn.0804c780
jmp 0x804c930
lea esi, [esi]
push 8
jmp 0x804c926
push 7
push ebx
lea eax, [var_8h]
push eax
call fcn.0804c7bc
test eax, eax
je case.0x804c8de.157
mov eax, 3
jmp 0x804c94b
nop
mov ecx, dword [var_ch]
add dword [esi], ecx
mov eax, dword [var_8h]
mov ecx, dword [arg_14h]
mov dword [ecx], eax
xor eax, eax
lea esp, [var_18h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov ecx, dword [ebx]
mov eax, ecx
imul eax, dword [arg_ch]
mov dword [var_4h], eax
cdq
idiv dword [arg_ch]
mov edi, eax
cmp ecx, edi
jne 0x804c7ac
mov eax, dword [var_4h]
mov dword [ebx], eax
xor eax, eax
jmp 0x804c7b1
mov esi, esi
mov eax, 1
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
dec ebx
cmp ebx, 0xffffffff
je 0x804c7f1
lea esi, [esi]
push esi
push edi
call fcn.0804c780
add esp, 8
test eax, eax
je 0x804c7ec
mov eax, 1
jmp 0x804c7f3
lea esi, [esi]
sub ebx, 1
jae 0x804c7d4
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov edx, dword [arg_ch]
mov cl, byte [arg_10h]
mov byte [var_1h], cl
mov dword [var_8h], 0
cmp byte [edx], 0x2d
jne 0x804bda3
cmp byte [edx + 1], 0
sete al
movzx ecx, al
mov dword [var_8h], ecx
mov ebx, 0x400
xor esi, esi
mov dword [var_10h], 0
cmp dword [var_8h], 0
jne 0x804bdd8
push 0x804dce4
push edx
call sym.imp.fopen64
mov dword [stream], eax
add esp, 8
test eax, eax
jne 0x804bde1
mov eax, 0xffffffff
jmp 0x804beb6
mov esi, esi
mov ecx, dword [obj.stdin]
mov dword [stream], ecx
push 0x400
call fcn.0804c738
mov edi, eax
add esp, 4
jmp 0x804be0f
mov esi, esi
mov byte [esi + edi], al
inc esi
cmp esi, ebx
jne 0x804be0f
lea ebx, [esi*2]
push ebx
push edi
call fcn.0804c75c
mov edi, eax
add esp, 8
mov ecx, dword [stream]
push ecx
call sym.imp._IO_getc
add esp, 4
cmp eax, 0xffffffff
jne 0x804bdf4
lea eax, [esi + 1]
push eax
push edi
call fcn.0804c75c
mov edi, eax
mov ecx, dword [stream]
push ecx
call sym.imp.ferror
add esp, 0xc
test eax, eax
je 0x804be46
call sym.imp.__errno_location
mov eax, dword [eax]
mov dword [var_10h], eax
cmp dword [var_8h], 0
jne 0x804be66
mov ecx, dword [stream]
push ecx
call sym.imp.fclose
add esp, 4
test eax, eax
je 0x804be66
call sym.imp.__errno_location
mov eax, dword [eax]
mov dword [var_10h], eax
mov ebx, edi
mov eax, ebx
add esi, ebx
cmp ebx, esi
ja 0x804bea2
cmp ebx, esi
jae 0x804be80
mov cl, byte [var_1h]
cmp byte [ebx], cl
je 0x804be8a
jmp 0x804be9d
lea esi, [esi]
cmp edi, ebx
jae 0x804be9d
cmp byte [ebx - 1], 0
je 0x804be9d
mov byte [ebx], 0
push eax
mov ecx, dword [arg_8h]
push ecx
call fcn.0804bd38
lea eax, [ebx + 1]
add esp, 8
inc ebx
cmp ebx, esi
jbe 0x804be70
call sym.imp.__errno_location
mov ecx, dword [var_10h]
mov dword [eax], ecx
test ecx, ecx
jne 0x804bdcc
xor eax, eax
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
mov eax, dword [ebx + 4]
mov ecx, dword [ebx + 8]
cmp eax, ecx
jg 0x804bd64
lea esi, [eax*2]
mov dword [ebx + 4], esi
shl eax, 3
push eax
push dword [ebx]
call fcn.0804c75c
mov dword [ebx], eax
mov ecx, dword [ebx + 8]
mov edx, dword [ebx]
mov eax, dword [arg_ch]
mov dword [edx + ecx*4], eax
inc dword [ebx + 8]
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push ebx
push dword [size]
push dword [ptr]
call sym.imp.realloc
mov ebx, eax
add esp, 8
test ebx, ebx
jne 0x804c779
call fcn.0804c714
mov eax, ebx
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
mov eax, dword [arg_ch]
test eax, eax
je 0x80493ce
push eax
push dword [0x804f600]
push str._s:__s_n
test ebx, ebx
jne 0x80493c0
mov eax, dword [obj.stdout]
jmp 0x80493c5
lea esi, [esi]
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0x10
test ebx, ebx
je 0x80493f8
push dword [0x804f600]
push str.Try___s___help_for_more_information._n
call sym.gettext
add esp, 4
push eax
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0xc
jmp 0x8049439
mov esi, esi
push dword [0x804f600]
push str.Usage:__s__OPTION_...__FILE_..._n
call sym.gettext
add esp, 4
push eax
call sym.imp.printf
push str.Summarize_disk_usage_of_each_FILE__recursively_for_directories._n_n___a____all_____________write_counts_for_all_files__not_just_directories_n________block_sizeSIZE_use_SIZE_byte_blocks_n___b____bytes___________print_size_in_bytes_n___c____total___________produce_a_grand_total_n___D____dereference_args__dereference_PATHs_when_symbolic_link_n___h____human_readable__print_sizes_in_human_readable_format__e.g.__1K_234M_2G__n___H____si______________likewise__but_use_powers_of_1000_not_1024_n___k____kilobytes_______like___block_size1024_n___l____count_links_____count_sizes_many_times_if_hard_linked_n___L____dereference_____dereference_all_symbolic_links_n___m____megabytes_______like___block_size1048576_n___S____separate_dirs___do_not_include_size_of_subdirectories_n___s____summarize_______display_only_a_total_for_each_argument_n___x____one_file_system__skip_directories_on_different_filesystems_n___X_FILE____exclude_fromFILE__Exclude_files_that_match_any_pattern_in_FILE._n________excludePAT_____Exclude_file
call sym.gettext
push eax
call sym.imp.printf
push str._nReport_bugs_to__bug_fileutils_gnu.org_.
call sym.gettext
push eax
call sym.imp.puts
call fcn.0804bcb4
add esp, 0x18
push ebx
call sym.imp.exit
push ebp
mov ebp, esp
sub esp, 0x84
push edi
push esi
push ebx
push 0x84
call sym.imp.malloc
mov dword [0x804f5fc], eax
mov dword [0x804f604], eax
push 0x804cfc0
push str._usr_include_flio.h
call sym.imp.fopen64
mov esi, eax
add esp, 0xc
test esi, esi
je 0x8049339
lea ebx, [var_80h]
jmp 0x8049323
lea esi, [esi]
push 0x84
call sym.imp.malloc
mov edx, eax
mov eax, dword [0x804f5fc]
mov dword [eax], edx
add esp, 4
push ebx
add eax, 4
push eax
call sym.imp.strcpy
add esp, 8
mov edx, dword [0x804f5fc]
add edx, 4
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov byte [edx + ecx - 2], 0
mov eax, dword [0x804f5fc]
mov eax, dword [eax]
mov dword [0x804f5fc], eax
push esi
push 0x7e
push ebx
call sym.imp.fgets
add esp, 0xc
test eax, eax
jne 0x80492d8
push esi
call sym.imp.fclose
mov eax, dword [0x804f5fc]
mov dword [eax], 0
lea esp, [var_90h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
lea eax, [ebx*4 + 0x14]
push eax
call fcn.0804c738
mov edi, eax
mov eax, esi
shl eax, 4
push eax
call fcn.0804c738
mov dword [edi + 4], eax
mov dword [edi], ebx
mov dword [edi + 8], esi
mov dword [0x804f568], edi
call fcn.08049e18
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [0x804f568]
mov dword [eax + 0xc], 0
lea edx, [eax + 0x10]
mov eax, dword [eax]
test eax, eax
jle 0x8049e3e
mov dword [edx], 0
add edx, 4
dec eax
test eax, eax
jg 0x8049e30
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, dword [arg_ch]
push 0xc
call fcn.0804c738
mov edi, eax
lea eax, [ebx + 1]
push eax
call fcn.0804c738
mov dword [edi + 8], eax
mov dword [edi], ebx
mov dword [esi], edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
lea eax, [var_8h]
mov dword [var_18h], eax
push eax
call fcn.0804c454
mov ecx, eax
add esp, 4
test ecx, ecx
je 0x8049810
push 1
call sym.imp.exit
push 0x804f580
push 0x804d809
push 3
call sym.imp.__xstat64
add esp, 0xc
test eax, eax
je 0x8049844
push str.current_directory
call sym.gettext
push eax
call sym.imp.__errno_location
push dword [eax]
push 1
call sym.imp.error
add esp, 0x10
mov edx, dword [0x804f58c]
mov dword [var_ch], edx
mov eax, dword [0x804f580]
mov edx, dword [0x804f584]
mov dword [var_14h], eax
mov dword [var_10h], edx
cmp dword [ebx], 0
je 0x8049958
mov esi, ebx
lea esi, [esi]
mov ebx, dword [esi]
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
add ecx, 0xfffffffe
jne 0x8049898
cmp byte [ebx], 0x2f
jne 0x80498a2
push 0
push dword [0x804f564]
call fcn.0804a04c
jmp 0x80498ae
lea esi, [esi]
cmp byte [ecx + ebx], 0x2f
jne 0x80498a2
mov byte [ecx + ebx], 0
push ebx
push dword [0x804f564]
call fcn.08049fbc
add esp, 8
cmp dword [0x804f324], 0
jne 0x80498bf
call fcn.08049e18
push 0
push 0
push 0
push 1
push ebx
call fcn.08049994
add esp, 0x14
push 0x804f580
push 0x804d809
push 3
call sym.imp.__xstat64
add esp, 0xc
test eax, eax
je 0x80498fe
push 0x804d809
call sym.imp.__errno_location
push dword [eax]
push 1
call sym.imp.error
add esp, 0xc
mov edx, dword [var_ch]
cmp dword [0x804f58c], edx
jne 0x8049921
mov ecx, 0x804f580
mov eax, dword [var_14h]
cmp dword [0x804f580], eax
jne 0x8049921
mov edx, dword [var_10h]
cmp dword [ecx + 4], edx
je 0x804994c
push 0
push str.starting_directory
call sym.gettext
add esp, 4
mov ecx, eax
push ecx
mov eax, dword [var_18h]
push eax
call fcn.0804c4c8
mov ecx, eax
add esp, 0xc
test ecx, ecx
je 0x804994c
push 1
call sym.imp.exit
add esi, 4
cmp dword [esi], 0
jne 0x804986c
cmp dword [0x804f324], 0
je 0x8049983
push str.total
call sym.gettext
mov ecx, eax
push ecx
mov eax, dword [0x804f334]
mov edx, dword [0x804f338]
push edx
push eax
call fcn.080497a8
add esp, 0x10
mov edx, dword [var_18h]
push edx
call fcn.0804c55c
lea esp, [var_24h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
mov dword [ebx], 0xffffffff
mov dword [ebx + 4], 0
cmp dword [0x804f35c], 0
je 0x804c499
push 0
push 0x804de05
call sym.imp.open64
mov dword [ebx], eax
add esp, 8
test eax, eax
jge 0x804c490
push str.cannot_open_current_directory
jmp 0x804c4aa
lea esi, [esi]
cmp dword [0x804f35c], 0
jne 0x804c4c0
call fcn.0804c680
mov dword [ebx + 4], eax
test eax, eax
jne 0x804c4c0
push str.cannot_get_current_directory
call sym.imp.__errno_location
push dword [eax]
push 0
call sym.imp.error
mov eax, 1
jmp 0x804c4c2
nop
xor eax, eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
mov edx, dword [arg_ch]
cmp dword [ecx + 4], edx
jbe 0x804a064
mov eax, dword [ecx + 8]
mov byte [edx + eax], 0
mov dword [ecx + 4], edx
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, dword [arg_ch]
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea esi, [ecx - 1]
push esi
mov eax, dword [arg_8h]
push eax
call fcn.08049f94
add esp, 8
push ebx
mov eax, dword [arg_8h]
push dword [eax + 8]
call sym.imp.strcpy
mov eax, dword [arg_8h]
mov dword [eax + 4], esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
cmp dword [ebx], esi
jae 0x8049fb4
lea eax, [esi + 1]
push eax
push dword [ebx + 8]
call fcn.0804c75c
mov dword [ebx + 8], eax
mov dword [ebx], esi
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x8c
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_10h]
mov edi, dword [arg_14h]
cmp dword [arg_ch], 0
je 0x80499d0
cmp dword [0x804f32c], 0
je 0x80499d0
push 0x804f580
push ebx
push 3
call sym.imp.__xstat64
add esp, 0xc
test eax, eax
jl 0x80499e4
jmp 0x8049a00
mov esi, esi
push 0x804f580
push ebx
mov eax, dword [0x804f5e0]
call eax
add esp, 8
test eax, eax
jge 0x8049a00
mov eax, dword [0x804f564]
push dword [eax + 8]
push 0x804d867
call sym.imp.__errno_location
push dword [eax]
push 0
jmp 0x8049be7
nop
push ebx
call fcn.08049350
add esp, 4
cmp eax, 1
je 0x8049bf6
cmp dword [0x804f31c], 0
jne 0x8049a49
cmp dword [0x804f594], 1
jbe 0x8049a49
mov eax, dword [0x804f580]
mov edx, dword [0x804f584]
push edx
push eax
push dword [0x804f58c]
call fcn.08049e40
mov ecx, eax
add esp, 0xc
test ecx, ecx
jne 0x8049bf6
mov eax, dword [0x804f5b8]
mov edx, dword [0x804f5bc]
mov dword [var_70h], eax
mov dword [var_6ch], edx
add dword [0x804f334], eax
adc dword [0x804f338], edx
mov edx, dword [0x804f590]
and edx, 0xf000
cmp edx, 0x4000
jne 0x8049d84
mov eax, dword [0x804f580]
mov edx, dword [0x804f584]
mov dword [var_7ch], eax
mov dword [var_78h], edx
cmp dword [0x804f320], 0
je 0x8049ab0
cmp dword [arg_ch], 0
jne 0x8049ab0
cmp esi, dword [var_7ch]
jne 0x8049bf6
cmp edi, dword [var_78h]
jne 0x8049bf6
mov dword [var_80h], 0
cmp dword [0x804f5e0], 0x804cf04
jne 0x8049aee
lea eax, [var_60h]
push eax
push ebx
push 3
call sym.imp.__lxstat64
add esp, 0xc
test eax, eax
jne 0x8049aee
mov edx, dword [var_50h]
and edx, 0xf000
cmp edx, 0xa000
sete al
movzx edx, al
mov dword [var_80h], edx
cmp dword [var_80h], 0
je 0x8049b0b
lea eax, [var_68h]
push eax
call fcn.0804c454
add esp, 4
test eax, eax
je 0x8049b0b
push 1
call sym.imp.exit
push ebx
call sym.imp.chdir
add esp, 4
test eax, eax
jge 0x8049b3c
mov eax, dword [0x804f564]
push dword [eax + 8]
push str.cannot_change_to_directory__s
call sym.gettext
add esp, 4
push eax
call sym.imp.__errno_location
push dword [eax]
push 0
jmp 0x8049be7
call sym.imp.__errno_location
mov ebx, eax
mov dword [ebx], 0
push dword [0x804f5ac]
push 0x804d809
call fcn.0804c584
mov esi, eax
add esp, 8
test esi, esi
jne 0x8049c1f
mov ecx, dword [ebx]
test ecx, ecx
je 0x8049c08
mov eax, dword [0x804f564]
push dword [eax + 8]
push 0x804d867
push ecx
push 0
call sym.imp.error
add esp, 0x10
cmp dword [var_80h], 0
je 0x8049bbc
mov eax, dword [0x804f564]
push dword [eax + 8]
push 0x804dbaa
lea ebx, [var_68h]
push ebx
call fcn.0804c4c8
add esp, 0xc
test eax, eax
je 0x8049bb2
push 1
call sym.imp.exit
push ebx
call fcn.0804c55c
jmp 0x8049bec
mov esi, esi
push 0x804dbaa
call sym.imp.chdir
add esp, 4
test eax, eax
jge 0x8049bec
mov eax, dword [0x804f564]
push dword [eax + 8]
push str.cannot_change_to__.._from_directory__s
call sym.gettext
add esp, 4
push eax
push dword [ebx]
push 1
call sym.imp.error
mov dword [0x804f5e4], 1
mov eax, 0
mov edx, 0
jmp 0x8049dc9
lea esi, [esi]
push str.virtual_memory_exhausted
call sym.gettext
push eax
push 0
push 1
call sym.imp.error
add esp, 0x10
push 0x804dc01
push dword [0x804f564]
call fcn.0804a000
mov eax, dword [0x804f564]
mov eax, dword [eax + 4]
mov dword [var_74h], eax
mov ebx, esi
add esp, 8
cmp byte [esi], 0
je 0x8049cb1
push ebx
push dword [0x804f5f0]
call fcn.0804bcf0
add esp, 8
test eax, eax
jne 0x8049c9c
push ebx
push dword [0x804f564]
call fcn.0804a000
mov eax, dword [arg_18h]
inc eax
push eax
mov eax, dword [var_7ch]
mov edx, dword [var_78h]
push edx
push eax
push 0
push ebx
call fcn.08049994
mov dword [var_8ch], eax
mov dword [var_88h], edx
add dword [var_70h], eax
adc dword [var_6ch], edx
mov edx, dword [var_74h]
push edx
push dword [0x804f564]
call fcn.0804a04c
add esp, 0x24
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
add ebx, ecx
cmp byte [ebx], 0
jne 0x8049c44
push esi
call sym.imp.free
add esp, 4
cmp dword [var_80h], 0
je 0x8049ce0
mov eax, dword [0x804f564]
push dword [eax + 8]
push 0x804dbaa
lea ebx, [var_68h]
push ebx
call fcn.0804c4c8
push ebx
call fcn.0804c55c
jmp 0x8049d15
mov esi, esi
push 0x804dbaa
call sym.imp.chdir
add esp, 4
test eax, eax
jge 0x8049d18
mov eax, dword [0x804f564]
push dword [eax + 8]
push str.cannot_change_to__.._from_directory__s
call sym.gettext
add esp, 4
push eax
call sym.imp.__errno_location
push dword [eax]
push 1
call sym.imp.error
add esp, 0x10
mov edx, dword [var_74h]
dec edx
push edx
push dword [0x804f564]
call fcn.0804a04c
add esp, 8
mov eax, dword [arg_18h]
cmp eax, dword [0x804f330]
jle 0x8049d3c
cmp dword [arg_ch], 0
je 0x8049d63
mov ecx, dword [0x804f564]
cmp dword [ecx + 4], 0
je 0x8049d50
mov ecx, dword [ecx + 8]
jmp 0x8049d55
lea esi, [esi]
mov ecx, 0x804dc01
push ecx
mov eax, dword [var_70h]
mov edx, dword [var_6ch]
push edx
push eax
call fcn.080497a8
cmp dword [0x804f328], 0
jne 0x8049d74
mov ecx, dword [var_70h]
mov ebx, dword [var_6ch]
jmp 0x8049d7e
mov ecx, 0
mov ebx, 0
mov eax, ecx
mov edx, ebx
jmp 0x8049dc9
cmp dword [0x804f318], 0
je 0x8049d98
mov edx, dword [arg_18h]
cmp edx, dword [0x804f330]
jle 0x8049d9e
cmp dword [arg_ch], 0
je 0x8049dc3
mov ecx, dword [0x804f564]
cmp dword [ecx + 4], 0
je 0x8049db0
mov ecx, dword [ecx + 8]
jmp 0x8049db5
nop
mov ecx, 0x804dc01
push ecx
mov eax, dword [var_70h]
mov edx, dword [var_6ch]
push edx
push eax
call fcn.080497a8
mov eax, dword [var_70h]
mov edx, dword [var_6ch]
lea esp, [var_98h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_10h]
xor ebx, ebx
mov eax, dword [esi]
test eax, eax
jl 0x804c528
push eax
call sym.imp.fchdir
add esp, 4
test eax, eax
je 0x804c552
mov eax, edi
test edi, edi
jne 0x804c4f4
mov eax, 0x804de42
push eax
test edi, edi
je 0x804c500
mov eax, str._from_
jmp 0x804c505
mov eax, 0x804de42
push eax
mov eax, dword [arg_ch]
test eax, eax
jne 0x804c512
mov eax, str.saved_working_directory
push eax
push str.cannot_return_to__s_s_s
call sym.imp.__errno_location
push dword [eax]
push 0
call sym.imp.error
jmp 0x804c54d
push dword [esi + 4]
call sym.imp.chdir
add esp, 4
test eax, eax
jge 0x804c552
push dword [esi + 4]
push 0x804de7a
call sym.imp.__errno_location
push dword [eax]
push 0
call sym.imp.error
mov ebx, 1
mov eax, ebx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x24
push dword [arg_10h]
push dword [0x804f560]
push 0x200
lea eax, [var_24h]
push eax
mov edx, dword [arg_8h]
mov ecx, dword [arg_ch]
push ecx
push edx
call fcn.0804bec0
add esp, 0x14
push eax
push 0x804db60
call sym.imp.printf
push dword [obj.stdout]
call sym.imp.fflush_unlocked
leave
ret
push ebp
mov ebp, esp
sub esp, 0x74
push edi
push esi
push ebx
mov ebx, dword [arg_10h]
mov esi, dword [arg_14h]
mov ecx, dword [arg_18h]
test ecx, ecx
jge 0x804bee4
neg ecx
mov dword [var_4h], ecx
mov ecx, 1
jmp 0x804beeb
mov esi, esi
mov dword [var_4h], 0
lea eax, [ebx + 0x20]
mov dword [var_10h], eax
mov byte [ebx + 0x20], 0
cmp ecx, esi
jg 0x804c054
mov eax, esi
cdq
idiv ecx
mov dword [var_18h], eax
cdq
mov dword [var_70h], eax
mov dword [var_6ch], edx
mov eax, dword [var_70h]
mul dword [arg_8h]
mov esi, eax
mov edi, edx
mov ecx, dword [var_6ch]
imul ecx, dword [arg_8h]
add edi, ecx
mov ecx, dword [var_70h]
imul ecx, dword [arg_ch]
add edi, ecx
mov dword [var_14h], 0
mov dword [var_8h], 0
mov eax, dword [var_70h]
mov edx, dword [var_6ch]
push edx
push eax
push edi
push esi
call sym.__udivdi3
add esp, 0x10
mov dword [var_70h], eax
mov dword [var_6ch], edx
mov edx, dword [var_70h]
cmp edx, dword [arg_8h]
jne 0x804bf62
mov eax, dword [var_6ch]
cmp eax, dword [arg_ch]
je 0x804c0f7
fild qword [ebp + 8]
fstp xword [ebp - 0x24]
push 0
push 0
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
push edx
push eax
call fcn.0804cc10
add esp, 0x10
mov ecx, eax
cmp ecx, 1
jge 0x804bf91
fld xword [0x804dd20]
fld xword [ebp - 0x24]
faddp st(1)
fstp xword [ebp - 0x24]
fld xword [ebp - 0x24]
sub esp, 8
fstp qword [esp]
pop eax
pop edx
mov dword [var_5ch], eax
mov dword [var_58h], edx
fld qword [ebp - 0x5c]
fimul dword [ebp - 0x18]
cmp dword [var_4h], 0
jne 0x804bfc4
sub esp, 8
fstp qword [esp]
push 0x804dd09
push ebx
call sym.imp.sprintf
jmp 0x804c04a
fld1
mov dword [var_ch], 0
fild dword [ebp - 4]
jmp 0x804bfdc
fxch st(1)
cmp dword [var_ch], 7
ja 0x804bff7
fxch st(1)
fmul st(1), st(0)
inc dword [var_ch]
fld st(1)
fmul st(1)
fcomp st(3)
fnstsw ax
and ah, 0x45
dec ah
cmp ah, 0x40
jb 0x804bfd2
fstp st(0)
jmp 0x804bff9
fstp st(1)
fdivp st(1)
mov edx, dword [var_ch]
movsx esi, byte [edx + 0x804dd00]
push esi
sub esp, 8
fst qword [esp]
push str._.1f_c
push ebx
fstp xword [ebp - 0x68]
call sym.imp.sprintf
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
add esp, 0x14
fld xword [ebp - 0x68]
cmp ecx, 4
jbe 0x804c048
push esi
sub esp, 8
fstp qword [esp]
push str._.0f_c
push ebx
call sym.imp.sprintf
jmp 0x804c04a
fstp st(0)
mov eax, ebx
jmp 0x804c31a
lea esi, [esi]
mov eax, ecx
cdq
idiv esi
mov dword [var_28h], eax
cdq
mov ebx, eax
mov esi, edx
push esi
push ebx
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
push edx
push eax
call sym.__umoddi3
add esp, 0x10
mov dword [var_30h], eax
mov dword [var_2ch], edx
shld edx, eax, 2
shl eax, 2
add eax, dword [var_30h]
adc edx, dword [var_2ch]
mov dword [var_70h], eax
mov dword [var_6ch], edx
mov edx, dword [var_70h]
lea ecx, [edx*2]
mov eax, ecx
cdq
idiv dword [var_28h]
mov dword [var_38h], eax
mov ecx, edx
add ecx, ecx
mov dword [var_34h], ecx
push esi
push ebx
mov eax, dword [arg_8h]
mov edx, dword [arg_ch]
push edx
push eax
call sym.__udivdi3
add esp, 0x10
mov esi, eax
mov edi, edx
mov edx, dword [var_38h]
mov dword [var_8h], edx
mov eax, dword [var_28h]
cmp dword [var_34h], eax
jge 0x804c0dc
cmp dword [var_34h], 0
setg dl
movzx eax, dl
mov dword [var_14h], eax
jmp 0x804c0f7
lea esi, [esi]
mov edx, dword [var_34h]
cmp dword [var_28h], edx
jge 0x804c0f0
mov dword [var_14h], 3
jmp 0x804c0f7
lea esi, [esi]
mov dword [var_14h], 2
cmp dword [var_4h], 0
je 0x804c263
mov eax, dword [var_4h]
cdq
mov dword [var_40h], eax
mov dword [var_3ch], edx
mov dword [var_54h], eax
mov dword [var_50h], edx
cmp dword [var_3ch], edi
ja 0x804c263
jne 0x804c125
cmp dword [var_40h], esi
ja 0x804c263
mov dword [var_ch], 0
mov eax, dword [var_40h]
mov edx, dword [var_3ch]
mov dword [var_48h], eax
mov dword [var_44h], edx
jmp 0x804c154
mov esi, esi
cmp dword [var_50h], edi
jne 0x804c14a
cmp dword [var_54h], esi
ja 0x804c1f8
cmp dword [var_ch], 7
ja 0x804c1f8
mov eax, dword [var_48h]
mov edx, dword [var_44h]
push edx
push eax
push edi
push esi
call sym.__umoddi3
add esp, 0x10
mov ecx, eax
mov ebx, edx
shld edx, eax, 2
shl eax, 2
add eax, ecx
adc edx, ebx
shld edx, eax, 1
shl eax, 1
mov dword [var_70h], eax
mov dword [var_6ch], edx
mov ecx, dword [var_70h]
add ecx, dword [var_8h]
mov eax, ecx
cdq
idiv dword [var_4h]
mov dword [var_4ch], eax
mov ecx, edx
mov eax, dword [var_14h]
mov dword [var_70h], eax
sar dword [var_70h], 1
mov edx, dword [var_70h]
lea ebx, [edx + ecx*2]
mov eax, dword [var_48h]
mov edx, dword [var_44h]
push edx
push eax
push edi
push esi
call sym.__udivdi3
add esp, 0x10
mov esi, eax
mov edi, edx
mov edx, dword [var_4ch]
mov dword [var_8h], edx
cmp ebx, dword [var_4h]
jge 0x804c1d4
add ebx, dword [var_14h]
test ebx, ebx
setg al
movzx edx, al
mov dword [var_14h], edx
jmp 0x804c1ec
add ebx, dword [var_14h]
cmp dword [var_4h], ebx
jge 0x804c1e4
mov ecx, 3
jmp 0x804c1e9
nop
mov ecx, 2
mov dword [var_14h], ecx
inc dword [var_ch]
cmp dword [var_3ch], edi
jbe 0x804c13c
dec dword [var_10h]
mov eax, dword [var_ch]
mov al, byte [eax + 0x804dd00]
mov edx, dword [var_10h]
mov byte [edx], al
test edi, edi
ja 0x804c263
jne 0x804c214
cmp esi, 9
ja 0x804c263
mov eax, dword [var_4ch]
and eax, 1
add eax, dword [var_14h]
cmp eax, 2
jle 0x804c229
mov eax, dword [var_4ch]
inc eax
mov dword [var_8h], eax
cmp dword [var_8h], 0xa
jne 0x804c23c
add esi, 1
adc edi, 0
mov dword [var_8h], 0
test edi, edi
ja 0x804c263
jne 0x804c247
cmp esi, 9
ja 0x804c263
dec dword [var_10h]
mov dl, byte [var_8h]
add dl, 0x30
mov eax, dword [var_10h]
mov byte [eax], dl
dec eax
mov dword [var_10h], eax
mov byte [eax], 0x2e
mov dword [var_8h], 0
mov eax, dword [var_14h]
cdq
mov dword [var_70h], eax
mov dword [var_6ch], edx
mov ecx, esi
mov ebx, edi
and ecx, 1
and ebx, 0
add ecx, dword [var_70h]
adc ebx, dword [var_6ch]
test ebx, ebx
ja 0x804c288
jne 0x804c294
cmp ecx, 2
jbe 0x804c294
mov eax, dword [var_8h]
inc eax
cmp eax, 5
jg 0x804c29a
jmp 0x804c2dc
nop
cmp dword [var_8h], 5
jle 0x804c2dc
add esi, 1
adc edi, 0
mov eax, dword [var_4h]
cdq
mov ecx, eax
mov ebx, edx
cmp esi, ecx
jne 0x804c2dc
cmp edi, ebx
jne 0x804c2dc
cmp dword [var_ch], 7
ja 0x804c2dc
mov edx, dword [var_ch]
mov dl, byte [edx + str.kMGTPEZY_.0f]
mov eax, dword [var_10h]
mov byte [eax], dl
dec eax
mov byte [eax], 0x30
dec eax
mov dword [var_10h], eax
mov byte [eax], 0x2e
mov esi, 1
mov edi, 0
lea esi, [esi]
dec dword [var_10h]
push 0
push 0xa
push edi
push esi
call sym.__umoddi3
add esp, 0x10
mov ecx, eax
mov ebx, edx
add cl, 0x30
mov edx, dword [var_10h]
mov byte [edx], cl
push 0
push 0xa
push edi
push esi
call sym.__udivdi3
add esp, 0x10
mov ecx, eax
mov ebx, edx
mov esi, ecx
mov edi, ebx
mov dword [var_70h], esi
or dword [var_70h], edi
jne 0x804c2dc
mov eax, dword [var_10h]
lea esp, [var_80h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
mov eax, dword [ebx]
test eax, eax
jl 0x804c572
push eax
call sym.imp.close
add esp, 4
mov eax, dword [ebx + 4]
test eax, eax
je 0x804c57f
push eax
call sym.imp.free
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
mov eax, dword [0x804f604]
jmp 0x8049387
mov esi, esi
mov eax, dword [0x804f5fc]
add eax, 4
push eax
push ebx
call sym.imp.strstr
add esp, 8
test eax, eax
je 0x8049380
mov eax, 1
jmp 0x8049393
lea esi, [esi]
mov eax, dword [0x804f5fc]
mov eax, dword [eax]
mov dword [0x804f5fc], eax
cmp dword [eax], 0
jne 0x8049360
xor eax, eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov edi, dword [0x804f568]
mov eax, dword [edi + 8]
cmp dword [edi + 0xc], eax
jb 0x8049ed3
push 0x14
push edi
call fcn.0804c75c
mov edi, eax
mov ebx, dword [edi]
lea edx, [ebx*2]
mov dword [var_4h], edx
mov eax, dword [edi + 8]
lea esi, [eax*2]
shl eax, 5
push eax
push dword [edi + 4]
call fcn.0804c75c
mov dword [edi + 4], eax
lea ebx, [ebx*8 + 0x14]
push ebx
push edi
call fcn.0804c75c
mov edi, eax
mov ecx, dword [var_4h]
mov dword [edi], ecx
mov dword [edi + 8], esi
mov dword [0x804f568], edi
mov esi, dword [edi + 0xc]
call fcn.08049e18
mov ebx, dword [edi + 4]
add esp, 0x18
test esi, esi
jle 0x8049ed3
mov esi, esi
mov edx, dword [ebx + 4]
mov ecx, dword [ebx + 8]
push ecx
push edx
push dword [ebx]
push edi
call fcn.08049eec
add ebx, 0x10
add esp, 0x10
dec esi
test esi, esi
jg 0x8049eb8
mov edx, dword [arg_ch]
mov ecx, dword [arg_10h]
push ecx
push edx
push dword [arg_8h]
push edi
call fcn.08049eec
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0xc
push edi
push esi
push ebx
mov esi, dword [arg_ch]
push dword [arg_8h]
call sym.imp.opendir
mov dword [var_4h], eax
add esp, 4
test eax, eax
je 0x804c675
push esi
call sym.imp.malloc
mov dword [ptr], eax
add esp, 4
test eax, eax
jne 0x804c5c4
mov eax, dword [var_4h]
push eax
call sym.imp.closedir
jmp 0x804c675
mov ebx, dword [ptr]
jmp 0x804c633
lea esi, [esi]
cmp byte [ecx + 0xf], 0x2e
jne 0x804c5df
cmp byte [ecx + 0x10], 0
je 0x804c633
cmp word [ecx + 0x10], 0x2e
je 0x804c633
mov edx, ebx
sub edx, dword [ptr]
add ecx, 0xf
mov dword [var_ch], ecx
mov edi, ecx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
sub edx, ecx
cmp edx, esi
jbe 0x804c621
add esi, 0x400
cmp edx, esi
ja 0x804c5fc
push esi
mov eax, dword [ptr]
push eax
call sym.imp.realloc
mov edx, eax
add esp, 8
test edx, edx
je 0x804c660
sub eax, dword [ptr]
add ebx, eax
mov dword [ptr], edx
mov eax, dword [var_ch]
push eax
push ebx
call sym.imp.__stpcpy
add esp, 8
mov edx, eax
lea ebx, [edx + 1]
mov eax, dword [var_4h]
push eax
call sym.imp.readdir64
mov ecx, eax
add esp, 4
test ecx, ecx
jne 0x804c5cc
mov byte [ebx], 0
mov eax, dword [var_4h]
push eax
call sym.imp.closedir
mov edx, eax
add esp, 4
test edx, edx
jne 0x804c66c
mov eax, dword [ptr]
jmp 0x804c677
nop
mov eax, dword [var_4h]
push eax
call sym.imp.closedir
jmp 0x804c675
nop
mov eax, dword [ptr]
push eax
call sym.imp.free
xor eax, eax
lea esp, [var_18h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov ebx, dword [arg_ch]
mov eax, dword [arg_8h]
mov esi, dword [eax + 4]
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea edi, [esi + ecx - 1]
push edi
mov eax, dword [arg_8h]
push eax
call fcn.08049f94
add esp, 8
push ebx
mov eax, dword [arg_8h]
add esi, dword [eax + 8]
push esi
call sym.imp.strcpy
mov eax, dword [arg_8h]
mov dword [eax + 4], edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov eax, dword [arg_8h]
mov edx, dword [eax]
mov edi, dword [eax + 8]
xor ebx, ebx
cmp ebx, edi
jge 0x804bd2c
mov esi, edx
mov esi, esi
push 0
mov ecx, dword [arg_ch]
push ecx
push dword [esi]
call sym.imp.fnmatch
add esp, 0xc
test eax, eax
jne 0x804bd24
mov eax, 1
jmp 0x804bd2e
nop
add esi, 4
inc ebx
cmp ebx, edi
jl 0x804bd08
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
mov ecx, dword [arg_8h]
mov ebx, dword [arg_ch]
mov esi, dword [arg_10h]
mov edi, dword [arg_14h]
mov eax, ebx
xor edx, edx
div dword [ecx]
lea edx, [ecx + edx*4 + 0x10]
mov dword [var_4h], edx
mov edx, dword [edx]
mov dword [var_8h], edx
test edx, edx
je 0x8049f3b
mov eax, edx
lea esi, [esi]
cmp dword [eax], ebx
jne 0x8049f34
cmp dword [eax + 4], esi
jne 0x8049f34
cmp dword [eax + 8], edi
jne 0x8049f34
mov eax, 1
jmp 0x8049f5c
lea esi, [esi]
mov eax, dword [eax + 0xc]
test eax, eax
jne 0x8049f1c
mov eax, dword [ecx + 0xc]
shl eax, 4
add eax, dword [ecx + 4]
mov edx, dword [var_4h]
mov dword [edx], eax
inc dword [ecx + 0xc]
mov dword [eax], ebx
mov dword [eax + 4], esi
mov dword [eax + 8], edi
mov edx, dword [var_8h]
mov dword [eax + 0xc], edx
xor eax, eax
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
cmp eax, 6
ja case.default.0x804aa23
jmp dword [eax*4 + 0x804dc80]
mov esi, esi
mov eax, str.LC_COLLATE
jmp 0x804aa69
nop
mov eax, str.LC_CTYPE
jmp 0x804aa69
nop
mov eax, str.LC_MONETARY
jmp 0x804aa69
nop
mov eax, str.LC_NUMERIC
jmp 0x804aa69
nop
mov eax, str.LC_TIME
jmp 0x804aa69
nop
mov eax, str.LC_MESSAGES
jmp 0x804aa69
nop
mov eax, str.LC_ALL
jmp 0x804aa69
nop
mov eax, str.LC_XXX
leave
ret
push ebp
mov ebp, esp
push 0x804dc9c
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x804aa85
cmp byte [eax], 0
jne 0x804aac7
push str.LC_ALL
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x804aa9b
cmp byte [eax], 0
jne 0x804aac7
push dword [name]
call sym.imp.getenv
add esp, 4
test eax, eax
je 0x804aaaf
cmp byte [eax], 0
jne 0x804aac7
push str.LANG
call sym.imp.getenv
test eax, eax
je 0x804aac2
cmp byte [eax], 0
jne 0x804aac7
mov eax, 0x804dc2b
leave
ret
push ebp
mov ebp, esp
sub esp, 0x28
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
push 0
mov eax, dword [arg_10h]
push eax
push 0
push 0
push 0
push 0
push 0
push 0
push 0
push esi
push 0
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
push ecx
push ebx
push 0x804f5f4
call fcn.0804b4a8
mov edi, eax
add esp, 0x38
test edi, edi
je 0x804ab98
cmp dword [edi + 4], 0
jne 0x804ab48
push edi
call fcn.0804ac80
add esp, 4
cmp dword [edi + 8], 0
jne 0x804ac75
xor esi, esi
cmp dword [edi + 0x10], 0
je 0x804ab82
lea ebx, [edi + 0x10]
lea esi, [esi]
mov edx, dword [ebx]
cmp dword [edx + 4], 0
jne 0x804ab73
push edx
call fcn.0804ac80
add esp, 4
mov edx, dword [ebx]
cmp dword [edx + 8], 0
jne 0x804ab82
add ebx, 4
inc esi
cmp dword [ebx], 0
jne 0x804ab60
test esi, esi
jl 0x804ab8c
mov edx, edi
jmp 0x804ab8e
mov esi, esi
xor edx, edx
mov eax, edx
jmp 0x804ac77
lea esi, [esi]
push esi
call fcn.0804af98
mov dword [var_24h], eax
add esp, 4
test eax, eax
je 0x804abb7
push eax
call sym.imp.__strdup
add esp, 4
mov esi, eax
test esi, esi
je 0x804ac24
lea eax, [var_4h]
push eax
lea eax, [var_8h]
push eax
lea eax, [var_ch]
push eax
lea eax, [var_10h]
push eax
lea eax, [var_14h]
push eax
lea eax, [var_18h]
push eax
lea eax, [var_1ch]
push eax
lea eax, [var_20h]
push eax
push esi
call fcn.0804ba18
mov edx, eax
add esp, 0x24
push 1
mov eax, dword [arg_10h]
push eax
push dword [var_4h]
push dword [var_8h]
push dword [var_ch]
push dword [var_1ch]
push dword [var_10h]
push dword [var_14h]
push dword [var_18h]
push dword [var_20h]
push edx
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
push ecx
push ebx
push 0x804f5f4
call fcn.0804b4a8
mov edi, eax
add esp, 0x38
test edi, edi
jne 0x804ac28
xor eax, eax
jmp 0x804ac77
cmp dword [edi + 4], 0
jne 0x804ac37
push edi
call fcn.0804ac80
add esp, 4
cmp dword [edi + 8], 0
jne 0x804ac69
cmp dword [edi + 0x10], 0
je 0x804ac69
lea ebx, [edi + 0x10]
mov esi, esi
mov edx, dword [ebx]
cmp dword [edx + 4], 0
jne 0x804ac5b
push edx
call fcn.0804ac80
add esp, 4
mov edx, dword [ebx]
cmp dword [edx + 8], 0
jne 0x804ac69
add ebx, 4
cmp dword [ebx], 0
jne 0x804ac48
cmp dword [var_24h], 0
je 0x804ac75
push esi
call sym.imp.free
mov eax, edi
lea esp, [var_34h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x30
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
cmp dword [ebx + 4], 0
jne 0x804a60f
push ebx
call fcn.0804ac80
add esp, 4
mov ebx, dword [ebx + 8]
mov dword [var_4h], ebx
test ebx, ebx
je 0x804aa08
mov eax, dword [var_4h]
cmp dword [eax + 0x1c], 2
jbe 0x804a904
mov ecx, dword [eax + 0x20]
mov esi, ecx
test esi, esi
je 0x804a904
mov edi, dword [s1]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
mov dword [var_8h], ecx
mov ebx, dword [s1]
xor ecx, ecx
cmp byte [ebx], 0
je 0x804a674
shl ecx, 4
movsx eax, byte [ebx]
add ecx, eax
inc ebx
mov edi, ecx
and edi, 0xf0000000
je 0x804a64f
mov eax, edi
shr eax, 0x18
xor ecx, eax
xor ecx, edi
jmp 0x804a64f
mov esi, esi
mov edx, dword [var_4h]
mov edx, dword [edx + 0x1c]
mov dword [var_28h], edx
mov eax, ecx
xor edx, edx
div dword [var_28h]
mov dword [var_ch], edx
mov eax, dword [var_28h]
add eax, 0xfffffffe
mov dword [var_20h], eax
mov eax, ecx
xor edx, edx
div dword [var_20h]
mov ebx, edx
inc ebx
mov dword [var_10h], ebx
mov eax, dword [var_4h]
mov eax, dword [eax + 0xc]
mov dword [var_1ch], eax
mov edi, eax
test edi, edi
je 0x804a6e8
mov edx, dword [var_ch]
mov esi, dword [esi + edx*4]
mov dword [var_20h], esi
mov ebx, esi
shl ebx, 0x18
mov dword [var_24h], esi
and dword [var_24h], 0xff00
shl dword [var_24h], 8
or ebx, dword [var_24h]
shr dword [var_20h], 8
mov eax, dword [var_20h]
mov dword [var_24h], eax
and dword [var_24h], 0xff00
or ebx, dword [var_24h]
shr eax, 0x10
or ebx, eax
jmp 0x804a6ee
mov esi, esi
mov edx, dword [var_ch]
mov ebx, dword [esi + edx*4]
test ebx, ebx
je 0x804aa08
test edi, edi
je 0x804a748
mov eax, dword [var_4h]
mov esi, dword [eax + 0x14]
mov ecx, dword [esi + ebx*8 - 8]
mov dword [var_24h], ecx
shl dword [var_24h], 0x18
mov dword [var_20h], ecx
and dword [var_20h], 0xff00
shl dword [var_20h], 8
mov edx, dword [var_20h]
or dword [var_24h], edx
shr ecx, 8
mov dword [var_20h], ecx
and dword [var_20h], 0xff00
mov eax, dword [var_20h]
or dword [var_24h], eax
shr ecx, 0x10
or dword [var_24h], ecx
mov edx, dword [var_8h]
cmp dword [var_24h], edx
je 0x804a757
jmp 0x804a7c8
lea esi, [esi]
mov eax, dword [var_4h]
mov esi, dword [eax + 0x14]
mov edx, dword [var_8h]
cmp dword [esi + ebx*8 - 8], edx
jne 0x804a7c8
mov eax, dword [var_4h]
mov eax, dword [eax]
mov dword [var_14h], eax
test edi, edi
je 0x804a790
mov ecx, dword [esi + ebx*8 - 4]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
shr ecx, 8
mov eax, ecx
and eax, 0xff00
or edx, eax
shr ecx, 0x10
or edx, ecx
mov ecx, dword [var_14h]
add ecx, edx
jmp 0x804a797
mov ecx, dword [var_14h]
add ecx, dword [esi + ebx*8 - 4]
push ecx
mov edx, dword [s1]
push edx
call sym.imp.strcmp
add esp, 8
mov ecx, eax
test ecx, ecx
jne 0x804a7c8
mov eax, dword [var_4h]
mov esi, dword [eax]
cmp dword [eax + 0xc], 0
je 0x804a8f0
mov edx, dword [eax + 0x18]
mov ecx, dword [edx + ebx*8 - 4]
jmp 0x804a9b9
lea esi, [esi]
mov eax, dword [var_4h]
mov ebx, dword [eax + 0x1c]
sub ebx, dword [var_10h]
mov ecx, dword [eax + 0x20]
mov edx, dword [eax + 0xc]
mov dword [var_1ch], edx
cmp dword [var_ch], ebx
jb 0x804a7e4
sub dword [var_ch], ebx
jmp 0x804a7ea
mov eax, dword [var_10h]
add dword [var_ch], eax
cmp dword [var_1ch], 0
je 0x804a82c
mov edx, dword [var_ch]
mov ecx, dword [ecx + edx*4]
mov dword [var_20h], ecx
mov ebx, ecx
shl ebx, 0x18
mov dword [var_24h], ecx
and dword [var_24h], 0xff00
shl dword [var_24h], 8
or ebx, dword [var_24h]
shr dword [var_20h], 8
mov eax, dword [var_20h]
mov dword [var_24h], eax
and dword [var_24h], 0xff00
or ebx, dword [var_24h]
shr eax, 0x10
or ebx, eax
jmp 0x804a832
mov esi, esi
mov edx, dword [var_ch]
mov ebx, dword [ecx + edx*4]
test ebx, ebx
je 0x804aa08
mov eax, dword [var_4h]
mov esi, dword [eax + 0x14]
cmp dword [var_1ch], 0
je 0x804a878
mov ecx, dword [esi + ebx*8 - 8]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
shr ecx, 8
mov eax, ecx
and eax, 0xff00
or edx, eax
shr ecx, 0x10
or edx, ecx
cmp edx, dword [var_8h]
je 0x804a885
jmp 0x804a7c8
mov esi, esi
mov edx, dword [var_8h]
cmp dword [esi + ebx*8 - 8], edx
jne 0x804a7c8
mov eax, dword [var_4h]
mov edi, dword [eax]
cmp dword [var_1ch], 0
je 0x804a8bc
mov ecx, dword [esi + ebx*8 - 4]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
shr ecx, 8
mov eax, ecx
and eax, 0xff00
or edx, eax
shr ecx, 0x10
or edx, ecx
lea ecx, [edx + edi]
jmp 0x804a8c2
nop
mov ecx, edi
add ecx, dword [esi + ebx*8 - 4]
push ecx
mov edx, dword [s1]
push edx
call sym.imp.strcmp
add esp, 8
mov ecx, eax
test ecx, ecx
jne 0x804a7c8
mov eax, dword [var_4h]
mov esi, dword [eax]
cmp dword [eax + 0xc], 0
je 0x804a8f0
mov edx, dword [eax + 0x18]
mov ecx, dword [edx + ebx*8 - 4]
jmp 0x804a9b9
mov edx, dword [var_4h]
mov edx, dword [edx + 0x18]
mov ecx, esi
add ecx, dword [edx + ebx*8 - 4]
jmp 0x804aa0e
lea esi, [esi]
xor edi, edi
mov eax, dword [var_4h]
mov esi, dword [eax + 0x10]
cmp edi, esi
jae 0x804aa0c
lea ebx, [esi + edi]
shr ebx, 1
mov edx, dword [var_4h]
mov edx, dword [edx]
mov dword [var_18h], edx
mov eax, dword [var_4h]
cmp dword [eax + 0xc], 0
je 0x804a970
mov edx, dword [eax + 0x14]
mov ecx, dword [edx + ebx*8 + 4]
mov dword [var_24h], ecx
shl dword [var_24h], 0x18
mov dword [var_20h], ecx
and dword [var_20h], 0xff00
shl dword [var_20h], 8
mov eax, dword [var_20h]
or dword [var_24h], eax
shr ecx, 8
mov dword [var_20h], ecx
and dword [var_20h], 0xff00
mov edx, dword [var_20h]
or dword [var_24h], edx
shr ecx, 0x10
or dword [var_24h], ecx
mov ecx, dword [var_18h]
add ecx, dword [var_24h]
jmp 0x804a97d
mov esi, esi
mov eax, dword [var_4h]
mov eax, dword [eax + 0x14]
mov ecx, dword [var_18h]
add ecx, dword [eax + ebx*8 + 4]
push ecx
mov edx, dword [s1]
push edx
call sym.imp.strcmp
add esp, 8
mov ecx, eax
test ecx, ecx
jge 0x804a994
mov esi, ebx
jmp 0x804a99b
test ecx, ecx
jle 0x804a9a3
lea edi, [ebx + 1]
cmp edi, esi
jb 0x804a914
cmp edi, esi
jae 0x804aa0c
mov eax, dword [var_4h]
mov esi, dword [eax]
cmp dword [eax + 0xc], 0
je 0x804a9f8
mov edx, dword [eax + 0x18]
mov ecx, dword [edx + ebx*8 + 4]
mov dword [var_24h], ecx
shl dword [var_24h], 0x18
mov dword [var_20h], ecx
and dword [var_20h], 0xff00
shl dword [var_20h], 8
mov eax, dword [var_20h]
or dword [var_24h], eax
shr ecx, 8
mov dword [var_20h], ecx
and dword [var_20h], 0xff00
mov edx, dword [var_20h]
or dword [var_24h], edx
shr ecx, 0x10
or dword [var_24h], ecx
mov eax, dword [var_24h]
lea ecx, [eax + esi]
jmp 0x804aa0e
lea esi, [esi]
mov edx, dword [var_4h]
mov edx, dword [edx + 0x18]
mov ecx, esi
add ecx, dword [edx + ebx*8 + 4]
jmp 0x804aa0e
mov esi, esi
xor eax, eax
jmp 0x804aa10
xor ecx, ecx
mov eax, ecx
lea esp, [var_3ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x74
push edi
push esi
push ebx
mov dword [var_6ch], 0
mov esi, dword [arg_8h]
mov dword [esi + 4], 1
mov dword [esi + 8], 0
mov eax, dword [esi]
test eax, eax
je 0x804af8e
push 0
push eax
call sym.imp.open64
mov dword [fildes], eax
add esp, 8
cmp eax, 0xffffffff
je 0x804af8e
lea eax, [var_60h]
push eax
mov esi, dword [fildes]
push esi
push 3
call sym.imp.__fxstat64
add esp, 0xc
test eax, eax
jne 0x804af7c
mov esi, dword [var_34h]
mov dword [length], esi
mov dword [size], esi
mov dword [var_70h], 0
cmp dword [size], esi
jne 0x804af7c
mov esi, dword [var_70h]
cmp esi, dword [var_30h]
jne 0x804af7c
cmp dword [length], 0x1b
jbe 0x804af7c
push 0
push 0
mov esi, dword [fildes]
push esi
push 2
push 1
mov esi, dword [size]
push esi
push 0
call sym.imp.mmap64
mov edi, eax
add esp, 0x1c
cmp edi, 0xffffffff
je 0x804ad40
mov esi, dword [fildes]
push esi
call sym.imp.close
mov dword [var_6ch], 1
jmp 0x804ad83
mov esi, esi
mov esi, dword [size]
push esi
call sym.imp.malloc
mov edi, eax
add esp, 4
test edi, edi
je 0x804af8e
mov ebx, dword [size]
mov dword [size], edi
push ebx
mov esi, dword [size]
push esi
mov esi, dword [fildes]
push esi
call sym.imp.read
add esp, 0xc
cmp eax, 0xffffffff
je 0x804af7c
add dword [size], eax
sub ebx, eax
jne 0x804ad5c
push esi
call sym.imp.close
add esp, 4
mov eax, dword [edi]
cmp eax, 0x950412de
je 0x804adb8
cmp eax, 0xde120495
je 0x804adb8
cmp dword [var_6ch], 0
je 0x804adac
mov esi, dword [length]
push esi
push edi
call sym.imp.munmap
jmp 0x804af8e
nop
push edi
call sym.imp.free
jmp 0x804af8e
nop
push 0x24
call sym.imp.malloc
mov ebx, eax
mov esi, dword [arg_8h]
mov dword [esi + 8], ebx
add esp, 4
test ebx, ebx
je 0x804af8e
mov dword [ebx], edi
mov esi, dword [var_6ch]
mov dword [ebx + 4], esi
mov esi, dword [length]
mov dword [ebx + 8], esi
cmp dword [edi], 0x950412de
setne al
and eax, 0xff
mov dword [ebx + 0xc], eax
test eax, eax
je 0x804ae20
mov eax, dword [edi + 4]
mov ecx, eax
shl ecx, 0x18
mov edx, eax
and edx, 0xff00
shl edx, 8
or ecx, edx
shr eax, 8
mov edx, eax
and edx, 0xff00
or ecx, edx
shr eax, 0x10
or ecx, eax
jmp 0x804ae23
mov esi, esi
mov ecx, dword [edi + 4]
test ecx, ecx
jne 0x804af48
cmp dword [ebx + 0xc], 0
je 0x804ae5c
mov eax, dword [edi + 8]
mov ecx, eax
shl ecx, 0x18
mov edx, eax
and edx, 0xff00
shl edx, 8
or ecx, edx
shr eax, 8
mov edx, eax
and edx, 0xff00
or ecx, edx
shr eax, 0x10
or ecx, eax
jmp 0x804ae5f
mov esi, esi
mov ecx, dword [edi + 8]
mov dword [ebx + 0x10], ecx
cmp dword [ebx + 0xc], 0
je 0x804ae94
mov ecx, dword [edi + 0xc]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
shr ecx, 8
mov eax, ecx
and eax, 0xff00
or edx, eax
shr ecx, 0x10
or edx, ecx
lea eax, [edx + edi]
jmp 0x804ae99
mov esi, esi
mov eax, edi
add eax, dword [eax + 0xc]
mov dword [ebx + 0x14], eax
cmp dword [ebx + 0xc], 0
je 0x804aecc
mov ecx, dword [edi + 0x10]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
shr ecx, 8
mov eax, ecx
and eax, 0xff00
or edx, eax
shr ecx, 0x10
or edx, ecx
lea eax, [edx + edi]
jmp 0x804aed1
mov eax, edi
add eax, dword [eax + 0x10]
mov dword [ebx + 0x18], eax
cmp dword [ebx + 0xc], 0
je 0x804af04
mov eax, dword [edi + 0x14]
mov ecx, eax
shl ecx, 0x18
mov edx, eax
and edx, 0xff00
shl edx, 8
or ecx, edx
shr eax, 8
mov edx, eax
and edx, 0xff00
or ecx, edx
shr eax, 0x10
or ecx, eax
jmp 0x804af07
nop
mov ecx, dword [edi + 0x14]
mov dword [ebx + 0x1c], ecx
cmp dword [ebx + 0xc], 0
je 0x804af3c
mov ecx, dword [edi + 0x18]
mov edx, ecx
shl edx, 0x18
mov eax, ecx
and eax, 0xff00
shl eax, 8
or edx, eax
shr ecx, 8
mov eax, ecx
and eax, 0xff00
or edx, eax
shr ecx, 0x10
or edx, ecx
lea eax, [edx + edi]
jmp 0x804af41
mov esi, esi
mov eax, edi
add eax, dword [edi + 0x18]
mov dword [ebx + 0x20], eax
jmp 0x804af88
mov esi, esi
cmp dword [var_6ch], 0
je 0x804af60
mov esi, dword [length]
push esi
push edi
call sym.imp.munmap
add esp, 8
jmp 0x804af69
lea esi, [esi]
push edi
call sym.imp.free
add esp, 4
push ebx
call sym.imp.free
mov esi, dword [arg_8h]
mov dword [esi + 8], 0
jmp 0x804af8e
nop
mov esi, dword [fildes]
push esi
call sym.imp.close
jmp 0x804af8e
nop
inc dword [obj._nl_msg_cat_cntr]
lea esp, [var_80h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x2c
push edi
push esi
push ebx
mov edi, dword [arg_18h]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov esi, dword [n]
lea edx, [esi + ecx - 1]
mov eax, dword [arg_14h]
mov dword [var_ch], eax
and dword [var_ch], 0x20
je 0x804b4e4
mov edi, dword [arg_1ch]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
add edx, ecx
mov esi, dword [arg_14h]
mov dword [var_10h], esi
and dword [var_10h], 0x10
je 0x804b501
mov edi, dword [arg_20h]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
add edx, ecx
mov esi, dword [arg_14h]
mov dword [var_14h], esi
and dword [var_14h], 8
je 0x804b51e
mov edi, dword [arg_24h]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
add edx, ecx
test byte [arg_14h], 0xc0
je 0x804b535
mov edi, dword [arg_28h]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
add edx, ecx
mov esi, dword [arg_14h]
mov dword [var_18h], esi
and dword [var_18h], 4
je 0x804b552
mov edi, dword [arg_2ch]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
add edx, ecx
mov edi, dword [arg_38h]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ebx, [ecx - 1]
mov esi, dword [arg_14h]
mov dword [var_1ch], esi
and dword [var_1ch], 3
je 0x804b5c0
mov eax, esi
test al, 2
je 0x804b58c
mov edi, dword [arg_30h]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
inc ecx
mov dword [ptr], ecx
jmp 0x804b593
nop
mov dword [ptr], 1
mov eax, dword [arg_14h]
test al, 1
je 0x804b5b4
mov edi, dword [arg_34h]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
add ecx, dword [ptr]
add edx, ecx
lea edx, [edx + ebx + 2]
jmp 0x804b5c4
add edx, dword [ptr]
lea edx, [edx + ebx + 2]
jmp 0x804b5c4
lea esi, [esi]
lea edx, [ecx + edx + 1]
push edx
call sym.imp.malloc
mov dword [ptr], eax
add esp, 4
test eax, eax
je 0x804b7d1
mov esi, dword [n]
push esi
mov eax, dword [s2]
push eax
mov esi, dword [ptr]
push esi
call sym.imp.memcpy
push 0x3a
mov eax, dword [n]
push eax
push esi
call sym.imp.__argz_stringify
mov eax, dword [n]
lea edi, [esi + eax - 1]
mov byte [edi], 0x2f
inc edi
add esp, 0x18
mov esi, dword [arg_18h]
push esi
push edi
call sym.imp.__stpcpy
add esp, 8
mov edi, eax
cmp dword [var_ch], 0
je 0x804b62b
mov byte [edi], 0x5f
inc edi
mov eax, dword [arg_1ch]
push eax
push edi
call sym.imp.__stpcpy
add esp, 8
mov edi, eax
cmp dword [var_10h], 0
je 0x804b644
mov byte [edi], 0x2e
inc edi
mov esi, dword [arg_20h]
push esi
push edi
call sym.imp.__stpcpy
add esp, 8
mov edi, eax
cmp dword [var_14h], 0
je 0x804b65d
mov byte [edi], 0x2e
inc edi
mov eax, dword [arg_24h]
push eax
push edi
call sym.imp.__stpcpy
add esp, 8
mov edi, eax
test byte [arg_14h], 0xc0
je 0x804b693
mov ecx, edi
inc edi
mov eax, dword [arg_14h]
test al, 0x40
je 0x804b680
mov dl, 0x2b
jmp 0x804b682
lea esi, [esi]
mov dword [var_4h], 0
jmp 0x804b740
mov dl, 0x40
mov byte [ecx], dl
mov esi, dword [arg_28h]
push esi
push edi
call sym.imp.__stpcpy
add esp, 8
mov edi, eax
cmp dword [var_18h], 0
je 0x804b6ac
mov byte [edi], 0x2b
inc edi
mov eax, dword [arg_2ch]
push eax
push edi
call sym.imp.__stpcpy
add esp, 8
mov edi, eax
cmp dword [var_1ch], 0
je 0x804b6e9
mov byte [edi], 0x2c
inc edi
mov ebx, dword [arg_14h]
and ebx, 1
mov eax, dword [arg_14h]
test al, 2
je 0x804b6d2
mov esi, dword [arg_30h]
push esi
push edi
call sym.imp.__stpcpy
add esp, 8
mov edi, eax
test ebx, ebx
je 0x804b6e9
mov byte [edi], 0x5f
inc edi
mov eax, dword [arg_34h]
push eax
push edi
call sym.imp.__stpcpy
add esp, 8
mov edi, eax
mov byte [edi], 0x2f
inc edi
mov esi, dword [arg_38h]
push esi
push edi
call sym.imp.__stpcpy
add esp, 8
xor edi, edi
mov eax, dword [arg_8h]
mov eax, dword [eax]
mov dword [var_4h], eax
test eax, eax
je 0x804b740
mov esi, dword [var_4h]
mov edx, dword [esi]
test edx, edx
je 0x804b72d
mov eax, dword [ptr]
push eax
push edx
call sym.imp.strcmp
add esp, 8
mov edx, eax
test edx, edx
je 0x804b73a
jl 0x804b674
mov edi, dword [var_4h]
mov esi, dword [var_4h]
mov esi, dword [esi + 0xc]
mov dword [var_4h], esi
test esi, esi
jne 0x804b708
cmp dword [var_4h], 0
jne 0x804b746
cmp dword [arg_3ch], 0
jne 0x804b754
mov eax, dword [ptr]
push eax
call sym.imp.free
jmp 0x804b952
mov esi, dword [n]
push esi
mov eax, dword [s2]
push eax
call sym.imp.__argz_count
mov ebx, eax
add esp, 8
mov edx, dword [arg_14h]
and edx, 0xffffaaaa
sar edx, 1
mov esi, dword [arg_14h]
mov dword [var_24h], esi
and dword [var_24h], 0x5555
add edx, dword [var_24h]
mov dword [var_24h], edx
and dword [var_24h], 0xffffcccc
sar dword [var_24h], 2
and edx, 0x3333
add edx, dword [var_24h]
mov dword [var_24h], edx
sar dword [var_24h], 4
add edx, dword [var_24h]
and edx, 0xf0f
mov dword [var_24h], edx
sar dword [var_24h], 8
mov ecx, dword [var_24h]
add ecx, edx
movzx ecx, cl
shl ebx, cl
lea ebx, [ebx*4 + 0x14]
push ebx
call sym.imp.malloc
mov dword [var_4h], eax
add esp, 4
test eax, eax
jne 0x804b7d8
xor eax, eax
jmp 0x804b955
mov esi, dword [ptr]
mov eax, dword [var_4h]
mov dword [eax], esi
xor ebx, ebx
mov eax, dword [n]
push eax
mov esi, dword [s2]
push esi
call sym.imp.__argz_count
mov edx, eax
add esp, 8
cmp edx, 1
jne 0x804b804
mov eax, dword [arg_14h]
and eax, 0x18
cmp eax, 0x18
jne 0x804b809
mov ebx, 1
mov eax, dword [var_4h]
mov dword [eax + 4], ebx
mov dword [eax + 8], 0
test edi, edi
jne 0x804b82c
mov esi, dword [arg_8h]
mov esi, dword [esi]
mov dword [eax + 0xc], esi
mov esi, dword [arg_8h]
mov dword [esi], eax
jmp 0x804b838
lea esi, [esi]
mov esi, dword [edi + 0xc]
mov eax, dword [var_4h]
mov dword [eax + 0xc], esi
mov dword [edi + 0xc], eax
mov dword [var_8h], 0
mov eax, dword [n]
push eax
mov esi, dword [s2]
push esi
call sym.imp.__argz_count
add esp, 8
mov edx, eax
cmp edx, 1
jne 0x804b85c
mov eax, dword [arg_14h]
dec eax
jmp 0x804b85f
mov eax, dword [arg_14h]
mov dword [ptr], eax
mov esi, dword [var_4h]
add esi, 0x10
mov dword [var_20h], esi
cmp dword [ptr], 0
jl 0x804b945
lea esi, [esi]
mov eax, dword [arg_14h]
not eax
test dword [ptr], eax
jne 0x804b93c
test byte [ptr], 0x47
je 0x804b896
test byte [ptr], 0x98
jne 0x804b93c
mov eax, dword [ptr]
and eax, 0x18
cmp eax, 0x18
je 0x804b93c
xor ebx, ebx
jmp 0x804b924
lea esi, [esi]
push 1
mov eax, dword [arg_38h]
push eax
mov esi, dword [arg_34h]
push esi
mov eax, dword [arg_30h]
push eax
mov esi, dword [arg_2ch]
push esi
mov eax, dword [arg_28h]
push eax
mov esi, dword [arg_24h]
push esi
mov eax, dword [arg_20h]
push eax
mov esi, dword [arg_1ch]
push esi
mov eax, dword [arg_18h]
push eax
mov eax, dword [ptr]
push eax
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
push ecx
push ebx
mov esi, dword [arg_8h]
push esi
call fcn.0804b4a8
mov edx, eax
mov eax, dword [var_8h]
mov esi, dword [var_20h]
mov dword [esi + eax*4], edx
inc eax
mov dword [var_8h], eax
add esp, 0x38
test ebx, ebx
je 0x804b924
mov edi, dword [s2]
add edi, dword [n]
cmp ebx, edi
jae 0x804b930
push 0
push ebx
call sym.imp.__rawmemchr
add esp, 8
lea edx, [eax + 1]
cmp edx, edi
jb 0x804b932
jmp 0x804b930
nop
cmp dword [n], 0
je 0x804b930
mov edx, dword [s2]
jmp 0x804b932
nop
xor edx, edx
mov ebx, edx
test ebx, ebx
jne 0x804b8ac
dec dword [ptr]
jns 0x804b878
mov eax, dword [var_8h]
mov esi, dword [var_20h]
mov dword [esi + eax*4], 0
mov eax, dword [var_4h]
lea esp, [var_38h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
xor esi, esi
jmp 0x804b00d
lea esi, [esi]
xor ebx, ebx
mov esi, esi
mov edx, dword [0x804f358]
mov al, byte [edx]
test al, al
je 0x804b009
cmp al, 0x3a
jne 0x804afcf
mov eax, edx
lea edi, [edx + 1]
mov dword [0x804f358], edi
mov edx, edi
cmp byte [eax + 1], 0x3a
je 0x804afbc
mov ecx, dword [0x804f358]
mov edx, ecx
cmp byte [ecx], 0
je 0x804aff3
cmp byte [edx], 0x3a
je 0x804aff3
lea edi, [edx + 1]
mov dword [0x804f358], edi
mov al, byte [edx + 1]
mov edx, edi
test al, al
jne 0x804afdc
cmp ecx, edx
jae 0x804b005
sub edx, ecx
push edx
push ecx
call fcn.0804b050
mov ebx, eax
add esp, 8
test ebx, ebx
je 0x804afac
test ebx, ebx
je 0x804b045
mov edi, dword [arg_8h]
mov dword [key], edi
mov eax, dword [0x804f350]
test eax, eax
je 0x804b038
push fcn.0804b3c8
push 8
push eax
push dword [0x804f5f8]
lea eax, [key]
push eax
call sym.imp.bsearch
add esp, 0x14
jmp 0x804b03a
xor eax, eax
test eax, eax
je 0x804afa8
mov esi, dword [eax + 4]
mov eax, esi
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov eax, dword [arg_ch]
mov ecx, dword [arg_10h]
mov dword [ecx], 0
mov ecx, dword [arg_14h]
mov dword [ecx], 0
mov ecx, dword [s1]
mov dword [ecx], 0
mov ecx, dword [ptr]
mov dword [ecx], 0
mov ecx, dword [arg_20h]
mov dword [ecx], 0
mov ecx, dword [arg_24h]
mov dword [ecx], 0
mov ecx, dword [arg_28h]
mov dword [ecx], 0
xor esi, esi
xor edi, edi
mov ebx, dword [arg_8h]
mov dword [eax], ebx
jmp 0x804ba76
mov esi, esi
cmp dl, 0x2c
je 0x804ba8b
inc ebx
mov dl, byte [ebx]
test dl, dl
je 0x804ba8b
cmp dl, 0x5f
je 0x804ba8b
cmp dl, 0x40
je 0x804ba8b
cmp dl, 0x2b
jne 0x804ba70
cmp dword [eax], ebx
jne 0x804baa0
push 0
push ebx
call sym.imp.__rawmemchr
mov ebx, eax
jmp 0x804bb43
mov esi, esi
cmp dl, 0x5f
jne 0x804bb45
mov byte [ebx], 0
inc ebx
mov ecx, dword [arg_14h]
mov dword [ecx], ebx
jmp 0x804baba
cmp dl, 0x5f
je 0x804bad4
inc ebx
mov dl, byte [ebx]
test dl, dl
je 0x804bad4
cmp dl, 0x2e
je 0x804bad4
cmp dl, 0x40
je 0x804bad4
cmp dl, 0x2b
je 0x804bad4
cmp dl, 0x2c
jne 0x804bab4
or esi, 0x20
cmp dl, 0x2e
jne 0x804bb45
mov edi, 1
mov byte [ebx], 0
inc ebx
mov ecx, dword [s1]
mov dword [ecx], ebx
jmp 0x804baf2
cmp dl, 0x40
je 0x804baf8
inc ebx
mov dl, byte [ebx]
test dl, dl
jne 0x804baec
or esi, 0x10
mov ecx, dword [s1]
mov ecx, dword [ecx]
mov dword [var_4h], ecx
cmp ecx, ebx
je 0x804bb45
cmp byte [ecx], 0
je 0x804bb45
mov eax, ebx
sub eax, ecx
push eax
push ecx
call fcn.0804b960
mov ecx, dword [ptr]
mov dword [ecx], eax
add esp, 8
push eax
mov ecx, dword [s1]
push dword [ecx]
call sym.imp.strcmp
add esp, 8
test eax, eax
jne 0x804bb40
mov ecx, dword [ptr]
push dword [ecx]
call sym.imp.free
jmp 0x804bb43
lea esi, [esi]
or esi, 8
mov dl, byte [ebx]
cmp dl, 0x40
jne 0x804bb54
mov edi, 1
jmp 0x804bb67
lea esi, [esi]
cmp edi, 1
je 0x804bc09
cmp dl, 0x2b
jne 0x804bb95
mov edi, 2
mov byte [ebx], 0
inc ebx
mov ecx, dword [arg_10h]
mov dword [ecx], ebx
jmp 0x804bb7a
mov esi, esi
cmp dl, 0x5f
je 0x804bb8f
inc ebx
cmp edi, 2
jne 0x804bb8f
mov dl, byte [ebx]
test dl, dl
je 0x804bb8f
cmp dl, 0x2b
je 0x804bb8f
cmp dl, 0x2c
jne 0x804bb74
or esi, 0xc0
cmp edi, 1
je 0x804bc09
mov dl, byte [ebx]
mov al, dl
add al, 0xd5
cmp al, 1
jbe 0x804bba9
cmp dl, 0x5f
jne 0x804bc04
mov edi, 2
cmp dl, 0x2b
jne 0x804bbd4
mov byte [ebx], 0
inc ebx
mov ecx, dword [arg_20h]
mov dword [ecx], ebx
jmp 0x804bbc6
mov esi, esi
cmp dl, 0x5f
je 0x804bbd1
inc ebx
mov dl, byte [ebx]
test dl, dl
je 0x804bbd1
cmp dl, 0x2c
jne 0x804bbc0
or esi, 4
cmp dl, 0x2c
jne 0x804bbf3
mov byte [ebx], 0
inc ebx
mov ecx, dword [arg_24h]
mov dword [ecx], ebx
jmp 0x804bbea
cmp dl, 0x5f
je 0x804bbf0
inc ebx
mov dl, byte [ebx]
test dl, dl
jne 0x804bbe4
or esi, 2
cmp dl, 0x5f
jne 0x804bc04
mov byte [ebx], 0
inc ebx
mov ecx, dword [arg_28h]
mov dword [ecx], ebx
or esi, 1
cmp edi, 1
jne 0x804bc47
mov ecx, dword [arg_14h]
mov eax, dword [ecx]
mov ecx, dword [s1]
mov ecx, dword [ecx]
mov dword [var_4h], ecx
test eax, eax
je 0x804bc22
cmp byte [eax], 0
jne 0x804bc22
and esi, 0xffffffdf
cmp dword [var_4h], 0
je 0x804bc33
mov ecx, dword [var_4h]
cmp byte [ecx], 0
jne 0x804bc33
and esi, 0xffffffef
mov ecx, dword [arg_10h]
mov eax, dword [ecx]
test eax, eax
je 0x804bc47
cmp byte [eax], 0
jne 0x804bc47
and esi, 0xffffff7f
mov eax, esi
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x401c
push edi
push esi
push ebx
mov eax, dword [arg_ch]
lea edx, [eax + 0x11]
and edx, 0xfffffffc
sub esp, edx
mov ebx, esp
push 0xe
push str._locale.alias
push eax
push dword [arg_8h]
push ebx
call sym.imp.__mempcpy
add esp, 0xc
push eax
call sym.imp.__mempcpy
add esp, 0xc
push 0x804dcd2
push ebx
call sym.imp.fopen64
mov dword [ebp - 0x4004], eax
add esp, 8
test eax, eax
jne 0x804b0a8
xor eax, eax
jmp 0x804b377
lea esi, [esi]
mov dword [ebp - 0x4008], 0
jmp 0x804b328
nop
mov eax, dword [ebp - 0x4004]
push eax
push 0x2000
lea esi, [ebp - 0x2000]
push esi
call sym.imp.fgets
mov edx, eax
add esp, 0xc
test edx, edx
je 0x804b341
push 0xa
push esi
call sym.imp.strchr
add esp, 8
test eax, eax
jne 0x804b11e
lea ebx, [ebp - 0x4000]
mov esi, esi
mov ecx, dword [ebp - 0x4004]
push ecx
push 0x2000
push ebx
call sym.imp.fgets
mov edx, eax
add esp, 0xc
test edx, edx
je 0x804b11e
push 0xa
push ebx
call sym.imp.strchr
add esp, 8
test eax, eax
je 0x804b0f4
mov edx, esi
movzx eax, byte [ebp - 0x2000]
mov edi, dword [obj.__ctype_b]
mov ebx, edi
test byte [edi + eax*2 + 1], 0x20
je 0x804b143
mov esi, esi
inc edx
movzx eax, byte [edx]
test byte [ebx + eax*2 + 1], 0x20
jne 0x804b138
mov al, byte [edx]
mov esi, eax
test al, al
je 0x804b328
cmp al, 0x23
je 0x804b328
mov dword [ebp - 0x400c], edx
inc edx
mov ecx, dword [ebp - 0x400c]
cmp byte [ecx + 1], 0
je 0x804b19d
movzx eax, byte [ecx + 1]
test byte [ebx + eax*2 + 1], 0x20
jne 0x804b188
lea esi, [esi]
inc edx
cmp byte [edx], 0
je 0x804b19d
movzx eax, byte [edx]
test byte [edi + eax*2 + 1], 0x20
je 0x804b178
cmp byte [edx], 0
je 0x804b19d
mov byte [edx], 0
inc edx
mov edi, dword [obj.__ctype_b]
jmp 0x804b19d
lea esi, [esi]
inc edx
movzx eax, byte [edx]
test byte [edi + eax*2 + 1], 0x20
jne 0x804b19c
cmp byte [edx], 0
je 0x804b328
mov dword [ebp - 0x4010], edx
inc edx
mov ecx, dword [ebp - 0x4010]
cmp byte [ecx + 1], 0
je 0x804b1e0
movzx eax, byte [ecx + 1]
test byte [edi + eax*2 + 1], 0x20
jne 0x804b1e0
mov esi, esi
inc edx
cmp byte [edx], 0
je 0x804b1e0
movzx eax, byte [edx]
test byte [edi + eax*2 + 1], 0x20
je 0x804b1d0
mov bl, byte [edx]
cmp bl, 0xa
jne 0x804b1f0
mov byte [edx], 0
mov byte [edx + 1], 0xa
jmp 0x804b1f7
test bl, bl
je 0x804b1f7
mov byte [edx], 0
mov eax, dword [0x804f354]
cmp dword [0x804f350], eax
jb 0x804b209
call fcn.0804b384
mov edi, dword [ebp - 0x400c]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov dword [ebp - 0x4014], ecx
mov edi, dword [ebp - 0x4010]
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
mov dword [ebp - 0x4018], ecx
mov edx, dword [0x804f348]
mov eax, dword [ebp - 0x4014]
add eax, edx
add eax, ecx
mov ebx, dword [0x804f34c]
cmp eax, ebx
jbe 0x804b293
mov edx, dword [ebp - 0x4014]
add edx, ecx
cmp edx, 0x400
jae 0x804b266
mov edx, 0x400
add ebx, edx
push ebx
push dword [0x804f344]
call sym.imp.realloc
mov edx, eax
add esp, 8
test edx, edx
je 0x804b371
mov dword [0x804f344], edx
mov dword [0x804f34c], ebx
mov edx, dword [0x804f348]
mov esi, dword [0x804f350]
mov ebx, dword [0x804f5f8]
mov ecx, dword [ebp - 0x4014]
push ecx
mov eax, dword [ebp - 0x400c]
push eax
add edx, dword [0x804f344]
push edx
call sym.imp.memcpy
mov edx, eax
mov dword [ebx + esi*8], edx
mov ecx, dword [ebp - 0x4014]
add ecx, dword [0x804f348]
mov dword [ebp - 0x401c], ecx
mov dword [0x804f348], ecx
mov esi, dword [0x804f350]
mov ebx, dword [0x804f5f8]
mov eax, dword [ebp - 0x4018]
push eax
mov ecx, dword [ebp - 0x4010]
push ecx
mov eax, dword [0x804f344]
add dword [ebp - 0x401c], eax
mov ecx, dword [ebp - 0x401c]
push ecx
call sym.imp.memcpy
mov edx, eax
mov dword [ebx + esi*8 + 4], edx
mov eax, dword [ebp - 0x4018]
add dword [0x804f348], eax
inc dword [0x804f350]
inc dword [ebp - 0x4008]
add esp, 0x18
mov ecx, dword [ebp - 0x4004]
push ecx
call sym.imp.feof
mov edx, eax
add esp, 4
test edx, edx
je 0x804b0b8
mov eax, dword [ebp - 0x4004]
push eax
call sym.imp.fclose
add esp, 4
cmp dword [ebp - 0x4008], 0
je 0x804b371
push fcn.0804b3c8
push 8
push dword [0x804f350]
push dword [0x804f5f8]
call sym.imp.qsort
mov eax, dword [ebp - 0x4008]
lea esp, [ebp - 0x4028]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, dword [0x804f354]
test eax, eax
je 0x804b39c
lea ebx, [eax*2]
jmp 0x804b3a1
mov esi, esi
mov ebx, 0x64
lea eax, [ebx*8]
push eax
push dword [0x804f5f8]
call sym.imp.realloc
test eax, eax
je 0x804b3c3
mov dword [0x804f5f8], eax
mov dword [0x804f354], ebx
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
xor ecx, ecx
mov ebx, 1
xor edx, edx
cmp edx, dword [arg_ch]
jae 0x804b99d
mov esi, dword [obj.__ctype_b]
lea esi, [esi]
mov edi, dword [arg_8h]
movzx eax, byte [edx + edi]
mov ax, word [esi + eax*2]
test al, 8
je 0x804b997
inc ecx
test ah, 4
je 0x804b997
xor ebx, ebx
inc edx
cmp edx, dword [arg_ch]
jb 0x804b980
test ebx, ebx
je 0x804b9a8
lea eax, [ecx + 4]
jmp 0x804b9ab
mov esi, esi
lea eax, [ecx + 1]
push eax
call sym.imp.malloc
mov dword [var_4h], eax
test eax, eax
je 0x804ba0c
test ebx, ebx
je 0x804b9cc
mov dword [eax], 0x6f7369
mov ebx, eax
add ebx, 3
jmp 0x804b9cf
lea esi, [esi]
mov ebx, dword [var_4h]
xor edx, edx
cmp edx, dword [arg_ch]
jae 0x804ba09
mov esi, dword [arg_8h]
lea esi, [esi]
movzx ecx, byte [esi]
mov eax, dword [obj.__ctype_b]
mov ax, word [eax + ecx*2]
test ah, 4
je 0x804b9f8
mov eax, dword [obj.__ctype_tolower]
mov eax, dword [eax + ecx*4]
jmp 0x804b9ff
nop
test ah, 8
je 0x804ba02
mov al, byte [esi]
mov byte [ebx], al
inc ebx
inc esi
inc edx
cmp edx, dword [arg_ch]
jb 0x804b9dc
mov byte [ebx], 0
mov eax, dword [var_4h]
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
mov eax, dword [arg_10h]
mov edx, dword [arg_14h]
cmp edi, edx
jl 0x804cc2b
jg 0x804cc3c
cmp esi, eax
jae 0x804cc30
xor eax, eax
jmp 0x804cc41
nop
cmp esi, eax
ja 0x804cc3c
mov eax, 1
jmp 0x804cc41
nop
mov eax, 2
lea esp, [var_8h]
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov edx, dword [arg_ch]
mov dword [var_8h], 0xffffffff
mov dword [var_ch], 0
mov edi, dword [s2]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
mov dword [n], ecx
xor esi, esi
cmp dword [edx], 0
je 0x804cbc0
mov ebx, edx
mov esi, esi
mov eax, dword [n]
push eax
mov eax, dword [s2]
push eax
push dword [ebx]
call sym.imp.strncmp
mov edx, eax
add esp, 0xc
test edx, edx
jne 0x804cbb7
mov edi, dword [ebx]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
mov eax, dword [n]
cmp ecx, eax
je 0x804cbcc
cmp dword [var_8h], 0xffffffff
jne 0x804cbb0
mov dword [var_8h], esi
jmp 0x804cbb7
lea esi, [esi]
mov dword [var_ch], 1
add ebx, 4
inc esi
cmp dword [ebx], 0
jne 0x804cb74
cmp dword [var_ch], 0
jne 0x804cbd0
mov eax, dword [var_8h]
jmp 0x804cbd5
nop
mov eax, esi
jmp 0x804cbd5
mov eax, 0xfffffffe
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
mov edi, dword [arg_8h]
cmp dword [arg_10h], 0x24
jbe 0x804c9fb
push 0x804dfc0
push 0x76
push str.xstrtol.c
push str.0___strtol_base__strtol_base___36
call sym.imp.__assert_fail
add esp, 0x10
mov esi, dword [arg_ch]
test esi, esi
jne 0x804ca05
lea esi, [var_4h]
mov edx, edi
mov al, byte [edi]
jmp 0x804ca0f
nop
inc edx
mov al, byte [edx]
cmp al, 0x20
je 0x804ca0c
cmp al, 9
je 0x804ca0c
cmp byte [edx], 0x2d
je 0x804ca4b
call sym.imp.__errno_location
mov ebx, eax
mov dword [ebx], 0
push 0
mov ecx, dword [arg_10h]
push ecx
push esi
push edi
call sym.imp.__strtoul_internal
mov dword [var_8h], eax
add esp, 0x10
cmp dword [ebx], 0
jne 0x804cb20
mov edx, dword [esi]
cmp edx, edi
jne 0x804ca58
mov eax, 1
jmp 0x804cb34
lea esi, [esi]
cmp dword [s], 0
je 0x804cb2d
cmp byte [edx], 0
je 0x804cb2a
mov ebx, 0x400
mov edi, 1
movsx eax, byte [edx]
push eax
mov ecx, dword [s]
push ecx
call sym.imp.strchr
add esp, 8
test eax, eax
jne 0x804ca94
mov eax, 2
jmp 0x804cb34
nop
push 0x30
mov ecx, dword [s]
push ecx
call sym.imp.strchr
add esp, 8
test eax, eax
je 0x804cabd
mov eax, dword [esi]
mov al, byte [eax + 1]
cmp al, 0x42
je 0x804cab8
cmp al, 0x44
jne 0x804cabd
mov ebx, 0x3e8
mov edi, 2
mov eax, dword [esi]
mov al, byte [eax]
add al, 0xbe
movsx eax, al
cmp eax, 0x35
ja case.0x804cacb.189
jmp dword [eax*4 + 0x804e008]
mov esi, esi
push 0x200
jmp 0x804cafe
nop
push 0x400
jmp 0x804cafe
nop
push 6
jmp 0x804cb12
push 3
jmp 0x804cb12
push 1
jmp 0x804cb12
push 2
jmp 0x804cb12
push 5
jmp 0x804cb12
push 4
jmp 0x804cb12
push 2
lea eax, [var_8h]
push eax
call fcn.0804c954
jmp 0x804cb1c
lea esi, [esi]
push 8
jmp 0x804cb12
push 7
push ebx
lea eax, [var_8h]
push eax
call fcn.0804c990
test eax, eax
je case.0x804cacb.157
mov eax, 3
jmp 0x804cb34
nop
add dword [esi], edi
mov eax, dword [var_8h]
mov ecx, dword [arg_14h]
mov dword [ecx], eax
xor eax, eax
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov ecx, dword [ebx]
mov eax, ecx
imul eax, dword [arg_ch]
mov dword [var_4h], eax
xor edx, edx
div dword [arg_ch]
mov edi, eax
cmp ecx, edi
jne 0x804c980
mov eax, dword [var_4h]
mov dword [ebx], eax
xor eax, eax
jmp 0x804c985
nop
mov eax, 1
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
dec ebx
cmp ebx, 0xffffffff
je 0x804c9c5
lea esi, [esi]
push esi
push edi
call fcn.0804c954
add esp, 8
test eax, eax
je 0x804c9c0
mov eax, 1
jmp 0x804c9c7
lea esi, [esi]
sub ebx, 1
jae 0x804c9a8
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
test ebx, ebx
jne 0x804c368
push str.BLOCK_SIZE
call sym.imp.getenv
mov ebx, eax
add esp, 4
test ebx, ebx
jne 0x804c368
push str.POSIXLY_CORRECT
call sym.imp.getenv
test eax, eax
je 0x804c360
mov eax, 0x200
jmp 0x804c3bc
mov esi, esi
mov eax, 0x400
jmp 0x804c3bc
nop
push 0x804dd2c
push ebx
call fcn.0804cb3c
add esp, 8
test eax, eax
jl 0x804c384
mov eax, dword [eax*4 + 0x804dd4c]
jmp 0x804c3bc
nop
push str.eEgGkKmMpPtTyYzZ0
lea eax, [var_4h]
push eax
push 0
lea eax, [var_8h]
push eax
push ebx
call fcn.0804c9d0
test eax, eax
jne 0x804c3c0
mov eax, dword [var_8h]
cmp byte [eax], 0
je 0x804c3ac
mov eax, 2
jmp 0x804c3c0
mov eax, dword [var_4h]
test eax, eax
jge 0x804c3bc
mov eax, 3
jmp 0x804c3c0
mov esi, esi
mov dword [esi], eax
xor eax, eax
lea esp, [var_10h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
call sym.imp.__errno_location
mov ebx, eax
mov dword [ebx], 0
mov esi, 0x1001
push esi
call fcn.0804c738
mov dword [ptr], eax
mov dword [ebx], 0
add esp, 4
jmp 0x804c6d5
nop
call sym.imp.__errno_location
mov ebx, eax
cmp dword [ebx], 0x22
jne 0x804c6e8
add esi, 0x20
push esi
mov edx, dword [ptr]
push edx
call fcn.0804c75c
mov dword [ptr], eax
mov dword [ebx], 0
add esp, 8
push esi
mov edx, dword [ptr]
push edx
call sym.imp.getcwd
mov edi, eax
add esp, 8
test edi, edi
je 0x804c6b0
test edi, edi
je 0x804c6f4
mov eax, dword [ptr]
jmp 0x804c70a
lea esi, [esi]
call sym.imp.__errno_location
mov esi, eax
mov ebx, dword [esi]
mov edx, dword [ptr]
push edx
call sym.imp.free
mov dword [esi], ebx
xor eax, eax
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
pop ebx
add ebx, 0x246f
push dword [arg_ch]
push dword [arg_8h]
push 3
call sym.imp.__xstat64
mov ebx, dword [var_4h]
leave
ret
pop ebx
add ebx, 0x244b
push dword [arg_ch]
push dword [arg_8h]
push 3
call sym.imp.__lxstat64
mov ebx, dword [var_4h]
leave
ret
pop ebx
add ebx, 0x23f7
call fcn.08049220
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
cmp dword [0x804f314], 0
jne 0x8049264
jmp 0x804923d
mov esi, esi
lea edx, [eax + 4]
mov dword [0x804f310], edx
mov eax, dword [eax]
call eax
mov eax, dword [0x804f310]
cmp dword [eax], 0
jne 0x8049230
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x804925a
push section..eh_frame
call sym.imp.__deregister_frame_info
mov dword [0x804f314], 1
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.08048e35
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov eax, dword [arg_ch]
push dword [eax]
push dword [edx]
call sym.imp.strcasecmp
leave
ret
push ebp
mov ebp, esp
cmp dword [arg_10h], 0xffffffff
jne 0x804cbf0
mov eax, 0x804e0e0
jmp 0x804cbf5
mov eax, str._s:_ambiguous__s___s_n
push dword [arg_ch]
push dword [arg_8h]
push dword [0x804f600]
push eax
push dword [obj.stderr]
call sym.imp.fprintf
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.0804cf0d
push ebp
mov ebp, esp
push ebx
call fcn.0804cf31
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.0804cf85
