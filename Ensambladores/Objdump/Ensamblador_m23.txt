push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x4
call   80485c8 <_init+0xc>
pop    ebx
add    ebx,0x1a2c
mov    edx,DWORD PTR [ebx-0x4]
test   edx,edx
je     80485de <_init+0x22>
call   804862c <__gmon_start__@plt>
call   8048800 <frame_dummy>
call   8048d40 <__do_global_ctors_aux>
pop    eax
pop    ebx
leave  
ret    
push   DWORD PTR ds:0x8049ff8
jmp    DWORD PTR ds:0x8049ffc
add    BYTE PTR [eax],al
jmp    DWORD PTR ds:0x804a000
push   0x0
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a004
push   0x8
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a008
push   0x10
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a00c
push   0x18
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a010
push   0x20
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a014
push   0x28
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a018
push   0x30
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a01c
push   0x38
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a020
push   0x40
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a024
push   0x48
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a028
push   0x50
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a02c
push   0x58
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a030
push   0x60
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a034
push   0x68
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a038
push   0x70
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a03c
push   0x78
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a040
push   0x80
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a044
push   0x88
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a048
push   0x90
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a04c
push   0x98
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a050
push   0xa0
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a054
push   0xa8
jmp    80485ec <.plt>
jmp    DWORD PTR ds:0x804a058
push   0xb0
jmp    80485ec <.plt>
xor    ebp,ebp
pop    esi
mov    ecx,esp
and    esp,0xfffffff0
push   eax
push   esp
push   edx
push   0x8048cd0
push   0x8048ce0
push   ecx
push   esi
push   0x8048abf
call   804865c <__libc_start_main@plt>
hlt    
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x4
cmp    BYTE PTR ds:0x804a0a4,0x0
jne    80487ef <__do_global_dtors_aux+0x4f>
mov    eax,ds:0x804a0a8
mov    ebx,0x8049f20
sub    ebx,0x8049f1c
sar    ebx,0x2
sub    ebx,0x1
cmp    eax,ebx
jae    80487e8 <__do_global_dtors_aux+0x48>
lea    esi,[esi+0x0]
add    eax,0x1
mov    ds:0x804a0a8,eax
call   DWORD PTR [eax*4+0x8049f1c]
mov    eax,ds:0x804a0a8
cmp    eax,ebx
jb     80487d0 <__do_global_dtors_aux+0x30>
mov    BYTE PTR ds:0x804a0a4,0x1
add    esp,0x4
pop    ebx
pop    ebp
ret    
lea    esi,[esi+eiz*1+0x0]
lea    edi,[edi+eiz*1+0x0]
push   ebp
mov    ebp,esp
sub    esp,0x18
mov    eax,ds:0x8049f24
test   eax,eax
je     8048821 <frame_dummy+0x21>
mov    eax,0x0
test   eax,eax
je     8048821 <frame_dummy+0x21>
mov    DWORD PTR [esp],0x8049f24
call   eax
leave  
ret    
nop
push   ebp
mov    ebp,esp
sub    esp,0x18
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   804860c <strerror@plt>
mov    edx,eax
cmp    DWORD PTR [ebp+0xc],0x0
je     8048844 <die+0x20>
mov    eax,0x8048d90
jmp    8048849 <die+0x25>
mov    eax,0x8048d9c
mov    DWORD PTR [esp+0x8],edx
mov    edx,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   80486dc <printf@plt>
mov    eax,ds:0x804a0a0
mov    DWORD PTR [esp],eax
call   804869c <fflush@plt>
mov    eax,ds:0x804a080
mov    DWORD PTR [esp],eax
call   804869c <fflush@plt>
mov    DWORD PTR [esp],0x1
call   804874c <exit@plt>
push   ebp
mov    ebp,esp
sub    esp,0xa8
mov    eax,gs:0x14
mov    DWORD PTR [ebp-0xc],eax
xor    eax,eax
mov    DWORD PTR [ebp-0x94],0x0
mov    edx,0x8048da4
mov    eax,0x8048da6
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   80486cc <fopen@plt>
mov    DWORD PTR [ebp-0x90],eax
cmp    DWORD PTR [ebp-0x90],0x0
jne    804891e <get_target+0x9c>
call   80485fc <__errno_location@plt>
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x8048da6
call   8048824 <die>
jmp    804891f <get_target+0x9d>
mov    DWORD PTR [esp+0x4],0x8048db5
lea    eax,[ebp-0x8c]
mov    DWORD PTR [esp],eax
call   804870c <strstr@plt>
test   eax,eax
je     804891f <get_target+0x9d>
lea    eax,[ebp-0x8c]
mov    DWORD PTR [esp+0x8],0x10
mov    DWORD PTR [esp+0x4],0x0
mov    DWORD PTR [esp],eax
call   80486bc <strtoul@plt>
mov    DWORD PTR [ebp-0x94],eax
jmp    8048943 <get_target+0xc1>
nop
mov    eax,DWORD PTR [ebp-0x90]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x80
lea    eax,[ebp-0x8c]
mov    DWORD PTR [esp],eax
call   804864c <fgets@plt>
test   eax,eax
jne    80488de <get_target+0x5c>
mov    eax,DWORD PTR [ebp-0x90]
mov    DWORD PTR [esp],eax
call   80486ac <fclose@plt>
mov    eax,DWORD PTR [ebp-0x94]
mov    edx,DWORD PTR [ebp-0xc]
xor    edx,DWORD PTR gs:0x14
je     8048968 <get_target+0xe6>
call   804871c <__stack_chk_fail@plt>
leave  
ret    
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x10
mov    eax,esp
and    eax,0xffffe000
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [ebp-0x10],eax
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [ebp-0xc],eax
mov    DWORD PTR [ebp-0x8],0x0
jmp    8048aac <kernel_code+0x142>
mov    eax,DWORD PTR [ebp-0xc]
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804a0ac
cmp    edx,eax
jne    8048aa4 <kernel_code+0x13a>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x4
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804a0ac
cmp    edx,eax
jne    8048aa4 <kernel_code+0x13a>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x8
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804a0ac
cmp    edx,eax
jne    8048aa4 <kernel_code+0x13a>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0xc
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804a0ac
cmp    edx,eax
jne    8048aa4 <kernel_code+0x13a>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x10
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804a0b0
cmp    edx,eax
jne    8048aa4 <kernel_code+0x13a>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x14
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804a0b0
cmp    edx,eax
jne    8048aa4 <kernel_code+0x13a>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x18
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804a0b0
cmp    edx,eax
jne    8048aa4 <kernel_code+0x13a>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x1c
mov    edx,DWORD PTR [eax]
mov    eax,ds:0x804a0b0
cmp    edx,eax
jne    8048aa4 <kernel_code+0x13a>
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x4
mov    edx,DWORD PTR [ebp-0xc]
add    edx,0x8
mov    ecx,DWORD PTR [ebp-0xc]
add    ecx,0xc
mov    DWORD PTR [ecx],0x0
mov    ecx,DWORD PTR [ecx]
mov    DWORD PTR [edx],ecx
mov    edx,DWORD PTR [edx]
mov    DWORD PTR [eax],edx
mov    edx,DWORD PTR [eax]
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [eax],edx
mov    eax,DWORD PTR [ebp-0xc]
lea    ebx,[eax+0x10]
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x14
mov    edx,DWORD PTR [ebp-0xc]
add    edx,0x18
mov    ecx,DWORD PTR [ebp-0xc]
add    ecx,0x1c
mov    DWORD PTR [ecx],0x0
mov    ecx,DWORD PTR [ecx]
mov    DWORD PTR [edx],ecx
mov    edx,DWORD PTR [edx]
mov    DWORD PTR [eax],edx
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [ebx],eax
add    DWORD PTR [ebp-0xc],0x24
mov    eax,DWORD PTR [ebp-0xc]
add    eax,0x4
mov    edx,DWORD PTR [ebp-0xc]
add    edx,0x8
mov    DWORD PTR [edx],0xffffffff
mov    edx,DWORD PTR [edx]
mov    DWORD PTR [eax],edx
mov    edx,DWORD PTR [eax]
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [eax],edx
jmp    8048ab9 <kernel_code+0x14f>
add    DWORD PTR [ebp-0xc],0x4
add    DWORD PTR [ebp-0x8],0x1
cmp    DWORD PTR [ebp-0x8],0x3f2
jle    804898f <kernel_code+0x25>
add    esp,0x10
pop    ebx
pop    ebp
ret    
push   ebp
mov    ebp,esp
and    esp,0xfffffff0
sub    esp,0x40
call   80486ec <getuid@plt>
mov    ds:0x804a0ac,eax
call   804875c <getgid@plt>
mov    ds:0x804a0b0,eax
mov    ecx,DWORD PTR ds:0x804a0ac
mov    edx,DWORD PTR ds:0x804a0ac
mov    eax,ds:0x804a0ac
mov    DWORD PTR [esp+0x8],ecx
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   804867c <setresuid@plt>
mov    ecx,DWORD PTR ds:0x804a0b0
mov    edx,DWORD PTR ds:0x804a0b0
mov    eax,ds:0x804a0b0
mov    DWORD PTR [esp+0x8],ecx
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   804868c <setresgid@plt>
mov    DWORD PTR [esp],0x8048dc4
call   804872c <puts@plt>
mov    DWORD PTR [esp],0x8048de8
call   804872c <puts@plt>
mov    DWORD PTR [esp],0x8048e0b
call   804872c <puts@plt>
mov    DWORD PTR [esp],0x8048dc4
call   804872c <puts@plt>
mov    eax,ds:0x804a0ac
test   eax,eax
je     8048b60 <main+0xa1>
mov    eax,ds:0x804a0b0
test   eax,eax
jne    8048b74 <main+0xb5>
mov    DWORD PTR [esp+0x4],0x0
mov    DWORD PTR [esp],0x8048e14
call   8048824 <die>
call   8048882 <get_target>
mov    DWORD PTR [esp+0x3c],eax
mov    eax,0x8048e19
mov    edx,DWORD PTR [esp+0x3c]
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   80486dc <printf@plt>
lea    eax,[esp+0x34]
mov    DWORD PTR [esp],eax
call   804873c <pipe@plt>
test   eax,eax
jns    8048bb9 <main+0xfa>
call   80485fc <__errno_location@plt>
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x8048e2a
call   8048824 <die>
mov    eax,DWORD PTR [esp+0x3c]
mov    DWORD PTR [esp+0x2c],eax
mov    DWORD PTR [esp+0x30],0x18
mov    eax,DWORD PTR [esp+0x38]
mov    DWORD PTR [esp+0x8],0x18
mov    DWORD PTR [esp+0x4],0x804a064
mov    DWORD PTR [esp],eax
call   804863c <write@plt>
mov    eax,DWORD PTR [esp+0x34]
mov    DWORD PTR [esp+0x10],0x0
mov    DWORD PTR [esp+0xc],0x1
lea    edx,[esp+0x2c]
mov    DWORD PTR [esp+0x8],edx
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x13c
call   804861c <syscall@plt>
mov    DWORD PTR [esp+0x18],0x4
mov    DWORD PTR [esp+0x14],0x3
mov    DWORD PTR [esp+0x10],0x2
mov    DWORD PTR [esp+0xc],0x1
mov    DWORD PTR [esp+0x8],0x804896a
mov    DWORD PTR [esp+0x4],0x7a69
mov    DWORD PTR [esp],0x71
call   804861c <syscall@plt>
call   80486ec <getuid@plt>
test   eax,eax
je     8048c6a <main+0x1ab>
mov    DWORD PTR [esp+0x4],0x0
mov    DWORD PTR [esp],0x8048e2f
call   8048824 <die>
mov    DWORD PTR [esp],0x8048e33
call   804872c <puts@plt>
mov    DWORD PTR [esp],0x8048e3c
call   80486fc <putenv@plt>
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x8048e4f
mov    DWORD PTR [esp+0x4],0x8048e52
mov    DWORD PTR [esp],0x8048e57
call   804866c <execl@plt>
call   80485fc <__errno_location@plt>
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x8048e57
call   8048824 <die>
mov    eax,0x0
leave  
ret    
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push   ebp
mov    ebp,esp
pop    ebp
ret    
lea    esi,[esi+eiz*1+0x0]
lea    edi,[edi+eiz*1+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
call   8048d3a <__i686.get_pc_thunk.bx>
add    ebx,0x1309
sub    esp,0x1c
call   80485bc <_init>
lea    edi,[ebx-0xe0]
lea    eax,[ebx-0xe0]
sub    edi,eax
sar    edi,0x2
test   edi,edi
je     8048d32 <__libc_csu_init+0x52>
xor    esi,esi
mov    eax,DWORD PTR [ebp+0x10]
mov    DWORD PTR [esp+0x8],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   DWORD PTR [ebx+esi*4-0xe0]
add    esi,0x1
cmp    esi,edi
jb     8048d10 <__libc_csu_init+0x30>
add    esp,0x1c
pop    ebx
pop    esi
pop    edi
pop    ebp
ret    
mov    ebx,DWORD PTR [esp]
ret    
nop
nop
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x4
mov    eax,ds:0x8049f14
cmp    eax,0xffffffff
je     8048d64 <__do_global_ctors_aux+0x24>
mov    ebx,0x8049f14
xchg   ax,ax
sub    ebx,0x4
call   eax
mov    eax,DWORD PTR [ebx]
cmp    eax,0xffffffff
jne    8048d58 <__do_global_ctors_aux+0x18>
add    esp,0x4
pop    ebx
pop    ebp
ret    
nop
nop
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x4
call   8048d78 <_fini+0xc>
pop    ebx
add    ebx,0x127c
call   80487a0 <__do_global_dtors_aux>
pop    ecx
pop    ebx
leave  
ret    
