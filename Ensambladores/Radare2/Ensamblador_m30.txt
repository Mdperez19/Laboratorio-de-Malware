xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff8
push eax
push esp
push edx
push section..fini
push section..init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
jmp dword [reloc.printf]
jmp dword [reloc.usleep]
jmp dword [reloc.perror]
jmp dword [reloc.socket]
jmp dword [reloc.bzero]
jmp dword [reloc.fprintf]
jmp dword [reloc.inet_addr]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.setsockopt]
jmp dword [reloc.rand]
jmp dword [reloc.htonl]
jmp dword [reloc.sendto]
jmp dword [reloc.bcopy]
jmp dword [reloc.inet_ntoa]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.htons]
jmp dword [reloc.exit]
jmp dword [reloc.atoi]
jmp dword [reloc.__register_frame_info]
jmp dword [reloc.close]
push ebp
mov ebp, esp
sub esp, 0x450
mov dword [var_14h], 1
cmp dword [argv], 6
je 0x8048b04
mov eax, dword [envp]
mov edx, dword [eax]
push edx
call fcn.080489f0
add esp, 4
mov eax, dword [envp]
add eax, 4
mov edx, dword [eax]
push edx
call fcn.08048a50
add esp, 4
mov eax, eax
mov dword [in], eax
mov eax, dword [envp]
add eax, 8
mov edx, dword [eax]
push edx
call sym.imp.atoi
add esp, 4
mov eax, eax
mov word [var_44eh], ax
mov eax, dword [envp]
add eax, 0xc
mov edx, dword [eax]
push edx
call fcn.08048a50
add esp, 4
mov eax, eax
mov dword [var_44ch], eax
mov eax, dword [envp]
add eax, 0x10
mov edx, dword [eax]
push edx
call sym.imp.atoi
add esp, 4
mov eax, eax
mov word [var_450h], ax
push 1
push 3
push 2
call sym.imp.socket
add esp, 0xc
mov eax, eax
mov dword [fildes], eax
cmp dword [fildes], 0
jge 0x8048ba0
push str.RawSocket:
call sym.imp.perror
add esp, 4
push 1
call sym.imp.exit
add esp, 4
lea esi, [esi]
push 4
lea eax, [var_14h]
push eax
push 3
push 0
mov eax, dword [fildes]
push eax
call sym.imp.setsockopt
add esp, 0x14
mov eax, eax
test eax, eax
jge 0x8048be0
push str.SetSockOpt:
call sym.imp.perror
add esp, 4
mov eax, dword [fildes]
push eax
call sym.imp.close
add esp, 4
push 1
call sym.imp.exit
add esp, 4
nop
mov dword [var_10h], 0
mov eax, dword [envp]
add eax, 0x14
mov edx, dword [eax]
push edx
call sym.imp.atoi
add esp, 4
mov eax, eax
cmp eax, dword [var_10h]
jg 0x8048c04
jmp 0x8048cd5
inc dword [var_10h]
movzx eax, word [var_44eh]
push eax
mov eax, dword [in]
push eax
call sym.imp.inet_ntoa
add esp, 4
mov eax, eax
push eax
push str.sending_packet_from:__s:_i_
call sym.imp.printf
add esp, 0xc
movzx eax, word [var_450h]
push eax
mov eax, dword [var_44ch]
push eax
call sym.imp.inet_ntoa
add esp, 4
mov eax, eax
push eax
push str.to__s:_i_n
call sym.imp.printf
add esp, 0xc
inc word [var_44eh]
inc word [var_450h]
push 0
push 0
push 2
movzx eax, word [var_450h]
push eax
mov eax, dword [var_44ch]
push eax
movzx eax, word [var_44eh]
push eax
mov eax, dword [in]
push eax
mov eax, dword [fildes]
push eax
call fcn.08048830
add esp, 0x20
push 0
push 0
push 0x10
movzx eax, word [var_450h]
push eax
mov eax, dword [var_44ch]
push eax
movzx eax, word [var_44eh]
push eax
mov eax, dword [in]
push eax
mov eax, dword [fildes]
push eax
call fcn.08048830
add esp, 0x20
push 0x3e8
call sym.imp.usleep
add esp, 4
jmp 0x8048be7
mov eax, dword [fildes]
push eax
call sym.imp.close
add esp, 4
xor eax, eax
jmp 0x8048ce5
mov esp, ebp
pop ebp
ret
add byte [eax + eax], dh
add byte [eax], al
xor al, 0x80
add al, 8
xor al, 0x80
add al, 8
rol byte [eax], 0
add al, al
add byte [eax], al
add byte [0x4000000], al
add byte [eax], al
add byte [ebx], al
add byte [eax], al
add ah, dh
add byte [eax], al
add ah, dh
add byte [eax + ecx], 0xf4
add byte [eax + ecx], 0x13
add byte [eax], al
add byte [ebx], dl
add byte [eax], al
add byte [eax + eax], al
add byte [eax], al
add dword [eax], eax
add byte [eax], al
add dword [eax], eax
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax - 0x7ffff7fc], al
add al, 8
and ecx, dword [edi]
add byte [eax], al
and ecx, dword [edi]
add byte [eax], al
add eax, 0
adc byte [eax], al
add byte [ecx], al
add byte [eax], al
add byte [edi + ecx], ah
add byte [eax], al
and al, 0x9f
add al, 8
and al, 0x9f
add al, 8
and al, 1
add byte [eax], al
inc eax
add dword [eax], eax
add byte [esi], al
add byte [eax], al
add byte [eax], al
adc byte [eax], al
add byte [edx], al
add byte [eax], al
add byte [eax - 0x57fffff1], ch
lahf
add al, 8
test al, 0x9f
add al, 8
mov al, byte [0xa0000000]
add byte [eax], al
add byte [esi], al
add byte [eax], al
add byte [eax + eax], al
add byte [eax], al
add al, 0
add byte [eax], al
or byte [ecx], al
add byte [eax], al
or byte [ecx - 0x7ef7f7fc], al
add al, 8
and byte [eax], al
add byte [eax], al
and byte [eax], al
add byte [eax], al
add al, 0
add byte [eax], al
add al, 0
add byte [eax], al
das
insb byte es:[edi], dx
imul esp, dword [edx + 0x2f], 0x6c2d646c
imul ebp, dword [esi + 0x75], 0x6f732e78
xor al, byte cs:[eax]
add byte [eax + eax], al
add al, 0
add byte [eax], al
adc byte [eax], al
add byte [eax], al
add dword [eax], eax
add byte [eax], al
inc edi
dec esi
push ebp
add byte [eax], al
add byte [eax], al
add byte [edx], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [ecx], dl
adc dword [eax], eax
add byte [eax], al
sbb dword [eax], eax
add byte [eax], al
sldt word [eax]
add byte [eax], al
add byte [eax], al
add byte [0x18000000], al
add byte [eax], al
add byte [eax], cl
add byte [eax], al
add byte [0x6000000], cl
add byte [eax], al
add byte [ebx], cl
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax + eax], al
add byte [eax], al
add al, byte [eax]
add byte [eax], al
add byte [eax], al
add byte [eax], al
or al, 0
add byte [eax], al
adc eax, 0x7000000
add byte [eax], al
add byte [ecx], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [edi], dl
pop ss
add byte [eax], al
add byte [edx], dl
add byte [eax], al
add byte [eax], dl
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [ebx], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [esi], dl
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [esi], cl
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [ecx], cl
add byte [eax], al
add byte [ecx], dl
add byte [eax], al
add byte [edx], cl
add byte [eax], al
add byte [ebx], dl
add byte [eax], al
add byte [eax + eax], dl
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add dword [eax], eax
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
and byte [eax], al
add byte [eax], al
sbb al, byte [eax]
add byte [eax], al
jl 0x8048184
add al, 8
sub al, byte [eax]
add byte [eax], al
adc al, byte [eax]
add byte [eax], al
and dword [eax], eax
add byte [eax], al
lodsb al, byte [esi]
test dword [eax + ecx], eax
je 0x8048212
add byte [eax], al
adc al, byte [eax]
add byte [eax], al
sub byte [eax], al
add byte [eax], al
fadd qword [ebp + 0x720804]
add byte [eax], al
adc al, byte [eax]
add byte [eax], al
das
add byte [eax], al
add ah, bl
xchg byte [eax + ecx], al
cmp al, byte [eax]
add byte [eax], al
and al, byte [eax]
add byte [eax], al
add byte ss:[eax], al
add byte [esi + eax*4 + 0x2e0804], bl
add byte [eax], al
and al, byte [eax]
add byte [eax], al
cmp al, 0
add byte [eax], al
in al, dx
test dword [eax + ecx], eax
add byte es:[eax], al
add byte [edx], dl
add byte [eax], al
add byte [eax + eax], al
add byte [esi + eax*4 + 4], bl
or byte [eax + eax], dh
add byte [eax], al
adc al, byte [eax]
add byte [eax], al
dec esi
add byte [eax], al
add byte [esi + eax*4], bh
add al, 8
popfd
add byte [eax], al
add byte [edx], ah
add byte [eax], al
add byte [esi], ah
add byte [eax], al
dec esp
xchg byte [eax + ecx], al
cmp al, byte [eax]
add byte [eax], al
adc al, byte [eax]
add byte [eax], al
jno 0x804828a
add byte [eax], al
in al, dx
xchg byte [eax + ecx], al
adc al, 0
add byte [eax], al
adc al, byte [eax]
add byte [eax], al
jbe 0x804829a
add byte [eax], al
cld
test dword [eax + ecx], eax
adc byte [eax], al
add byte [eax], al
adc al, byte [eax]
add byte [eax], al
jl 0x80482aa
add byte [eax], al
sub al, 0x86
add al, 8
cmp al, byte [eax]
add byte [eax], al
and al, byte [eax]
add byte [eax], al
add dword [eax], 0
add byte [esi + eax*4], cl
add al, 8
jnp 0x80482c2
add byte [eax], al
adc al, byte [eax]
add byte [eax], al
mov dword [eax], eax
add byte [eax], al
sbb al, 0x86
add al, 8
in al, dx
add byte [eax], al
add byte [edx], dl
add byte [eax], al
add byte [ebx - 0x74000000], dl
xchg byte [eax + ecx], al
push es
add byte [eax], al
adc al, byte [eax]
add byte [eax], al
mov eax, dword [0x48000000]
mov al, byte [0x40804]
add byte [eax], al
adc dword [eax], eax
push ss
add byte [eax - 0x34000000], ch
xchg byte [eax + ecx], al
push cs
add byte [eax], al
add byte [edx], dl
add byte [eax], al
add byte [esi - 0x54000000], ch
xchg byte [eax + ecx], al
mov dword [eax], 0x120000
add byte [eax], al
mov bl, 0
add byte [eax], al
mov esp, 0x22080486
add byte [eax], al
add byte [edx], dl
add byte [eax], al
add byte [eax + 0x44000000], bh
lea eax, [eax + ecx]
add al, 0
add byte [eax], al
adc dword [eax], eax
sldt edi
add byte [eax], al
add byte [esi + eax*4 + 4], ch
or bh, dh
add byte [eax], al
add byte [edx], dl
add byte [eax], al
add cl, bl
add byte [eax], al
add byte [ebp + eax*4 + 0x720804], bh
add byte [eax], al
and al, byte [eax]
add byte [eax], al
out dx, eax
add byte [eax], al
add ah, cl
test dword [eax + ecx], eax
aaa
add byte [eax], al
add byte [edx], ah
add byte [eax], al
add byte [eax], al
add byte [edi + 0x5f], bl
insd dword es:[di], dx
outsd dx, dword [esi]
outsb dx, byte [esi]
pop edi
jae 0x80483e6
popal
jb 0x80483e9
pop edi
pop edi
add byte [ecx + ebp*2 + 0x62], ch
arpl word [esi], bp
jae 0x80483ee
add byte ss:[eax + 0x72], dh
imul ebp, dword [esi + 0x74], 0x73750066
insb byte es:[edi], dx
jo 0x8048390
jo 0x80483f7
jb 0x8048406
outsd dx, dword [esi]
jb 0x8048397
jae 0x8048408
arpl word [ebx + 0x65], bp
je 0x804839e
bound edi, qword [edx + 0x65]
jb 0x8048412
add byte [esi + 0x70], ah
jb 0x8048411
outsb dx, byte [esi]
je 0x8048411
add byte [ecx + 0x6e], ch
je 0x8048410
popal
jb 0x80483b6
pop edi
pop edi
jb 0x8048421
imul esi, dword [bp + di + 0x74], 0x665f7265
jb 0x8048427
insd dword es:[edi], dx
pop edi
imul ebp, dword [esi + 0x66], 0x6573006f
je 0x8048445
outsd dx, dword [esi]
arpl word [ebx + 0x6f], bp
jo 0x804844c
add byte [edx + 0x61], dh
outsb dx, byte [esi]
add byte fs:[eax + 0x74], ch
outsd dx, dword [esi]
outsb dx, byte [esi]
insb byte es:[edi], dx
add byte [ebx + 0x65], dh
outsb dx, byte [esi]
je 0x8048459
outsd dx, dword [esi]
add byte [edx + 0x63], ah
outsd dx, dword [esi]
jo 0x8048469
add byte [ecx + 0x6e], ch
je 0x8048455
outsb dx, byte [esi]
je section..gnu.version
popal
add byte [edi + 0x65], ah
je 0x8048467
outsd dx, dword [esi]
jae 0x8048476
bound edi, qword [ecx + 0x6e]
popal
insd dword es:[edi], dx
add byte gs:[ebx + 0x74], dh
add byte [ebx + 0x74], dh
jb 0x8048481
add byte [eax + 0x74], ch
push 0x736e6f74
je 0x8048482
outsd dx, dword [esi]
outsb dx, byte [esi]
jae 0x8048416
js 0x8048482
je 0x804841b
popal
je 0x804848d
imul eax, dword [eax], 0x5f4f495f
dec ecx
dec edi
pop edi
jae 0x804849a
imul ebp, dword fs:[esi + 0x5f], 0x64657375
imul ebp, dword [esi + 0x5f], 0x64657375
add byte [edi + 0x5f], bl
insb byte es:[edi], dx
imul esp, dword [edx + 0x63], 0x6174735f
jb 0x80484af
pop edi
insd dword es:[edi], dx
popal
imul ebp, dword [esi], 0x65725f5f
imul esi, dword [bp + di + 0x74], 0x665f7265
jb 0x80484b0
insd dword es:[edi], dx
pop edi
imul ebp, dword [esi + 0x66], 0x6c63006f
outsd dx, dword [esi]
add byte [ebx + 0x6c], ah
outsd dx, dword [esi]
jae 0x80484c1
add byte [edi + 0x4c], al
dec ecx
inc edx
inc ebx
pop edi
xor ch, byte [esi]
xor byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [edx], al
add byte [edx], al
add byte [edx], al
add byte [edx], al
add byte [edx], al
add byte [edx], al
add al, byte [eax]
add al, byte [eax]
add al, byte [eax]
add al, byte [eax]
add al, byte [eax]
add al, byte [eax]
add byte [edx], al
add al, byte [eax]
add al, byte [eax]
add al, byte [eax]
add al, byte [eax]
add al, byte [eax]
add al, byte [eax]
add byte [edx], al
add byte [edx], al
add byte [ecx], al
add byte [edx], al
add byte [edx], al
add byte [edx], al
add byte [eax], al
add byte [eax], al
add dword [eax], eax
add dword [eax], eax
adc byte [eax], al
add byte [eax], al
adc byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [eax], al
adc byte [ecx + 0x69], ch
imul ebp, dword [ecx + 0xd], 0x20000
or eax, 0x20000
add byte [eax], al
add al, byte [eax]
cmc
add byte [eax], al
add byte [eax], al
add byte [eax], al
add byte [edi + ebx*4 + 0x1060804], ah
movsb byte es:[edi], byte ptr [esi]
lahf
add al, 8
push es
add dword [eax], eax
add byte [eax - 0x60], cl
dec eax
mov al, byte [0x11050804]
add byte [eax], al
push eax
lahf
add al, 8
pop es
add eax, dword [eax]
add byte [edi + ebx*4 + 4], dl
or byte [edi], al
pop ss
add byte [eax], al
pop eax
lahf
add al, 8
pop es
sbb byte [eax], al
add byte [edi + ebx*4 + 4], bl
or byte [edi], al
add al, 0
add byte [eax - 0x61], ah
add al, 8
pop es
pop es
add byte [eax], al
lahf
add al, 8
pop es
or al, 0
add byte [eax - 0x61], ch
add al, 8
pop es
push cs
add byte [eax], al
insb byte es:[edi], dx
lahf
add al, 8
pop es
sldt word [eax]
jo 0x80484ad
add al, 8
pop es
or eax, 0x9f740000
add al, 8
pop es
or dword [eax], eax
add byte [eax - 0x61], bh
add al, 8
pop es
or al, byte [eax]
add byte [edi + ebx*4 + 4], bh
or byte [edi], al
or byte [eax], al
add byte [eax + 0x708049f], al
push ss
add byte [eax], al
test byte [edi + 0x2070804], bl
add byte [eax], al
mov byte [edi + 0x10070804], bl
add byte [eax], al
mov word [edi + 0x6070804], ds
add byte [eax], al
nop
lahf
add al, 8
pop es
adc eax, dword [eax]
add byte [edi + ebx*4 + 0x14070804], dl
add byte [eax], al
cwde
lahf
add al, 8
pop es
adc al, byte [eax]
add byte [edi + ebx*4 + 0x5070804], bl
add byte [eax], al
mov al, byte [0x708049f]
or eax, dword [eax]
add byte [ebx - 0x18], dl
push ebx
call 0x804857a
pop ebx
add ebx, 0x19ca
mov edx, dword [ebx + 0x60]
test edx, edx
je 0x8048590
call loc.imp.__gmon_start__
call fcn.08048785
call fcn.08048cf0
pop ebx
ret
push ebp
mov eax, sym.imp.__register_frame_info
mov ebp, esp
test eax, eax
je 0x80487a0
push 0x804a04c
push section..eh_frame
call sym.imp.__register_frame_info
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
mov ebx, section..ctors
cmp dword [section..ctors], 0xffffffff
je 0x8048d0e
mov eax, dword [ebx]
add ebx, 0xfffffffc
call eax
cmp dword [ebx], 0xffffffff
jne 0x8048d02
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 4
push ebx
xor edx, edx
lea esi, [esi]
cmp dword [arg_ch], 1
jg 0x80487c8
jmp 0x80487e0
mov eax, dword [arg_8h]
movzx ebx, word [eax]
add edx, ebx
add dword [arg_8h], 2
add dword [arg_ch], 0xfffffffe
jmp 0x80487c0
lea esi, [esi]
cmp dword [arg_ch], 1
jne 0x80487fa
mov word [var_2h], 0
mov eax, dword [arg_8h]
mov bl, byte [eax]
mov byte [var_2h], bl
movzx eax, word [var_2h]
add edx, eax
mov eax, edx
sar eax, 0x10
mov ebx, edx
movzx ebx, bx
lea edx, [ebx + eax]
mov eax, edx
sar eax, 0x10
add edx, eax
mov ecx, edx
not cx
movzx ebx, cx
mov eax, ebx
jmp 0x804881a
mov ebx, dword [var_8h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push str.e_0_34mP.A.T.C.H._production___misteri0e_0_0m_n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
mov eax, dword [arg_8h]
push eax
push str.e_1_36mUsage:_e_0_31m_s_e_1_32m_e_0_36msrcipe_1_32m__e_1_32m_e_0_36msrc_start_porte_1_32m__e_1_32m_e_0_36mdstipe_1_32m__e_1_32m_e_0_36mdst_start_porte_1_32m__e_1_32m_e_0_36mcounte_1_32m_e_0_0m_n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0xc
push str.e_0_35mNote:_e_0_33mThe_source_destination_ports_will_increment_by_1e_0_0m_n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
push 1
call sym.imp.exit
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [arg_8h]
push eax
call sym.imp.inet_addr
add esp, 4
mov eax, eax
mov edx, eax
mov dword [var_8h], edx
cmp edx, 0xffffffff
je 0x8048a75
mov edx, dword [var_8h]
mov eax, edx
jmp 0x8048ad3
mov eax, dword [arg_8h]
push eax
call sym.imp.gethostbyname
add esp, 4
mov eax, eax
mov dword [var_4h], eax
cmp dword [var_4h], 0
jne 0x8048ab0
mov eax, dword [arg_8h]
push eax
push str.Can_not_resolve_name:__s_n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0xc
push 1
call sym.imp.exit
add esp, 4
lea esi, [esi]
mov eax, dword [var_4h]
mov edx, dword [eax + 0xc]
push edx
lea eax, [var_8h]
push eax
mov eax, dword [var_4h]
mov edx, dword [eax + 0x10]
mov eax, dword [edx]
push eax
call sym.imp.bcopy
add esp, 0xc
mov edx, dword [var_8h]
mov eax, edx
jmp 0x8048ad3
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x60
push ebx
mov eax, dword [arg_10h]
mov edx, dword [arg_18h]
mov ecx, dword [arg_1ch]
mov word [var_2h], ax
mov word [var_4h], dx
mov word [var_6h], cx
lea ebx, [s]
mov dword [var_58h], ebx
lea eax, [s]
lea ebx, [eax + 0x14]
mov dword [var_5ch], ebx
lea eax, [s]
lea ebx, [eax + 0x20]
mov dword [var_60h], ebx
push 0x34
lea eax, [s]
push eax
call sym.imp.bzero
add esp, 8
push 0x10
lea eax, [var_4ch]
push eax
call sym.imp.bzero
add esp, 8
mov eax, dword [arg_ch]
mov dword [var_50h], eax
mov eax, dword [arg_14h]
mov dword [var_54h], eax
mov eax, dword [var_5ch]
mov edx, dword [arg_ch]
mov dword [eax], edx
mov eax, dword [var_5ch]
mov edx, dword [arg_14h]
mov dword [eax + 4], edx
mov eax, dword [var_5ch]
mov byte [eax + 8], 0
mov eax, dword [var_5ch]
mov byte [eax + 9], 6
push 0x14
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_5ch]
mov word [edx + 0xa], ax
mov eax, dword [var_58h]
and byte [eax], 0xf
or byte [eax], 0x40
mov eax, dword [var_58h]
and byte [eax], 0xf0
or byte [eax], 5
mov eax, dword [var_58h]
mov word [eax + 4], 0x4d2
mov eax, dword [var_58h]
mov edx, dword [var_50h]
mov dword [eax + 0xc], edx
mov eax, dword [var_58h]
mov edx, dword [var_54h]
mov dword [eax + 0x10], edx
mov eax, dword [var_58h]
mov byte [eax + 9], 6
mov eax, dword [var_58h]
mov byte [eax + 8], 0x28
mov eax, dword [var_58h]
mov word [eax + 6], 0
mov eax, dword [var_58h]
mov ebx, dword [arg_24h]
add ebx, 0x28
mov word [eax + 2], bx
movzx eax, word [var_2h]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_60h]
mov word [edx], ax
movzx eax, word [var_4h]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [var_60h]
mov word [edx + 2], ax
call sym.imp.rand
mov eax, eax
push eax
call sym.imp.htonl
add esp, 4
mov eax, eax
mov edx, dword [var_60h]
mov dword [edx + 4], eax
call sym.imp.rand
mov eax, eax
push eax
call sym.imp.htonl
add esp, 4
mov eax, eax
mov edx, dword [var_60h]
mov dword [edx + 8], eax
mov eax, dword [var_60h]
and byte [eax + 0xc], 0xf
or byte [eax + 0xc], 0x10
mov eax, dword [var_60h]
mov dl, byte [var_6h]
mov byte [eax + 0xd], dl
mov eax, dword [var_60h]
mov word [eax + 0x12], 0
push 0x20
mov eax, dword [var_5ch]
push eax
call fcn.080487b0
add esp, 8
mov eax, eax
mov edx, dword [var_60h]
mov word [edx + 0x10], ax
push 0x14
mov eax, dword [var_5ch]
push eax
mov eax, dword [var_60h]
push eax
call sym.imp.bcopy
add esp, 0xc
mov word [var_4ch], 2
mov eax, dword [arg_14h]
mov dword [var_48h], eax
push 0x10
lea edx, [var_4ch]
mov eax, edx
push eax
push 0
mov eax, dword [arg_24h]
add eax, 0x28
push eax
lea eax, [s]
push eax
mov eax, dword [arg_8h]
push eax
call sym.imp.sendto
add esp, 0x18
xor eax, eax
jmp 0x80489e1
mov ebx, dword [var_64h]
mov esp, ebp
pop ebp
ret
pop ebx
add ebx, 0x1222
call fcn.08048730
pop ebx
ret
push ebp
mov ebp, esp
cmp dword [0x8049f2c], 0
jne 0x804877a
mov eax, dword [0x8049f28]
cmp dword [eax], 0
je 0x804875d
lea edx, [eax + 4]
mov dword [0x8049f28], edx
mov eax, dword [eax]
call eax
mov eax, dword [0x8049f28]
cmp dword [eax], 0
jne 0x8048746
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x8048770
push section..eh_frame
call sym.imp.__deregister_frame_info
mov dword [0x8049f2c], 1
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov esp, ebp
pop ebp
ret
