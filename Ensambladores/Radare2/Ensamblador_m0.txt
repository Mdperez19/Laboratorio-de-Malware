push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ecx, edx
lea edi, [envp]
mov ebx, dword [edi - 4]
lea esi, [edi + ebx*4 + 4]
mov dword [obj.environ], esi
test ebx, ebx
jle 0x8049073
cmp dword [envp], 0
je 0x8049073
mov eax, dword [envp]
mov dword [obj.__progname], eax
mov edx, eax
cmp byte [eax], 0
je 0x8049073
lea esi, [esi]
lea edi, [edi]
cmp byte [edx], 0x2f
jne 0x804906d
lea eax, [edx + 1]
mov dword [obj.__progname], eax
inc edx
cmp byte [edx], 0
jne 0x8049060
mov eax, obj._DYNAMIC
test eax, eax
je 0x8049084
mov dword [esp], ecx
call sym.imp.atexit
mov dword [esp], sym._fini
call sym.imp.atexit
call sym._init
mov dword [var_sp_8h], esi
mov dword [envp], edi
mov dword [esp], ebx
call dbg.main
mov dword [esp], eax
call sym.imp.exit
nop
nop
nop
call sym.frame_dummy
call sym.__do_global_ctors_aux
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, 0
test eax, eax
je 0x8049133
mov dword [var_4h], obj.object.2
mov dword [esp], obj.__EH_FRAME_BEGIN__
call loc.imp.__deregister_frame_info
cmp dword [obj.__JCR_LIST__], 0
je 0x8049151
mov eax, 0
test eax, eax
je 0x8049151
mov dword [esp], obj.__JCR_LIST__
call loc.imp.__deregister_frame_info
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov dword [var_4h], ebx
mov ebx, obj.__CTOR_LIST__
cmp dword [obj.__CTOR_LIST__], 0xffffffff
je 0x806716a
mov esi, esi
lea edi, [edi]
call dword [ebx]
sub ebx, 4
cmp dword [ebx], 0xffffffff
jne 0x8067160
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
call sym.__do_global_dtors_aux
ret
push ebp
mov ebp, esp
sub esp, 8
cmp byte [obj.completed.1], 0
jne 0x8049100
mov eax, dword [obj.p.0]
mov eax, dword [eax]
test eax, eax
je 0x80490e4
lea esi, [esi]
add dword [obj.p.0], 4
call eax
mov eax, dword [obj.p.0]
mov eax, dword [eax]
test eax, eax
jne 0x80490d0
mov eax, 0
test eax, eax
je 0x80490f9
mov dword [esp], obj.__EH_FRAME_BEGIN__
call loc.imp.__deregister_frame_info
mov byte [obj.completed.1], 1
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov eax, dword [obj.now]
mov dword [esi + 0x10c], eax
mov ebx, dword [obj.current]
mov eax, dword [esi + 4]
inc dword [esi + 0xfc]
mov dword [ebx + 0x10], eax
push eax
push 1
mov eax, dword [esi + 0x100]
push eax
lea eax, [esi + 8]
push eax
call dbg.SockConnect
add esp, 0x10
test eax, eax
mov dword [ebx + 8], eax
js 0x8050b80
mov eax, dword [obj.current]
and byte [eax + 0x3ac], 0xf7
mov eax, dword [obj.current]
mov edx, dword [obj.now]
mov dword [eax + 4], 2
mov dword [eax + 0xbb0], edx
mov dword [eax + 0xbb4], edx
mov eax, dword [eax + 8]
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov eax, 0xffffffff
mov dword [esi + 0x104], 5
jmp 0x8050b6f
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x20
mov ebx, dword [arg_8h]
mov ecx, dword [port]
test ebx, ebx
push ecx
mov eax, ebx
je 0x8061250
push eax
push str._CbN___s__i_n
call dbg.debug
call dbg.SockOpts
add esp, 0x10
test eax, eax
mov edi, eax
mov edx, 0xffffffff
js 0x80610a3
test ebx, ebx
je 0x806123d
mov eax, dword [obj.current]
xor esi, esi
cmp byte [eax + 0x296], 0
je 0x8061022
mov edx, dword [eax + 0x2dc]
test edx, edx
je 0x80611c0
test esi, esi
je 0x8061170
mov edx, dword [obj.current]
cmp byte [edx + 0x296], 0
je 0x8061046
cmp dword [edx + 0x2dc], 1
je 0x80610f3
sub esp, 0xc
mov eax, dword [port]
push ebx
xchg al, ah
mov dword [ebp - 0x28], 0
mov dword [var_24h], 0
mov dword [var_20h], 0
mov dword [var_1ch], 0
mov byte [var_27h], 2
mov word [sai.sin_len], ax
call dbg.get_ip
mov dword [var_24h], eax
add esp, 0x10
inc eax
mov edx, 0xffffffff
je 0x80610a3
mov byte [var_27h], 2
mov eax, dword [var_24h]
test eax, eax
jne 0x80610b0
sub esp, 0xc
push str._CbN______failed_n
call dbg.debug
mov edx, 0xffffffff
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
lea esi, [esi]
push eax
push 0x10
lea eax, [ebp - 0x28]
push eax
push edi
call sym.imp.connect
add esp, 0x10
test eax, eax
js 0x80610c8
mov edx, edi
jmp 0x80610a3
call sym.imp.__error
cmp dword [eax], 0x24
je 0x80610c4
sub esp, 0x10
call sym.imp.__error
pop ebx
pop esi
mov ecx, dword [eax]
push ecx
push str._CbN__unable_to_connect._errno___i_n
call dbg.debug
mov dword [esp], edi
call sym.imp.close
jmp 0x806109e
mov dword [ebp - 0x28], 0
mov dword [var_24h], 0
mov dword [var_20h], 0
mov dword [var_1ch], 0
mov byte [var_27h], 2
mov ax, word [edx + 0x2d8]
xchg al, ah
sub esp, 0xc
mov word [sai.sin_len], ax
lea eax, [edx + 0x296]
push eax
call dbg.get_ip
mov dword [var_24h], eax
add esp, 0x10
inc eax
je 0x806114d
sub esp, 0xc
push str._CbN__WINGATE_host_resolved_OK_n
call dbg.debug
add esp, 0x10
jmp 0x806108a
mov eax, dword [obj.current]
mov dword [eax + 0x2dc], 0x65
jmp 0x806109e
jmp 0x8061170
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push edx
push 0x10
lea eax, [ebp - 0x28]
push eax
push edi
mov dword [ebp - 0x28], 0
mov dword [var_20h], 0
mov dword [var_1ch], 0
mov byte [var_27h], 2
mov dword [var_24h], 0
call sym.imp.bind
add esp, 0x10
test eax, eax
mov edx, 0xffffffff
jns 0x806102a
jmp 0x80610a3
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
add eax, 0x296
push eax
mov dword [ebp - 0x28], 0
mov dword [var_24h], 0
mov dword [var_20h], 0
mov dword [var_1ch], 0
mov byte [var_27h], 2
call dbg.get_ip
mov dword [var_24h], eax
add esp, 0x10
inc eax
je 0x8061229
push ecx
push 0x10
lea eax, [ebp - 0x28]
push eax
push edi
call sym.imp.bind
add esp, 0x10
test eax, eax
js 0x8061022
sub esp, 0xc
push str._CbN__IP_Alias_virtual_host_bound_OK_n
call dbg.debug
mov esi, 1
add esp, 0x10
jmp 0x8061022
mov eax, dword [obj.current]
mov dword [eax + 0x2dc], 0x64
jmp 0x8061022
sub esp, 0xc
push str._CbN__Hostname_missing__n
jmp 0x8061099
lea esi, [esi]
mov eax, obj.NULLSTR
jmp 0x8060fda
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea eax, [level]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804f760
cmp byte [eax], 0
je 0x804f760
mov eax, dword [level]
test eax, eax
je 0x804f760
cmp byte [eax], 0
jne 0x804f76a
lea esi, [esi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
xor eax, eax
pop ebp
ret
sub esp, 0xc
push eax
call dbg.Atoi
add esp, 0x10
test eax, eax
mov edi, eax
je 0x804f760
mov eax, dword [eax]
test eax, eax
js 0x804f760
cmp eax, 0x65
jg 0x804f760
mov eax, dword [obj.mcmd]
test eax, eax
je 0x804f760
xor esi, esi
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push ebx
mov eax, dword [esi + obj.mcmd]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804f7ca
mov eax, dword [esi + 0x807026c]
and eax, 0xff00
or eax, dword [edi]
mov dword [esi + 0x807026c], eax
add esi, 0x10
mov eax, dword [esi + obj.mcmd]
test eax, eax
jne 0x804f7a0
jmp 0x804f760
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
test ebx, ebx
je 0x8057b18
mov edx, dword [ebx]
test edx, edx
je 0x8057b18
mov al, byte [edx]
test al, al
jne 0x8057b20
xor eax, eax
pop ebx
pop esi
pop ebp
ret
mov esi, esi
cmp al, 0x20
je 0x8057b90
mov cl, byte [edx]
xor eax, eax
test cl, cl
mov esi, edx
je 0x8057b1a
cmp cl, 0x20
je 0x8057b60
lea esi, [esi]
lea edi, [edi]
lea eax, [edx + 1]
mov dword [ebx], eax
mov cl, byte [edx + 1]
test cl, cl
mov edx, eax
je 0x8057b60
cmp cl, 0x20
je 0x8057b60
mov edx, eax
jmp 0x8057b40
mov esi, esi
lea edi, [edi]
cmp byte [edx], 0
je 0x8057b75
mov byte [edx], 0
mov edx, dword [ebx]
lea eax, [edx + 1]
mov dword [ebx], eax
cmp byte [edx + 1], 0x20
je 0x8057b80
mov eax, esi
jmp 0x8057b1a
lea esi, [esi]
mov edx, dword [ebx]
lea eax, [edx + 1]
mov dword [ebx], eax
cmp byte [edx + 1], 0x20
je 0x8057b80
jmp 0x8057b75
nop
lea eax, [edx + 1]
mov dword [ebx], eax
cmp byte [edx + 1], 0x20
jne 0x8057b9f
mov edx, eax
jmp 0x8057b90
mov edx, eax
jmp 0x8057b24
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
push esi
test ecx, ecx
push ebx
je 0x8059382
mov al, byte [ecx]
test al, al
jne 0x8059390
xor eax, eax
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
xor esi, esi
cmp al, 0x2d
je 0x80593fc
mov dword [global_res.1], 0
cmp byte [ecx], 0
je 0x80593eb
lea esi, [esi]
lea edi, [edi]
mov edx, dword [global_res.1]
lea eax, [edx*8]
lea ebx, [eax + edx*2]
mov dword [global_res.1], ebx
mov dl, byte [ecx]
xor eax, eax
mov al, dl
mov al, byte [eax + obj.attrtab]
and eax, 1
test al, al
je 0x8059382
movsx eax, dl
lea eax, [eax + ebx - 0x30]
mov dword [global_res.1], eax
inc ecx
cmp byte [ecx], 0
jne 0x80593b0
test esi, esi
je 0x80593f5
neg dword [global_res.1]
mov eax, global_res.1
jmp 0x8059384
mov esi, 1
inc ecx
jmp 0x8059396
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [s1]
mov ebx, dword [s2]
xor eax, eax
cmp esi, ebx
je 0x8057c19
test esi, esi
je 0x8057c20
test ebx, ebx
je 0x8057c20
xor eax, eax
mov al, byte [esi]
mov cl, byte [eax + obj.tolowertab]
xor eax, eax
mov al, byte [ebx]
mov al, byte [eax + obj.tolowertab]
xor edx, edx
and eax, 0xff
mov dl, cl
sub edx, eax
mov eax, edx
jne 0x8057c19
lea esi, [esi]
test cl, cl
je 0x8057c19
inc esi
inc ebx
xor eax, eax
mov al, byte [esi]
mov cl, byte [eax + obj.tolowertab]
xor eax, eax
mov al, byte [ebx]
mov al, byte [eax + obj.tolowertab]
xor edx, edx
and eax, 0xff
mov dl, cl
sub edx, eax
mov eax, edx
je 0x8057bf0
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
mov eax, 1
jmp 0x8057c19
push ebp
mov ebp, esp
sub esp, 0x10
mov ecx, dword [args]
push ecx
push str.init:__s_n
call sym.imp.printf
mov edx, dword [obj.debug_on_exit]
add esp, 0x10
test edx, edx
je 0x8049191
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov eax, dword [obj.do_exec]
test eax, eax
je 0x804919f
call dbg.mech_exec
sub esp, 0xc
push 0
call sym.imp.exit
lea esi, [esi]
push ebp
mov ebp, esp
sub esp, 8
mov edx, dword [cptr]
mov ecx, dword [edx + 4]
test ecx, ecx
je 0x804c290
mov eax, dword [edx]
mov dword [ecx], eax
mov ecx, dword [edx]
test ecx, ecx
je 0x804c263
mov eax, dword [edx + 4]
mov dword [ecx + 4], eax
mov edx, dword [cptr]
sub esp, 0xc
lea eax, [edx + 8]
push eax
call dbg.MyFree
mov eax, dword [cptr]
add eax, 0xc
mov dword [esp], eax
call dbg.MyFree
lea eax, [cptr]
mov dword [esp], eax
call dbg.MyFree
mov esp, ebp
pop ebp
ret
lea esi, [esi]
mov ecx, dword [edx]
mov eax, dword [arg_8h]
test ecx, ecx
mov dword [eax], ecx
je 0x804c254
mov dword [ecx + 4], 0
jmp 0x804c254
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push 0x8067271
lea eax, [rest]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x805cad1
cmp byte [eax], 0x23
je 0x805cae0
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push 1
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805cad1
mov al, byte [eax + 0x38d]
and eax, 0x4f
or eax, 0x20
sub esp, 8
mov byte [ebx + 0x38d], al
mov eax, dword [ebx + 4]
push eax
push str.PART__s
call dbg.send_to_server
mov edx, dword [obj.current]
add esp, 0x10
cmp ebx, dword [edx + 0xb38]
jne 0x805cad1
mov ebx, dword [edx + 0xb34]
test ebx, ebx
je 0x805cb55
lea esi, [esi]
lea edi, [edi]
mov al, byte [ebx + 0x38d]
shr al, 4
and eax, 3
dec eax
je 0x805cb55
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805cb40
mov dword [edx + 0xb38], ebx
jmp 0x805cad1
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov eax, dword [esi]
test eax, eax
je 0x8063915
mov esi, esi
sub esp, 8
mov ebx, dword [eax]
push eax
push esi
call dbg.remove_time
add esp, 0x10
test ebx, ebx
mov eax, ebx
jne 0x8063900
mov dword [esi], 0
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x14
push str.LUSERS
call dbg.send_to_server
pop eax
pop edx
mov eax, dword [from]
push eax
mov eax, dword [obj.current]
add eax, 0xb30
push eax
call dbg.make_time
mov dword [eax + 0x10], 0xf
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x810
mov eax, dword [obj.current]
cmp dword [eax + 8], 0xffffffff
je 0x80616f9
push ebx
lea eax, [arg]
push eax
mov ecx, dword [format]
push ecx
lea ebx, [buf]
push ebx
call sym.imp.vsprintf
pop eax
pop edx
push 0x806b2d9
push ebx
call dbg.Strcat
mov esi, ebx
add esp, 0xc
mov ecx, ebx
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x8061690
test edx, 0x8080
jne 0x80616b5
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, esi
push ecx
push ebx
mov eax, dword [obj.current]
mov eax, dword [eax + 8]
push eax
call sym.imp.write
add esp, 0x10
test eax, eax
js 0x8061730
sub esp, 8
push 0x806b2d9
mov dword [args], ebx
lea ebx, [args]
push ebx
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x80616f9
cmp byte [eax], 0
jne 0x8061700
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push esi
push eax
mov eax, dword [obj.current]
mov ecx, dword [eax + 8]
push ecx
push str._StS___i__s_n
call dbg.debug
pop eax
pop edx
push 0x806b2d9
push ebx
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x80616f9
cmp byte [eax], 0
jne 0x8061700
jmp 0x80616f9
sub esp, 0x10
call sym.imp.__error
mov eax, dword [eax]
add esp, 0xc
push eax
mov eax, dword [obj.current]
mov eax, dword [eax + 8]
push eax
push str._StS___i_errno___i_n
call dbg.debug
pop eax
mov eax, dword [obj.current]
mov eax, dword [eax + 8]
push eax
call sym.imp.close
mov eax, dword [obj.current]
mov dword [eax + 8], 0xffffffff
mov dword [eax + 4], 0
jmp 0x80616f9
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov esi, dword [arg_ch]
xor eax, eax
test esi, esi
mov edi, dword [arg_8h]
je 0x8063826
sub esp, 8
push esi
push edi
call dbg.find_time
add esp, 0x10
test eax, eax
je 0x806382e
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
push 0x14
mov dword [obj.mallocdoer], 0x8063800
call dbg.MyMalloc
mov ebx, eax
pop eax
pop edx
push esi
lea eax, [ebx + 8]
push eax
mov dword [obj.mallocdoer], 0x8063800
call dbg.mstrcpy
mov eax, dword [obj.now]
mov dword [ebx + 4], 0
mov dword [ebx + 0xc], eax
mov eax, dword [edi]
add esp, 0x10
test eax, eax
mov dword [ebx + 0x10], 1
je 0x806387e
mov dword [eax + 4], ebx
mov eax, dword [edi]
mov dword [ebx], eax
mov dword [edi], ebx
mov eax, ebx
jmp 0x8063826
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push 0x21
mov ebx, dword [s]
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x805f88e
cmp byte [eax], 0x21
je 0x805f8b0
push eax
mov ecx, dword [rest]
push ecx
push ebx
push 0x806e3bb
call dbg.send_statmsg
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov byte [eax], 0
jmp 0x805f88e
push ebp
mov ebp, esp
push ebx
push eax
mov eax, dword [obj.current]
mov eax, dword [eax + 0xb30]
test eax, eax
je 0x805fbfc
lea esi, [esi]
lea edi, [edi]
cmp dword [eax + 0x10], 0x14
je 0x805fc10
mov eax, dword [eax]
test eax, eax
jne 0x805fbf0
mov ebx, dword [var_4h]
leave
ret
jmp 0x805fc10
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
mov ebx, dword [eax]
push eax
mov eax, dword [obj.current]
add eax, 0xb30
push eax
call dbg.remove_time
mov eax, ebx
add esp, 0x10
jmp 0x805fbf8
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x98
mov edx, dword [obj.uptimecookie]
lea eax, [edx + edx*8]
shl eax, 7
add eax, edx
lea eax, [edx + eax*2]
lea eax, [edx + eax*8 + 0x4819]
mov dword [obj.uptimecookie], eax
push 0
xchg al, ah
ror eax, 0x10
xchg al, ah
mov dword [0x8075e4c], eax
call sym.imp.time
pop edx
xchg al, ah
ror eax, 0x10
xchg al, ah
pop ecx
mov dword [0x8075e58], eax
lea eax, [ebp - 0x88]
push eax
push str._proc
call sym.imp.stat
add esp, 0x10
test eax, eax
js 0x805dfcb
mov eax, dword [var_60h]
xchg al, ah
ror eax, 0x10
xchg al, ah
mov dword [0x8075e5c], eax
mov edx, dword [obj.botlist]
mov eax, dword [edx + 0xbb0]
xchg al, ah
ror eax, 0x10
xchg al, ah
mov dword [0x8075e54], eax
mov eax, dword [edx + 0x10]
push eax
push 0x114
mov eax, dword [obj.serverSIZE]
push eax
mov eax, dword [obj.serverBASE]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
mov dword [server], str.unknown
je 0x805de70
cmp byte [eax + 0xa8], 0
je 0x805dfc3
add eax, 0xa8
mov dword [server], eax
mov eax, dword [obj.uptimecount]
inc eax
mov dword [obj.uptimecount], eax
and eax, 7
je 0x805dfa4
cmp dword [obj.uptimeip], 0xffffffff
je 0x805dfa4
mov esi, dword [obj.botlist]
add esi, 0x220
mov ecx, esi
nop
mov eax, dword [esi]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add esi, 4
and edx, 0x80808080
je 0x805dea0
test edx, 0x8080
jne 0x805dec5
shr edx, 0x10
add esi, 2
add dl, dl
sbb esi, 3
mov eax, dword [server]
sub esp, 0xc
push eax
sub esi, ecx
call sym.imp.strlen
add esi, eax
mov dword [esp], obj.VERSION
call sym.imp.strlen
lea ebx, [eax + esi + 0x24]
mov dword [esp], ebx
mov dword [obj.mallocdoer], 0x805dda0
call dbg.MyMalloc
mov dword [mem], eax
cld
mov edi, eax
mov esi, obj.upPack
mov ecx, 9
rep movsd dword es:[edi], dword ptr [esi]
mov edi, dword [server]
mov eax, dword [obj.botlist]
mov dword [esp], obj.VERSION
add eax, 0x220
push edi
push eax
mov eax, dword [mem]
push 0x806f3cb
add eax, 0x20
push eax
call sym.imp.sprintf
add esp, 0x18
push 0x10
lea edx, [ebp - 0x28]
push edx
push 0
push ebx
mov esi, dword [mem]
mov eax, dword [obj.uptimeip]
push esi
mov ebx, dword [obj.uptimesock]
mov dword [var_24h], eax
push ebx
mov ax, word [obj.uptimeport]
xchg al, ah
mov dword [ebp - 0x28], 0
mov dword [var_20h], 0
mov dword [var_1ch], 0
mov byte [var_27h], 2
mov word [sai.sin_len], ax
call sym.imp.sendto
add esp, 0x14
lea eax, [mem]
push eax
call dbg.MyFree
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
mov eax, dword [obj.uptimehost]
push eax
call dbg.get_ip
mov dword [obj.uptimeip], eax
add esp, 0x10
inc eax
jne 0x805de91
jmp 0x805df9c
add eax, 8
jmp 0x805de6a
mov dword [0x8075e5c], 0
jmp 0x805de15
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x38
lea eax, [rest]
push eax
mov dword [ec], 0xffffffff
mov dword [pm], 0xffffffff
mov dword [ao], 0xffffffff
mov dword [av], 0xffffffff
mov dword [sh], 0xffffffff
mov dword [pl], 0
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8066a9a
cmp byte [eax], 0
jne 0x8066ac0
sub esp, 8
mov eax, dword [0x8070870]
push eax
mov eax, dword [from]
push eax
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push eax
call dbg.find_handle
add esp, 0x10
test eax, eax
mov edi, eax
je 0x8066e8d
sub esp, 8
mov edx, dword [eax + 0x2c]
push edx
mov eax, dword [from]
push eax
call dbg.find_user
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8066e7e
mov edx, dword [eax + 0x3c]
mov eax, dword [edi + 0x3c]
shr edx, 9
shr eax, 9
movzx ecx, dl
cmp al, dl
jbe 0x8066b30
cmp ecx, 0x64
je 0x8066b20
push eax
lea eax, [edi + 8]
push eax
push str.Access_denied___s_has_higher_access_than_you_
mov esi, dword [from]
push esi
call dbg.send_to_user
jmp 0x8066aac
mov eax, dword [ebx + 0x2c]
cmp byte [eax], 0x2a
jne 0x8066b0b
nop
lea esi, [esi]
mov al, byte [edi + 0x3c]
test eax, 0x10
jne 0x8066e6f
and eax, 0x20
je 0x8066e60
mov dword [change], 0
mov dword [parms], 0
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8066c9a
mov al, byte [eax]
test al, al
je 0x8066c9a
movsx eax, al
cmp eax, 0x2b
je 0x8066c90
cmp eax, 0x2d
mov esi, 2
jne 0x8066a9a
inc ebx
cmp byte [ebx], 0
je 0x8066a9a
sub esp, 8
push 0x8067d94
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8066bd0
mov eax, esi
movsx esi, al
mov dword [sh], esi
inc dword [parms]
jmp 0x8066b60
lea esi, [esi]
sub esp, 8
push 0x806e9c9
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8066bef
mov eax, esi
movsx esi, al
mov dword [av], esi
jmp 0x8066bc4
sub esp, 8
push 0x806e9cc
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8066c0e
mov eax, esi
movsx esi, al
mov dword [ao], esi
jmp 0x8066bc4
sub esp, 8
push str.ECHO
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8066c2d
mov eax, esi
movsx esi, al
mov dword [ec], esi
jmp 0x8066bc4
mov al, byte [ebx]
cmp al, 0x50
je 0x8066c3b
cmp al, 0x70
jne 0x8066a9a
inc ebx
mov dl, byte [ebx]
lea eax, [edx - 0x30]
cmp al, 4
ja 0x8066c61
cmp byte [ebx + 1], 0
jne 0x8066c61
mov eax, esi
movsx esi, al
movsx eax, dl
sub eax, 0x30
mov dword [pm], esi
mov dword [pl], eax
jmp 0x8066bc4
test dl, dl
jne 0x8066a9a
mov eax, esi
cmp al, 2
jne 0x8066a9a
mov dword [pm], 2
mov dword [pl], 0
jmp 0x8066bc4
lea esi, [esi]
lea edi, [edi]
mov esi, 1
jmp 0x8066b9d
mov ebx, dword [parms]
test ebx, ebx
je 0x8066a9a
cmp dword [sh], 1
je 0x8066e39
cmp dword [sh], 2
je 0x8066e1d
cmp dword [av], 1
je 0x8066e01
cmp dword [av], 2
je 0x8066de5
cmp dword [ao], 1
je 0x8066dc9
cmp dword [ao], 2
je 0x8066dad
cmp dword [ec], 1
je 0x8066d91
cmp dword [ec], 2
je 0x8066d75
cmp dword [pm], 1
je 0x8066d48
cmp dword [pm], 2
je 0x8066d2f
mov ecx, dword [change]
test ecx, ecx
je 0x8066d23
push edx
lea eax, [edi + 8]
push eax
push str.User__s_has_been_modified
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x8066aac
push eax
lea eax, [edi + 8]
push eax
push str.User__s_is_unmodified
jmp 0x8066d12
mov ax, word [edi + 0x3c]
test eax, 0x1c0
je 0x8066d01
and eax, 0xfffffe3f
mov word [edi + 0x3c], ax
inc dword [change]
jmp 0x8066d01
mov cx, word [edi + 0x3c]
mov eax, ecx
shr ax, 6
and eax, 7
cmp eax, dword [pl]
je 0x8066cfb
mov edx, dword [pl]
and edx, 7
mov eax, ecx
shl edx, 6
and eax, 0xfffffe3f
or eax, edx
mov word [edi + 0x3c], ax
inc dword [change]
jmp 0x8066cfb
mov al, byte [edi + 0x3c]
test eax, 1
je 0x8066cf5
and eax, 0xfffffffe
mov byte [edi + 0x3c], al
inc dword [change]
jmp 0x8066cf5
mov al, byte [edi + 0x3c]
test eax, 1
jne 0x8066ceb
or eax, 1
mov byte [edi + 0x3c], al
inc dword [change]
jmp 0x8066ceb
mov al, byte [edi + 0x3c]
test eax, 2
je 0x8066ce1
and eax, 0xfffffffd
mov byte [edi + 0x3c], al
inc dword [change]
jmp 0x8066ce1
mov al, byte [edi + 0x3c]
test eax, 2
jne 0x8066cd7
or eax, 2
mov byte [edi + 0x3c], al
inc dword [change]
jmp 0x8066cd7
mov al, byte [edi + 0x3c]
test eax, 4
je 0x8066ccd
and eax, 0xfffffffb
mov byte [edi + 0x3c], al
inc dword [change]
jmp 0x8066ccd
mov al, byte [edi + 0x3c]
test eax, 4
jne 0x8066cc3
or eax, 4
mov byte [edi + 0x3c], al
inc dword [change]
jmp 0x8066cc3
mov al, byte [edi + 0x3c]
test eax, 8
je 0x8066cb9
and eax, 0xfffffff7
mov byte [edi + 0x3c], al
inc dword [change]
jmp 0x8066cb9
mov al, byte [edi + 0x3c]
test eax, 8
jne 0x8066caf
or eax, 8
mov byte [edi + 0x3c], al
mov dword [change], 1
jmp 0x8066caf
lea esi, [esi]
push eax
lea eax, [edi + 8]
push eax
push str._s_is_not_locked_and_cannot_be_modified
jmp 0x8066b15
push eax
lea eax, [edi + 8]
push eax
push str._s_is_remote_and_cannot_be_modified_on_this_bot
jmp 0x8066b15
push eax
mov eax, dword [edi + 0x2c]
push eax
push str.Access_denied__you_have_no_access_on__s_
jmp 0x8066b15
push ecx
push ebx
push str.Unknown_user__s
jmp 0x8066b15
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
mov eax, dword [obj.current]
push 0
add eax, 0x724
push eax
call sym.imp.open
mov edi, eax
add esp, 0x10
xor eax, eax
test edi, edi
js 0x804a5d8
mov edx, dword [obj.current]
xor esi, esi
cmp esi, dword [edx + 0x71c]
mov ebx, dword [edx + 0x720]
jge 0x804a5bd
lea esi, [esi]
cmp byte [ebx], 0
je 0x804a59f
mov al, byte [ebx + 0x3c]
and eax, 0x30
cmp al, 0x30
je 0x804a5e0
sub esp, 0xc
push ebx
call dbg.remove_user
add ebx, 0x48
add esp, 0x10
mov edx, dword [obj.current]
inc esi
cmp esi, dword [edx + 0x71c]
jl 0x804a590
sub esp, 8
push dbg.readuserlist_callback
push edi
call dbg.readline
mov dword [esp], edi
call sym.imp.close
mov eax, 1
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
add ebx, 0x48
jmp 0x804a5b4
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
mov dword [user], eax
mov dword [esp], ebx
call dbg.chop
mov dword [host], eax
mov dword [esp], ebx
call dbg.chop
mov eax, dword [rest]
add esp, 0x10
test eax, eax
je 0x80603ed
cmp byte [eax], 0x3a
je 0x80604eb
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x80604c6
mov eax, dword [obj.current]
mov esi, dword [eax + 0xb30]
test esi, esi
je 0x8060433
nop
lea esi, [esi]
mov eax, dword [esi + 0x10]
cmp eax, 5
je 0x8060480
cmp eax, 0x19
je 0x8060440
mov esi, dword [esi]
test esi, esi
jne 0x8060420
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 0xc
mov eax, dword [host]
push eax
mov ebx, dword [user]
push ebx
push edi
push str.Userhost:__s_s__s
mov ecx, dword [esi + 8]
push ecx
call dbg.send_to_user
add esp, 0x18
mov eax, dword [obj.current]
mov ebx, dword [esi]
add eax, 0xb30
push esi
push eax
call dbg.remove_time
mov esi, ebx
add esp, 0x10
jmp 0x806042f
mov esi, esi
lea edi, [edi]
push ecx
push edi
push str.Whois_Info_for_____s
mov edx, dword [esi + 8]
push edx
call dbg.send_to_user
mov eax, dword [host]
push eax
mov eax, dword [user]
push eax
push str.Address____________s__s
mov eax, dword [esi + 8]
push eax
call dbg.send_to_user
add esp, 0x1c
mov eax, dword [rest]
push eax
push str.IRCName____________s
mov eax, dword [esi + 8]
push eax
call dbg.send_to_user
add esp, 0x10
mov eax, dword [esi + 0x10]
jmp 0x8060428
mov esi, dword [host]
push esi
mov ebx, dword [user]
push ebx
mov eax, dword [obj.current]
push 0x806e4b1
add eax, 0x2e0
push eax
call sym.imp.sprintf
add esp, 0x10
jmp 0x806040c
inc eax
mov dword [rest], eax
jmp 0x80603ed
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [obj.current]
mov eax, dword [eax + 0xb38]
sub esp, 8
test eax, eax
mov esi, dword [arg_8h]
mov ebx, dword [arg_ch]
mov edx, 0x806f231
je 0x8064965
mov edx, dword [eax + 4]
push edx
mov eax, dword [ebx]
push eax
call dbg.Strcat
mov dword [ebx], eax
add dword [esi], 3
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
mov ecx, dword [arg_ch]
lea esi, [esi]
mov al, byte [edx]
inc edx
test al, al
jne 0x8057c40
dec edx
nop
lea esi, [esi]
mov al, byte [ecx]
mov byte [edx], al
inc ecx
inc edx
test al, al
jne 0x8057c50
lea eax, [edx - 1]
pop ebp
ret
push ebp
mov ebp, esp
lea eax, [arg_ch]
sub esp, 0xc
push eax
mov eax, dword [format]
push eax
push obj.lebuf
call sym.imp.vsprintf
mov eax, dword [obj.LE]
add esp, 0x10
test eax, eax
js 0x8059590
push obj.lebuf
mov edx, dword [obj.now]
push edx
push str._lu___s
mov eax, dword [obj.LE]
push eax
call dbg.send_to_socket
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
push ecx
push 0x1b6
push 0x601
push str.LinkEvents
call sym.imp.open
mov dword [obj.LE], eax
add esp, 0x10
jmp 0x8059564
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x74
lea esi, [ebp - 0x78]
push esi
push obj.executable
call sym.imp.stat
add esp, 0x10
test eax, eax
js 0x805d3a5
mov dword [var_60h], 0
mov dword [var_58h], 0
mov dword [var_50h], 0
mov edi, obj.mechbin
mov ecx, 0x60
cld
repe cmpsb byte [esi], byte ptr es:[edi]
je 0x805d339
sub esp, 0xc
push str._mech_exec__executable_has_been_altered_n
call dbg.debug
mov eax, dword [obj.debug_on_exit]
add esp, 0x10
test eax, eax
je 0x805d32f
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
sub esp, 0xc
push 1
call sym.imp.exit
xor ebx, ebx
nop
lea esi, [esi]
sub esp, 0xc
push ebx
inc ebx
call sym.imp.close
add esp, 0x10
cmp ebx, 0xff
jle 0x805d340
sub esp, 0xc
push obj.executable
mov dword [obj.mallocdoer], 0x805d2c0
call sym.imp.strlen
add eax, 4
mov dword [esp], eax
call dbg.MyMalloc
mov edx, dword [obj.respawn]
push edx
push obj.executable
push str._s__i
push eax
mov ebx, eax
call sym.imp.sprintf
add esp, 0x1c
push 0
push ebx
push obj.executable
call sym.imp.execl
jmp 0x805d313
sub esp, 0xc
push str._mech_exec__unable_to_stat_executable_n
jmp 0x805d30e
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x44
push 1
mov edi, dword [arg_8h]
push edi
call dbg.search_list
add esp, 0x10
test eax, eax
je 0x80559e0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push edi
call dbg.password_needed
add esp, 0x10
test eax, eax
je 0x8055a04
sub esp, 0xc
push edi
call dbg.verified
add esp, 0x10
test eax, eax
je 0x8055b20
sub esp, 0xc
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
mov dword [sip], eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, eax
je 0x80559cb
cmp byte [eax], 0
je 0x80559cb
sub esp, 0xc
push eax
call sym.imp.atoi
mov dword [iport], eax
sub eax, 0x400
add esp, 0x10
cmp eax, 0xfbff
ja 0x80559cb
push ebx
lea eax, [ipl]
push eax
push 0x806b738
mov ecx, dword [sip]
push ecx
call sym.imp.sscanf
add esp, 0x10
dec eax
jne 0x80559cb
push esi
sub esp, 8
mov ebx, dword [ipl]
xchg bl, bh
ror ebx, 0x10
xchg bl, bh
push ebx
call sym.imp.__inet_ntoa
add esp, 0xc
push eax
push edi
push str._dcc_connect___s___s__s__n
call dbg.debug
mov dword [esp], 0x264
mov dword [obj.mallocdoer], 0x80559b0
call dbg.MyMalloc
mov esi, eax
pop eax
pop edx
push edi
lea eax, [esi + 0x20c]
push eax
call sym.imp.strcpy
mov dword [esp], ebx
call sym.imp.__inet_ntoa
pop ebx
pop edi
push eax
lea ebx, [ip_addr]
push ebx
call sym.imp.strcpy
mov eax, dword [obj.now]
mov dword [esi + 0x260], eax
mov dword [esi + 4], 0xffffffff
mov dword [esi + 0x208], 0x211
mov dword [esp], esi
call dbg.add_client
add esp, 0xc
push 0
mov ecx, dword [iport]
push ecx
push ebx
call dbg.SockConnect
add esp, 0x10
test eax, eax
mov dword [esi + 4], eax
jns 0x80559cb
mov dword [esi + 0x208], 0x80
jmp 0x80559cb
nop
lea esi, [esi]
sub esp, 8
push str.Use__VERIFY__to_get_verified_first
push edi
call dbg.send_to_user
jmp 0x80559cb
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edi, dword [arg_8h]
mov eax, dword [edi + 0x1c]
test eax, eax
mov esi, dword [arg_ch]
lea ebx, [edi + 0x1c]
je 0x804cda0
lea esi, [esi]
sub esp, 8
mov ecx, dword [eax + 0x3c]
push ecx
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804cda0
mov ebx, dword [ebx]
mov eax, dword [ebx]
test eax, eax
jne 0x804cd70
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, 1
pop ebp
ret
lea esi, [esi]
mov eax, dword [ebx]
test eax, eax
je 0x804cd8c
cmp eax, dword [edi + 0x20]
mov dword [CU], eax
je 0x804cdd3
mov eax, dword [ebx]
mov eax, dword [eax]
mov dword [ebx], eax
mov eax, dword [CU]
sub esp, 0xc
add eax, 0x3c
push eax
call dbg.MyFree
lea eax, [CU]
mov dword [esp], eax
call dbg.MyFree
add esp, 0x10
jmp 0x804cd8c
mov dword [edi + 0x20], 0
jmp 0x804cdae
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
mov ebx, eax
mov eax, dword [rest]
add esp, 0x10
test eax, eax
je 0x80523b5
cmp byte [eax], 0
jne 0x80523d0
sub esp, 8
mov ecx, dword [0x8070550]
push ecx
push esi
call dbg.usage
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
cmp byte [ebx], 0x23
je 0x8052450
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8052446
cmp byte [ebx], 0x3d
je 0x8052416
push eax
mov eax, dword [rest]
push eax
push 0x806a12d
push ebx
call dbg.sendprivmsg
add esp, 0xc
push ebx
push str.Message_sent_to__s
push esi
call dbg.send_to_user
jmp 0x80523c5
sub esp, 8
push 1
inc ebx
push ebx
call dbg.search_list
add esp, 0x10
test eax, eax
je 0x805243d
sub esp, 8
mov edx, dword [rest]
push edx
add eax, 0x20c
push eax
call dbg.send_chat
jmp 0x8052405
push ecx
push ebx
push str.I_have_no_DCC_connection_to__s
jmp 0x805240e
sub esp, 8
push str.Nice_try__but_I_dont_think_so
jmp 0x805240e
mov edx, dword [cmdlevel]
push edx
push eax
mov ebx, dword [to]
push ebx
push esi
call dbg.do_say
jmp 0x80523c5
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x434
push 1
mov eax, dword [channel]
push eax
call dbg.find_channel
mov ebx, eax
add esp, 0x10
xor eax, eax
test ebx, ebx
je 0x804c94d
sub esp, 8
push 0xc
push 0
call dbg.get_int_varc
mov ebx, dword [ebx + 0x18]
add esp, 0x10
test ebx, ebx
mov edi, eax
mov dword [count], 0
je 0x804c947
lea esi, [esi]
lea edi, [edi]
xor esi, esi
test ebx, ebx
mov word [unbanmode], 0x2d
mov byte [unbanstring], 0
je 0x804c927
cmp esi, edi
jl 0x804c960
lea eax, [unbanstring]
push eax
lea eax, [unbanmode]
push eax
push 0x806e50a
mov esi, dword [channel]
push esi
call dbg.sendmode
add esp, 0x10
test ebx, ebx
jne 0x804c910
mov eax, dword [count]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [ebx + 0xc]
push eax
mov eax, dword [pattern]
push eax
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x804c9cb
mov eax, dword [seconds]
test eax, eax
je 0x804c98b
mov eax, dword [obj.now]
sub eax, dword [ebx + 0x10]
cmp eax, dword [seconds]
jle 0x804c9cb
sub esp, 8
push 0x806e330
lea eax, [unbanmode]
push eax
call dbg.Strcat
pop ecx
pop eax
push 0x8067364
lea eax, [unbanstring]
push eax
call dbg.Strcat
pop eax
pop edx
mov eax, dword [ebx + 8]
push eax
lea eax, [unbanstring]
push eax
call dbg.Strcat
inc esi
inc dword [count]
add esp, 0x10
mov ebx, dword [ebx]
test ebx, ebx
je 0x804c927
cmp esi, edi
jl 0x804c960
jmp 0x804c927
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x88
lea edi, [rest]
push edi
mov esi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805f353
cmp byte [eax], 0x23
je 0x805f3e0
sub esp, 8
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805f353
mov eax, dword [obj.current]
cmp eax, 0xfffffca0
mov byte [sign], 0x2b
je 0x805f3ce
sub esp, 8
add eax, 0x360
push eax
lea eax, [tbuf]
push eax
call sym.imp.strcpy
add esp, 0x10
sub esp, 0xc
push edi
call dbg.chop
add esp, 0x10
cmp byte [eax], 0x3a
mov esi, eax
je 0x805f3c8
sub esp, 0xc
push esi
call sym.imp.strlen
xor ebx, ebx
add esp, 0x10
cmp ebx, eax
mov edi, eax
jge 0x805f339
jmp 0x805f310
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov dl, byte [ebx + esi]
movsx eax, dl
cmp eax, 0x2b
je 0x805f3c0
cmp eax, 0x2d
je 0x805f3c0
cmp byte [sign], 0x2b
je 0x805f3a4
cmp byte [sign], 0x2d
je 0x805f35b
inc ebx
cmp ebx, edi
jl 0x805f310
sub esp, 8
lea eax, [tbuf]
push eax
mov eax, dword [obj.current]
add eax, 0x360
push eax
call sym.imp.strcpy
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ecx
push eax
push 0x806f1f3
lea eax, [tbuf3]
push eax
call sym.imp.sprintf
pop eax
pop edx
lea eax, [tbuf]
push eax
lea eax, [tbuf2]
push eax
call sym.imp.strcpy
pop ecx
mov dword [aptr], eax
pop eax
lea eax, [tbuf3]
push eax
lea eax, [aptr]
push eax
call dbg.get_token
mov edx, dword [aptr]
push edx
push eax
push 0x8069e64
lea eax, [tbuf]
push eax
call sym.imp.sprintf
add esp, 0x20
jmp 0x805f334
push eax
lea eax, [tbuf]
push eax
push str._s_c
push eax
call sym.imp.sprintf
add esp, 0x10
jmp 0x805f334
lea esi, [esi]
mov byte [sign], dl
jmp 0x805f334
inc esi
jmp 0x805f2ed
mov byte [tbuf], 0
jmp 0x805f2d6
mov esi, esi
lea edi, [edi]
sub esp, 8
push eax
push esi
call dbg.find_user
pop edi
mov dword [obj.CurrentUser], eax
pop eax
push ebx
push esi
call dbg.find_shit
mov dword [obj.CurrentShit], eax
mov dword [esp], esi
call dbg.getnick
pop edx
pop ecx
push eax
push obj.CurrentNick
call sym.imp.strcpy
add esp, 0xc
mov edi, dword [rest]
push edi
push ebx
push esi
call dbg.on_mode
jmp 0x805f350
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
mov edi, dword [arg_10h]
push edi
mov esi, dword [arg_8h]
push esi
call dbg.find_ban
add esp, 0x10
test eax, eax
je 0x804c1c0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push 0x14
mov dword [obj.mallocdoer], 0x804c190
call dbg.MyMalloc
pop ecx
mov ebx, eax
pop eax
push edi
lea eax, [ebx + 8]
push eax
mov dword [obj.mallocdoer], 0x804c190
call dbg.mstrcpy
pop eax
mov eax, dword [from]
test eax, eax
mov dword [obj.mallocdoer], 0x804c190
pop edx
je 0x804c22a
push eax
lea eax, [ebx + 0xc]
push eax
call dbg.mstrcpy
mov eax, dword [arg_14h]
mov dword [ebx + 4], 0
mov dword [ebx + 0x10], eax
mov eax, dword [esi]
add esp, 0x10
test eax, eax
je 0x804c224
mov dword [eax + 4], ebx
mov eax, dword [esi]
mov dword [ebx], eax
mov dword [esi], ebx
jmp 0x804c1ad
mov eax, str._UNKNOWN_
jmp 0x804c1ff
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8049fb5
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov ebx, dword [eax + 0x720]
push ebx
call dbg.findstruct
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8049fb5
sub esp, 0xc
push esi
call sym.imp.atoi
add esp, 0x10
test eax, eax
js 0x8049fb5
cmp eax, 4
jg 0x8049fb5
mov edx, eax
and edx, 7
mov ax, word [ebx + 0x3c]
shl edx, 6
and eax, 0xfffffe3f
or eax, edx
mov word [ebx + 0x3c], ax
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov esi, dword [arg_8h]
test esi, esi
mov edi, dword [arg_ch]
je 0x8057a7e
mov ebx, dword [esi]
test ebx, ebx
je 0x8057a7e
cmp byte [ebx], 0
jne 0x8057a90
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
mov al, byte [ebx]
test al, al
je 0x8057ab5
sub esp, 8
movsx eax, al
push eax
push edi
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x8057ab3
mov eax, dword [esi]
inc eax
mov dword [esi], eax
mov ebx, eax
jmp 0x8057a90
mov ebx, dword [esi]
cmp byte [ebx], 0
je 0x8057a7e
sub esp, 8
push edi
push ebx
call sym.imp.strpbrk
add esp, 0x10
test eax, eax
mov dword [esi], eax
je 0x8057af2
mov byte [eax], 0
inc dword [esi]
mov eax, dword [esi]
mov al, byte [eax]
test al, al
je 0x8057aee
sub esp, 8
movsx eax, al
push eax
push edi
call sym.imp.strchr
add esp, 0x10
test eax, eax
jne 0x8057ad0
mov eax, ebx
jmp 0x8057a80
mov dword [esi], sym..rodata
jmp 0x8057aee
push ebp
mov ebp, esp
mov ecx, dword [arg_ch]
xor edx, edx
push esi
cmp edx, ecx
push ebx
mov esi, dword [arg_14h]
mov ebx, dword [arg_10h]
mov eax, dword [base]
jge 0x8059251
mov esi, esi
lea edi, [edi]
cmp byte [eax], 0
je 0x805924a
cmp dword [eax + 4], esi
je 0x8059253
inc edx
add eax, ebx
cmp edx, ecx
jl 0x8059240
xor eax, eax
pop ebx
pop esi
pop ebp
ret
jmp dword [reloc.atoi]
push ebp
mov ebp, esp
sub esp, 8
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov eax, dword [eax + 0x720]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
je 0x8049f32
or byte [eax + 0x3c], 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
push ebx
mov eax, dword [obj.current]
test eax, eax
je 0x804938c
mov ecx, dword [eax + 0xb34]
test ecx, ecx
je 0x8049440
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
mov dword [obj.cfgChan], 0
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80493b5
cmp byte [eax], 0
jne 0x80493c0
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
sub esp, 0xc
push eax
call dbg.isnick
add esp, 0x10
test eax, eax
je 0x804942b
sub esp, 0xc
push ebx
call dbg.add_bot
add esp, 0x10
test eax, eax
je 0x80493e7
mov dword [obj.current], eax
jmp 0x80493b5
sub esp, 8
push ebx
push str.init:_Error:_Couldnt_add__s_n
call sym.imp.printf
mov ebx, dword [obj.debug_on_exit]
add esp, 0x10
test ebx, ebx
je 0x8049412
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov ecx, dword [obj.do_exec]
test ecx, ecx
je 0x8049421
call dbg.mech_exec
sub esp, 0xc
push 1
call sym.imp.exit
sub esp, 8
push ebx
push str.init:_Error:_Illegal_nick__s_n
jmp 0x80493f0
lea esi, [esi]
lea edi, [edi]
push edx
add eax, 0x22d
push eax
push obj.ERR_INIT
push str._s__s_will_not_join_any_channels_n
call sym.imp.printf
add esp, 0x10
jmp 0x804938c
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x224
push 0x14
mov edi, dword [arg_ch]
push edi
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x8058527
test byte [edi + 0x38d], 8
jne 0x8058530
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
sub esp, 0xc
mov eax, dword [from]
push eax
call dbg.getnick
mov esi, dword [edi + 0x1c]
add esp, 0x10
test esi, esi
mov ebx, eax
je 0x8058527
nop
lea esi, [esi]
sub esp, 8
mov eax, dword [esi + 0x3c]
push eax
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805856c
mov esi, dword [esi]
test esi, esi
jne 0x8058550
jmp 0x8058527
test esi, esi
je 0x8058527
sub esp, 8
push 0x21
mov eax, dword [protnuh]
push eax
call sym.imp.strchr
add esp, 0x10
test eax, eax
jne 0x8058761
mov ebx, dword [edi + 0x1c]
test ebx, ebx
je 0x80585b1
sub esp, 8
mov eax, dword [ebx + 0x3c]
push eax
mov eax, dword [protnuh]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8058741
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8058590
sub esp, 8
mov eax, dword [edi + 4]
push eax
lea eax, [saveprotnuh]
push eax
call dbg.find_user
pop ecx
mov edx, dword [edi + 4]
mov ebx, eax
pop eax
push edx
lea eax, [saveprotnuh]
push eax
call dbg.get_protuseraccess
add esp, 0x10
test ebx, ebx
mov dword [level], eax
je 0x80585fc
mov ax, word [ebx + 0x3c]
shr ax, 6
and eax, 7
cmp eax, dword [level]
jg 0x8058720
mov eax, dword [level]
test eax, eax
je 0x8058527
sub esp, 8
mov eax, dword [edi + 4]
push eax
mov eax, dword [from]
push eax
call dbg.find_user
add esp, 0x10
test eax, eax
je 0x8058641
test word [eax + 0x3c], 0x1c0
jne 0x8058527
mov eax, dword [eax + 0x3c]
shr eax, 9
and eax, 0xff
cmp eax, 0x4f
jg 0x8058527
sub esp, 8
push 1
mov eax, dword [from]
push eax
call dbg.format_uh
add esp, 0x10
cmp dword [level], 3
mov ebx, eax
jle 0x805866b
mov eax, dword [esi + 4]
test eax, 0x400
je 0x80586f6
cmp dword [level], 2
jle 0x805867e
mov eax, dword [esi + 4]
test eax, 0x200
je 0x80586c7
cmp dword [level], 2
jne 0x8058527
mov eax, dword [esi + 4]
test eax, 0x100
jne 0x8058527
or eax, 0x100
mov dword [esi + 4], eax
sub esp, 0xc
mov eax, dword [from]
push eax
call dbg.getnick
add esp, 0xc
push eax
push str._o__s
mov eax, dword [edi + 4]
push eax
call dbg.sendmode
add esp, 0x10
jmp 0x8058527
or eax, 0x200
mov dword [esi + 4], eax
lea eax, [saveprotnuh]
push eax
push 0x806b8a2
push eax
mov ebx, dword [from]
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
mov eax, dword [edi + 4]
push eax
call dbg.sendkick
add esp, 0x10
jmp 0x805867e
or eax, 0x400
mov dword [esi + 4], eax
push eax
push ebx
push eax
mov ebx, dword [from]
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
mov eax, dword [edi + 4]
push eax
call dbg.deop_ban
add esp, 0x10
jmp 0x805866b
mov esi, esi
sub esp, 8
mov dword [level], eax
lea eax, [ebx + 8]
push eax
lea eax, [saveprotnuh]
push eax
call sym.imp.strcpy
add esp, 0x10
jmp 0x80585fc
sub esp, 0xc
push ebx
call dbg.get_nuh
pop edx
pop ecx
push eax
lea eax, [saveprotnuh]
push eax
call sym.imp.strcpy
add esp, 0x10
jmp 0x80585b1
sub esp, 8
mov ebx, dword [protnuh]
push ebx
jmp 0x805874d
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x21c
test byte [obj.will], 1
jne 0x804cef0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
lea ebx, [rest]
push ebx
mov eax, dword [to]
push eax
call dbg.get_channel
mov dword [chan], eax
mov eax, dword [rest]
add esp, 0x10
test eax, eax
je 0x804cf15
cmp byte [eax], 0
jne 0x804cf28
sub esp, 8
push str.Who_do_you_want_me_look_for_
mov edi, dword [from]
push edi
call dbg.send_to_user
jmp 0x804cee5
sub esp, 0xc
push ebx
call dbg.chop
mov dword [esp], eax
mov esi, eax
call dbg.isnick
add esp, 0x10
test eax, eax
jne 0x804cf4c
sub esp, 8
push str.Illegal_nick
jmp 0x804cf1d
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push esi
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x804cfbc
mov eax, dword [obj.current]
push esi
add eax, 0x220
push eax
push str._s_is_me_you_idiot_
lea ebx, [message]
push ebx
call sym.imp.sprintf
add esp, 0x10
mov eax, dword [to]
cmp byte [eax], 0x23
je 0x804cfa7
push edx
push ebx
push 0x806a12d
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x804cee5
push esi
push ebx
push 0x806a12d
mov ecx, dword [chan]
push ecx
call dbg.sendprivmsg
jmp 0x804cf9f
sub esp, 0xc
mov ebx, dword [from]
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
push esi
call dbg.matches
add esp, 0x10
test eax, eax
je 0x804d130
xor eax, eax
mov al, byte [esi]
mov al, byte [eax + obj.tolowertab]
mov byte [c1], al
mov eax, dword [obj.current]
mov edi, dword [eax + 0xb44]
test edi, edi
je 0x804d020
xor eax, eax
mov al, byte [edi + 0x18]
mov bl, byte [eax + obj.tolowertab]
cmp byte [c1], bl
je 0x804d110
cmp byte [c1], bl
ja 0x804d02c
mov edi, dword [edi]
test edi, edi
jne 0x804cffb
push eax
push esi
push str.I_have_no_memory_of__s
jmp 0x804cf78
xor edi, edi
test edi, edi
je 0x804d020
mov eax, dword [edi + 0x14]
cmp eax, 4
lea ebx, [message]
ja case.default.0x804d044
jmp dword [eax*4 + 0x8068d10]
push eax
push esi
push str._s_is_right_here_moron_
jmp 0x804cf78
sub esp, 0x18
push 0
mov eax, dword [obj.now]
sub eax, dword [edi + 0x10]
push eax
call dbg.idle2str
add esp, 0x14
push eax
mov eax, dword [edi + 8]
push eax
mov eax, dword [edi + 4]
push eax
push str._s_parted_from__s__s_ago
lea ebx, [message]
push ebx
call sym.imp.sprintf
add esp, 0x20
jmp case.default.0x804d044
mov eax, dword [edi + 8]
sub esp, 0xc
push eax
sub esp, 8
push 0
mov eax, dword [obj.now]
sub eax, dword [edi + 0x10]
push eax
call dbg.idle2str
add esp, 0x10
push eax
mov edi, dword [edi + 4]
push edi
push str._s_signed_off__s_ago_with_message___s_
jmp 0x804d07b
sub esp, 0x18
push 0
mov eax, dword [obj.now]
sub eax, dword [edi + 0x10]
push eax
call dbg.idle2str
add esp, 0x14
push eax
mov esi, dword [edi + 8]
push esi
mov ebx, dword [edi + 4]
push ebx
push str._s_changed_nicks_to__s___s_ago
jmp 0x804d07b
sub esp, 8
push 0
mov eax, dword [obj.now]
sub eax, dword [edi + 0x10]
push eax
call dbg.idle2str
pop edx
pop ecx
push eax
mov eax, dword [edi + 8]
push eax
mov eax, dword [edi + 0xc]
push eax
mov edi, dword [edi + 4]
push edi
push str._s_was_kicked_by__s_with_message___s___s_ago
jmp 0x804d07b
lea esi, [esi]
sub esp, 8
lea eax, [edi + 0x18]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804d012
jmp 0x804d02e
lea esi, [esi]
push eax
push esi
push str.Trying_to_find_yourself__s_
jmp 0x804cf78
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
call dbg.get_channel
mov esi, eax
pop eax
pop edx
push esi
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8052f20
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [nick], eax
je 0x8052fc5
push edi
push 0
mov ebx, dword [nick]
push ebx
mov ecx, dword [from]
push ecx
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov edi, eax
je 0x8052f0c
sub esp, 8
push esi
push eax
call dbg.get_userlevel
mov ebx, eax
pop eax
pop edx
push esi
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp ebx, eax
jle 0x8052f82
push edi
push str.Kickban_attempt_of__s
push obj.CurrentNick
push esi
call dbg.sendkick
jmp 0x8052f0c
push eax
push edi
mov eax, dword [nick]
push eax
push esi
call dbg.deop_ban
mov eax, dword [rest]
test eax, eax
jne 0x8052f9a
mov eax, str.Requested_Kick
push eax
push 0x806a12d
mov edi, dword [nick]
push edi
push esi
call dbg.sendkick
add esp, 0x20
push esi
mov esi, dword [nick]
push esi
push str._s_kickbanned_on__s
mov ebx, dword [from]
push ebx
call dbg.send_to_user
jmp 0x8052f0c
sub esp, 8
push str.No_nick_specified
jmp 0x8052fb7
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x101c
mov ebx, dword [arg_8h]
test ebx, ebx
je 0x80615e0
push esi
lea eax, [arg]
push eax
mov ecx, dword [format]
push ecx
lea edi, [buf]
push edi
call sym.imp.vsprintf
pop eax
pop edx
push edi
lea eax, [copy]
push eax
mov dword [obj.mallocdoer], 0x80614d0
call dbg.mstrcpy
mov eax, dword [copy]
add esp, 0x10
test eax, eax
mov dword [pt], eax
je 0x8061578
cmp byte [eax], 0
je 0x8061578
lea esi, [pt]
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x806b2d9
push esi
call dbg.get_token
add esp, 0xc
push eax
push eax
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
push str._StU___s__s_n
call dbg.debug
mov eax, dword [pt]
add esp, 0x10
test eax, eax
je 0x8061578
cmp byte [eax], 0
jne 0x8061540
sub esp, 0xc
lea eax, [copy]
push eax
call dbg.MyFree
add esp, 0x10
test ebx, ebx
je 0x80615e0
mov al, byte [ebx]
test al, al
je 0x80615e0
cmp al, 0x24
je 0x80615e8
sub esp, 8
push edi
push ebx
call dbg.send_chat
add esp, 0x10
test eax, eax
jne 0x80615e0
mov eax, dword [obj.need_dcc]
test eax, eax
jne 0x80615e0
mov eax, dword [obj.shell_cmd]
test eax, eax
jne 0x80615e0
cmp byte [ebx], 0x2a
je 0x80615e0
push eax
push edi
push esi
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
push str.NOTICE__s_:_s
call dbg.send_to_server
add esp, 0x10
lea esi, [esi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push ebx
push str._send_to_user_____s_n
call dbg.debug
mov dword [esp], edi
mov esi, dword [obj.current]
call dbg.escape_string
mov dword [esp], eax
mov eax, dword [obj.current]
push ebx
add eax, 0x220
push eax
push 0x806f3cb
lea ebx, [tmp]
push ebx
call sym.imp.sprintf
add esp, 0x18
push ebx
push 0
call dbg.Link_reply
mov dword [obj.current], esi
jmp 0x80615e0
push ebp
mov ebp, esp
sub esp, 0x10
mov eax, dword [chan]
push eax
mov eax, dword [userhost]
push eax
call dbg.find_shit
add esp, 0x10
xor edx, edx
test eax, eax
je 0x80636b5
mov eax, dword [eax + 0x3c]
shr eax, 9
movzx edx, al
mov esp, ebp
mov eax, edx
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ecx, dword [userhost]
xor eax, eax
test ecx, ecx
je 0x806338e
mov edx, dword [obj.current]
xor edi, edi
xor esi, esi
cmp edi, dword [edx + 0x71c]
mov dword [best], 0
mov ebx, dword [edx + 0x720]
jge 0x806337e
jmp 0x8063360
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp byte [ebx], 0
je 0x8063372
mov al, byte [ebx + 0x3e]
shr al, 1
and eax, 7
cmp eax, 2
je 0x80633b0
inc esi
add ebx, 0x48
cmp esi, dword [edx + 0x71c]
jl 0x8063360
test edi, edi
je 0x806338c
mov eax, dword [obj.now]
cmp dword [edi + 0x44], eax
jl 0x8063396
mov eax, edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
push edi
call dbg.remove_user
xor eax, eax
jmp 0x806338e
lea esi, [esi]
lea edi, [edi]
mov edx, dword [channel]
test edx, edx
je 0x80633f0
sub esp, 8
mov eax, dword [ebx + 0x2c]
push eax
mov eax, dword [channel]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x80633f0
mov eax, dword [ebx + 0x2c]
cmp byte [eax], 0x2a
je 0x80633f0
mov eax, dword [channel]
cmp byte [eax], 0x2a
je 0x80633f0
mov edx, dword [obj.current]
jmp 0x8063372
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [userhost]
push eax
mov eax, dword [ebx + 0x38]
push eax
call dbg.num_matches
add esp, 0x10
cmp eax, dword [best]
jle 0x80633de
mov dword [best], eax
mov edi, ebx
jmp 0x80633de
push ebp
mov ecx, dword [obj.current]
mov ebp, esp
test ecx, ecx
push esi
push ebx
jne 0x8049ad0
sub esp, 8
push obj.ERR_INIT
push str._s_Stray_WINGATE_setting__ignored__n
call sym.imp.printf
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
mov esi, eax
pop eax
pop edx
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x8049ac1
sub esp, 0xc
push eax
call dbg.Atoi
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8049b12
mov eax, dword [eax]
test eax, eax
jne 0x8049b24
sub esp, 0xc
push str.init:_Syntax_error_in_WINGATE_statement__port_number_expected
call sym.imp.puts
add esp, 0x10
jmp 0x8049ac1
sub esp, 8
mov eax, dword [obj.current]
push esi
add eax, 0x296
push eax
call sym.imp.strcpy
mov edx, dword [obj.current]
mov eax, dword [ebx]
mov dword [edx + 0x2d8], eax
mov dword [edx + 0x2dc], 1
jmp 0x8049b1f
jmp dword [reloc.printf]
jmp dword [reloc.puts]
jmp dword [reloc.strcpy]
push ebp
mov ebp, esp
sub esp, 0x10
mov eax, dword [param]
push eax
mov eax, dword [Chan]
push eax
call dbg.find_chanuser
add esp, 0x10
test eax, eax
mov edx, eax
je 0x804ce92
mov eax, dword [arg_ch]
or dword [edx + 4], eax
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov esi, dword [arg_8h]
mov eax, dword [esi + 0x20]
test eax, eax
mov edi, dword [arg_ch]
jne 0x804cc80
mov ebx, dword [esi + 0x1c]
test ebx, ebx
je 0x804cc6f
lea esi, [esi]
cmp ebx, dword [esi + 0x20]
je 0x804cc69
sub esp, 8
mov eax, dword [ebx + 0x3c]
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804cc79
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804cc50
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov eax, ebx
mov dword [esi + 0x20], ebx
jmp 0x804cc71
sub esp, 8
mov eax, dword [eax + 0x3c]
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804cc46
mov eax, dword [esi + 0x20]
jmp 0x804cc71
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8055fbd
mov edi, dword [obj.ctcp_commands]
xor ebx, ebx
test edi, edi
je 0x8055fa0
mov edi, obj.ctcp_commands
lea esi, [esi]
sub esp, 8
push esi
mov ecx, dword [edi + ebx*8]
push ecx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8055fc5
inc ebx
mov eax, dword [ebx*8 + obj.ctcp_commands]
test eax, eax
jne 0x8055f80
sub esp, 0xc
mov eax, dword [from]
push eax
call dbg.max_userlevel
push esi
push eax
push obj.CurrentNick
push str._CTCP__:_s__i_:_Unknown___s_
call dbg.send_statmsg
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push edx
mov eax, dword [rest]
push eax
mov eax, dword [to]
push eax
mov eax, dword [from]
push eax
call dword [edi + ebx*8 + 4]
jmp 0x8055fbd
push ebp
mov ebp, esp
lea eax, [rest]
sub esp, 0x14
push eax
call dbg.chop
add esp, 0x10
test eax, eax
je 0x805429f
cmp byte [eax], 0
jne 0x8054340
mov eax, dword [rest]
test eax, eax
je 0x80542ab
cmp byte [eax], 0
jne 0x8054320
sub esp, 8
push 0x806a56a
mov eax, dword [from]
push eax
call dbg.send_to_user
mov edx, dword [obj.current]
mov eax, dword [edx + 4]
sub eax, 3
add esp, 0x10
cmp eax, 1
jbe 0x8054300
mov eax, dword [edx + 8]
cmp eax, 0xffffffff
je 0x80542ea
sub esp, 0xc
push eax
call sym.imp.close
add esp, 0x10
mov edx, dword [obj.current]
mov dword [edx + 8], 0xffffffff
leave
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push str.QUIT_:Switching_servers...
call dbg.send_to_server
mov eax, dword [obj.current]
pop ecx
mov edx, dword [eax + 8]
push edx
call dbg.killsock
jmp 0x80542e1
mov esi, esi
sub esp, 8
push eax
mov eax, dword [obj.current]
add eax, 0x246
push eax
call sym.imp.strcpy
add esp, 0x10
jmp 0x80542ab
lea esi, [esi]
sub esp, 8
push eax
mov eax, dword [obj.current]
add eax, 0x23a
push eax
call sym.imp.strcpy
add esp, 0x10
jmp 0x805429f
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
mov edi, dword [arg_8h]
call dbg.chop
mov esi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test esi, esi
je 0x80668db
test eax, eax
je 0x80668d0
push ecx
push eax
push esi
push str.STATS__s__s
call dbg.send_to_server
pop eax
pop edx
mov eax, dword [obj.current]
push edi
add eax, 0xb30
push eax
call dbg.make_time
mov dword [eax + 0x10], 0x14
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
push esi
push str.STATS__s
jmp 0x80668a2
sub esp, 8
mov ebx, dword [0x80707e0]
push ebx
push edi
call dbg.usage
jmp 0x80668c1
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [arg_8h]
mov dword [to], eax
mov eax, dword [obj.ulist]
xor ebx, ebx
test eax, eax
mov esi, dword [arg_ch]
je 0x804f890
mov edi, obj.ulist
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [edi + ebx*8]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804f8c7
inc ebx
mov edx, dword [ebx*8 + obj.ulist]
test edx, edx
jne 0x804f870
sub esp, 8
push 0x806858c
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804f8be
mov dword [arg_ch], str.You_cant_use_Windows_2000__dont_you_know_that_
mov eax, dword [to]
mov dword [arg_8h], eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_user
mov dword [arg_ch], str.Usage:__missing_
jmp 0x804f8ac
mov eax, dword [edi + ebx*8 + 4]
mov dl, byte [eax]
cmp dl, 0x40
je 0x804f8fd
cmp dl, 0x40
push eax
mov eax, sym..rodata
je 0x804f8f4
push eax
push str.Usage:__s_s
mov ecx, dword [to]
push ecx
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov eax, dword [ebx*8 + obj.ulist]
jmp 0x804f8dd
inc eax
jmp 0x804f8d2
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x24
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
call dbg.get_channel
pop edi
pop edx
push eax
mov esi, dword [from]
push esi
mov dword [channel], eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x80531f0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push ebx
call dbg.chop
xor edi, edi
add esp, 0x10
test eax, eax
mov dword [pattern], eax
je 0x805320e
cmp byte [eax], 0x2d
je 0x80534a0
mov eax, dword [rest]
test eax, eax
je 0x805321e
cmp byte [eax], 0x2d
je 0x805348d
test edi, edi
mov dword [flags], 0
mov dword [ct], 0
je 0x8053268
sub esp, 8
push str._ops
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805324c
mov dword [flags], 1
sub esp, 8
push str._nonops
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8053268
mov dword [flags], 2
sub esp, 8
push 3
mov ebx, dword [channel]
push ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805347e
mov al, byte [eax + 0x38d]
shr al, 4
and eax, 3
cmp eax, 2
mov edx, str.__from_memory_
je 0x805329e
mov edx, sym..rodata
push edx
mov eax, dword [channel]
push eax
push 0x806a36e
mov eax, dword [from]
push eax
call dbg.send_to_user
mov eax, dword [ebx + 0x1c]
add esp, 0x10
test eax, eax
je 0x8053471
mov esi, eax
jmp 0x80532d0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
push esi
call dbg.get_nuh
add esp, 0x10
cmp dword [flags], 1
mov edi, eax
mov ebx, dword [esi + 4]
je 0x8053460
cmp dword [flags], 2
je 0x8053440
mov eax, dword [pattern]
test eax, eax
je 0x8053308
mov eax, dword [pattern]
cmp byte [eax], 0
jne 0x8053420
test ebx, 2
mov byte [modechar], 0x20
je 0x8053400
mov byte [modechar], 0x40
sub esp, 8
mov eax, dword [channel]
push eax
push edi
mov byte [thechar], 0x75
call dbg.get_userlevel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80533d0
cmp ebx, 0xc8
je 0x80533c0
sub esp, 8
push 0x21
push edi
call sym.imp.strchr
inc eax
add esp, 0xc
push eax
push eax
push edi
call dbg.getnick
pop edx
pop ecx
push eax
movsx eax, byte [modechar]
push eax
movsx eax, byte [thechar]
push eax
push ebx
push str._4i_c____c__9s__s
mov eax, dword [from]
push eax
call dbg.send_to_user
inc dword [ct]
add esp, 0x20
mov esi, dword [esi]
test esi, esi
jne 0x80532d0
mov edi, dword [ct]
test edi, edi
je 0x80533a2
sub esp, 8
push 0x806a393
mov ebx, dword [from]
push ebx
call dbg.send_to_user
jmp 0x80531dd
sub esp, 8
push str.No_matching_users_found
mov esi, dword [from]
push esi
call dbg.send_to_user
add esp, 0x10
jmp 0x805338c
nop
lea esi, [esi]
mov byte [thechar], 0x62
jmp 0x8053342
lea esi, [esi]
sub esp, 8
mov eax, dword [channel]
push eax
push edi
call dbg.get_shitlevel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805333a
mov byte [thechar], 0x73
jmp 0x805333a
lea esi, [esi]
lea edi, [edi]
and ebx, 1
je 0x805331c
mov byte [modechar], 0x2b
jmp 0x805331c
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push edi
push eax
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x805337b
jmp 0x8053308
lea esi, [esi]
test ebx, 2
jne 0x805337b
jmp 0x80532f5
jmp 0x8053460
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
test ebx, 2
je 0x805337b
jmp 0x80532eb
sub esp, 8
push str.No_users_found
jmp 0x80533aa
push ecx
mov edx, dword [channel]
push edx
push str.I_have_no_information_on__s
jmp 0x8053394
sub esp, 0xc
push ebx
call dbg.chop
mov edi, eax
add esp, 0x10
jmp 0x805321e
sub esp, 0xc
push ebx
mov edi, eax
call dbg.chop
mov dword [pattern], eax
jmp 0x8053498
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_ch]
xor edx, edx
test ebx, ebx
mov esi, dword [arg_8h]
je 0x80581a2
sub esp, 8
push ebx
push obj.uhbuf
call sym.imp.strcpy
pop eax
pop edx
push 0x21
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
mov edx, ebx
je 0x80581b0
lea esp, [var_8h]
pop ebx
pop esi
mov eax, edx
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push 0x40
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x8058201
mov word [obj.uhbuf], 0x212a
mov byte [0x8073b62], 0
cmp byte [ebx], 0x2a
je 0x80581ec
sub esp, 8
push 0x806e306
push obj.uhbuf
call dbg.Strcat
add esp, 0x10
sub esp, 8
push ebx
push obj.uhbuf
call dbg.Strcat
mov edx, obj.uhbuf
jmp 0x80581a2
sub esp, 0xc
push ebx
call dbg.find_nuh
add esp, 0x10
test eax, eax
je 0x8058226
mov dword [arg_ch], eax
mov dword [arg_8h], obj.uhbuf
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp sym.imp.strcpy
test esi, esi
je 0x8058237
sub esp, 8
push ebx
push esi
call dbg.no_info
add esp, 0x10
xor edx, edx
jmp 0x80581a2
push ebp
mov ebp, esp
push edi
push ebx
cld
lea edi, [User]
xor eax, eax
mov ecx, 0x12
sub esp, 0x58
rep stosd dword es:[edi], eax
mov eax, dword [obj.userident]
mov dword [var_54h], eax
mov dword [obj.cfgUser], eax
inc eax
mov dword [obj.userident], eax
mov al, byte [var_1ah]
and eax, 0xfffffff1
mov edi, dword [args]
or eax, 6
push edi
mov byte [var_1ah], al
lea eax, [var_20h]
push eax
mov byte [User], 1
mov dword [obj.mallocdoer], 0x804a030
call dbg.mstrcpy
mov eax, dword [obj.current]
push 0x48
lea edx, [eax + 0x71c]
push edx
lea ebx, [User]
push ebx
add eax, 0x720
push eax
call dbg.addstruct
lea esp, [var_8h]
pop ebx
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_ch]
test ebx, ebx
mov esi, dword [arg_8h]
je 0x8057a10
sub esp, 0xc
push ebx
call sym.imp.strlen
inc eax
mov dword [esp], eax
call dbg.MyMalloc
mov dword [esi], eax
pop edx
pop ecx
push ebx
push eax
call sym.imp.strcpy
add esp, 0x10
mov eax, dword [esi]
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
mov dword [esi], 0
jmp 0x80579ff
jmp dword [reloc.strlen]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edi, dword [var_8h]
xor esi, esi
mov ebx, dword [obj.mrrec]
xor edx, edx
mov eax, ebx
nop
lea esi, [esi]
cmp dword [eax + 4], 0
lea ecx, [eax + 4]
je 0x80578fb
inc edx
add eax, 0x14
cmp edx, 0xc7
jle 0x8057880
test esi, esi
jne 0x80578a5
mov eax, dword [ebx]
test eax, eax
je 0x80578e2
mov ebx, eax
test esi, esi
je 0x8057874
sub esp, 8
push 1
push edi
call sym.imp.calloc
add esp, 0x10
test eax, eax
mov edx, eax
mov dword [esi], eax
je 0x80578ff
mov eax, dword [obj.now]
mov dword [esi + 0xc], eax
mov eax, dword [obj.mallocdoer]
mov dword [esi + 4], eax
mov dword [esi + 8], edi
mov dword [obj.mallocdoer], 0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
sub esp, 8
push 1
push 0xfa4
call sym.imp.calloc
lea esi, [eax + 4]
add esp, 0x10
mov dword [ebx], eax
jmp 0x80578a1
mov esi, ecx
jmp 0x8057895
push 0
push 0
push 0
push 0
call dbg.do_debug
mov dword [esp], 1
call sym.imp.exit
nop
lea esi, [esi]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edx, dword [base]
mov eax, dword [edx]
test eax, eax
mov edi, dword [arg_10h]
mov esi, dword [arg_14h]
je 0x8059336
mov ebx, eax
xor edx, edx
mov eax, dword [edi]
cmp edx, eax
jge 0x80592a0
lea esi, [esi]
lea edi, [edi]
cmp byte [ebx], 0
je 0x8059320
inc edx
add ebx, esi
cmp edx, eax
jl 0x8059290
inc eax
sub esp, 0xc
imul eax, esi
push eax
mov dword [obj.mallocdoer], 0x8059260
call dbg.MyMalloc
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80592eb
mov eax, dword [edi]
push edx
imul eax, esi
push eax
mov edx, dword [base]
mov eax, dword [edx]
push eax
push ebx
call sym.imp.memcpy
pop eax
mov ecx, dword [base]
push ecx
call dbg.MyFree
mov eax, dword [base]
mov dword [eax], ebx
inc dword [edi]
add esp, 0x10
mov eax, ebx
jmp 0x805927c
mov ebx, dword [obj.debug_on_exit]
test ebx, ebx
je 0x8059305
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov ecx, dword [obj.do_exec]
test ecx, ecx
je 0x8059314
call dbg.mech_exec
sub esp, 0xc
push 1
call sym.imp.exit
mov esi, esi
push edx
push esi
mov eax, dword [new]
push eax
push ebx
call sym.imp.memcpy
lea esp, [var_ch]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
push esi
mov dword [obj.mallocdoer], 0x8059260
call dbg.MyMalloc
add esp, 0xc
push esi
mov esi, dword [new]
push esi
push eax
mov ebx, eax
call sym.imp.memcpy
mov eax, dword [base]
mov dword [eax], ebx
mov dword [edi], 1
jmp 0x805932c
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
xor esi, esi
mov eax, dword [obj.linkconfSIZE]
cmp esi, eax
mov edi, dword [arg_8h]
mov ebx, dword [obj.linkconfBASE]
jge 0x805a740
lea esi, [esi]
cmp byte [ebx], 0
jne 0x805a750
inc esi
add ebx, 0xa0
cmp esi, eax
jl 0x805a730
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
push edi
lea eax, [ebx + 8]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805a76b
mov eax, dword [obj.linkconfSIZE]
jmp 0x805a735
sub esp, 8
mov eax, dword [pass]
push eax
lea eax, [ebx + 0x28]
push eax
call sym.imp.strcmp
add esp, 0x10
test eax, eax
sete al
and eax, 0xff
jmp 0x805a742
push ebp
mov ebp, esp
sub esp, 0x10
mov eax, dword [channel]
push eax
mov eax, dword [userhost]
push eax
call dbg.find_user
add esp, 0x10
xor edx, edx
test eax, eax
je 0x8062fa7
mov al, byte [eax + 0x3c]
shr al, 2
mov edx, eax
and edx, 1
mov esp, ebp
mov eax, edx
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
mov eax, dword [userhost]
push eax
call dbg.getuh
pop esi
pop edi
push eax
push 0x806bdf1
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8062c06
mov edx, dword [obj.current]
xor eax, eax
xor edi, edi
cmp eax, dword [edx + 0x71c]
mov dword [save], 0
mov dword [best], 0
mov ebx, dword [edx + 0x720]
jge 0x8062b6c
cmp byte [ebx], 0
je 0x8062b60
mov al, byte [ebx + 0x3e]
shr al, 1
and eax, 7
dec eax
je 0x8062b80
inc edi
add ebx, 0x48
cmp edi, dword [edx + 0x71c]
jl 0x8062b50
mov eax, dword [save]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
lea edi, [edi]
mov al, byte [ebx + 0x3c]
test eax, 0x20
je 0x8062b60
and eax, 0x10
je 0x8062b98
test byte [edx + 0x3ac], 1
je 0x8062b60
mov eax, dword [channel]
test eax, eax
je 0x8062bce
sub esp, 8
mov eax, dword [ebx + 0x2c]
push eax
mov esi, dword [channel]
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8062bce
mov eax, dword [ebx + 0x2c]
cmp byte [eax], 0x2a
je 0x8062bce
mov eax, dword [channel]
cmp byte [eax], 0x2a
je 0x8062bce
mov edx, dword [obj.current]
jmp 0x8062b60
mov esi, dword [ebx + 0x38]
test esi, esi
je 0x8062bc6
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov ecx, dword [userhost]
push ecx
lea eax, [esi + 4]
push eax
call dbg.num_matches
add esp, 0x10
cmp eax, dword [best]
jle 0x8062bfe
mov dword [best], eax
mov dword [save], ebx
mov esi, dword [esi]
test esi, esi
jne 0x8062be0
jmp 0x8062bc6
sub esp, 0xc
mov ebx, dword [userhost]
push ebx
call dbg.getnick
mov dword [esp], eax
call dbg.find_handle
mov ecx, dword [channel]
add esp, 0x10
test ecx, ecx
mov ebx, eax
je 0x8062c46
mov eax, dword [eax + 0x2c]
cmp byte [eax], 0x2a
je 0x8062c46
sub esp, 8
mov edx, dword [channel]
push edx
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8062b2a
mov eax, ebx
jmp 0x8062b6f
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x38
lea ebx, [args]
push ebx
call dbg.chop
mov dword [name], eax
mov dword [esp], ebx
call dbg.chop
mov dword [chan], eax
mov dword [esp], ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
mov dword [echo], eax
mov dword [esp], ebx
call dbg.chop
mov dword [av], eax
mov dword [esp], ebx
call dbg.chop
mov dword [ao], eax
mov dword [esp], ebx
call dbg.chop
mov esi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test esi, esi
mov dword [pass], eax
je 0x805babc
cmp byte [esi], 0
jne 0x805bae0
sub esp, 8
push 0x61
push str._Link_useradd____c__Syntax_error_n
call dbg.debug
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push edi
call dbg.Atoi
add esp, 0x10
test eax, eax
je 0x805bafe
mov ebx, dword [eax]
test ebx, ebx
js 0x805bafe
cmp ebx, 0xc8
jle 0x805bb05
sub esp, 8
push 0x62
jmp 0x805bac1
mov eax, dword [echo]
mov dl, byte [eax]
lea eax, [edx - 0x30]
cmp al, 1
ja 0x805bb1a
mov eax, dword [echo]
cmp byte [eax + 1], 0
je 0x805bb21
sub esp, 8
push 0x63
jmp 0x805bac1
cmp dl, 0x31
sete al
and eax, 0xff
mov edi, eax
mov eax, dword [av]
mov dl, byte [eax]
lea eax, [edx - 0x30]
cmp al, 1
ja 0x805bb43
mov eax, dword [av]
cmp byte [eax + 1], 0
je 0x805bb4d
sub esp, 8
push 0x64
jmp 0x805bac1
cmp dl, 0x31
sete al
and eax, 0xff
mov dword [avi], eax
mov eax, dword [ao]
mov dl, byte [eax]
lea eax, [edx - 0x30]
cmp al, 1
ja 0x805bb70
mov eax, dword [ao]
cmp byte [eax + 1], 0
je 0x805bb7a
sub esp, 8
push 0x65
jmp 0x805bac1
cmp dl, 0x31
sete al
sub esp, 0xc
and eax, 0xff
push esi
mov dword [aoi], eax
call dbg.Atoi
add esp, 0x10
test eax, eax
je 0x805bba6
mov eax, dword [eax]
test eax, eax
mov dword [var_30h], eax
js 0x805bba6
cmp eax, 4
jle 0x805bbb0
sub esp, 8
push 0x66
jmp 0x805bac1
mov esi, dword [obj.botlist]
test esi, esi
je 0x805bc37
mov al, byte [avi]
shl eax, 2
mov byte [var_31h], al
test byte [esi + 0x3ac], 1
je 0x805bc83
sub esp, 8
mov eax, dword [name]
push eax
push str._Link_useradd__Adding_user___s_n
mov dword [obj.current], esi
call dbg.debug
pop eax
mov eax, dword [name]
push eax
call dbg.find_handle
add esp, 0x10
test eax, eax
je 0x805bbfe
test byte [eax + 0x3c], 0x20
je 0x805bc72
sub esp, 8
mov eax, dword [pass]
push eax
mov ecx, dword [chan]
push ecx
mov edx, dword [var_30h]
push edx
mov eax, dword [aoi]
push eax
push ebx
mov eax, dword [name]
push eax
call dbg.add_to_userlist
mov edx, eax
mov al, byte [eax + 0x3c]
and eax, 0xfffffffa
or eax, edi
or al, byte [var_31h]
or eax, 0x18
add esp, 0x20
mov byte [edx + 0x3c], al
mov esi, dword [esi]
test esi, esi
jne 0x805bbc3
mov eax, dword [pass]
sub esp, 8
test eax, eax
je 0x805bc6b
push eax
mov eax, dword [var_30h]
push eax
mov eax, dword [aoi]
push eax
mov eax, dword [avi]
push eax
push edi
push ebx
mov eax, dword [chan]
push eax
mov edi, dword [name]
push edi
push str._USER__s__s__i__i__i__i__i__s_n
mov esi, dword [Link]
push esi
call dbg.link_bcast
jmp 0x805bacb
mov eax, sym..rodata
jmp 0x805bc41
sub esp, 0xc
push eax
call dbg.remove_user
add esp, 0x10
jmp 0x805bbfe
sub esp, 0xc
push str._Link_useradd__Im_not_a_userslave..._n
call dbg.debug
add esp, 0x10
jmp 0x805bc31
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [args]
push ebx
call dbg.chop
mov esi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov edi, eax
je 0x805b7ce
cmp byte [eax], 0
je 0x805b7ce
mov ebx, dword [obj.botlist]
mov eax, dword [obj.current]
test ebx, ebx
mov dword [obj.backup], eax
je 0x805b7b4
mov esi, esi
sub esp, 8
lea eax, [ebx + 0x220]
push eax
push esi
mov dword [obj.current], ebx
call dbg.usermode
add esp, 0x10
and eax, 2
jne 0x805b7e0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805b790
push edi
push esi
push str._NI__s__s_n
mov ecx, dword [Link]
mov eax, dword [obj.backup]
push ecx
mov dword [obj.current], eax
call dbg.link_bcast
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push esi
push edi
call dbg.get_userlevel
add esp, 0x10
cmp eax, 9
jle 0x805b7ae
push eax
push esi
push eax
push edi
call dbg.getnick
pop ebx
pop esi
push eax
push str.INVITE__s__s
call dbg.send_to_server
mov eax, dword [obj.backup]
mov dword [obj.current], eax
jmp 0x805b7ce
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
add esp, 0x10
test ebx, ebx
je 0x805fc6c
lea esi, [esi]
lea edi, [edi]
cmp dword [ebx + 0x10], 0x14
je 0x805fc80
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805fc60
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov eax, dword [rest]
push eax
push esi
push 0x806794b
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x805fc66
push ebp
mov ebp, esp
sub esp, 8
cmp dword [obj.dccKill], 1
je 0x8066a30
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push str.Hasta_la_vista_
mov eax, dword [from]
push eax
call dbg.send_to_user
mov dword [obj.dccKill], 2
add esp, 0x10
jmp 0x8066a1f
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804a1ad
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov eax, dword [eax + 0x720]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
mov edx, eax
je 0x804a1ad
mov al, byte [eax + 0x3e]
shr al, 1
and eax, 7
dec eax
je 0x804a1ad
sub esp, 8
push ebx
lea eax, [edx + 0x30]
push eax
mov dword [obj.mallocdoer], 0x804a140
call dbg.mstrcpy
add esp, 0x10
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x1c
mov edx, dword [Link]
mov eax, dword [edx + 0x23c]
test eax, eax
jne 0x805be30
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
sub esp, 8
add eax, 4
push eax
lea eax, [name]
push eax
call sym.imp.strcpy
mov ebx, dword [obj.botlist]
xor edi, edi
add esp, 0x10
test ebx, ebx
je 0x805be7f
nop
sub esp, 0xc
lea edx, [name]
push edx
mov dword [obj.current], ebx
call dbg.find_handle
add esp, 0x10
test eax, eax
mov edx, eax
je 0x805be79
mov al, byte [eax + 0x3c]
and eax, 0x28
cmp al, 0x28
je 0x805bf60
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805be50
test edi, edi
je 0x805be26
sub esp, 8
cmp byte [edi + 0x15], 0
je 0x805bf56
lea eax, [edi + 0x15]
push eax
mov ax, word [edi + 0x3c]
shr ax, 6
and eax, 7
push eax
mov al, byte [edi + 0x3c]
shr al, 1
and eax, 1
push eax
mov al, byte [edi + 0x3c]
shr al, 2
and eax, 1
push eax
xor eax, eax
mov al, byte [edi + 0x3c]
and eax, 1
push eax
mov eax, dword [edi + 0x3c]
shr eax, 9
and eax, 0xff
push eax
mov eax, dword [edi + 0x2c]
push eax
lea esi, [edi + 8]
push esi
push str._USER__s__s__i__i__i__i__i__s_n
mov eax, dword [Link]
push eax
call dbg.send_to_link
mov ebx, dword [edi + 0x38]
add esp, 0x30
test ebx, ebx
je 0x805bf0c
nop
lea esi, [esi]
lea eax, [ebx + 4]
push eax
push esi
push str._USERMASK__s__s_n
mov edi, dword [Link]
push edi
call dbg.send_to_link
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x805bef0
mov eax, dword [Link]
mov ebx, dword [eax + 0x23c]
sub esp, 0xc
add eax, 0x23c
mov ebx, dword [ebx]
push eax
call dbg.MyFree
mov edx, dword [Link]
test ebx, ebx
mov dword [edx + 0x23c], ebx
mov eax, 0x806bce0
je 0x805bf4f
push eax
lea eax, [name]
push eax
push str._USERLOCK__s_s_n
mov esi, dword [Link]
push esi
call dbg.send_to_link
jmp 0x805be26
mov eax, sym..rodata
jmp 0x805bf37
mov eax, sym..rodata
jmp 0x805be93
mov edi, edx
jmp 0x805be79
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xcc
mov eax, dword [from]
cmp byte [eax], 0x24
je 0x8053d7d
mov edx, dword [obj.current]
xor eax, eax
cmp eax, dword [edx + 0xb24]
mov dword [var_d0h], edx
mov ebx, dword [edx + 0xb28]
mov dword [i], 0
jge 0x8053cfb
mov esi, esi
cmp byte [ebx], 0
je 0x8053cdb
lea esi, [ebx + 1]
mov edi, str.spymsg
mov ecx, 7
cld
repe cmpsb byte [esi], byte ptr es:[edi]
je 0x8053d90
inc dword [i]
mov edx, dword [i]
mov eax, dword [var_d0h]
add ebx, 0xa1
cmp edx, dword [eax + 0xb24]
jl 0x8053cc0
cld
xor eax, eax
lea edi, [new]
mov ecx, 0x28
rep stosd dword es:[edi], eax
mov byte [edi], 0
sub esp, 8
mov esi, dword [from]
push esi
lea eax, [dest]
push eax
mov byte [new], 1
mov esi, str.spymsg
call sym.imp.strcpy
lea edi, [var_c7h]
cld
mov ecx, 1
rep movsd dword es:[edi], dword ptr [esi]
mov ax, word [0x8067948]
mov word [edi], ax
mov al, byte [0x806794a]
mov byte [edi + 2], al
mov eax, dword [obj.current]
push 0xa1
lea edx, [eax + 0xb24]
push edx
lea ebx, [new]
push ebx
add eax, 0xb28
push eax
call dbg.addstruct
add esp, 0x18
push str.Now_redirecting_messages_to_you
mov ebx, dword [from]
push ebx
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov edi, dword [from]
push edi
lea eax, [ebx + 0x51]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8053db8
mov edx, dword [obj.current]
mov dword [var_d0h], edx
jmp 0x8053cdb
sub esp, 8
push str.Already_redirecting_messages_to_you
jmp 0x8053d74
push ebp
mov ebp, esp
push ebx
push eax
mov eax, dword [obj.botlist]
test eax, eax
mov ebx, dword [arg_8h]
jne 0x80509d0
mov ebx, dword [var_4h]
leave
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push ebx
push 0
mov dword [obj.current], eax
call dbg.signoff
mov eax, dword [obj.botlist]
add esp, 0x10
test eax, eax
jne 0x80509d0
jmp 0x80509c1
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8065ed2
cmp byte [eax], 0
jne 0x8065ef0
sub esp, 8
mov eax, dword [0x8070400]
push eax
push esi
call dbg.usage
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push 0x806d1d0
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8065f20
mov eax, dword [obj.CurrentUser]
sub esp, 8
or byte [eax + 0x3c], 1
push str.Partyline_echo_is_now_On
push esi
call dbg.send_to_user
jmp 0x8065ee1
mov esi, esi
sub esp, 8
push 0x806ed96
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8065ed2
mov eax, dword [obj.CurrentUser]
sub esp, 8
and byte [eax + 0x3c], 0xfe
push str.Partyline_echo_is_now_Off
jmp 0x8065f16
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x10
mov eax, dword [channel]
test eax, eax
je 0x8063202
push eax
mov eax, dword [userhost]
test eax, eax
je 0x80631f8
push eax
push str._get_shituser__userhost___s__channel___s_n
call dbg.debug
pop edi
mov esi, dword [userhost]
push esi
call dbg.getnick
pop ecx
pop ebx
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
xor edx, edx
test eax, eax
je 0x80631cc
mov eax, dword [obj.current]
mov edi, dword [eax + 0xb34]
test edi, edi
je 0x80631ca
mov ebx, dword [edi + 0x1c]
test ebx, ebx
je 0x80631c4
mov esi, esi
lea edi, [edi]
sub esp, 0xc
push ebx
call dbg.get_nuh
mov esi, eax
pop eax
pop edx
push esi
mov eax, dword [userhost]
push eax
call dbg.matches
add esp, 0x10
test eax, eax
je 0x80631e0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80631a0
mov edi, dword [edi]
test edi, edi
jne 0x8063190
xor edx, edx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov ecx, dword [channel]
push ecx
push esi
call dbg.find_shit
add esp, 0x10
test eax, eax
je 0x80631be
mov edx, eax
jmp 0x80631cc
mov eax, obj.NULLSTR
jmp 0x8063150
mov eax, obj.NULLSTR
jmp 0x8063144
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
call dbg.get_channel
mov esi, eax
pop eax
pop edx
push esi
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
mov edi, eax
jge 0x8052d90
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [nick], eax
je 0x8052e04
push eax
push 0
mov eax, dword [nick]
push eax
mov eax, dword [from]
push eax
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8052d7e
sub esp, 8
push esi
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, edi
jle 0x8052de0
push ebx
push str.Ban_attempt_of__s
push obj.CurrentNick
push esi
call dbg.sendkick
jmp 0x8052d7e
push edi
push ebx
mov ecx, dword [nick]
push ecx
push esi
call dbg.deop_ban
push esi
mov edx, dword [nick]
push edx
push str._s_banned_on__s
mov eax, dword [from]
push eax
call dbg.send_to_user
jmp 0x8052d7e
sub esp, 8
push str.No_nick_specified
jmp 0x8052df6
push ebp
mov ebp, esp
push ebx
sub esp, 0x804
mov edx, dword [obj.now]
mov ecx, dword [obj.current]
mov eax, edx
sub eax, dword [ecx + 0xbac]
cmp eax, 4
jg 0x8061460
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
mov dword [ecx + 0xbac], edx
push ecx
lea eax, [arg]
push eax
mov edx, dword [format]
push edx
lea ebx, [buf]
push ebx
call sym.imp.vsprintf
add esp, 0xc
push ebx
mov eax, dword [to]
push eax
push str.NOTICE__s_:
call dbg.send_to_server
jmp 0x8061453
push ebp
mov ebp, esp
push edi
push esi
push ebx
cld
xor eax, eax
lea edi, [new]
mov ecx, 0x12
sub esp, 0x64
rep stosd dword es:[edi], eax
mov al, byte [var_2ah]
and eax, 0xfffffff1
or eax, 4
mov byte [var_2ah], al
movzx edx, byte [level]
mov eax, dword [var_2ch]
shl edx, 9
and eax, 0xfffe01ff
or eax, edx
mov dword [var_2ch], eax
mov eax, dword [arg_1ch]
mov dword [var_28h], eax
mov eax, dword [arg_20h]
mov dword [var_24h], eax
mov eax, dword [chan]
push eax
lea eax, [var_3ch]
push eax
mov byte [new], 1
mov dword [obj.mallocdoer], 0x8063410
call dbg.mstrcpy
pop ebx
pop edi
mov ecx, dword [uh]
push ecx
lea eax, [var_30h]
push eax
mov dword [obj.mallocdoer], 0x8063410
call dbg.mstrcpy
pop eax
pop edx
mov eax, dword [from]
push eax
lea eax, [var_38h]
push eax
mov dword [obj.mallocdoer], 0x8063410
call dbg.mstrcpy
pop ebx
pop edi
mov ecx, dword [reason]
push ecx
lea eax, [var_34h]
push eax
mov dword [obj.mallocdoer], 0x8063410
call dbg.mstrcpy
mov eax, dword [obj.CurrentUser]
add esp, 0x10
test eax, eax
lea esi, [new]
mov ebx, 0xffffffff
mov edi, 0xffffffff
je 0x80634d4
mov edi, dword [eax + 4]
mov eax, dword [obj.CurrentShit]
test eax, eax
je 0x80634e0
mov ebx, dword [eax + 4]
mov eax, dword [obj.current]
push 0x48
lea edx, [eax + 0x71c]
push edx
push esi
add eax, 0x720
push eax
call dbg.addstruct
add esp, 0x10
cmp edi, 0xffffffff
mov esi, eax
je 0x8063527
push edi
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov eax, dword [eax + 0x720]
push eax
call dbg.findstruct
mov dword [obj.CurrentUser], eax
add esp, 0x10
cmp ebx, 0xffffffff
je 0x806354f
push ebx
push 0x48
mov eax, dword [obj.current]
mov edi, dword [eax + 0x71c]
push edi
mov ebx, dword [eax + 0x720]
push ebx
call dbg.findstruct
mov dword [obj.CurrentShit], eax
add esp, 0x10
lea esp, [var_ch]
pop ebx
mov eax, esi
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
mov eax, dword [param]
push eax
mov eax, dword [Chan]
push eax
mov ebx, dword [arg_ch]
call dbg.find_chanuser
add esp, 0x10
test eax, eax
je 0x804cec3
not ebx
and dword [eax + 4], ebx
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
push eax
push esi
cmp byte [ebx + 0xc], 0
je 0x805a580
lea eax, [ebx + 0xc]
push eax
push str._LiW__N:_s_B:_s
call dbg.debug
push esi
mov eax, dword [ebx + 0x254]
push eax
mov eax, dword [ebx + 0x250]
push eax
mov eax, dword [ebx + 4]
push eax
mov eax, dword [ebx + 0x244]
push eax
push ebx
cmp byte [ebx + 0xc], 0
je 0x805a570
lea eax, [ebx + 0xc]
push eax
push str.Net_Write_____10s____.8x____S:_i_I:_i_U:_i_L:_i__:__s
call dbg.wle
add esp, 0x24
push esi
call sym.imp.strlen
add esp, 0xc
push eax
push esi
mov eax, dword [ebx + 0x244]
push eax
call sym.imp.write
add esp, 0x10
test eax, eax
js 0x805a500
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
sub esp, 0x10
call sym.imp.__error
mov ecx, dword [eax]
pop esi
push ecx
sub esp, 0x10
call sym.imp.__error
mov eax, dword [eax]
pop edx
push eax
call sym.imp.strerror
add esp, 0x10
push eax
mov eax, dword [ebx + 0x254]
push eax
mov eax, dword [ebx + 0x250]
push eax
mov eax, dword [ebx + 4]
push eax
mov esi, dword [ebx + 0x244]
push esi
push ebx
cmp byte [ebx + 0xc], 0
je 0x805a567
lea eax, [ebx + 0xc]
push eax
push str.Write_Error___10s____.8x____S:_i_I:_i_U:_i_L:_i__:__s___i__n
call dbg.wle
mov dword [arg_ch], 0
mov dword [arg_8h], ebx
add esp, 0x30
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.remlink
mov eax, obj.NULLSTR
jmp 0x805a544
mov esi, esi
mov eax, obj.NULLSTR
jmp 0x805a4cd
lea esi, [esi]
mov eax, str._unknown_
jmp 0x805a49a
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea eax, [rest]
push eax
mov ebx, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
je 0x8066940
sub esp, 8
push eax
push str.WHOIS__s
call dbg.send_to_server
pop eax
pop edx
mov eax, dword [obj.current]
push ebx
add eax, 0xb30
push eax
call dbg.make_time
mov dword [eax + 0x10], 5
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
sub esp, 8
mov ecx, dword [0x8070920]
push ecx
push ebx
call dbg.usage
jmp 0x8066932
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push 1
mov esi, dword [arg_8h]
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804b645
test byte [eax + 0x38d], 2
je 0x804b645
mov eax, dword [eax + 8]
test eax, eax
jne 0x804b631
mov eax, sym..rodata
push eax
push esi
push esi
push str.PART__s_nJOIN__s__s
call dbg.send_to_server
or byte [ebx + 0x38d], 0x80
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
je 0x804b086
mov esi, esi
mov al, byte [ebx + 0x38d]
shr al, 4
and eax, 3
test esi, eax
jne 0x804b0a0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804b070
xor edx, edx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [ebx + 4]
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edx, ebx
jne 0x804b080
jmp 0x804b088
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
mov ebx, dword [arg_8h]
push ebx
call dbg.getuh
pop edx
pop ecx
push eax
push 0x806bdf1
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8063260
sub esp, 0xc
push ebx
call dbg.getnick
mov dword [esp], eax
call dbg.find_handle
add esp, 0x10
test eax, eax
setne al
mov ebx, dword [var_4h]
mov esp, ebp
and eax, 0xff
pop ebp
ret
lea esi, [esi]
sub esp, 8
mov eax, dword [obj.current]
push ebx
add eax, 0xb2c
push eax
call dbg.find_time
jmp 0x8063245
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
mov al, byte [ecx]
test al, al
mov edx, ecx
je 0x8057d2c
inc edx
nop
cmp al, 0x21
je 0x8057d54
inc edx
mov al, byte [edx - 1]
test al, al
jne 0x8057d20
mov al, byte [ecx]
test al, al
mov edx, 0x8072e40
je 0x8057d4a
mov esi, esi
lea edi, [edi]
mov byte [edx], al
inc ecx
mov al, byte [ecx]
inc edx
test al, al
jne 0x8057d40
mov byte [edx], 0
mov eax, 0x8072e40
pop ebp
ret
mov ecx, edx
jmp 0x8057d2c
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
push ebx
mov cl, byte [edx]
cmp cl, 0x24
mov ebx, 0x8072d80
je 0x8057ca0
test cl, cl
je 0x8057c90
cmp cl, 0x21
je 0x8057c90
lea esi, [esi]
mov byte [ebx], cl
inc edx
mov al, byte [edx]
inc ebx
test al, al
mov cl, al
je 0x8057c90
cmp al, 0x21
jne 0x8057c80
mov byte [ebx], 0
pop ebx
mov eax, 0x8072d80
pop ebp
ret
nop
lea esi, [esi]
inc edx
cmp byte [edx], 0x40
jne 0x8057ca0
inc edx
mov cl, byte [edx]
jmp 0x8057c73
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edx, dword [obj.current]
xor esi, esi
cmp esi, dword [edx + 0x71c]
mov edi, dword [arg_8h]
mov ebx, dword [edx + 0x720]
jge 0x8062acc
lea esi, [esi]
lea edi, [edi]
cmp byte [ebx], 0
je 0x8062ac0
mov al, byte [ebx + 0x3e]
shr al, 1
and eax, 7
dec eax
je 0x8062ad8
inc esi
add ebx, 0x48
cmp esi, dword [edx + 0x71c]
jl 0x8062ab0
xor edx, edx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
sub esp, 8
lea eax, [ebx + 8]
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edx, ebx
je 0x8062ace
mov edx, dword [obj.current]
jmp 0x8062ac0
push ebp
mov ebp, esp
push esi
mov esi, dword [arg_ch]
xor eax, eax
test esi, esi
push ebx
je 0x80637cc
cmp byte [esi], 0x24
je 0x80637e0
mov eax, dword [arg_8h]
mov ebx, dword [eax]
test ebx, ebx
je 0x80637ca
lea esi, [esi]
sub esp, 8
mov eax, dword [ebx + 8]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x80637ca
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80637b0
mov eax, ebx
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
inc esi
mov dl, byte [esi]
test dl, dl
je 0x80637ef
cmp dl, 0x40
jne 0x80637e0
inc esi
jmp 0x80637a3
xor eax, eax
cmp dl, 0x40
jne 0x80637cc
jmp 0x80637ec
push ebp
mov ebp, esp
push ebx
push eax
mov edx, dword [obj.current]
mov ebx, dword [edx + 0xb34]
test ebx, ebx
je 0x805c99d
lea esi, [esi]
lea edi, [edi]
mov al, byte [ebx + 0x38d]
test eax, 0x40
jne 0x805ca10
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805c980
mov edx, dword [obj.current]
mov eax, dword [edx + 0xb38]
mov al, byte [eax + 0x38d]
shr al, 4
and eax, 3
dec eax
je 0x805c9db
mov ebx, dword [edx + 0xb34]
test ebx, ebx
je 0x805c9d5
lea esi, [esi]
mov al, byte [ebx + 0x38d]
shr al, 4
and eax, 3
dec eax
je 0x805c9d5
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805c9c0
mov dword [edx + 0xb38], ebx
mov eax, dword [edx + 0x3b0]
sub esp, 0xc
mov eax, dword [eax]
push eax
call sym.imp.close
mov eax, dword [obj.current]
add eax, 0x3b0
mov dword [esp], eax
call dbg.MyFree
mov ebx, dword [var_4h]
leave
ret
lea esi, [esi]
lea edi, [edi]
and eax, 0x4f
or eax, 0x20
mov byte [ebx + 0x38d], al
sub esp, 8
mov eax, dword [ebx + 4]
push eax
push str.PART__s
call dbg.send_to_server
add esp, 0x10
jmp 0x805c991
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ebx, dword [var_8h]
test ebx, ebx
mov esi, dword [var_ch]
je 0x8056149
push eax
cmp byte [ebx], 0
je 0x8056300
mov eax, str.TRUE
push eax
push esi
push str._s__used_t_t_s_n
call dbg.debug
add esp, 0x10
cmp byte [ebx], 0
jne 0x8056160
mov dword [var_ch], esi
mov dword [var_8h], str._s______n
lea esp, [var_ch_2]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.debug
lea esi, [esi]
sub esp, 0xc
push esi
call sym.imp.strlen
add esp, 0xc
cmp eax, 2
sete al
and eax, 0xff
mov edi, eax
mov eax, dword [ebx + 4]
push eax
push esi
push str._s__ident_t_t_i_n
call dbg.debug
add esp, 0xc
cmp byte [ebx + 8], 0
je 0x80562f0
lea eax, [ebx + 8]
push eax
push esi
push str._s__name_t_t__s__n
call dbg.debug
add esp, 0xc
cmp byte [ebx + 0x58], 0
je 0x80562e0
lea eax, [ebx + 0x58]
push eax
push esi
push str._s__pass_t_t__s__n
call dbg.debug
add esp, 0xc
cmp byte [ebx + 0xa8], 0
je 0x80562d0
lea eax, [ebx + 0xa8]
push eax
push esi
push str._s__realname_t_t__s__n
call dbg.debug
add esp, 0xc
mov ecx, dword [ebx + 0xfc]
push ecx
push esi
push str._s__usenum_t_t_i_n
call dbg.debug
add esp, 0xc
mov edx, dword [ebx + 0x100]
push edx
push esi
push str._s__port_t_t_i_n
call dbg.debug
mov eax, dword [ebx + 0x104]
test edi, edi
push eax
mov eax, 0x806ae7e
jne 0x8056221
mov eax, sym..rodata
push eax
push esi
push str._s__err_t_t_s_i_n
call dbg.debug
mov eax, dword [ebx + 0x108]
add esp, 0x14
push eax
sub esp, 0xc
mov eax, dword [ebx + 0x108]
push eax
call dbg.atime
add esp, 0x10
test edi, edi
push eax
mov eax, 0x806ae7e
jne 0x8056258
mov eax, sym..rodata
push eax
push esi
push str._s__lastconnect_t_s_s___lu__n
call dbg.debug
mov eax, dword [ebx + 0x10c]
add esp, 0x14
push eax
sub esp, 0xc
mov eax, dword [ebx + 0x10c]
push eax
call dbg.atime
add esp, 0x10
test edi, edi
push eax
mov eax, 0x806ae7e
jne 0x805628f
mov eax, sym..rodata
push eax
push esi
push str._s__lastattempt_t_s_s___lu__n
call dbg.debug
add esp, 0x20
mov eax, dword [ebx + 0x110]
push eax
push edi
push 0
mov ecx, dword [ebx + 0x110]
push ecx
call dbg.idle2str
add esp, 0xc
push eax
push esi
push str._s__maxontime_t_t_s___lu__n
call dbg.debug
add esp, 0x10
jmp 0x8056146
nop
lea esi, [esi]
mov eax, obj.NULLSTR
jmp 0x80561d6
lea esi, [esi]
mov eax, obj.NULLSTR
jmp 0x80561b4
lea esi, [esi]
mov eax, obj.NULLSTR
jmp 0x8056198
lea esi, [esi]
mov eax, str.FALSE
jmp 0x8056132
push ebp
mov ebp, esp
sub esp, 0x14
push obj.now
call sym.imp.time
mov dword [esp], str._sigusr1__n
call dbg.debug
pop edx
pop ecx
push dbg.sig_usr1
push 0x1e
call sym.imp.signal
add esp, 0x10
test byte [obj.will], 4
je 0x805dc1a
mov eax, dword [obj.current]
mov dword [obj.backup], eax
mov eax, dword [obj.botlist]
cmp dword [eax + 4], 4
mov dword [obj.current], eax
je 0x805dc1e
mov edx, dword [eax + 8]
cmp edx, 0xffffffff
je 0x805dc09
sub esp, 0xc
push edx
call sym.imp.close
add esp, 0x10
mov eax, dword [obj.current]
mov dword [eax + 8], 0xffffffff
mov eax, dword [obj.backup]
mov dword [obj.current], eax
mov esp, ebp
pop ebp
ret
sub esp, 0xc
push str.QUIT_:Switching_servers...__SIGUSR1_
call dbg.send_to_server
add esp, 0x10
jmp 0x805dc10
jmp dword [reloc.time]
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.dodebug]
test eax, eax
je 0x8057702
cmp dword [obj.debug_fd], 0xffffffff
je 0x8057720
push edx
lea eax, [arg_ch]
push eax
mov eax, dword [format]
push eax
push obj.debugbuf
call sym.imp.vsprintf
mov dword [esp], obj.debugbuf
call sym.imp.strlen
add esp, 0xc
push eax
push obj.debugbuf
mov eax, dword [obj.debug_fd]
push eax
call sym.imp.write
add esp, 0x10
test eax, eax
js 0x8057710
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov dword [obj.dodebug], 0
jmp 0x8057702
lea esi, [esi]
cmp byte [obj.debugfile], 0
jne 0x8057735
mov dword [obj.debug_fd], 0
jmp 0x80576c8
push ecx
push 0x180
push 0x601
push obj.debugfile
call sym.imp.open
add esp, 0x10
test eax, eax
mov dword [obj.debug_fd], eax
jns 0x80576c8
jmp 0x8057710
jmp dword [reloc.signal]
jmp dword [reloc.close]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
mov eax, dword [arg_8h]
mov dword [from], eax
mov esi, dword [arg_ch]
mov edi, dword [arg_10h]
push 1
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804b4c0
sub esp, 8
push 0xf
push eax
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804b490
sub esp, 8
push esi
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, 0x4f
jg 0x804b490
mov eax, dword [ebx + 0xc]
test eax, eax
je 0x804b44c
sub esp, 8
push edi
mov eax, dword [ebx + 0xc]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804b46b
lea eax, [ebx + 0xc]
mov dword [obj.mallocdoer], 0x804b3e0
mov dword [arg_ch], edi
mov dword [arg_8h], eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.mstrcpy
mov eax, dword [ebx + 0xc]
mov dword [arg_10h], eax
mov dword [arg_ch], esi
mov dword [arg_8h], str.TOPIC__s_:_s
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_server
mov esi, esi
lea edi, [edi]
sub esp, 0xc
add ebx, 0xc
push ebx
call dbg.MyFree
add esp, 0x10
mov dword [obj.mallocdoer], 0x804b3e0
mov dword [arg_ch], edi
mov dword [arg_8h], ebx
jmp 0x804b45f
jmp 0x804b4c0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [args]
push ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
mov ebx, dword [obj.botlist]
add esp, 0x10
test ebx, ebx
mov dword [nick], eax
je 0x805b6c7
lea esi, [esi]
sub esp, 8
push 1
push edi
mov dword [obj.current], ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x805b6c1
test byte [eax + 0x38d], 8
jne 0x805b6f0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805b6a0
mov ebx, dword [nick]
push ebx
push edi
push str._NEEDOP__s__s_n
mov ecx, dword [Link]
push ecx
call dbg.link_bcast
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov edx, dword [nick]
push edx
push eax
call dbg.find_chanuser
add esp, 0x10
test eax, eax
mov esi, eax
je 0x805b6c1
sub esp, 8
push edi
push eax
call dbg.get_nuh
mov dword [esp], eax
call dbg.find_user
add esp, 0x10
test eax, eax
je 0x805b6c1
mov eax, dword [eax + 0x3c]
shr eax, 9
cmp al, 0xc8
jne 0x805b6c1
test byte [esi + 4], 2
jne 0x805b6c1
push eax
mov esi, dword [nick]
push esi
push str.o__s
push edi
call dbg.sendmode
jmp 0x805b6da
push ebp
mov ebp, esp
sub esp, 0x10
mov eax, dword [channel]
push eax
mov eax, dword [userhost]
push eax
call dbg.find_shit
add esp, 0x10
test eax, eax
setne al
mov esp, ebp
and eax, 0xff
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x78
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8055050
mov al, byte [eax]
test al, al
je 0x8055050
cmp al, 0x23
je 0x8054fd2
mov esi, ebx
mov edi, 0x806e306
mov ecx, 2
cld
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x8055050
mov eax, dword [rest]
test eax, eax
je 0x8055050
mov dl, byte [eax]
test dl, dl
je 0x8055050
cmp dl, 0x22
je 0x8055018
sub esp, 8
push str.Please_put_quotes___s__around_the_arguements
mov esi, dword [from]
push esi
call dbg.send_to_user
pop ecx
pop ebx
push str.Example:_KS___Fuck_you___No__fuck_you___n_
mov ecx, dword [from]
push ecx
call dbg.send_to_user
lea esi, [esi]
lea edi, [edi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
inc eax
push 0x806bb1e
mov dword [rest], eax
lea eax, [rest]
push eax
call dbg.get_token
add esp, 0x10
cmp byte [eax], 0
mov esi, eax
je 0x8055050
mov eax, dword [rest]
test eax, eax
je 0x8055047
cmp byte [eax], 0x20
je 0x805517d
test eax, eax
je 0x8055069
cmp byte [eax], 0x22
je 0x8055065
sub esp, 8
mov edx, dword [0x80704b0]
push edx
mov eax, dword [from]
push eax
call dbg.usage
jmp 0x8055010
inc eax
mov dword [rest], eax
test eax, eax
je 0x8055050
sub esp, 8
push 0x806bb1e
lea eax, [rest]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov dword [what], eax
je 0x8055050
cmp byte [eax], 0
je 0x8055050
sub esp, 8
push ebx
push esi
call dbg.find_kicksay
add esp, 0x10
test eax, eax
je 0x80550ad
push edx
mov eax, dword [eax + 0x38]
push eax
push str.Im_already_kicking_on___s_
jmp 0x8054ffc
cld
lea edi, [new]
mov ecx, 0x12
rep stosd dword es:[edi], eax
mov eax, dword [obj.userident]
mov dword [var_64h], eax
inc eax
mov dword [obj.userident], eax
mov al, byte [var_2ah]
sub esp, 0xc
and eax, 0xfffffff1
push esi
or eax, 6
mov byte [new], 1
mov byte [var_2ah], al
mov dword [obj.mallocdoer], 0x8054f90
call sym.imp.strlen
add eax, 3
mov dword [esp], eax
call dbg.MyMalloc
add esp, 0xc
push esi
push str._s
push eax
mov dword [var_30h], eax
call sym.imp.sprintf
pop esi
pop eax
mov ecx, dword [from]
push ecx
lea eax, [var_38h]
push eax
mov dword [obj.mallocdoer], 0x8054f90
call dbg.mstrcpy
pop eax
pop edx
mov eax, dword [what]
push eax
lea eax, [var_34h]
push eax
mov dword [obj.mallocdoer], 0x8054f90
call dbg.mstrcpy
pop esi
pop eax
push ebx
lea eax, [var_3ch]
push eax
mov dword [obj.mallocdoer], 0x8054f90
call dbg.mstrcpy
mov eax, dword [obj.current]
push 0x48
lea edx, [eax + 0x71c]
push edx
lea edi, [new]
push edi
add eax, 0x720
push eax
call dbg.addstruct
add esp, 0x20
push ebx
mov ebx, dword [var_30h]
push ebx
push str.Now_kicking_on___s__on__s
jmp 0x8054ffc
inc eax
mov dword [rest], eax
jmp 0x8055047
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x134
push 0x806f329
mov eax, dword [from]
push eax
call dbg.send_to_user
mov eax, dword [obj.botlist]
add esp, 0x10
test eax, eax
mov dword [bot], eax
je 0x8065c79
push eax
mov eax, dword [bot]
add eax, 0x220
push eax
push 0x806f250
lea esi, [sps]
push esi
call sym.imp.sprintf
mov eax, dword [bot]
mov ebx, dword [eax + 4]
add esp, 0x10
cmp ebx, 4
je 0x8065e39
mov dword [stt], 0x746f6e28
mov dword [var_114h], 0x6e6f6320
mov dword [var_110h], 0x7463656e
mov dword [var_10ch], 0x296465
lea eax, [stt]
push eax
lea esi, [sps]
push esi
push str.__25s____s
mov edi, dword [from]
push edi
call dbg.send_to_user
mov eax, dword [bot]
mov edi, dword [eax + 0xb3c]
add esp, 0x10
test edi, edi
je 0x8065c63
lea esi, [esi]
test byte [edi + 0x208], 1
jne 0x8065da0
mov edi, dword [edi]
test edi, edi
jne 0x8065c50
mov eax, dword [bot]
mov eax, dword [eax]
test eax, eax
mov dword [bot], eax
jne 0x8065bc0
mov eax, dword [obj.botlinkSIZE]
xor edi, edi
cmp edi, eax
mov ecx, dword [obj.botlinkBASE]
mov edx, eax
jge 0x8065ca8
lea ebx, [ecx + 0xc]
cmp byte [ebx - 0xc], 0
je 0x8065c9b
cmp byte [ebx - 3], 0x65
je 0x8065cc1
inc edi
add ebx, 0x258
cmp edi, edx
mov eax, edx
jl 0x8065c8f
sub esp, 8
mov ebx, dword [from]
push 0x806a64b
push ebx
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov edx, dword [ebx + 0x244]
push edx
push 0x258
push eax
mov eax, dword [obj.botlinkBASE]
push eax
call dbg.findstruct
add esp, 0xc
push ebx
push 0x806f250
mov esi, eax
lea eax, [sps]
push eax
mov dword [var_12ch], ebx
call sym.imp.sprintf
lea eax, [esi + 0xc]
push eax
lea esi, [sps]
push esi
push str.__25s____Linked___s_
mov eax, dword [from]
push eax
call dbg.send_to_user
mov dword [j], 0
mov edx, dword [obj.botlinkSIZE]
add esp, 0x20
cmp dword [j], edx
mov esi, dword [obj.botlinkBASE]
jge 0x8065c9b
cmp byte [esi], 0
je 0x8065d3f
cmp byte [esi + 9], 0x66
je 0x8065d58
inc dword [j]
add esi, 0x258
cmp dword [j], edx
jl 0x8065d34
jmp 0x8065c9b
mov eax, dword [ebx + 0x244]
cmp dword [esi + 0x250], eax
jne 0x8065d3f
sub esp, 8
mov eax, dword [var_12ch]
push eax
lea eax, [esi + 0xc]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8065d88
mov edx, dword [obj.botlinkSIZE]
jmp 0x8065d3f
push eax
lea eax, [esi + 0x2c]
push eax
push str.__s
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x8065d80
mov ebx, dword [obj.now]
sub ebx, dword [edi + 0x260]
mov eax, 0x88888889
imul ebx
lea esi, [ebx + edx]
mov eax, ebx
sar eax, 0x1f
sar esi, 5
sub esi, eax
lea eax, [esi + esi*2]
lea eax, [eax + eax*4]
shl eax, 2
sub ebx, eax
sub esp, 0xc
lea eax, [edi + 0x20c]
push eax
mov dword [var_128h], eax
call dbg.max_userlevel
add esp, 0xc
push eax
push 0x806f35d
lea eax, [sps]
push eax
call sym.imp.sprintf
add esp, 0xc
push ebx
push esi
mov esi, dword [var_128h]
push esi
call dbg.getuh
lea esi, [sps]
mov dword [esp], eax
push esi
sub esp, 8
mov ebx, dword [var_128h]
push ebx
call dbg.getnick
add esp, 0xc
push eax
push str.___16s__3s____s__idle__i_min___i_sec_
mov ecx, dword [from]
push ecx
call dbg.send_to_user
add esp, 0x20
jmp 0x8065c5d
mov edi, dword [eax + 0x10]
push edi
push 0x114
mov esi, dword [obj.serverSIZE]
push esi
mov ecx, dword [obj.serverBASE]
push ecx
call dbg.findstruct
add esp, 0x10
test eax, eax
je 0x8065e90
mov edx, dword [eax + 0x100]
push edx
cmp byte [eax + 0xa8], 0
je 0x8065e8b
add eax, 0xa8
push eax
push 0x806f5a8
lea esi, [stt]
push esi
call sym.imp.sprintf
add esp, 0x10
jmp 0x8065c1b
add eax, 8
jmp 0x8065e71
mov eax, str._unknown_server_
mov esi, eax
cld
lea edi, [stt]
mov ecx, ebx
rep movsd dword es:[edi], dword ptr [esi]
mov al, byte [0x806f371]
mov byte [edi], al
jmp 0x8065c1b
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80495f5
cmp byte [eax], 0
jne 0x8049600
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
mov edi, eax
pop eax
pop edx
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test edi, edi
mov esi, eax
je 0x8049631
cmp byte [edi], 0x23
je 0x8049668
test esi, esi
je 0x8049643
cmp byte [esi], 0x23
sete al
and eax, 0xff
dec eax
and esi, eax
sub esp, 0xc
push edi
call dbg.Atoi
add esp, 0x10
test eax, eax
mov edx, 0x1a0b
je 0x804965a
mov edx, dword [eax]
push edi
push esi
push edx
push ebx
call dbg.add_server
add esp, 0x10
jmp 0x80495f5
xor esi, esi
xor edi, edi
jmp 0x8049631
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8049e10
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov ebx, dword [eax + 0x720]
push ebx
call dbg.findstruct
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8049e10
sub esp, 0xc
push esi
call sym.imp.atoi
add esp, 0x10
test eax, eax
js 0x8049e10
cmp eax, 0x64
jle 0x8049e20
cmp eax, 0xc8
je 0x8049e20
lea esi, [esi]
lea edi, [edi]
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
mov esi, esi
lea edi, [edi]
movzx edx, al
mov eax, dword [ebx + 0x3c]
shl edx, 9
and eax, 0xfffe01ff
or eax, edx
mov dword [ebx + 0x3c], eax
jmp 0x8049e10
push ebp
mov ebp, esp
sub esp, 0x14
mov ecx, dword [from]
push ecx
call dbg.max_userlevel
add esp, 0xc
push eax
push obj.CurrentNick
push str._CTCP__:_s__i_:_Requested_Version_Info
call dbg.send_statmsg
pop eax
pop edx
push 0x23
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x8055cf0
mov esp, ebp
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push 0x24
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x8055d30
sub esp, 0xc
push str.._randfiles_randversions.e
call dbg.randstring
add esp, 0x10
test eax, eax
je 0x8055d30
mov dword [rest], eax
mov dword [to], str.VERSION__s
mov dword [from], obj.CurrentNick
mov esp, ebp
pop ebp
jmp dbg.send_ctcp_reply
mov dword [rest], str.Running_
jmp 0x8055d1a
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ebx, dword [arg_8h]
cmp byte [ebx], 0x24
je 0x8062ef0
sub esp, 8
push ebx
push obj.SHELLMASK
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edx, 0x64
jne 0x8062db9
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
sub esp, 0xc
push ebx
call dbg.is_localbot
add esp, 0x10
test eax, eax
mov edx, 0xc8
jne 0x8062daf
mov eax, dword [obj.current]
mov esi, dword [eax + 0x71c]
test esi, esi
jne 0x8062df3
sub esp, 8
push 0x64
push str._MuL__No_userlist__access___i_n
call dbg.debug
mov edx, 0x64
jmp 0x8062daf
sub esp, 0xc
push ebx
call dbg.getuh
pop edx
pop ecx
push eax
push 0x806bdf1
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8062ec5
mov edx, dword [obj.current]
xor eax, eax
cmp eax, dword [edx + 0x71c]
mov dword [axs], 0
mov esi, dword [edx + 0x720]
mov dword [i], 0
jge 0x8062e59
cmp byte [esi], 0
je 0x8062e48
mov al, byte [esi + 0x3e]
shr al, 1
and eax, 7
dec eax
je 0x8062e71
inc dword [i]
mov eax, dword [i]
add esi, 0x48
cmp eax, dword [edx + 0x71c]
jl 0x8062e38
push eax
mov eax, dword [axs]
push eax
push ebx
push str._MuL___s___i_n
call dbg.debug
mov edx, dword [axs]
jmp 0x8062daf
mov al, byte [esi + 0x3c]
test eax, 0x20
je 0x8062e48
and eax, 0x10
je 0x8062e89
test byte [edx + 0x3ac], 1
je 0x8062e48
mov edi, dword [esi + 0x38]
test edi, edi
je 0x8062e48
sub esp, 8
push ebx
lea eax, [edi + 4]
push eax
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x8062eb7
mov eax, dword [esi + 0x3c]
shr eax, 9
and eax, 0xff
cmp dword [axs], eax
jge 0x8062eb7
mov dword [axs], eax
mov edi, dword [edi]
test edi, edi
jne 0x8062e90
mov edx, dword [obj.current]
jmp 0x8062e48
sub esp, 0xc
push ebx
call dbg.getnick
mov dword [esp], eax
call dbg.find_handle
mov esi, dword [eax + 0x3c]
mov dword [axs], esi
shr dword [axs], 9
and dword [axs], 0xff
add esp, 0x10
jmp 0x8062e59
nop
inc ebx
mov al, byte [ebx]
test al, al
je 0x8062f01
cmp al, 0x40
jne 0x8062ef0
inc ebx
jmp 0x8062d95
xor edx, edx
cmp al, 0x40
jne 0x8062daf
jmp 0x8062efb
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x1010
lea eax, [arg]
push eax
mov eax, dword [format]
push eax
lea ebx, [buf]
push ebx
call sym.imp.vsprintf
push ebx
sub esp, 8
mov eax, dword [obj.now]
push eax
call dbg.time2medium
add esp, 0xc
push eax
push 0x806794b
lea edi, [buf2]
push edi
call sym.imp.sprintf
xor esi, esi
mov eax, dword [obj.current]
add esp, 0x20
cmp esi, dword [eax + 0xb24]
mov ebx, dword [eax + 0xb28]
jge 0x804b774
lea esi, [esi]
cmp byte [ebx], 0
jne 0x804b780
inc esi
add ebx, 0xa1
cmp esi, dword [eax + 0xb24]
jl 0x804b760
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
push str.statmsg
lea eax, [ebx + 1]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804b79f
mov eax, dword [obj.current]
jmp 0x804b765
sub esp, 8
push edi
lea eax, [ebx + 0x51]
push eax
call dbg.send_chat
add esp, 0x10
test eax, eax
jne 0x804b798
push eax
push 0xa1
push 0
push ebx
call sym.imp.memset
add esp, 0x10
jmp 0x804b798
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
test ebx, ebx
mov ecx, dword [arg_ch]
je 0x8063d70
lea eax, [ecx + ecx*4]
mov edx, dword [obj.current]
shl eax, 2
test byte [edx + eax + 0x3c0], 8
je 0x8063d60
lea eax, [ecx + ecx*4]
mov eax, dword [edx + eax*4 + 0x3c4]
pop ebx
pop ebp
ret
jmp 0x8063d60
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [ebx + eax + 0x28]
jmp 0x8063d4e
lea esi, [esi]
lea edi, [edi]
mov edx, dword [obj.current]
jmp 0x8063d44
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x28
push 0
mov esi, dword [path]
push esi
call sym.imp.open
mov ebx, eax
add esp, 0x10
xor eax, eax
test ebx, ebx
js 0x805d71a
mov ecx, dword [obj.r_str]
test ecx, ecx
jne 0x805d730
sub esp, 8
push dbg.randstring_count
push ebx
mov dword [obj.r_ct], 0
call dbg.readline
mov dword [esp], ebx
call sym.imp.close
pop eax
pop edx
push 0
push esi
call sym.imp.open
mov ebx, eax
mov eax, dword [obj.r_ct]
dec eax
push eax
fild dword [esp]
add esp, 4
fstp qword [ebp - 0x28]
call sym.imp.rand
push eax
fld qword [0x806e2c8]
fimul dword [esp]
fnstcw word [ebp - 0xa]
add esp, 0xc
fld qword [ebp - 0x28]
push dbg.randstring_getline
fmulp st(1)
mov ax, word [var_ah]
mov ah, 0xc
fadd qword [0x806e2d0]
mov word [var_ch], ax
push ebx
fldcw word [ebp - 0xc]
fistp dword [obj.r_ct]
fldcw word [ebp - 0xa]
call dbg.readline
mov dword [esp], ebx
call sym.imp.close
mov eax, dword [obj.r_str]
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
jmp 0x805d730
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
push obj.r_str
call dbg.MyFree
add esp, 0x10
jmp 0x805d690
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x10
mov eax, dword [arg_8h]
lea ebx, [eax + 0x38]
mov eax, dword [eax + 0x38]
test eax, eax
mov esi, dword [arg_ch]
je 0x806218c
nop
lea esi, [esi]
sub esp, 8
push esi
add eax, 4
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8062193
mov ebx, dword [ebx]
mov eax, dword [ebx]
test eax, eax
jne 0x8062170
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
mov eax, dword [ebx]
mov dword [ump], eax
mov eax, dword [eax]
mov dword [ebx], eax
sub esp, 0xc
lea eax, [ump]
push eax
call dbg.MyFree
jmp 0x806218c
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [arg_ch]
test eax, eax
je 0x80591db
movsx eax, byte [eax]
cmp eax, 0xff
ja 0x8059210
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
jne 0x8059200
sub esp, 8
mov eax, dword [from]
push str.A_number_is_expected_instead_of_a_string
push eax
call dbg.send_to_user
mov eax, 1
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
xor eax, eax
jmp 0x80591f1
lea esi, [esi]
lea edi, [edi]
xor eax, eax
jmp 0x80591d7
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ebx, dword [arg_8h]
mov dword [num], 0
mov al, byte [ebx]
test al, al
mov dl, byte [ch]
je 0x8058e76
movsx edi, dl
nop
movsx edx, al
cmp edx, 0xff
ja 0x8058eb0
mov eax, dword [obj._CurrentRuneLocale]
mov esi, dword [eax + edx*4 + 0x434]
cmp edi, 0xff
ja 0x8058ea0
mov eax, dword [obj._CurrentRuneLocale]
mov eax, dword [eax + edi*4 + 0x434]
cmp esi, eax
je 0x8058e90
inc ebx
mov al, byte [ebx]
test al, al
jne 0x8058e40
mov eax, dword [num]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x8058e90
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
inc dword [num]
jmp 0x8058e6f
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push edi
call sym.imp.___tolower
add esp, 0x10
jmp 0x8058e6b
mov esi, esi
sub esp, 0xc
push edx
call sym.imp.___tolower
mov esi, eax
add esp, 0x10
jmp 0x8058e57
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805f056
cmp byte [eax], 0x3a
je 0x805f0b0
sub esp, 8
push ebx
mov eax, dword [from]
push eax
call dbg.get_userlevel
sub eax, 0x46
add esp, 0x10
cmp eax, 0x81
jbe 0x805f080
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
push eax
push 1
push 0
push ebx
call dbg.join_channel
mov edx, dword [obj.now]
mov eax, dword [obj.current]
mov dword [eax + 0xba0], edx
add esp, 0x10
jmp 0x805f070
jmp 0x805f0b0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
inc ebx
jmp 0x805f056
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov al, byte [esi]
test al, al
mov edx, esi
mov ebx, esi
je 0x80594fe
lea esi, [esi]
lea edi, [edi]
cmp al, 0x5c
je 0x8059510
mov byte [ebx], al
inc edx
mov al, byte [edx]
inc ebx
test al, al
jne 0x80594f0
mov byte [ebx], 0
pop ebx
mov eax, esi
pop esi
pop ebp
ret
mov esi, esi
lea edi, [edi]
inc edx
mov al, byte [edx]
movsx ecx, al
cmp ecx, 0x72
je 0x805953a
cmp ecx, 0x72
jg 0x8059530
cmp ecx, 0x6e
jne 0x80594f4
mov byte [ebx], 0xa
jmp 0x80594f6
lea esi, [esi]
cmp ecx, 0x73
jne 0x80594f4
mov byte [ebx], 0x20
jmp 0x80594f6
mov byte [ebx], 0xd
jmp 0x80594f6
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
mov esi, dword [arg_8h]
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x8052311
mov eax, dword [rest]
test eax, eax
jne 0x8052320
sub esp, 8
mov eax, dword [0x80706b0]
push eax
push esi
call dbg.usage
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
push esi
push eax
push 0x806a12d
push ebx
call dbg.sendprivmsg
jmp 0x8052311
push ebp
mov ebp, esp
sub esp, 8
mov edx, dword [arg_ch]
mov eax, dword [edx]
test eax, eax
mov ecx, dword [arg_8h]
je 0x8058807
cmp byte [eax], 0x23
je 0x8058834
cmp byte [ecx], 0x23
je 0x8058830
mov eax, dword [obj.current]
mov eax, dword [eax + 0xb38]
test eax, eax
je 0x8058830
mov eax, dword [eax + 4]
mov dword [arg_ch], eax
mov dword [arg_8h], obj.channelbuf
mov esp, ebp
pop ebp
jmp sym.imp.strcpy
mov eax, ecx
jmp 0x805881e
sub esp, 0xc
push edx
call dbg.chop
add esp, 0x10
jmp 0x805881e
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ebx, dword [arg_8h]
cmp byte [ebx], 0x24
mov esi, dword [arg_ch]
je 0x8062d60
sub esp, 8
push ebx
push obj.SHELLMASK
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edx, 0x64
jne 0x8062c8c
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
sub esp, 0xc
push ebx
call dbg.is_localbot
add esp, 0x10
test eax, eax
mov edx, 0xc8
jne 0x8062c82
mov eax, dword [obj.current]
mov edi, dword [eax + 0x71c]
test edi, edi
jne 0x8062cb7
mov edx, 0x64
jmp 0x8062c82
sub esp, 0xc
push ebx
call dbg.getuh
pop edx
pop ecx
push eax
push 0x806bdf1
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8062d38
sub esp, 0xc
push ebx
call dbg.getnick
mov dword [esp], eax
call dbg.find_handle
add esp, 0x10
test esi, esi
mov edi, eax
je 0x8062d51
mov eax, dword [eax + 0x2c]
cmp byte [eax], 0x2a
je 0x8062d51
sub esp, 8
push esi
mov eax, dword [edi + 0x2c]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8062d51
mov eax, dword [edi + 0x2c]
sub esp, 0xc
test eax, eax
jne 0x8062d19
mov eax, obj.NULLSTR
push eax
push esi
mov eax, dword [edi + 0x3c]
shr eax, 9
and eax, 0xff
push eax
lea eax, [edi + 8]
push eax
push str._GuL___telnet_user__s__i_____s______s__n
call dbg.debug
add esp, 0x20
sub esp, 8
push esi
push ebx
call dbg.find_user
add esp, 0x10
xor edx, edx
test eax, eax
mov edi, eax
je 0x8062c82
mov eax, dword [edi + 0x3c]
shr eax, 9
movzx edx, al
jmp 0x8062c82
nop
inc ebx
mov al, byte [ebx]
test al, al
je 0x8062d71
cmp al, 0x40
jne 0x8062d60
inc ebx
jmp 0x8062c68
xor edx, edx
cmp al, 0x40
jne 0x8062c82
jmp 0x8062d6b
push ebp
mov ebp, esp
push ebx
sub esp, 0x808
lea eax, [arg]
push eax
mov ebx, dword [format]
push ebx
lea ebx, [buf]
push ebx
call sym.imp.vsprintf
add esp, 0xc
mov edx, dword [obj.now]
mov eax, dword [obj.current]
mov dword [eax + 0xbb4], edx
mov ecx, dword [to]
push ebx
push ecx
push str.PRIVMSG__s_:_s
call dbg.send_to_server
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
jmp dword [reloc.vsprintf]
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805cb7e
cmp byte [eax], 0
jne 0x805cb90
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x806d397
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805cb7e
push eax
mov eax, dword [rest]
push eax
push ebx
push str.PRIVMSG__s__s_n
call dbg.send_to_server
jmp 0x805cb7e
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
test ecx, ecx
mov edx, dword [arg_ch]
je 0x8063da2
lea eax, [edx + edx*4]
shl eax, 2
add eax, dword [obj.current]
test byte [eax + 0x3c0], 8
je 0x8063db0
lea eax, [edx + edx*4]
mov eax, dword [ecx + eax*4 + 0x2c]
pop ebp
ret
nop
lea esi, [esi]
xor eax, eax
jmp 0x8063da9
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
call dbg.chop
pop ecx
pop esi
push ebx
mov edx, dword [to]
push edx
mov edi, eax
call dbg.get_channel
mov esi, eax
mov dword [esp], str.._randfiles_randinsult.e
call dbg.randstring
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80650af
mov eax, dword [rest]
test eax, eax
jne 0x8065090
mov eax, dword [to]
cmp byte [eax], 0x23
je 0x8065080
sub esp, 8
mov eax, dword [0x8070460]
push eax
mov edi, dword [from]
push edi
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push eax
push ebx
push 0x806a12d
push esi
call dbg.sendprivmsg
jmp 0x8065078
nop
push eax
push ebx
push edi
push str.PRIVMSG__s_:_s
call dbg.send_to_server
push ebx
push edi
push str.__s___s
mov eax, dword [from]
push eax
call dbg.send_to_user
jmp 0x8065078
push eax
push str.._randfiles_randinsult.e
push obj.ERR_FILEOPEN
jmp 0x80650a4
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push 0x8067271
lea eax, [rest]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805ca63
cmp byte [eax], 0x23
je 0x805ca70
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
sub esp, 8
push 1
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
jne 0x805ca63
push eax
push 1
mov ecx, dword [rest]
push ecx
push ebx
call dbg.join_channel
pop eax
pop edx
push 3
push ebx
call dbg.find_channel
or byte [eax + 0x38d], 0x40
jmp 0x805ca63
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8049c1f
sub esp, 0xc
push eax
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x1f
jbe 0x8049c30
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push ebx
push obj.my_entity
call sym.imp.strcpy
jmp 0x8049c1f
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.current]
test eax, eax
mov edx, dword [arg_8h]
je 0x8049520
test edx, edx
je 0x80494fb
cmp byte [edx], 0
jne 0x8049500
mov esp, ebp
pop ebp
ret
nop
push ecx
push 0x4f
push edx
add eax, 0x246
push eax
call sym.imp.strncpy
mov eax, dword [obj.current]
mov byte [eax + 0x295], 0
add esp, 0x10
jmp 0x80494fb
sub esp, 8
push obj.ERR_INIT
push str._s_Stray_IRCNAME_setting__ignored__n
call sym.imp.printf
jmp 0x80494fb
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push 0x40
mov ebx, dword [s]
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
jne 0x805f460
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [rest]
push eax
call dbg.chop
mov esi, eax
mov eax, dword [rest]
add esp, 0x10
cmp byte [eax], 0x3a
je 0x805f580
sub esp, 0xc
push ebx
call dbg.getnick
mov edi, eax
pop eax
pop edx
mov eax, dword [obj.current]
push ebx
add eax, 0xb2c
push eax
call dbg.find_time
add esp, 0x10
test eax, eax
mov edx, eax
je 0x805f4ac
mov eax, dword [obj.now]
mov dword [edx + 0xc], eax
mov eax, dword [rest]
cmp byte [eax], 1
je 0x805f4fa
cmp byte [esi], 0x23
je 0x805f4c8
push edx
push eax
push edi
push str._message____s___s
call dbg.send_spymsg
jmp 0x805f44b
sub esp, 8
push 1
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x805f44b
sub esp, 0xc
mov ecx, dword [rest]
push ecx
push esi
push edi
push str.__s:_s___s
push eax
call dbg.send_spy
add esp, 0x20
jmp 0x805f44b
push ecx
push eax
push edi
push str._CTCP_Reply_From__s___s
call dbg.send_statmsg
lea eax, [rest]
mov dword [esp], eax
call dbg.chop
pop esi
pop edx
push str.PING
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805f44b
sub esp, 8
push 0x806e36c
lea eax, [rest]
push eax
call dbg.get_token
mov dword [esp], eax
call dbg.Atoi
add esp, 0x10
test eax, eax
je 0x805f569
mov eax, dword [eax]
mov edx, dword [obj.now]
push ebx
push edi
sub edx, eax
push edx
push str._LAG___li_second_s__lag_from__s
call dbg.send_statmsg
add esp, 0x10
jmp 0x805f44b
mov eax, dword [obj.now]
mov edx, eax
jmp 0x805f552
lea esi, [esi]
lea edi, [edi]
inc eax
mov dword [rest], eax
jmp 0x805f47d
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x1c
mov eax, dword [obj.CurrentShit]
test eax, eax
mov edi, dword [arg_8h]
je 0x804df00
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
mov eax, dword [obj.current]
push edi
add eax, 0xb2c
push eax
call dbg.find_time
add esp, 0x10
test eax, eax
mov edx, eax
je 0x804df25
mov eax, dword [obj.now]
mov dword [edx + 0xc], eax
mov eax, dword [to]
cmp byte [eax], 0x23
sete al
and eax, 0xff
test eax, eax
mov dword [pubcmd], eax
je 0x804df53
sub esp, 8
push 0x13
mov eax, dword [to]
push eax
call dbg.get_int_var
add esp, 0x10
test eax, eax
je 0x804e538
sub esp, 0xc
push edi
call dbg.max_userlevel
add esp, 0x10
cmp eax, 0x64
mov dword [mul], eax
jg 0x804def5
sub esp, 8
mov esi, dword [msg]
push esi
push 0x8072980
call sym.imp.strcpy
pop ecx
pop ebx
push 1
push edi
call dbg.search_list
mov dword [userclient], eax
pop eax
pop edx
push 0x1d
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
mov dword [has_cc], 1
je 0x804dfa7
mov edx, dword [obj.shell_cmd]
mov dword [has_cc], edx
sub esp, 0xc
lea ebx, [msg]
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [command], eax
je 0x804def5
sub esp, 8
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804e515
mov eax, dword [command]
mov dl, byte [eax]
mov eax, dword [obj.current]
cmp dl, byte [eax + 0x380]
je 0x804e501
test dl, dl
mov esi, dword [command]
je 0x804e024
mov al, byte [esi]
nop
movsx edx, al
cmp edx, 0xff
ja 0x804e4f0
mov eax, dword [obj._CurrentRuneLocale]
mov eax, dword [eax + edx*4 + 0x834]
mov byte [esi], al
inc esi
mov al, byte [esi]
test al, al
jne 0x804e000
mov eax, dword [obj.mcmd]
test eax, eax
je 0x804e079
xor ebx, ebx
nop
mov eax, dword [has_cc]
test eax, eax
jne 0x804e040
test byte [ebx + 0x807026d], 2
jne 0x804e06c
sub esp, 8
mov eax, dword [command]
push eax
mov eax, dword [ebx + obj.mcmd]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804e283
mov eax, dword [ebx + 0x8070264]
test eax, eax
jne 0x804e26b
add ebx, 0x10
mov esi, dword [ebx + obj.mcmd]
test esi, esi
jne 0x804e030
mov ecx, dword [pubcmd]
test ecx, ecx
jne 0x804e256
mov eax, dword [has_cc]
test eax, eax
je 0x804e09e
mov eax, dword [command]
cmp byte [eax], 0
je 0x804e09e
mov eax, dword [mul]
test eax, eax
jne 0x804e246
mov eax, dword [userclient]
test eax, eax
je 0x804e1f6
mov edx, dword [userclient]
test byte [edx + 0x208], 1
je 0x804e1f6
mov esi, dword [obj.botlist]
mov eax, dword [obj.current]
test esi, esi
mov dword [obj.backup], eax
je 0x804e11e
lea esi, [esi]
mov ecx, dword [esi + 0x3b0]
test ecx, ecx
mov dword [obj.current], esi
jne 0x804e1cd
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb3c]
test ebx, ebx
je 0x804e118
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ebx + 0x208]
and eax, 0x21
cmp eax, 0x21
je 0x804e190
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804e100
mov esi, dword [esi]
test esi, esi
jne 0x804e0d0
xor esi, esi
mov eax, dword [obj.botlinkSIZE]
mov edx, dword [obj.backup]
cmp esi, eax
mov dword [obj.current], edx
mov ebx, dword [obj.botlinkBASE]
jge 0x804def5
cmp byte [ebx], 0
je 0x804e14a
cmp byte [ebx + 8], 3
je 0x804e15a
inc esi
add ebx, 0x258
cmp esi, eax
jl 0x804e13f
jmp 0x804def5
sub esp, 0xc
mov eax, dword [obj.current]
push 0x8072980
add eax, 0x220
push eax
push obj.CurrentNick
push str._MSG__s__s__s_n
push ebx
call dbg.send_to_link
add esp, 0x20
mov eax, dword [obj.botlinkSIZE]
jmp 0x804e14a
mov esi, esi
lea edi, [edi]
cmp ebx, dword [userclient]
je 0x804e1b8
push 0x8072980
push obj.CurrentNick
push 0x806844f
lea eax, [ebx + 0x20c]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x804e112
mov eax, dword [obj.CurrentUser]
test eax, eax
je 0x804e195
test byte [eax + 0x3c], 1
je 0x804e112
jmp 0x804e195
sub esp, 0xc
push 0x8072980
lea eax, [esi + 0x220]
push eax
push obj.PUMASK
push str.:_s_PRIVMSG__s_:_s_n
mov edi, dword [ecx]
push edi
call dbg.send_to_socket
add esp, 0x20
jmp 0x804e0e4
sub esp, 8
push 0x22
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804e229
sub esp, 8
movsx eax, byte [global_msg_copy]
push eax
push 0x806843f
call sym.imp.strchr
add esp, 0x10
test eax, eax
jne 0x804def5
push ebx
push 0x8072980
push obj.CurrentNick
push 0x8068445
call dbg.send_spymsg
add esp, 0x10
jmp 0x804def5
sub esp, 8
push str.Squeeze_me_
push edi
call dbg.send_to_user
jmp 0x804e23e
push edx
push 0x8072980
mov eax, dword [to]
push eax
push edi
call dbg.on_public
jmp 0x804def5
sub esp, 8
mov esi, dword [command]
push esi
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804e06c
mov eax, dword [ebx + 0x807026c]
movzx esi, al
test eax, 0x1000
je 0x804e29e
mov ecx, dword [pubcmd]
test ecx, ecx
jne 0x804e4d0
cmp dword [mul], esi
jge 0x804e2ce
mov edx, dword [pubcmd]
test edx, edx
je 0x804def5
test eax, 0x200
jne 0x804def5
push eax
push 0x8072980
mov eax, dword [to]
push eax
push edi
call dbg.on_public
jmp 0x804e23e
sub esp, 0xc
push edi
call dbg.password_needed
add esp, 0x10
test eax, eax
je 0x804e2eb
test byte [ebx + 0x807026d], 4
jne 0x804e498
mov eax, dword [ebx + 0x807026c]
and eax, 0x100
mov dword [obj.need_dcc], eax
cmp byte [edi], 0x24
je 0x804e489
mov eax, dword [obj.need_dcc]
test eax, eax
je 0x804e33c
mov eax, dword [userclient]
test eax, eax
je 0x804e320
mov edx, dword [userclient]
test byte [edx + 0x208], 0x10
je 0x804e33c
sub esp, 8
mov ecx, dword [msg]
push ecx
push edi
mov dword [obj.need_dcc], 1
call dbg.dcc_chat
jmp 0x804def5
sub esp, 8
push 0x21
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
jne 0x804e466
mov eax, dword [msg]
test eax, eax
je 0x804e35f
cmp byte [eax], 0
jne 0x804e361
xor eax, eax
test eax, eax
je 0x804e447
push esi
push eax
mov eax, dword [to]
push eax
push edi
call dword [ebx + 0x8070268]
mov eax, dword [obj.current]
add eax, 0xb94
mov dword [esp], eax
call dbg.MyFree
mov ecx, 0x12
add esp, 0x10
mov edx, dword [obj.current]
mov eax, dword [edx + ecx*4 + 0xb48]
mov dword [edx + ecx*4 + 0xb4c], eax
dec ecx
jns 0x804e396
sub esp, 0xc
push edi
call dbg.gethost
mov esi, eax
mov ebx, dword [obj.current]
mov dword [esp], eax
mov dword [obj.mallocdoer], 0x804dee0
call sym.imp.strlen
add eax, 0x2d
mov dword [esp], eax
call dbg.MyMalloc
mov edx, dword [obj.CurrentUser]
add esp, 0xc
test edx, edx
mov dword [ebx + 0xb48], eax
push esi
je 0x804e443
mov eax, dword [edx + 4]
test eax, eax
je 0x804e443
mov eax, dword [edx + 0x3c]
shr eax, 9
and eax, 0xff
test edx, edx
push eax
je 0x804e43c
mov eax, dword [edx + 4]
test eax, eax
je 0x804e43c
lea eax, [edx + 8]
push eax
mov eax, dword [command]
push eax
sub esp, 8
mov eax, dword [obj.now]
push eax
call dbg.time2medium
add esp, 0xc
push eax
push str.__s____10s__11s__i_____s_
mov eax, dword [obj.current]
mov edi, dword [eax + 0xb48]
push edi
call sym.imp.sprintf
jmp 0x804def5
mov eax, str.Unknown
jmp 0x804e40a
xor eax, eax
jmp 0x804e3fb
test byte [ebx + 0x807026d], 8
je 0x804e369
sub esp, 8
mov eax, dword [command]
push eax
push edi
call dbg.usage
jmp 0x804def5
sub esp, 0xc
push esi
mov edx, dword [command]
push edx
mov eax, dword [mul]
push eax
push obj.CurrentNick
push str.:_s__i_:_Executing__s__i_
call dbg.send_statmsg
add esp, 0x20
jmp 0x804e353
mov dword [obj.need_dcc], 0
jmp 0x804e304
sub esp, 0xc
push edi
call dbg.verified
add esp, 0x10
test eax, eax
jne 0x804e2eb
test byte [ebx + 0x807026d], 2
jne 0x804e4c0
mov eax, dword [pubcmd]
test eax, eax
jne 0x804def5
sub esp, 8
push str.Use__VERIFY__to_get_verified_first
jmp 0x804e24e
lea esi, [esi]
sub esp, 8
mov eax, dword [command]
push eax
push str._on_msg__Public_command___s__ignored_n
call dbg.debug
jmp 0x804def5
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push edx
call sym.imp.___toupper
add esp, 0x10
jmp 0x804e01b
inc dword [command]
mov dword [has_cc], 1
mov eax, dword [command]
mov dl, byte [eax]
jmp 0x804dff6
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [command], eax
je 0x804def5
mov dword [has_cc], 1
jmp 0x804dfe0
push eax
mov eax, dword [msg]
push eax
jmp 0x804e25c
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [arg_8h]
mov ebx, dword [arg_14h]
mov dword [from], eax
mov edi, dword [arg_ch]
mov esi, dword [arg_10h]
push ebx
push esi
push edi
push eax
call dbg.do_loadlists
push ebx
push esi
push edi
mov edi, dword [from]
push edi
call dbg.do_loadlevels
add esp, 0x20
call dbg.read_seenlist
test eax, eax
je 0x8054e80
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x8054e80
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [obj.current]
mov eax, dword [eax + 0xb40]
mov dword [arg_ch], eax
mov dword [arg_8h], str.SeenList_could_not_be_loaded_from_file__s
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_user
push ebp
mov ebp, esp
push ebx
push eax
mov eax, dword [obj.current]
add eax, 0x724
mov dword [cmdlevel], eax
mov ebx, dword [arg_8h]
call dbg.readuserlist
test eax, eax
mov edx, sym..rodata
jne 0x8052d38
mov edx, 0x806a20c
mov dword [rest], edx
mov dword [to], str.Lists_s_read_from_file__s
mov dword [arg_8h], ebx
pop eax
pop ebx
pop ebp
jmp dbg.send_to_user
push ebp
mov ebp, esp
push ebx
push eax
mov ebx, dword [arg_8h]
call dbg.read_levelfile
test eax, eax
jne 0x8052cc0
mov dword [rest], str.._mech.levels
mov dword [to], str.Levels_could_not_be_read_from__s
mov dword [arg_8h], ebx
pop ebx
pop ebx
pop ebp
jmp dbg.send_to_user
lea esi, [esi]
mov dword [rest], str.._mech.levels
mov dword [to], str.Levels_were_read_from__s
jmp 0x8052caf
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push 0
mov eax, dword [obj.current]
mov eax, dword [eax + 0xb40]
push eax
call sym.imp.open
mov ebx, eax
add esp, 0x10
xor eax, eax
test ebx, ebx
js 0x8063b45
call dbg.delete_seen
sub esp, 8
push dbg.read_seenlist_callback
push ebx
call dbg.readline
mov dword [esp], ebx
call sym.imp.close
mov eax, 1
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
jmp dword [reloc.open]
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x10
mov edx, dword [obj.current]
mov eax, dword [edx + 0xb44]
test eax, eax
mov dword [Seen], eax
je 0x8063b8d
lea esi, [Seen]
mov esi, esi
sub esp, 0xc
mov ebx, dword [eax]
push esi
call dbg.MyFree
add esp, 0x10
test ebx, ebx
mov eax, ebx
mov dword [Seen], ebx
jne 0x8063b70
mov edx, dword [obj.current]
mov dword [edx + 0xb44], 0
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ecx, dword [mem]
test ecx, ecx
je 0x805799d
mov eax, dword [mem]
mov ebx, dword [eax]
test ebx, ebx
je 0x805799d
xor edi, edi
mov esi, dword [obj.mrrec]
xor edx, edx
mov eax, esi
lea esi, [esi]
lea edi, [edi]
cmp dword [eax + 4], ebx
lea ecx, [eax + 4]
je 0x80579a5
inc edx
add eax, 0x14
cmp edx, 0xc7
jle 0x8057950
test edi, edi
jne 0x8057972
mov eax, dword [esi]
test eax, eax
je 0x80579a9
mov esi, eax
jmp 0x8057941
mov eax, dword [mem]
mov eax, dword [eax]
sub esp, 0xc
mov dword [edi], 0
mov dword [edi + 8], 0
mov dword [edi + 0xc], 0
push eax
call sym.imp.free
mov eax, dword [mem]
mov dword [eax], 0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov edi, ecx
jmp 0x8057964
mov eax, dword [mem]
sub esp, 8
mov edx, dword [eax]
push edx
push str._MyFree__PANIC:_MyFree_0x_.8x___Unregistered_memory_block_n
call dbg.debug
mov dword [esp], 1
call sym.imp.exit
nop
lea esi, [esi]
push ebp
mov ebp, esp
push edi
push esi
lea esi, [readbuf]
push ebx
cld
mov ecx, 0x80
xor eax, eax
mov edi, esi
sub esp, 0x40c
rep stosd dword es:[edi], eax
mov esi, esi
push ebx
lea eax, [linebuf]
push eax
push esi
mov ecx, dword [s]
push ecx
call dbg.sockread
mov edi, eax
call sym.imp.__error
add esp, 0x10
test edi, edi
mov ebx, dword [eax]
je 0x8061937
cmp byte [edi], 0
jne 0x8061960
cmp ebx, 0x23
je 0x8061910
sub esp, 0xc
push str._readline__done_reading_lines_n
call dbg.debug
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x8061960
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
push edi
call dword [callback]
add esp, 0x10
dec eax
jne 0x8061937
mov ebx, 0x20
jmp 0x8061937
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8065954
mov eax, dword [rest]
test eax, eax
jne 0x8065970
sub esp, 8
mov eax, dword [0x8070540]
push eax
push esi
call dbg.usage
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
sub esp, 8
push ebx
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x8065963
push esi
mov ecx, dword [rest]
push ecx
push 0x806a12d
push ebx
call dbg.sendmode
jmp 0x8065963
push ebp
mov ebp, esp
push ebx
push ecx
mov ebx, dword [arg_8h]
call dbg.write_levelfile
test eax, eax
jne 0x8052c80
mov dword [rest], str.._mech.levels
mov dword [to], str.Levels_could_not_be_saved_to__s
mov dword [arg_8h], ebx
pop edx
pop ebx
pop ebp
jmp dbg.send_to_user
lea esi, [esi]
mov dword [rest], str.._mech.levels
mov dword [to], str.Levels_were_written_to__s
jmp 0x8052c6f
push ebp
mov ebp, esp
sub esp, 0x14
push str._sig_child__n
call dbg.debug
add esp, 0x10
lea esi, [esi]
lea edi, [edi]
push ecx
push 1
push 0
push 0xffffffffffffffff
call sym.imp.waitpid
add esp, 0x10
test eax, eax
jg 0x805d8c0
sub esp, 8
push dbg.sig_child
push 0x14
call sym.imp.signal
leave
ret
jmp dword [reloc.waitpid]
push ebp
mov ebp, esp
push ebx
sub esp, 0x210
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
mov ebx, eax
pop eax
pop edx
push 3
push ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
mov edx, eax
je 0x8060cf2
mov al, byte [eax + 0x38d]
and eax, 0xffffffcf
or eax, 0x22
mov byte [edx + 0x38d], al
mov edx, dword [obj.current]
cmp byte [edx + 0x2e0], 0
jne 0x8060d20
sub esp, 8
lea eax, [edx + 0x220]
push eax
push str.WHOIS__s
call dbg.send_to_server
mov ebx, dword [var_4h]
leave
ret
lea esi, [esi]
sub esp, 0xc
lea eax, [edx + 0x2e0]
push eax
lea eax, [edx + 0x220]
push eax
push ebx
push str._s__s__s
lea ebx, [nuh]
push ebx
call sym.imp.sprintf
add esp, 0x18
push ebx
push 0
call dbg.Link_needinvite
jmp 0x8060d15
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [args]
test eax, eax
je 0x805ae95
cmp byte [eax], 0
jne 0x805ae9d
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
lea eax, [args]
push eax
call dbg.chop
mov ebx, dword [args]
add esp, 0x10
test ebx, ebx
mov dword [from], eax
je 0x805ae95
cmp byte [ebx], 0
je 0x805ae95
mov esi, eax
mov edx, 0x806bc73
mov eax, 2
cld
mov edi, edx
mov ecx, eax
repe cmpsb byte [esi], byte ptr es:[edi]
je 0x805af33
mov esi, dword [obj.botlist]
test esi, esi
je 0x805af18
lea esi, [esi]
mov ebx, dword [esi + 0xb3c]
test ebx, ebx
mov dword [obj.current], esi
je 0x805af12
mov eax, dword [args]
push eax
mov eax, dword [from]
push eax
push 0x806844f
lea eax, [ebx + 0x20c]
push eax
call dbg.send_to_user
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x805aef0
mov esi, dword [esi]
test esi, esi
jne 0x805aee0
mov eax, dword [args]
push eax
mov edi, dword [from]
push edi
push str._MSG__s__s_n
mov esi, dword [Link]
push esi
call dbg.link_bcast
jmp 0x805ae95
sub esp, 8
push ebx
push 0x806a12d
call dbg.send_global_statmsg
add esp, 0x10
jmp 0x805af18
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x414
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
mov edi, dword [arg_8h]
call dbg.get_channel
mov esi, eax
pop eax
pop edx
push esi
push edi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8066330
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
lea edi, [edi]
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80663fc
sub esp, 0xc
push eax
call dbg.isnick
add esp, 0x10
test eax, eax
jne 0x8066370
push eax
push ebx
push obj.ERR_NICK
push edi
call dbg.send_to_user
jmp 0x806631f
lea esi, [esi]
lea edi, [edi]
push eax
push 0
push ebx
push edi
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov edi, eax
je 0x806631f
sub esp, 0xc
push str.._randfiles_randkicks.e
call dbg.randstring
add esp, 0x10
test eax, eax
je 0x806639c
cmp byte [eax], 0
jne 0x80663e7
mov dword [buffer], 0x2074754f
mov dword [var_414h], 0x20756f79
mov dword [var_410h], 0x216f67
push eax
push edi
push ebx
push esi
call dbg.deop_screwban
mov eax, dword [rest]
test eax, eax
je 0x80663cf
cmp byte [eax], 0
jne 0x80663d5
lea eax, [buffer]
push eax
push 0x806a12d
push ebx
push esi
call dbg.sendkick
jmp 0x806631f
sub esp, 8
push eax
lea eax, [buffer]
push eax
call sym.imp.strcpy
add esp, 0x10
jmp 0x80663ba
sub esp, 8
mov eax, dword [0x80706c0]
push eax
push edi
call dbg.usage
jmp 0x806631f
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push 0
mov edx, dword [obj.current]
mov eax, dword [obj.now]
sub eax, dword [edx + 0xbbc]
push eax
mov ebx, dword [arg_ch]
mov esi, dword [arg_8h]
call dbg.idle2str
add esp, 0xc
push eax
push 0x806a12d
push obj.ec_tmp
call sym.imp.sprintf
pop eax
pop edx
push obj.ec_tmp
mov eax, dword [ebx]
push eax
call dbg.Strcat
mov dword [ebx], eax
add dword [esi], 3
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
mov eax, ecx
mov edx, 0xc22e4507
imul edx
push esi
mov eax, ecx
lea esi, [ecx + edx]
sar eax, 0x1f
sar esi, 0x10
sub esi, eax
lea eax, [esi + esi*4]
lea eax, [esi + eax*4]
lea eax, [esi + eax*8]
shl eax, 2
sub eax, esi
shl eax, 7
sub ecx, eax
mov eax, ecx
mov edx, 0x91a2b3c5
imul edx
push ebx
mov eax, ecx
lea ebx, [ecx + edx]
sar eax, 0x1f
sar ebx, 0xb
sub ebx, eax
lea eax, [ebx*8]
sub eax, ebx
shl eax, 5
add eax, ebx
shl eax, 4
sub ecx, eax
mov eax, ecx
mov edx, 0x88888889
imul edx
add edx, ecx
mov eax, ecx
sar eax, 0x1f
sar edx, 5
sub edx, eax
lea eax, [edx + edx*2]
lea eax, [eax + eax*4]
shl eax, 2
sub ecx, eax
mov eax, ecx
mov ecx, dword [small]
test ecx, ecx
jne 0x8058010
push ecx
push eax
push edx
cmp esi, 1
push ebx
mov eax, sym..rodata
je 0x8057fe6
mov eax, 0x806a12e
push eax
push esi
push str._d_day_s___2.2d:__2.2d:__2.2d
push obj.idlestr
call sym.imp.sprintf
add esp, 0x20
lea esp, [var_8h]
pop ebx
pop esi
mov eax, obj.idlestr
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push eax
push edx
push ebx
push esi
push str._d_d___d_h___d_m___d_s
jmp 0x8057fed
jmp dword [reloc.sprintf]
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
push esi
test edx, edx
push ebx
mov esi, dword [arg_ch]
je 0x80577d2
test esi, esi
je 0x80577d2
mov al, byte [edx]
test al, al
mov ebx, 0x8072b80
je 0x805778e
mov esi, esi
cmp al, 0x25
je 0x80577a0
mov byte [ebx], al
inc edx
inc ebx
mov al, byte [edx]
test al, al
jne 0x8057780
mov byte [ebx], 0
mov eax, 0x8072b80
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
inc edx
movsx eax, byte [edx]
cmp eax, 0x25
je 0x80577cd
cmp eax, 0x6e
je 0x80577b6
mov byte [ebx], 0x25
mov al, byte [edx]
inc ebx
jmp 0x8057784
mov al, byte [esi]
test al, al
mov ecx, esi
je 0x80577ca
mov esi, esi
mov byte [ebx], al
inc ecx
mov al, byte [ecx]
inc ebx
test al, al
jne 0x80577c0
inc edx
jmp 0x8057788
mov byte [ebx], 0x25
jmp 0x8057788
xor eax, eax
jmp 0x8057796
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push 0
mov ebx, dword [arg_8h]
push ebx
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8052700
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
jmp 0x8052700
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
call dbg.savesession
mov ecx, dword [rest]
test ecx, ecx
je 0x8052714
mov eax, dword [rest]
cmp byte [eax], 0
jne 0x8052780
sub esp, 0xc
push str.._randfiles_randsignoff.e
call dbg.randstring
add esp, 0x10
test eax, eax
je 0x8052774
sub esp, 8
push eax
mov eax, dword [obj.current]
add eax, 0x3a4
push eax
mov dword [obj.mallocdoer], 0x80526d0
call dbg.mstrcpy
pop eax
pop edx
mov eax, dword [obj.current]
push ebx
add eax, 0x3a8
push eax
mov dword [obj.mallocdoer], 0x80526d0
call dbg.mstrcpy
mov eax, dword [obj.current]
mov dword [eax + 4], 6
jmp 0x80526ea
mov eax, str.Ill_get_you_for_this___
jmp 0x8052728
nop
lea esi, [esi]
mov eax, dword [rest]
jmp 0x8052728
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push 0
mov esi, dword [arg_8h]
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8052b90
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov edi, eax
je 0x8052c2d
sub esp, 0xc
push eax
call dbg.find_handle
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8052c23
sub esp, 8
mov eax, dword [eax + 0x2c]
push eax
push esi
call dbg.get_userlevel
mov edx, dword [ebx + 0x3c]
mov ecx, eax
mov eax, edx
shr eax, 9
add esp, 0x10
cmp al, 0xc8
je 0x8052c0c
shr edx, 9
movzx eax, dl
cmp ecx, eax
jl 0x8052c00
sub esp, 0xc
push ebx
call dbg.remove_user
add esp, 0xc
push edi
push str.User__s_has_been_purged
push esi
call dbg.send_to_user
jmp 0x8052b7c
mov eax, dword [ebx + 0x2c]
push eax
push edi
push str._s_has_a_higher_immortality_level_than_you_on__s
jmp 0x8052bf5
cmp ecx, 0x64
jne 0x8052bd9
push eax
push edi
push str.Deleting_bot__s
push esi
call dbg.send_to_user
add esp, 0x10
jmp 0x8052be3
sub esp, 8
push str.Unknown_handle
jmp 0x8052bf5
sub esp, 8
mov eax, dword [0x80703a0]
push eax
push esi
call dbg.usage
jmp 0x8052b7c
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8066f62
cmp byte [eax], 0
jne 0x8066f80
sub esp, 8
mov eax, dword [0x80708e0]
push eax
push esi
call dbg.usage
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 0xc
push eax
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x3e
jbe 0x8066fb0
push eax
push 0x3f
push str.Hostnames_cannot_be_longer_than__i_chars
push esi
call dbg.send_to_user
jmp 0x8066f71
jmp 0x8066fb0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
mov eax, dword [obj.current]
push ebx
add eax, 0x296
push eax
call sym.imp.strcpy
mov eax, dword [obj.current]
mov dword [eax + 0x2dc], 0
add esp, 0xc
add eax, 0x296
push eax
push str.Virtual_host_has_been_set_to__s
push esi
call dbg.send_to_user
pop ebx
pop eax
push str.Bot_must_reconnect_for_this_change_to_take_effect
jmp 0x8066f99
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
xor eax, eax
cmp dword [edx + 4], 0
mov ecx, dword [arg_ch]
je 0x805604d
jmp 0x8056040
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp dword [edx + eax*8], ecx
je 0x8056054
inc eax
cmp dword [edx + eax*8 + 4], 0
jne 0x8056040
mov eax, 0x806ad28
pop ebp
ret
mov eax, dword [edx + eax*8 + 4]
jmp 0x8056052
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
mov ebx, dword [arg_8h]
push 0
mov eax, dword [obj.now]
mov edx, dword [obj.current]
sub eax, dword [edx + 0xbbc]
push eax
call dbg.idle2str
mov dword [rest], eax
mov dword [arg_8h], ebx
mov dword [to], str.Ontime:__s
mov ebx, dword [var_4h]
add esp, 0x10
mov esp, ebp
pop ebp
jmp dbg.send_to_user
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x528
lea ebx, [args]
push ebx
call dbg.chop
mov dword [from], eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov edi, eax
je 0x805b4b1
cmp byte [eax], 0x24
je 0x805b4b9
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
lea eax, [eax + 1]
push eax
lea eax, [tmp]
push eax
call sym.imp.strcpy
mov dword [user], eax
pop eax
pop edx
push 0x806a108
lea eax, [user]
push eax
call dbg.get_token
mov dword [botnick], eax
mov eax, dword [args]
push eax
push edi
mov esi, dword [from]
push esi
push str._Link_reply__from_to_rest:__s__s__s_n
call dbg.debug
mov esi, dword [obj.botlist]
add esp, 0x20
test esi, esi
mov dword [m], 0
je 0x805b57e
nop
lea esi, [esi]
sub esp, 8
lea eax, [esi + 0x220]
push eax
mov ebx, dword [botnick]
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805b578
mov ebx, dword [esi + 0xb3c]
test ebx, ebx
mov dword [m], 1
mov dword [obj.current], esi
je 0x805b578
mov esi, esi
lea edi, [edi]
mov eax, dword [ebx + 0x208]
and eax, 0x21
cmp eax, 0x21
je 0x805b600
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805b560
mov esi, dword [esi]
test esi, esi
jne 0x805b520
mov eax, dword [m]
test eax, eax
jne 0x805b4b1
sub esp, 8
push 0x65
mov eax, dword [botnick]
push eax
call dbg.find_entity
add esp, 0x10
test eax, eax
je 0x805b4b1
mov eax, dword [eax + 0x254]
push eax
push 0x258
mov esi, dword [obj.botlinkSIZE]
push esi
mov ebx, dword [obj.botlinkBASE]
push ebx
call dbg.findstruct
add esp, 0x10
test eax, eax
je 0x805b4b1
sub esp, 0xc
mov ecx, dword [args]
push ecx
push edi
mov edx, dword [from]
push edx
push str._RPL__s__s__s_n
push eax
call dbg.send_to_link
jmp 0x805b4b1
jmp 0x805b600
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
lea eax, [ebx + 0x20c]
push eax
mov ecx, dword [user]
push ecx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805b572
sub esp, 0xc
mov edx, dword [args]
push edx
call dbg.unescape_string
mov eax, dword [args]
push eax
mov eax, dword [from]
push eax
push 0x806794b
lea eax, [tmp2]
push eax
call sym.imp.sprintf
add esp, 0x18
lea eax, [tmp2]
push eax
mov eax, dword [user]
push eax
call dbg.send_chat
jmp 0x805b4b1
push ebp
mov ebp, esp
or byte [obj.will], 8
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x14
mov ecx, dword [from]
push ecx
call dbg.max_userlevel
add esp, 0xc
push eax
push obj.CurrentNick
push str._CTCP__:_s__i_:_Requested_Finger_Info
call dbg.send_statmsg
pop eax
pop edx
push 0x23
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x8055d80
mov esp, ebp
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push 0x25
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x8055dc0
sub esp, 0xc
push str.._randfiles_randversions.e
call dbg.randstring
add esp, 0x10
test eax, eax
je 0x8055dc0
mov dword [rest], eax
mov dword [to], str.FINGER__s
mov dword [from], obj.CurrentNick
mov esp, ebp
pop ebp
jmp dbg.send_ctcp_reply
mov dword [rest], str.hey__that_tickles
jmp 0x8055daa
push ebp
mov ebp, esp
sub esp, 0x10
push 1
mov ecx, dword [channel]
push ecx
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x804ac67
sub esp, 8
push obj.CurrentNick
push eax
call dbg.find_chanuser
add esp, 0x10
test eax, eax
mov edx, eax
je 0x804ac67
mov eax, dword [obj.now]
mov dword [edx + 0x38], eax
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push str.__t_r_n
lea eax, [line]
push eax
call dbg.get_token
mov edi, eax
mov eax, dword [obj.userlist_cmds]
xor esi, esi
add esp, 0x10
test eax, eax
je 0x804a4fd
mov ebx, obj.userlist_cmds
lea esi, [esi]
sub esp, 8
mov eax, dword [ebx]
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804a4fd
add ebx, 0xc
mov eax, dword [ebx]
inc esi
test eax, eax
jne 0x804a4e0
lea eax, [esi + esi*2]
lea ebx, [eax*4]
mov eax, dword [ebx + obj.userlist_cmds]
test eax, eax
je 0x804a52a
cmp byte [ebx + 0x8070188], 0
jne 0x804a534
sub esp, 0xc
mov edi, dword [line]
push edi
call dword [ebx + 0x8070184]
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
xor eax, eax
pop ebp
ret
sub esp, 8
push str.__t_r_n
lea eax, [line]
push eax
call dbg.get_token
mov dword [line], eax
add esp, 0x10
jmp 0x804a51a
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8052040
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
jmp 0x8052040
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push ebx
call dbg.usermode
add esp, 0x10
and eax, 2
je 0x805202a
mov eax, dword [rest]
test eax, eax
je 0x8052075
sub esp, 0xc
push 0x76
push 0x2b
push 3
push eax
push ebx
call dbg.channel_massmode
jmp 0x805202a
push eax
push obj.CurrentNick
push str.v__s
push ebx
call dbg.sendmode
jmp 0x805202a
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [User]
mov ebx, dword [eax + 0x38]
test ebx, ebx
mov esi, dword [arg_ch]
je 0x80620ea
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push esi
lea eax, [ebx + 4]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8062126
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80620d0
sub esp, 0xc
push esi
mov dword [obj.mallocdoer], 0x80620b0
call sym.imp.strlen
add eax, 5
mov dword [esp], eax
call dbg.MyMalloc
pop edx
pop ecx
push esi
mov edi, eax
lea eax, [eax + 4]
push eax
call sym.imp.strcpy
mov edx, dword [User]
mov eax, dword [edx + 0x38]
add esp, 0x10
test eax, eax
jne 0x806212e
mov dword [edx + 0x38], edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov ebx, eax
mov eax, dword [eax]
test eax, eax
je 0x8062148
lea esi, [esi]
lea edi, [edi]
mov ebx, eax
mov eax, dword [eax]
test eax, eax
jne 0x8062140
mov dword [ebx], edi
jmp 0x8062126
push ebp
mov ebp, esp
sub esp, 0x14
mov eax, dword [obj.current]
add eax, 0x3bc
push eax
call dbg.MyFree
lea eax, [rest]
mov dword [esp], eax
call dbg.chop
pop eax
pop edx
mov ecx, dword [rest]
mov eax, dword [obj.current]
push ecx
add eax, 0x3bc
push eax
mov dword [obj.mallocdoer], 0x805fb10
call dbg.mstrcpy
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_ch]
test ebx, ebx
je 0x805ef41
cmp byte [ebx], 0
jne 0x805ef70
mov eax, dword [obj.current]
sub esp, 0xc
mov eax, dword [eax + 8]
push eax
call sym.imp.close
mov eax, dword [obj.current]
mov dword [eax + 8], 0xffffffff
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov eax, dword [obj.current]
mov esi, dword [eax + 0x10]
push esi
push 0x114
mov ecx, dword [obj.serverSIZE]
push ecx
mov edx, dword [obj.serverBASE]
push edx
call dbg.findstruct
add esp, 0x10
test eax, eax
mov esi, eax
je 0x805ef41
sub esp, 8
push ebx
push 0x806e2d8
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x805efbb
mov dword [esi + 0x104], 1
jmp 0x805ef41
sub esp, 8
push ebx
push str.klined
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x805efdf
mov dword [esi + 0x104], 2
jmp 0x805ef41
sub esp, 8
push ebx
push str.connectionclass
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x805f003
mov dword [esi + 0x104], 3
jmp 0x805ef41
sub esp, 8
push ebx
push str.different_port
call dbg.matches
add esp, 0x10
test eax, eax
sete al
and eax, 0xff
dec eax
and eax, 0xfffffffa
add eax, 6
mov dword [esi + 0x104], eax
jmp 0x805ef41
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [obj.current]
test ebx, ebx
jne 0x80498e0
sub esp, 8
push obj.ERR_INIT
push str._s_Stray_TOG_setting__ignored__n
call sym.imp.printf
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80498d1
sub esp, 8
push 4
push eax
mov esi, dword [args]
call dbg.find_var_name
add esp, 0x10
cmp eax, 0xffffffff
mov edx, eax
je 0x804998e
lea eax, [eax + eax*4]
shl eax, 2
add eax, dword [obj.current]
test byte [eax + 0x3c0], 8
lea ecx, [eax + 0x3c0]
je 0x8049960
mov ebx, ecx
test ebx, ebx
je 0x80498d1
test esi, esi
je 0x804993c
cmp byte [esi], 0
jne 0x804994f
mov eax, 1
test eax, eax
je 0x804994a
mov eax, 1
mov dword [ebx + 4], eax
jmp 0x80498d1
sub esp, 0xc
push esi
call sym.imp.atoi
add esp, 0x10
jmp 0x8049941
lea esi, [esi]
mov eax, dword [obj.cfgChan]
test eax, eax
jne 0x804997a
push ecx
push ebx
push obj.ERR_INIT
push str._s_Channel_TOG___s__with_no_active_channel__ignored__n
jmp 0x80498cc
sub esp, 8
push edx
mov edx, dword [eax + 4]
push edx
call dbg.find_var
mov ebx, eax
add esp, 0x10
jmp 0x804992f
push obj.configfile
push ebx
push obj.ERR_INIT
push str._s_Unknown_toggle___s__in__s_n
jmp 0x80498cc
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [obj.VarName]
xor ebx, ebx
test eax, eax
mov edi, dword [arg_8h]
je 0x8063f7a
xor esi, esi
lea esi, [esi]
sub esp, 8
mov eax, dword [ebx*8 + obj.VarName]
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8063f6b
mov eax, esi
add eax, dword [obj.current]
mov edx, dword [type]
test dword [eax + 0x3c0], edx
jne 0x8063f87
inc ebx
mov eax, dword [ebx*8 + obj.VarName]
add esi, 0x14
test eax, eax
jne 0x8063f40
mov eax, 0xffffffff
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov eax, ebx
jmp 0x8063f7f
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push 3
mov eax, dword [name]
push eax
mov ebx, dword [arg_ch]
call dbg.find_channel
mov edx, eax
add esp, 0x10
xor eax, eax
test edx, edx
je 0x80640b7
lea eax, [ebx + ebx*4]
lea eax, [edx + eax*4 + 0x24]
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
lea eax, [rest]
sub esp, 0x14
push eax
call dbg.chop
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
push eax
mov ebx, dword [c_list]
test ebx, ebx
je 0x804b1f8
lea esi, [esi]
push eax
push 0
mov eax, dword [ebx + 8]
push eax
mov ecx, dword [ebx + 4]
push ecx
call dbg.join_channel
pop eax
pop edx
mov eax, dword [ebx + 0xc]
push eax
mov eax, dword [ebx + 4]
push eax
call dbg.set_enftopic
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x804b1d0
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [args]
push ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test edi, edi
mov dword [next], eax
je 0x805bdae
cmp byte [edi], 0
je 0x805bdae
mov ebx, dword [obj.botlist]
test ebx, ebx
je 0x805bd8f
lea esi, [esi]
lea edi, [edi]
test byte [ebx + 0x3ac], 1
jne 0x805bdd0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805bd80
mov ebx, dword [next]
test ebx, ebx
je 0x805bd9e
mov eax, dword [next]
cmp byte [eax], 0
jne 0x805bdb6
push edx
push edi
push str._USERLOCK__s_n
mov eax, dword [Link]
push eax
call dbg.link_bcast
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push str._USERSEND_n
mov ecx, dword [Link]
push ecx
call dbg.send_to_link
add esp, 0x10
jmp 0x805bd9e
lea esi, [esi]
sub esp, 0xc
push edi
mov dword [obj.current], ebx
call dbg.find_handle
add esp, 0x10
test eax, eax
mov esi, eax
je 0x805bd89
test byte [eax + 0x3c], 0x20
jne 0x805bd89
sub esp, 8
lea eax, [eax + 8]
push eax
push str._Link_userlock__Locking_user___s_n
call dbg.debug
or byte [esi + 0x3c], 0x20
add esp, 0x10
jmp 0x805bd89
push ebp
mov ebp, esp
push esi
push ebx
mov ecx, dword [obj.now]
sub esp, 0xc
push ecx
mov ebx, dword [arg_ch]
mov esi, dword [arg_8h]
call dbg.time2away
add esp, 0xc
push eax
push 0x806a12d
push obj.ec_tmp
call sym.imp.sprintf
pop eax
pop edx
push obj.ec_tmp
mov eax, dword [ebx]
push eax
call dbg.Strcat
mov dword [ebx], eax
add dword [esi], 5
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov edx, dword [when]
test edx, edx
jne 0x8057e00
xor eax, eax
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [when]
push eax
call sym.imp.localtime
mov edx, eax
mov eax, dword [eax + 8]
add esp, 0x10
cmp eax, 0xb
jg 0x8057e80
test eax, eax
jne 0x8057e24
mov dword [edx + 8], 0xc
mov cl, 0x61
mov eax, dword [edx + 0xc]
push eax
mov eax, dword [edx + 0x10]
mov eax, dword [eax*4 + obj.months]
push eax
mov eax, dword [edx + 0x18]
mov eax, dword [eax*4 + obj.days]
push eax
movsx eax, cl
push eax
mov eax, dword [edx + 4]
push eax
mov eax, dword [edx + 8]
push eax
push str._i:__2.2d__cm__s__s__d
push obj.timebuf
call sym.imp.sprintf
add esp, 0x20
test eax, eax
sete al
and eax, 0xff
dec eax
and eax, obj.timebuf
jmp 0x8057def
lea esi, [esi]
lea edi, [edi]
cmp eax, 0xc
je 0x8057e8b
sub eax, 0xc
mov dword [edx + 8], eax
mov cl, 0x70
jmp 0x8057e26
jmp dword [reloc.localtime]
push ebp
mov ebp, esp
mov ecx, dword [nick]
push ebx
mov dl, byte [ecx]
xor eax, eax
mov al, dl
mov al, byte [eax + obj.attrtab]
and eax, 6
xor ebx, ebx
cmp al, 6
je 0x8058bb0
mov eax, ebx
pop ebx
pop ebp
ret
jmp 0x8058bb0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
test dl, dl
je 0x8058bda
lea esi, [esi]
lea edi, [edi]
xor eax, eax
mov al, dl
mov al, byte [eax + obj.attrtab]
and eax, 2
test al, al
je 0x8058be1
inc ecx
mov al, byte [ecx]
test al, al
mov dl, al
jne 0x8058bc0
mov ebx, 1
jmp 0x8058b9c
xor ebx, ebx
jmp 0x8058b9c
push ebp
mov ebp, esp
sub esp, 0x10
push obj.SHELLMASK
mov eax, dword [obj.shellmask]
push eax
call sym.imp.strcpy
add esp, 0xc
mov eax, dword [line]
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
mov eax, dword [obj.shellmask]
push eax
call dbg.on_msg
mov esp, ebp
xor eax, eax
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805c8d8
mov al, byte [eax]
test al, al
je 0x805c8d8
cmp al, 0x3a
je 0x805c950
mov eax, dword [obj.current]
mov eax, dword [eax + 0x3b0]
mov al, byte [eax + 0x211]
and eax, 1
test al, al
jne 0x805c8e0
sub esp, 0xc
push ebx
call dbg.pipeuser_refresh
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
nop
sub esp, 0xc
push ebx
call dbg.isnick
add esp, 0x10
test eax, eax
jne 0x805c920
sub esp, 0xc
mov eax, dword [obj.current]
push ebx
lea edx, [eax + 0x220]
push edx
push obj.PUMASK
push str.:_s_NOTICE__s_:_s:_Illegal_nick_n
mov eax, dword [eax + 0x3b0]
mov eax, dword [eax]
push eax
call dbg.send_to_socket
jmp 0x805c8d8
lea esi, [esi]
sub esp, 8
mov eax, dword [obj.current]
push ebx
add eax, 0x22d
push eax
call sym.imp.strcpy
pop ecx
pop eax
push ebx
push str.NICK__s_n
call dbg.send_to_server
jmp 0x805c8d8
lea esi, [esi]
lea edi, [edi]
inc ebx
jmp 0x805c8b7
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb3c]
test ebx, ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
je 0x8055282
mov esi, esi
mov eax, dword [ebx + 0x208]
and eax, esi
cmp eax, esi
je 0x8055290
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8055270
xor edx, edx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
mov esi, esi
sub esp, 8
lea eax, [ebx + 0x20c]
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edx, ebx
jne 0x805527c
jmp 0x8055284
push ebp
mov ebp, esp
push ebx
push eax
mov eax, dword [obj.current]
mov eax, dword [eax + 0xb30]
test eax, eax
je 0x80607bc
lea esi, [esi]
lea edi, [edi]
cmp dword [eax + 0x10], 5
je 0x80607d0
mov eax, dword [eax]
test eax, eax
jne 0x80607b0
mov ebx, dword [var_4h]
leave
ret
jmp 0x80607d0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
mov ebx, dword [eax]
push eax
mov eax, dword [obj.current]
add eax, 0xb30
push eax
call dbg.remove_time
mov eax, ebx
add esp, 0x10
jmp 0x80607b8
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x24
lea eax, [rest]
push eax
mov eax, dword [to]
push eax
mov dword [Chan], 0
call dbg.get_channel
pop edi
mov esi, dword [rest]
mov ebx, eax
pop eax
push esi
push str.default
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8064886
mov eax, dword [obj.current]
add eax, 0x3c0
mov dword [Vars], eax
mov edi, 4
lea esi, [esi]
mov eax, dword [obj.VarName]
xor esi, esi
test eax, eax
je 0x80647a4
mov dword [var_20h], 0
mov ebx, dword [Vars]
lea esi, [esi]
cmp edi, 3
je 0x8064860
cmp edi, 3
jg 0x8064830
cmp edi, 2
je 0x8064800
test byte [ebx], 8
jne 0x806478d
mov edx, dword [ebx + 8]
mov dword [tempstr], edx
mov eax, dword [ebx + 4]
mov dword [tempval], eax
mov eax, dword [ebx]
test eax, 1
jne 0x80647d0
and eax, 2
je 0x8064752
sub esp, 0xc
mov eax, dword [esi*8 + 0x806cf24]
push eax
mov eax, dword [tempstr]
test eax, eax
je 0x80647c4
push eax
mov eax, dword [esi*8 + obj.VarName]
push eax
push str._SET____10s___5s___s_
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x20
test byte [ebx], 4
je 0x806478d
mov edx, dword [tempval]
sub esp, 0xc
mov ecx, dword [esi*8 + 0x806cf24]
test edx, edx
push ecx
mov eax, 0x806f388
jne 0x8064773
mov eax, 0x806f3a1
push eax
mov eax, dword [esi*8 + obj.VarName]
push eax
push str._TOG____10s___5s___s_
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x20
inc esi
mov eax, dword [esi*8 + obj.VarName]
add ebx, 0x14
add dword [var_20h], 0x14
test eax, eax
jne 0x80646e0
dec edi
jne 0x80646c0
sub esp, 8
push 0x806edd0
mov ebx, dword [from]
push ebx
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov eax, obj.NULLSTR
jmp 0x8064738
mov esi, esi
sub esp, 0xc
mov edx, dword [esi*8 + 0x806cf24]
push edx
mov eax, dword [tempval]
push eax
mov eax, dword [esi*8 + obj.VarName]
push eax
push str._SET____10s___5i___s_
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x20
mov eax, dword [ebx]
jmp 0x806471d
nop
mov eax, dword [Chan]
test eax, eax
je 0x8064826
push eax
mov eax, dword [Chan]
mov eax, dword [eax + 4]
push eax
push 0x806efe0
mov ecx, dword [from]
push ecx
call dbg.send_to_user
dec edi
add esp, 0x10
jmp 0x80646fb
sub esp, 8
push 0x806f020
jmp 0x8064814
cmp edi, 4
jne 0x80646fb
sub esp, 8
push 0x806edf8
mov eax, dword [from]
push eax
call dbg.send_to_user
mov edi, 3
add esp, 0x10
lea esi, [esi]
lea edi, [edi]
test byte [ebx], 8
je 0x806478d
mov eax, dword [var_20h]
add eax, dword [obj.current]
mov edx, dword [eax + 0x3c8]
mov eax, dword [eax + 0x3c4]
mov dword [tempstr], edx
jmp 0x806470d
cmp byte [ebx], 0x23
je 0x80648b6
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb38]
test ebx, ebx
je 0x80646af
sub esp, 8
mov ecx, dword [0x8070600]
push ecx
mov edx, dword [from]
push edx
call dbg.usage
jmp 0x80647bc
sub esp, 8
push 1
push ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
mov dword [Chan], eax
je 0x80648d9
mov edx, dword [Chan]
add edx, 0x24
mov dword [Vars], edx
jmp 0x80646b7
push eax
push ebx
push obj.ERR_CHAN
jmp 0x80647b3
push ebp
mov ebp, esp
xor eax, eax
inc dword [obj.r_ct]
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8049bcf
sub esp, 0xc
push eax
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x1f
jbe 0x8049be0
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push ebx
push obj.my_pass
call sym.imp.strcpy
jmp 0x8049bcf
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x408
push 0
mov esi, dword [arg_8h]
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8053b00
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8053b74
sub esp, 0xc
push ebx
call dbg.isnick
add esp, 0x10
test eax, eax
jne 0x8053b40
push eax
push ebx
push obj.ERR_NICK
push esi
call dbg.send_to_user
jmp 0x8053aee
lea esi, [esi]
lea edi, [edi]
push eax
mov eax, dword [rest]
push eax
push ebx
push esi
call dbg.forkbot
add esp, 0x10
test eax, eax
je 0x8053b6a
push ebx
add eax, 0x22d
push eax
push str.New_bot_spawned:__s
push esi
call dbg.send_to_user
add esp, 0x10
jmp 0x8053aee
sub esp, 8
push str.Couldnt_spawn_the_bot
jmp 0x8053b5f
sub esp, 0xc
push str.._randfiles_randnicks.e
call dbg.randstring
mov ebx, eax
pop eax
pop edx
push 0x806a4fe
push ebx
call dbg.terminate
add esp, 0x10
test ebx, ebx
je 0x8053baf
sub esp, 8
push ebx
lea ebx, [buffer]
push ebx
call sym.imp.strcpy
add esp, 0x10
jmp 0x8053b15
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x22d
push eax
jmp 0x8053b9b
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea edi, [rest]
push edi
mov dword [oldpass], 0
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8054947
cmp byte [eax], 0
jne 0x8054970
sub esp, 8
mov eax, dword [0x80705c0]
push eax
mov eax, dword [from]
push eax
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x8054970
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
push 0
mov eax, dword [from]
push eax
call dbg.find_user
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8054959
cmp byte [eax + 0x15], 0
je 0x80549a7
sub esp, 0xc
push edi
mov dword [oldpass], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8054947
cmp byte [eax], 0
je 0x8054947
sub esp, 0xc
push ebx
call sym.imp.strlen
add esp, 0x10
cmp eax, 3
ja 0x80549cb
push eax
push 4
push str.Password_must_be_at_least__i_characters_long
mov ebx, dword [from]
push ebx
call dbg.send_to_user
jmp 0x8054959
sub esp, 0xc
push ebx
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x32
jbe 0x80549e0
mov byte [ebx + 0x32], 0
cmp byte [esi + 0x15], 0
jne 0x80549fc
add esi, 0x15
sub esp, 8
push ebx
push esi
call dbg.makepass
pop esi
pop edi
push str.New_password_has_been_set
jmp 0x80549c0
sub esp, 8
add esi, 0x15
push esi
mov eax, dword [oldpass]
push eax
call dbg.passmatch
add esp, 0x10
test eax, eax
jne 0x80549e9
sub esp, 8
push str.Old_password_is_not_correct
jmp 0x80549c0
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
mov esi, dword [s]
push esi
call sym.imp.strlen
add eax, dword [len]
add esp, 0x10
cmp eax, 0x46
mov ebx, 1
jbe 0x804d1a4
mov al, byte [esi]
test al, al
mov ecx, esi
je 0x804d18e
mov dl, al
nop
lea esi, [esi]
cmp dl, 0x1f
je 0x804d1b0
test ebx, ebx
je 0x804d185
xor eax, eax
mov al, dl
mov al, byte [eax + obj.tolowertab]
mov byte [ecx], al
inc ecx
mov al, byte [ecx]
test al, al
mov dl, al
jne 0x804d170
push eax
push esi
push 0x806a12d
mov eax, dword [from]
push eax
call dbg.send_to_user
mov byte [esi], 0
add esp, 0x10
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
test ebx, ebx
sete al
xor ebx, ebx
mov bl, al
jmp 0x804d175
push ebp
mov ebp, esp
lea eax, [when]
sub esp, 0x14
push eax
call sym.imp.localtime
mov ecx, dword [when]
add esp, 0x10
test ecx, ecx
jne 0x8057f20
xor edx, edx
mov esp, ebp
mov eax, edx
pop ebp
ret
jmp 0x8057f20
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov edx, dword [eax + 0xc]
push edx
mov eax, dword [eax + 0x10]
mov eax, dword [eax*4 + obj.months]
push eax
push str._s___2.2d
push obj.timebuf
call sym.imp.sprintf
add esp, 0x10
test eax, eax
mov edx, obj.timebuf
jne 0x8057f0b
jmp 0x8057f09
push ebp
mov ebp, esp
push ebx
push ebx
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov ebx, dword [eax + 0x720]
push ebx
call dbg.findstruct
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8049ea0
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x8049eb0
cmp byte [eax + 1], 0
jne 0x8049ea0
movsx eax, byte [eax]
cmp eax, 0x30
je 0x8049eb6
cmp eax, 0x31
je 0x8049eb0
lea esi, [esi]
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
or byte [ebx + 0x3c], 2
jmp 0x8049ea0
and byte [ebx + 0x3c], 0xfd
jmp 0x8049ea0
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
mov ebx, dword [s]
push ebx
mov esi, dword [arg_ch]
call sym.imp.strlen
add esp, 0x10
cmp eax, esi
mov edx, ebx
jae 0x8058ef0
lea esp, [var_8h]
pop ebx
pop esi
mov eax, edx
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push ebx
call sym.imp.strlen
lea edx, [eax + ebx]
sub edx, esi
jmp 0x8058edd
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
mov ebx, dword [arg_8h]
push ebx
call sym.imp.__inet_addr
add esp, 0x10
cmp eax, 0xffffffff
je 0x8060ea0
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
nop
sub esp, 0xc
push ebx
call sym.imp.gethostbyname
mov edx, eax
add esp, 0x10
test edx, edx
mov eax, 0xffffffff
je 0x8060e98
mov eax, dword [edx + 0x10]
mov eax, dword [eax]
mov eax, dword [eax]
jmp 0x8060e98
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x78
mov ebx, dword [arg_8h]
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
push obj.CurrentNick
call sym.imp.strcpy
sub esp, 8
push 0x21
push ebx
call sym.imp.strchr
add esp, 0x10
push eax
mov eax, dword [newnick]
push eax
push 0x8069e64
lea esi, [newnuh]
push esi
call sym.imp.sprintf
add esp, 0x18
mov eax, dword [newnick]
push eax
push 3
mov eax, dword [obj.now]
push eax
push str.none
push ebx
push obj.CurrentNick
call dbg.make_seen
add esp, 0x18
push str.no_info
push 0
mov eax, dword [obj.now]
push eax
push str.none
push esi
mov eax, dword [newnick]
push eax
call dbg.make_seen
add esp, 0x14
push ebx
call dbg.check_nickflood
mov eax, dword [newnick]
push eax
push obj.CurrentNick
push str.__s_is_now_known_as__s
push ebx
call dbg.send_common_spy
add esp, 0x18
push esi
push ebx
call dbg.change_dccnick
pop ecx
pop edi
mov eax, dword [obj.current]
push ebx
add eax, 0xb2c
push eax
call dbg.find_time
add esp, 0x10
test eax, eax
je 0x804dde1
lea ebx, [eax + 8]
sub esp, 0xc
push ebx
call dbg.MyFree
pop eax
pop edx
push esi
push ebx
mov dword [obj.mallocdoer], 0x804dd00
call dbg.mstrcpy
add esp, 0x10
sub esp, 8
mov eax, dword [obj.current]
push obj.CurrentNick
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
sete al
and eax, 0xff
test eax, eax
mov dword [isbot], eax
jne 0x804dec4
mov eax, dword [obj.current]
mov edi, dword [eax + 0xb34]
test edi, edi
je 0x804de76
sub esp, 8
push obj.CurrentNick
push edi
call dbg.find_chanuser
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804de70
sub esp, 0xc
mov eax, dword [eax + 0x3c]
push eax
call sym.imp.strlen
mov ebx, eax
pop eax
mov eax, dword [newnick]
push eax
call sym.imp.strlen
add esp, 0x10
cmp ebx, eax
jb 0x804dea0
sub esp, 8
mov ebx, dword [newnick]
push ebx
mov ecx, dword [esi + 0x3c]
push ecx
call sym.imp.strcpy
mov ebx, dword [isbot]
add esp, 0x10
test ebx, ebx
je 0x804de80
mov edi, dword [edi]
test edi, edi
jne 0x804de20
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
sub esp, 8
push edi
push esi
call dbg.get_nuh
mov dword [esp], eax
call dbg.shit_action
add esp, 0x10
jmp 0x804de70
mov esi, esi
lea edi, [edi]
sub esp, 0xc
lea ebx, [esi + 0x3c]
push ebx
call dbg.MyFree
pop eax
pop edx
mov eax, dword [newnick]
push eax
push ebx
mov dword [obj.mallocdoer], 0x804dd00
call dbg.mstrcpy
jmp 0x804de66
sub esp, 8
mov eax, dword [newnick]
push eax
mov eax, dword [obj.current]
push eax
call dbg.setbotnick
add esp, 0x10
jmp 0x804de11
push ebp
mov ebp, esp
push ebx
push edx
mov eax, dword [arg_8h]
test eax, eax
mov ebx, dword [arg_ch]
je 0x8063ea0
sub esp, 8
push 3
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ecx, eax
je 0x8063ea0
lea eax, [ebx + ebx*4]
lea edx, [eax*4]
lea eax, [ecx + edx]
test byte [eax + 0x24], 8
je 0x8063e90
mov eax, edx
add eax, dword [obj.current]
mov eax, dword [eax + 0x3c8]
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
nop
lea esi, [esi]
mov eax, dword [eax + 0x2c]
jmp 0x8063e84
lea esi, [esi]
lea edi, [edi]
mov dword [arg_ch], ebx
mov dword [arg_8h], 0
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
jmp dbg.get_str_varc
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [arg_8h]
mov dword [from], eax
cmp byte [eax], 0x24
je 0x8054040
mov edx, dword [obj.current]
xor edi, edi
cmp edi, dword [edx + 0xb24]
mov dword [var_18h], edx
mov ebx, dword [edx + 0xb28]
mov dword [i], 0
jge 0x8054040
lea esi, [esi]
lea edi, [edi]
cmp byte [ebx], 0
je 0x8054029
mov eax, str.statmsg
lea esi, [ebx + 1]
mov ecx, 8
cld
mov edi, eax
repe cmpsb byte [esi], byte ptr es:[edi]
je 0x8054050
inc dword [i]
mov edi, dword [i]
mov edx, dword [var_18h]
add ebx, 0xa1
cmp edi, dword [edx + 0xb24]
jl 0x8054010
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
mov edi, dword [from]
push edi
lea eax, [ebx + 0x51]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8054071
mov eax, dword [obj.current]
mov dword [var_18h], eax
jmp 0x8054029
mov esi, dword [from]
sub esp, 0xc
push esi
call dbg.getnick
pop edx
pop ecx
push eax
push str.__s__Removed_from_mech_core
call dbg.send_statmsg
mov dword [rest], 0xa1
mov dword [to], 0
mov dword [arg_8h], ebx
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp sym.imp.memset
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
mov esi, dword [arg_8h]
push esi
call dbg.getuh
add esp, 0x10
push eax
push obj.CurrentNick
push str._Joins:__s___s_
mov ecx, dword [obj.CurrentChan]
push ecx
call dbg.send_spy
mov eax, dword [obj.CurrentChan]
add esp, 0x10
test byte [eax + 0x38d], 8
je 0x804da86
mov edx, dword [obj.CurrentUser]
test edx, edx
mov edi, dword [eax + 4]
je 0x804dbe0
mov eax, dword [obj.CurrentShit]
test eax, eax
je 0x804da90
sub esp, 8
mov eax, dword [obj.CurrentChan]
push eax
push esi
call dbg.shit_action
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
sub esp, 8
push 0x11
mov eax, dword [obj.CurrentChan]
push eax
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804dabc
sub esp, 8
push edi
push esi
call dbg.is_aop
add esp, 0x10
test eax, eax
jne 0x804dba0
sub esp, 8
push 0x29
mov eax, dword [obj.CurrentChan]
push eax
mov dword [avuser], 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804da86
dec eax
je 0x804db7f
sub esp, 0xc
push obj.CurrentNick
mov dword [obj.mallocdoer], 0x804da20
call sym.imp.strlen
add eax, 5
mov dword [esp], eax
call dbg.MyMalloc
pop edi
mov ebx, eax
pop eax
push obj.CurrentNick
lea eax, [ebx + 4]
push eax
call sym.imp.strcpy
mov edx, dword [obj.CurrentChan]
mov esi, dword [edx + 0x384]
or dword [obj.short_tv], 1
add esp, 0x10
test esi, esi
jne 0x804db3d
mov eax, dword [obj.now]
sub eax, 3
mov dword [edx + 0x384], eax
mov ecx, dword [avuser]
test ecx, ecx
jne 0x804db4e
mov eax, dword [edx + 0x380]
test eax, eax
jne 0x804db61
mov eax, dword [edx + 0x380]
mov dword [ebx], eax
mov dword [edx + 0x380], ebx
jmp 0x804da86
mov edx, eax
mov eax, dword [eax]
test eax, eax
je 0x804db78
lea esi, [esi]
mov edx, eax
mov eax, dword [eax]
test eax, eax
jne 0x804db70
mov dword [edx], ebx
jmp 0x804da86
sub esp, 8
push edi
push esi
call dbg.is_avoice
add esp, 0x10
test eax, eax
je 0x804da86
mov dword [avuser], 1
jmp 0x804dae1
sub esp, 0xc
push esi
call dbg.password_needed
add esp, 0x10
test eax, eax
je 0x804dbc4
sub esp, 0xc
push esi
call dbg.verified
add esp, 0x10
test eax, eax
je 0x804dabc
push eax
push obj.CurrentNick
push str.o__s
push edi
call dbg.sendmode
jmp 0x804da86
lea esi, [esi]
sub esp, 8
push 0x16
push eax
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804dc39
mov eax, dword [obj.CurrentChan]
mov ebx, dword [eax + 0x18]
test ebx, ebx
mov dword [banmatch], 0
je 0x804dc2e
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push esi
mov eax, dword [ebx + 8]
push eax
call dbg.matches
add esp, 0x10
test eax, eax
je 0x804dced
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804dc10
mov eax, dword [banmatch]
test eax, eax
jne 0x804dce0
sub esp, 8
push 0x20
mov eax, dword [obj.CurrentChan]
push eax
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804da6e
sub esp, 8
push 0x19
push esi
call sym.imp.strchr
add esp, 0x10
test eax, eax
jne 0x804dc78
sub esp, 8
push 2
push esi
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x804dca7
push eax
push esi
push ebx
push esi
call dbg.getnick
pop edx
pop ecx
push eax
push edi
call dbg.deop_siteban
add esp, 0xc
push str.Lame_Control_Chars_in_UserId
push ebx
push esi
call dbg.getnick
pop edx
pop ecx
push eax
push edi
call dbg.sendkick
jmp 0x804da86
sub esp, 8
push 0x12
push esi
call sym.imp.strchr
add esp, 0x10
test eax, eax
jne 0x804dc78
sub esp, 8
push 0x16
push esi
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x804da6e
jmp 0x804dc78
jmp 0x804dce0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push eax
push str.You_are_banned_on_this_server
push obj.CurrentNick
jmp 0x804dc9c
mov dword [banmatch], 1
jmp 0x804dc2e
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.r_ct]
dec eax
test eax, eax
mov dword [obj.r_ct], eax
je 0x805d630
xor eax, eax
mov esp, ebp
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
mov eax, dword [line]
push eax
push obj.r_str
mov dword [obj.mallocdoer], 0x805d610
call dbg.mstrcpy
mov eax, 1
jmp 0x805d627
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x21c
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb3c]
test ebx, ebx
je 0x8055884
nop
lea esi, [esi]
mov esi, dword [ebx + 0x208]
test esi, 0x200
je 0x805598d
mov edx, dword [ebx + 4]
cmp edx, 0xffffffff
je 0x8055869
mov eax, edx
shr eax, 5
mov ecx, edx
and ecx, 0x1f
mov eax, dword [eax*4 + obj.write_fds]
shr eax, cl
and eax, 1
jne 0x80558c0
cmp edx, 0xffffffff
je 0x8055869
mov ecx, edx
shr edx, 5
and ecx, 0x1f
mov eax, dword [edx*4 + obj.read_fds]
shr eax, cl
and eax, 1
je 0x8055869
test esi, 1
jne 0x80558ac
and esi, 0x10
je 0x805587e
mov eax, dword [obj.now]
sub eax, dword [ebx + 0x260]
cmp eax, 0x1d
jg 0x805588c
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8055810
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
lea eax, [ebx + 0x20c]
push eax
push str._parse_dcc_input__connection_timed_out___s__n
call dbg.debug
mov dword [ebx + 0x208], 0x80
jmp 0x8055884
sub esp, 0xc
push ebx
call dbg.process_incoming_chat
add esp, 0x10
mov esi, dword [ebx + 0x208]
jmp 0x8055869
sub esp, 0xc
push str._parse_dcc_input__chat_connected__ASYNC__n
call dbg.debug
mov eax, dword [ebx + 0x208]
and eax, 0xfffffdef
or eax, 0x20
mov dword [ebx + 0x208], eax
mov eax, dword [obj.now]
lea edi, [ebx + 0x20c]
mov dword [ebx + 0x260], eax
mov dword [esp], edi
call dbg.max_userlevel
mov dword [maxul], eax
pop eax
pop edx
push 1
push edi
call dbg.getnick
mov dword [esp], eax
call dbg.link_dccuser
pop eax
mov eax, dword [maxul]
push eax
sub esp, 0xc
push edi
call dbg.getnick
add esp, 0x10
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
push str.__s___s__i__has_connected
lea esi, [tmp]
push esi
call sym.imp.sprintf
add esp, 0x20
push esi
sub esp, 8
mov eax, dword [obj.now]
push eax
call dbg.time2medium
add esp, 0xc
push eax
push str.__s___s_n
mov eax, dword [ebx + 4]
push eax
call dbg.send_to_socket
add esp, 0x10
test eax, eax
js 0x80558a0
sub esp, 0xc
push esi
call dbg.send_global_statmsg
add esp, 0x10
cmp dword [maxul], 0x64
je 0x8055995
mov esi, dword [ebx + 0x208]
mov edx, dword [ebx + 4]
jmp 0x8055846
push 0x64
mov eax, dword [obj.current]
push 0
add eax, 0x220
push eax
push edi
call dbg.do_statmsg
add esp, 0x10
jmp 0x8055987
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x31c
mov esi, dword [var_8h]
test esi, esi
js 0x80619e1
sub esp, 0xc
push 0xc
mov dword [obj.mallocdoer], 0x8061980
call dbg.MyMalloc
mov ebx, eax
mov dword [ks], eax
mov eax, dword [obj.now]
mov dword [ebx + 4], eax
mov eax, dword [obj.killsocks]
mov dword [ebx], eax
mov dword [ebx + 8], esi
pop edx
pop ecx
push esi
push str._killsock___i_added_killsocket_n
mov dword [obj.killsocks], ebx
call dbg.debug
mov eax, 1
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov edx, dword [obj.killsocks]
xor eax, eax
test edx, edx
je 0x80619d9
inc esi
setne al
and eax, 0xff
mov dword [ebp - 0x320], eax
mov dword [var_31ch], 0
lea edi, [rd]
mov eax, 0x20
jmp 0x8061a20
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
dec eax
test eax, eax
mov dword [edi + eax*4], 0
jne 0x8061a20
lea esi, [wd]
mov eax, 0x20
mov esi, esi
lea edi, [edi]
dec eax
test eax, eax
mov dword [esi + eax*4], 0
jne 0x8061a40
test edx, edx
mov dword [hisock], 0xffffffff
mov ebx, edx
mov dword [ks], edx
je 0x8061aae
lea esi, [esi]
lea edi, [edi]
mov ecx, dword [ebx + 8]
cmp ecx, dword [hisock]
jle 0x8061a81
mov dword [hisock], ecx
mov eax, ecx
mov edx, 1
and ecx, 0x1f
shr eax, 5
shl edx, cl
mov ebx, dword [ebx]
or dword [ebp + eax*4 - 0x98], edx
or dword [ebp + eax*4 - 0x118], edx
test ebx, ebx
jne 0x8061a70
mov dword [ks], 0
sub esp, 0xc
lea eax, [ebp - 0x320]
push eax
push 0
push esi
inc dword [hisock]
push edi
mov eax, dword [hisock]
push eax
call sym.imp.select
add esp, 0x20
inc eax
je 0x8061bbb
mov ebx, dword [obj.killsocks]
test ebx, ebx
mov dword [ks], ebx
je 0x80619d4
lea esi, [esi]
mov eax, dword [ebx + 8]
mov ecx, eax
shr eax, 5
and ecx, 0x1f
mov eax, dword [ebp + eax*4 - 0x98]
shr eax, cl
and eax, 1
mov esi, dword [ebx]
jne 0x8061b1c
test esi, esi
mov ebx, esi
mov dword [ks], esi
jne 0x8061af0
jmp 0x80619d4
push eax
push 0x200
lea eax, [bitbucket]
push eax
mov eax, dword [ebx + 8]
push eax
call sym.imp.read
add esp, 0x10
test eax, eax
je 0x8061b46
inc eax
jne 0x8061b0b
call sym.imp.__error
cmp dword [eax], 0x23
je 0x8061b0b
mov eax, dword [ks]
sub esp, 0xc
mov eax, dword [eax + 8]
push eax
call sym.imp.close
mov ebx, dword [ks]
mov eax, dword [obj.killsocks]
add esp, 0x10
cmp ebx, eax
mov ecx, ebx
je 0x8061bb3
test eax, eax
mov edx, eax
je 0x8061b8c
mov eax, dword [eax]
cmp eax, ebx
je 0x8061b84
test eax, eax
mov edx, eax
je 0x8061b8c
mov eax, dword [eax]
cmp eax, ecx
jne 0x8061b78
mov dword [edx], esi
mov ebx, dword [ks]
sub esp, 8
mov edi, dword [ebx + 8]
push edi
push str._killsock___i_removing_killsocket_n
call dbg.debug
lea eax, [ks]
mov dword [esp], eax
call dbg.MyFree
add esp, 0x10
jmp 0x8061b0b
mov dword [obj.killsocks], esi
jmp 0x8061b8c
call sym.imp.__error
mov edx, dword [eax]
cmp edx, 4
mov eax, 1
je 0x80619d9
cmp edx, 0xc
jne 0x8061ad8
mov eax, dword [obj.debug_on_exit]
test eax, eax
je 0x8061bf2
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov eax, dword [obj.do_exec]
test eax, eax
je 0x8061c00
call dbg.mech_exec
sub esp, 0xc
push 0
call sym.imp.exit
nop
nop
nop
nop
nop
nop
jmp dword [reloc.select]
jmp dword [reloc.read]
jmp dword [reloc.__error]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x418
push str._do_debug__init..._n
call dbg.debug
add esp, 0xc
mov eax, dword [obj.now]
push eax
push str.debug._lu
lea ebx, [fname]
push ebx
mov edi, dword [obj.dodebug]
mov esi, dword [obj.debug_fd]
call sym.imp.sprintf
add esp, 0xc
push 0x1b6
push 0x601
push ebx
call sym.imp.open
add esp, 0x10
test eax, eax
mov ebx, eax
js 0x8057690
mov dword [obj.debug_fd], eax
mov dword [obj.dodebug], 1
call dbg.debug_core
call dbg.debug_links
call dbg.debug_memory
sub esp, 0xc
push ebx
call sym.imp.close
mov dword [esp], str._do_debug__all_done._n
mov dword [obj.debug_fd], esi
mov dword [obj.dodebug], edi
call dbg.debug
mov ebx, dword [from]
add esp, 0x10
test ebx, ebx
je 0x8057685
sub esp, 8
push str.Debug_information_has_been_written_to_file
mov ecx, dword [from]
push ecx
call dbg.send_to_user
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
mov esi, dword [from]
test esi, esi
je 0x8057685
sub esp, 8
push str.Unable_to_write_debug_information_to_file_n
jmp 0x8057679
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push obj.VERSION
push str.__VERSION_t_t__s__n
call dbg.debug
pop esi
pop edi
push obj.SRCDATE
push str.__SRCDATE_t_t__s__n
call dbg.debug
pop ecx
pop ebx
push obj.BOTLOGIN
push str.__BOTLOGIN_t_t__s__n
call dbg.debug
pop eax
pop edx
push obj.BOTCLASS
push str.__BOTCLASS_t_t__s__n
call dbg.debug
mov dword [esp], str.__StructList_n
call dbg.debug
mov eax, dword [obj.StructList]
add esp, 0x10
test eax, eax
mov dword [i], 0
je 0x80567a6
mov ebx, obj.StructList
push eax
mov eax, dword [i]
mov edi, dword [ebx + eax*8 + 4]
push edi
mov esi, dword [ebx + eax*8]
push esi
push str._____s_t_t_i_n
call dbg.debug
inc dword [i]
mov eax, dword [i]
mov ecx, dword [ebx + eax*8]
add esp, 0x10
test ecx, ecx
jne 0x805677f
sub esp, 0xc
push 0x806b21f
call dbg.debug
pop eax
pop edx
mov edi, dword [obj.current]
push edi
push str.__current_t_t_.8x_n
call dbg.debug
pop ebx
mov ecx, dword [obj.backup]
pop esi
push ecx
push str.__backup_t_t_.8x_n
call dbg.debug
pop eax
pop edx
push obj.executable
push str.__executable_t_t__s__n
call dbg.debug
pop esi
pop edi
push obj.configfile
push str.__configfile_t_t__s__n
call dbg.debug
mov dword [esp], str.__will_n
call dbg.debug
pop ecx
test byte [obj.will], 1
pop ebx
je 0x80571f0
mov eax, str.TRUE
push eax
push str.____seen_t_t_s_n
call dbg.debug
pop eax
test byte [obj.will], 2
pop edx
je 0x80571e6
mov eax, str.TRUE
push eax
push str.____shellcmd_t_t_s_n
call dbg.debug
pop esi
test byte [obj.will], 4
pop edi
je 0x80571dc
mov eax, str.TRUE
push eax
push str.____signals_t_t_s_n
call dbg.debug
pop ecx
test byte [obj.will], 8
pop ebx
je 0x80571d2
mov eax, str.TRUE
push eax
push str.____onotice_t_t_s_n
call dbg.debug
pop eax
test byte [obj.will], 0x10
pop edx
je 0x80571c8
mov eax, str.TRUE
push eax
push str.____sessions_t_t_s_n
call dbg.debug
pop edi
test byte [obj.will], 0x20
pop eax
je 0x80571be
mov eax, str.TRUE
push eax
push str.____autolink_t_t_s_n
call dbg.debug
add esp, 0xc
mov esi, dword [obj.uptime]
push esi
push ebx
mov ecx, dword [obj.uptime]
push ecx
call dbg.atime
pop edi
pop edx
push eax
push 0x806b404
call dbg.debug
mov edx, dword [obj.short_tv]
add esp, 0xc
test edx, edx
sete al
and eax, 0xff
dec eax
and eax, 0xffffffe3
add eax, 0x1e
test edx, edx
push eax
mov eax, str.TRUE
jne 0x805690e
mov eax, str.FALSE
push eax
push str.__short_tv_t_t_s___is_wait__n
call dbg.debug
pop ebx
pop esi
mov ecx, dword [obj.userident]
push ecx
push str.__userident_t_t_i_n
call dbg.debug
pop eax
pop edx
mov eax, dword [obj.serverSIZE]
push eax
push str.__serverSIZE_t_t_i_n
call dbg.debug
pop esi
pop edi
mov ebx, dword [obj.serverBASE]
push ebx
push str.__serverBASE_t_t_.8x_n
call dbg.debug
xor eax, eax
add esp, 0x10
cmp eax, dword [obj.serverSIZE]
mov ebx, dword [obj.serverBASE]
mov dword [i], 0
jl 0x8057194
sub esp, 8
mov ecx, dword [obj.botlist]
push ecx
push str.__botlist_t_t_.8x_n
call dbg.debug
mov edi, dword [obj.botlist]
add esp, 0x10
test edi, edi
je 0x8056f3a
sub esp, 8
push edi
push str.____bot_t_t_t_.8x_n
call dbg.debug
pop eax
pop edx
mov eax, dword [edi]
push eax
push 0x806b1dc
call dbg.debug
add esp, 0xc
mov eax, dword [edi + 4]
push eax
mov esi, dword [edi + 4]
push esi
push obj.CNdefs
call dbg.strdef
pop ecx
pop ebx
push eax
push str.____connect_t_t_s___i__n
call dbg.debug
pop eax
pop edx
mov eax, dword [edi + 8]
push eax
push str.____sock_t_t_i_n
call dbg.debug
pop eax
mov esi, dword [edi + 0xc]
push esi
call sym.imp.__inet_ntoa
pop ecx
pop ebx
push eax
push str.____ip_t_t_t_s_n
call dbg.debug
pop eax
pop edx
mov eax, dword [edi + 0x10]
push eax
push str.____server_t_t_i_n
call dbg.debug
mov esi, dword [edi + 0x10]
push esi
push 0x114
mov ebx, dword [obj.serverSIZE]
push ebx
mov ecx, dword [obj.serverBASE]
push ecx
call dbg.findstruct
add esp, 0x20
test eax, eax
mov ebx, eax
je 0x8056a4d
sub esp, 8
push eax
push str.______Server_t_t_.8x_n
call dbg.debug
pop eax
pop edx
push str.____
push ebx
call dbg.debug_server
add esp, 0x10
sub esp, 8
mov eax, dword [edi + 0x14]
push eax
push str.____nextserver_t_t_i_n
call dbg.debug
mov eax, dword [edi + 0x14]
push eax
push 0x114
mov eax, dword [obj.serverSIZE]
push eax
mov eax, dword [obj.serverBASE]
push eax
call dbg.findstruct
add esp, 0x20
test eax, eax
mov ebx, eax
je 0x8056a9f
sub esp, 8
push eax
push str.______Server_t_t_.8x_n
call dbg.debug
pop esi
pop eax
push str.____
push ebx
call dbg.debug_server
add esp, 0x10
sub esp, 8
lea eax, [edi + 0x220]
push eax
push 0x806b1f0
call dbg.debug
pop ecx
pop ebx
lea eax, [edi + 0x22d]
push eax
push str.____wantnick_t_t__s__n
call dbg.debug
pop eax
pop edx
lea eax, [edi + 0x23a]
push eax
push str.____login_t_t__s__n
call dbg.debug
pop esi
pop eax
lea eax, [edi + 0x246]
push eax
push str.____ircname_t_t__s__n
call dbg.debug
pop ecx
pop ebx
movsx eax, byte [edi + 0x380]
push eax
push str.____cmdchar_t_t_c_n
call dbg.debug
pop eax
pop edx
mov eax, dword [edi + 0x71c]
push eax
push str.____userlistSIZE_t_i_n
call dbg.debug
pop ebx
pop esi
mov ecx, dword [edi + 0x720]
push ecx
push str.____userlistBASE_t_.8x_n
call dbg.debug
xor eax, eax
add esp, 0x10
cmp eax, dword [edi + 0x71c]
mov ebx, dword [edi + 0x720]
mov dword [i], 0
jl 0x8056f4e
sub esp, 8
mov ecx, dword [edi + 0xb34]
push ecx
push str.____Channels_t_t_.8x_n
call dbg.debug
mov esi, dword [edi + 0xb34]
add esp, 0x10
test esi, esi
je 0x8056c30
lea esi, [esi]
sub esp, 8
push esi
push str.______channel_t_t_.8x_n
call dbg.debug
pop eax
pop edx
mov ebx, dword [esi + 4]
push ebx
push str.______name_t_t__s__n
call dbg.debug
mov dword [esp], str.______Chan__users_n
call dbg.debug
mov ebx, dword [esi + 0x1c]
add esp, 0x10
test ebx, ebx
je 0x8056c16
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov ecx, dword [ebx]
push ecx
push str.________next_t_t_.8x_n
call dbg.debug
pop eax
mov eax, dword [ebx + 0x3c]
test eax, eax
pop edx
jne 0x8056bce
mov eax, obj.NULLSTR
push eax
push str.________nick_t_t__s__n
call dbg.debug
mov eax, dword [ebx + 0x40]
add esp, 0xc
test eax, eax
jne 0x8056be8
mov eax, obj.NULLSTR
cmp ebx, 0xffffffbc
push eax
mov eax, obj.NULLSTR
je 0x8056bf6
lea eax, [ebx + 0x44]
push eax
push str.________user_host_t__s__s__n
call dbg.debug
mov dword [esp], str.____________n
call dbg.debug
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x8056bb0
sub esp, 0xc
push 0x806b21d
call dbg.debug
mov esi, dword [esi]
add esp, 0x10
test esi, esi
jne 0x8056b70
sub esp, 8
mov eax, dword [edi + 0xb38]
push eax
push str.____CurrentChan_t_t_.8x_n
call dbg.debug
pop ebx
pop esi
mov ecx, dword [edi + 0xb3c]
push ecx
push str.____ClientList_t_t_.8x_n
call dbg.debug
mov ebx, dword [edi + 0xb3c]
add esp, 0x10
test ebx, ebx
je 0x8056c93
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push ebx
push str.______Client_t_t_.8x_n
call dbg.debug
mov dword [esp], 0x806b21d
call dbg.debug
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x8056c70
mov eax, dword [edi + 0xb40]
sub esp, 8
test eax, eax
jne 0x8056ca5
mov eax, obj.NULLSTR
push eax
push str.____seenfile_t_t__s__n
call dbg.debug
pop eax
pop edx
mov eax, dword [edi + 0xb44]
push eax
push str.____SeenList_t_t_.8x_n
call dbg.debug
mov ebx, dword [edi + 0xb44]
add esp, 0x10
test ebx, ebx
je 0x8056dbb
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push ebx
push str.______Seen_t_t_.8x_n
call dbg.debug
pop ecx
pop esi
mov edx, dword [ebx]
push edx
push 0x806b1da
call dbg.debug
add esp, 0xc
cmp ebx, 0xffffffe8
je 0x8056f42
lea eax, [ebx + 0x18]
mov edx, eax
push eax
push edx
push str.______nick_t_t_.8x______s__n
call dbg.debug
mov eax, dword [ebx + 4]
add esp, 0xc
test eax, eax
jne 0x8056d29
mov eax, obj.NULLSTR
push eax
mov eax, dword [ebx + 4]
push eax
push str.______userhost_t_t_.8x______s__n
call dbg.debug
mov eax, dword [ebx + 8]
add esp, 0xc
test eax, eax
jne 0x8056d47
mov eax, obj.NULLSTR
push eax
mov eax, dword [ebx + 8]
push eax
push str.______signoff_t_t_.8x______s__n
call dbg.debug
mov eax, dword [ebx + 0xc]
add esp, 0xc
test eax, eax
jne 0x8056d65
mov eax, obj.NULLSTR
push eax
mov eax, dword [ebx + 0xc]
push eax
push str.______kicker_t_t_.8x______s__n
call dbg.debug
mov eax, dword [ebx + 0x10]
add esp, 0xc
push eax
push eax
mov eax, dword [ebx + 0x10]
push eax
call dbg.atime
pop ecx
pop esi
push eax
push str.______time_t_t_s___lu__n
call dbg.debug
pop eax
pop edx
mov eax, dword [ebx + 0x14]
push eax
push str.______selector_t_t_i_n
call dbg.debug
mov dword [esp], 0x806b21d
call dbg.debug
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x8056ce0
push eax
mov eax, dword [edi + 0xb98]
push eax
push esi
mov ebx, dword [edi + 0xb98]
push ebx
call dbg.atime
pop edx
pop ecx
push eax
push str.____lastreset_t_t_s___lu__n
call dbg.debug
add esp, 0xc
mov eax, dword [edi + 0xb9c]
push eax
push esi
mov ebx, dword [edi + 0xb9c]
push ebx
call dbg.atime
pop edx
pop ecx
push eax
push str.____lastping_t_t_s___lu__n
call dbg.debug
add esp, 0xc
mov eax, dword [edi + 0xba0]
push eax
push esi
mov ebx, dword [edi + 0xba0]
push ebx
call dbg.atime
pop edx
pop ecx
push eax
push str.____lastrejoin_t_t_s___lu__n
call dbg.debug
add esp, 0xc
mov eax, dword [edi + 0xba4]
push eax
push esi
mov ebx, dword [edi + 0xba4]
push ebx
call dbg.atime
pop edx
pop ecx
push eax
push str.____lastsave_t_t_s___lu__n
call dbg.debug
add esp, 0xc
mov eax, dword [edi + 0xba8]
push eax
push esi
mov ebx, dword [edi + 0xba8]
push ebx
call dbg.atime
pop edx
pop ecx
push eax
push str.____laststatus_t_t_s___lu__n
call dbg.debug
add esp, 0xc
mov eax, dword [edi + 0xbac]
push eax
push esi
mov ebx, dword [edi + 0xbac]
push ebx
call dbg.atime
pop edx
pop ecx
push eax
push str.____lastctcp_t_t_s___lu__n
call dbg.debug
add esp, 0xc
mov eax, dword [edi + 0xbb0]
push eax
push esi
mov ebx, dword [edi + 0xbb0]
push ebx
call dbg.atime
pop edx
pop ecx
push eax
push str.____conntry_t_t_s___lu__n
call dbg.debug
add esp, 0xc
mov eax, dword [edi + 0xbb4]
push eax
push esi
mov ebx, dword [edi + 0xbb4]
push ebx
call dbg.atime
pop edx
pop ecx
push eax
push str.____activity_t_t_s___lu__n
call dbg.debug
add esp, 0xc
mov eax, dword [edi + 0xbb8]
push eax
push esi
mov ebx, dword [edi + 0xbb8]
push ebx
call dbg.atime
pop edx
pop ecx
push eax
push str.____uptime_t_t_s___lu__n
call dbg.debug
add esp, 0xc
mov eax, dword [edi + 0xbbc]
push eax
push esi
mov ebx, dword [edi + 0xbbc]
push ebx
call dbg.atime
pop edx
pop ecx
push eax
push str.____ontime_t_t_s___lu__n
call dbg.debug
mov dword [esp], 0x806b21f
call dbg.debug
mov edi, dword [edi]
add esp, 0x10
test edi, edi
jne 0x8056994
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov eax, obj.NULLSTR
xor edx, edx
jmp 0x8056d0e
sub esp, 8
push ebx
push str.______User_t_t_.8x_n
call dbg.debug
pop eax
cmp byte [ebx], 0
pop edx
je 0x805718a
mov eax, str.TRUE
push eax
push str.______used_t_t_s_n
call dbg.debug
mov dl, byte [ebx + 0x3e]
mov al, dl
shr al, 1
and eax, 7
add esp, 0x10
cmp eax, 2
mov ecx, str.USERLIST_SHIT
je 0x8056fa4
cmp eax, 2
jg 0x805717d
mov ecx, str.USERLIST_USER
dec eax
je 0x8056fa4
mov ecx, 0x806b46c
shr dl, 1
mov eax, edx
push esi
and eax, 7
push eax
push ecx
push str.______type_t_t_s___i__n
call dbg.debug
add esp, 0x10
cmp byte [ebx], 0
jne 0x8056fea
sub esp, 0xc
push 0x806b21d
call dbg.debug
inc dword [i]
mov eax, dword [i]
add ebx, 0x48
add esp, 0x10
cmp eax, dword [edi + 0x71c]
jl 0x8056f4e
jmp 0x8056b44
sub esp, 8
mov ecx, dword [ebx + 4]
push ecx
push str.______ident_t_t_i_n
call dbg.debug
pop eax
mov eax, dword [ebx + 0x2c]
test eax, eax
pop edx
jne 0x8057009
mov eax, obj.NULLSTR
push eax
push str.______chan_t_t__s__n
call dbg.debug
mov dl, byte [ebx + 0x3e]
mov al, dl
shr al, 1
and eax, 7
add esp, 0x10
dec eax
je 0x8057101
mov al, dl
shr al, 1
and eax, 7
sub eax, 2
cmp eax, 1
ja 0x8057070
mov eax, dword [ebx + 0x30]
sub esp, 8
test eax, eax
jne 0x8057046
mov eax, obj.NULLSTR
push eax
push str.______whoadd_t_t__s__n
call dbg.debug
pop eax
mov eax, dword [ebx + 0x34]
test eax, eax
pop edx
jne 0x805705f
mov eax, obj.NULLSTR
push eax
push str.______reason_t_t__s__n
call dbg.debug
add esp, 0x10
mov dl, byte [ebx + 0x3e]
mov al, dl
shr al, 1
and eax, 7
cmp eax, 3
je 0x80570dc
shr dl, 1
mov eax, edx
and eax, 7
cmp eax, 2
jne 0x8056fc0
mov eax, dword [ebx + 0x38]
sub esp, 8
test eax, eax
jne 0x805709b
mov eax, obj.NULLSTR
push eax
push str.______parm.shitmask_t__s__n
call dbg.debug
pop eax
mov esi, dword [ebx + 0x40]
push esi
call dbg.atime
pop edx
pop ecx
push eax
push str.______time_t_t_s_n
call dbg.debug
pop esi
mov ecx, dword [ebx + 0x44]
push ecx
call dbg.atime
pop esi
pop edx
push eax
push str.______expire_t_t_s_n
call dbg.debug
add esp, 0x10
jmp 0x8056fc0
mov eax, dword [ebx + 0x38]
sub esp, 8
test eax, eax
jne 0x80570eb
mov eax, obj.NULLSTR
push eax
push str.______parm.kicksay_t__s__n
call dbg.debug
add esp, 0x10
mov dl, byte [ebx + 0x3e]
jmp 0x805707c
sub esp, 8
lea eax, [ebx + 8]
push eax
push str.______name_t_t__s__n
call dbg.debug
pop ecx
pop esi
lea eax, [ebx + 0x15]
push eax
push str.______pass_t_t__s__n
call dbg.debug
pop eax
pop edx
mov eax, dword [ebx + 0x38]
push eax
push str.______parm.umask_t_.8x_n
call dbg.debug
mov esi, dword [ebx + 0x38]
add esp, 0x10
test esi, esi
je 0x8057165
sub esp, 8
mov eax, dword [esi]
push eax
push str.________next_t_t_.8x_n
call dbg.debug
pop ecx
pop eax
lea eax, [esi + 4]
push eax
push str.________mask_t_t__s__n
call dbg.debug
mov esi, dword [esi]
add esp, 0x10
test esi, esi
jne 0x805713c
sub esp, 0xc
push str.____________n
call dbg.debug
add esp, 0x10
mov dl, byte [ebx + 0x3e]
jmp 0x8057028
mov ecx, str.USERLIST_KICKSAY
cmp eax, 3
jmp 0x8056f9d
mov eax, str.FALSE
jmp 0x8056f6c
sub esp, 8
push 0x806b0fc
push ebx
call dbg.debug_server
inc dword [i]
mov eax, dword [i]
add ebx, 0x114
add esp, 0x10
cmp eax, dword [obj.serverSIZE]
jl 0x8057194
jmp 0x805696f
mov eax, str.FALSE
jmp 0x80568b6
mov eax, str.FALSE
jmp 0x8056897
mov eax, str.FALSE
jmp 0x8056878
mov eax, str.FALSE
jmp 0x8056859
mov eax, str.FALSE
jmp 0x805683a
mov eax, str.FALSE
jmp 0x805681b
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
cmp byte [obj.my_entity], 0
je 0x80575c0
mov eax, obj.my_entity
push eax
push str.__my_entity_t_t__s__n
call dbg.debug
pop eax
cmp byte [obj.my_pass], 0
pop edx
je 0x80575b0
mov eax, obj.my_pass
push eax
push str.__my_pass_t_t__s__n
call dbg.debug
pop ebx
pop esi
mov ecx, dword [obj.linkport]
push ecx
push str.__linkport_t_t_i_n
call dbg.debug
pop eax
pop edx
mov eax, dword [obj.linksock]
push eax
push str.__linksock_t_t_i_n
call dbg.debug
add esp, 0xc
mov eax, dword [obj.last_autolink]
push eax
push eax
mov esi, dword [obj.last_autolink]
push esi
call dbg.atime
pop ecx
pop ebx
push eax
push str.__last_autolink_t_t_s___lu__n
call dbg.debug
pop eax
pop edx
mov eax, dword [obj.botlinkident]
push eax
push str.__botlinkident_t_t_i_n
call dbg.debug
pop ebx
pop esi
mov ecx, dword [obj.botlinkBASE]
push ecx
push str.__botlinkBASE_t_t_.8x_n
xor esi, esi
call dbg.debug
add esp, 0x10
cmp esi, dword [obj.botlinkSIZE]
mov ebx, dword [obj.botlinkBASE]
jl 0x8057410
sub esp, 8
mov eax, dword [obj.linkconfBASE]
push eax
push str.__linkconfBASE_t_t_.8x_n
xor esi, esi
call dbg.debug
add esp, 0x10
cmp esi, dword [obj.linkconfSIZE]
mov ebx, dword [obj.linkconfBASE]
jl 0x8057300
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
push eax
push ebx
push esi
push str.__4i:_Ptr_______0x_.8x_n
call dbg.debug
add esp, 0x10
cmp byte [ebx], 0
je 0x80573f0
sub esp, 8
mov eax, dword [ebx + 4]
push eax
push str._tIdent______i_n
call dbg.debug
pop ecx
cmp byte [ebx + 8], 0
pop eax
je 0x80573e0
lea eax, [ebx + 8]
push eax
push str._tName_______s_n
call dbg.debug
pop eax
cmp byte [ebx + 0x28], 0
pop edx
je 0x80573d0
lea eax, [ebx + 0x28]
push eax
push str._tPass_______s_n
call dbg.debug
pop ecx
cmp byte [ebx + 0x48], 0
pop eax
je 0x80573c0
lea eax, [ebx + 0x48]
push eax
push str._tHost_______s_n
call dbg.debug
pop eax
pop edx
mov ecx, dword [ebx + 0x98]
push ecx
push str._tPort_______i_n
call dbg.debug
pop eax
pop edx
mov eax, dword [ebx + 0x9c]
push eax
push str._tAutoIdx____i_n
inc esi
call dbg.debug
add ebx, 0xa0
add esp, 0x10
cmp esi, dword [obj.linkconfSIZE]
jl 0x8057300
jmp 0x80572ee
lea esi, [esi]
lea edi, [edi]
mov eax, obj.NULLSTR
jmp 0x8057369
mov esi, esi
lea edi, [edi]
mov eax, obj.NULLSTR
jmp 0x8057353
lea esi, [esi]
mov eax, obj.NULLSTR
jmp 0x8057339
lea esi, [esi]
sub esp, 0xc
push str._tUnused_n
call dbg.debug
add esp, 0x10
jmp 0x8057319
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push ebx
push str.____Link_t_t_.8x_n
call dbg.debug
pop eax
cmp byte [ebx], 0
pop edx
je 0x80575a0
mov eax, str.TRUE
push eax
push 0x806b442
call dbg.debug
add esp, 0x10
cmp byte [ebx], 0
jne 0x8057470
sub esp, 0xc
push 0x806b21f
inc esi
call dbg.debug
add ebx, 0x258
add esp, 0x10
cmp esi, dword [obj.botlinkSIZE]
jl 0x8057410
jmp 0x80572c8
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [ebx + 0x244]
push eax
push str.____sock_t_t_i_n
call dbg.debug
pop ecx
cmp byte [ebx + 0xc], 0
pop eax
je 0x8057590
lea eax, [ebx + 0xc]
push eax
push 0x806b1f0
call dbg.debug
pop eax
pop edx
mov ecx, dword [ebx + 4]
push ecx
push 0x806b48d
call dbg.debug
add esp, 0xc
movsx eax, byte [ebx + 8]
push eax
movsx eax, byte [ebx + 8]
push eax
push obj.LNdefs
call dbg.strdef
pop ecx
pop edx
push eax
push str.____linktype_t_t_s___i__n
call dbg.debug
add esp, 0xc
movsx eax, byte [ebx + 9]
push eax
movsx eax, byte [ebx + 9]
push eax
push obj.LNdefs
call dbg.strdef
pop ecx
pop edx
push eax
push str.____nodetype_t_t_s___i__n
call dbg.debug
mov edx, dword [ebx + 0x250]
push edx
push 0x258
mov eax, dword [obj.botlinkSIZE]
push eax
mov eax, dword [obj.botlinkBASE]
push eax
call dbg.findstruct
add esp, 0x1c
test eax, eax
mov edx, obj.NULLSTR
je 0x8057522
lea edx, [eax + 0xc]
push edx
mov eax, dword [ebx + 0x250]
push eax
push str.____uplink_t_t_i:___s__n
call dbg.debug
mov eax, dword [ebx + 0x254]
push eax
push 0x258
mov eax, dword [obj.botlinkSIZE]
push eax
mov eax, dword [obj.botlinkBASE]
push eax
call dbg.findstruct
add esp, 0x1c
test eax, eax
mov edx, obj.NULLSTR
je 0x8057560
lea edx, [eax + 0xc]
push edx
mov ecx, dword [ebx + 0x254]
push ecx
push str.____sendlink_t_t_i:___s__n
call dbg.debug
pop eax
pop edx
mov eax, dword [ebx + 0x23c]
push eax
push str.____ushares_t_t_.8x_n
call dbg.debug
add esp, 0x10
jmp 0x8057441
lea esi, [esi]
mov eax, obj.NULLSTR
jmp 0x8057493
lea esi, [esi]
mov eax, str.FALSE
jmp 0x805742e
lea esi, [esi]
mov eax, obj.NULLSTR
jmp 0x8057239
lea esi, [esi]
mov eax, obj.NULLSTR
jmp 0x805721a
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x8c
call dbg.memreset
sub esp, 0xc
mov eax, dword [obj.serverBASE]
push eax
call dbg.memtouch
pop eax
mov eax, dword [obj.botlinkBASE]
push eax
call dbg.memtouch
mov eax, dword [obj.botlist]
add esp, 0x10
test eax, eax
mov dword [bot], eax
je 0x8056520
sub esp, 0xc
mov eax, dword [bot]
push eax
call dbg.memtouch
mov eax, dword [bot]
mov esi, dword [eax + 0xb34]
add esp, 0x10
test esi, esi
je 0x80563f7
sub esp, 0xc
push esi
call dbg.memtouch
pop edi
mov ebx, dword [esi + 4]
push ebx
call dbg.memtouch
pop ecx
mov edx, dword [esi + 8]
push edx
call dbg.memtouch
pop eax
mov eax, dword [esi + 0xc]
push eax
call dbg.memtouch
pop eax
mov eax, dword [esi + 0x14]
push eax
call dbg.memtouch
mov ebx, dword [esi + 0x1c]
add esp, 0x10
test ebx, ebx
je 0x80563c4
sub esp, 0xc
push ebx
call dbg.memtouch
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x80563b2
mov ebx, dword [esi + 0x18]
test ebx, ebx
je 0x80563f1
sub esp, 0xc
push ebx
call dbg.memtouch
pop eax
mov eax, dword [ebx + 8]
push eax
call dbg.memtouch
pop edi
mov ecx, dword [ebx + 0xc]
push ecx
call dbg.memtouch
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x80563cb
mov esi, dword [esi]
test esi, esi
jne 0x8056377
mov eax, dword [bot]
mov ebx, dword [eax + 0xb3c]
test ebx, ebx
je 0x8056419
sub esp, 0xc
push ebx
call dbg.memtouch
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x8056407
xor edi, edi
mov eax, dword [bot]
sub esp, 0xc
mov edx, dword [eax + edi*4 + 0xb48]
push edx
inc edi
call dbg.memtouch
add esp, 0x10
cmp edi, 0x13
jle 0x805641b
mov eax, dword [bot]
sub esp, 0xc
mov eax, dword [eax + 0xb28]
push eax
call dbg.memtouch
pop eax
mov eax, dword [bot]
mov eax, dword [eax + 0x720]
push eax
call dbg.memtouch
xor edi, edi
mov eax, dword [bot]
add esp, 0x10
cmp edi, dword [eax + 0x71c]
mov esi, dword [eax + 0x720]
jl 0x805666d
mov eax, dword [bot]
sub esp, 0xc
mov edx, dword [eax + 0xb40]
push edx
call dbg.memtouch
mov eax, dword [bot]
mov ebx, dword [eax + 0xb44]
add esp, 0x10
test ebx, ebx
je 0x80564b9
sub esp, 0xc
push ebx
call dbg.memtouch
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x80564a7
mov eax, dword [bot]
sub esp, 0xc
mov eax, dword [eax + 0x3b0]
push eax
call dbg.memtouch
pop eax
mov eax, dword [bot]
mov eax, dword [eax + 0x3b4]
push eax
call dbg.memtouch
pop eax
mov eax, dword [bot]
mov eax, dword [eax + 0x3b8]
push eax
call dbg.memtouch
pop eax
mov eax, dword [bot]
mov edi, dword [eax + 0x3bc]
push edi
call dbg.memtouch
mov eax, dword [bot]
mov eax, dword [eax]
add esp, 0x10
test eax, eax
mov dword [bot], eax
jne 0x8056351
sub esp, 0xc
push str.__Memory_allocations_n
call dbg.debug
mov eax, dword [obj.mrrec]
add esp, 0x10
test eax, eax
mov dword [mea], eax
je 0x805656f
mov ebx, dword [mea]
mov edi, 0xc7
lea esi, [esi]
mov esi, dword [ebx + 4]
test esi, esi
jne 0x8056590
add ebx, 0x14
dec edi
jns 0x8056550
mov eax, dword [mea]
mov eax, dword [eax]
test eax, eax
mov dword [mea], eax
jne 0x805653f
sub esp, 0xc
push 0x806b21f
call dbg.debug
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
mov ecx, dword [ebx + 8]
push ecx
call dbg.proc_lookup
add esp, 0x10
test eax, eax
je 0x8056652
sub esp, 8
push eax
lea eax, [t]
push eax
call sym.imp.strcpy
lea ecx, [t]
add esp, 0x10
mov esi, ecx
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x80565d0
test edx, 0x8080
jne 0x80565f5
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, esi
mov eax, 0x17
sub eax, ecx
shr eax, 3
mov esi, 0x8071022
sub esp, 0xc
sub esi, eax
mov eax, dword [ebx + 0x10]
push eax
call dbg.atime
add esp, 0xc
push eax
cmp byte [ebx + 0x14], 0
je 0x805664b
mov eax, sym..rodata
push eax
mov eax, dword [ebx + 0xc]
push eax
push esi
lea eax, [t]
push eax
mov eax, dword [ebx + 4]
push eax
push str._____.8x_t_t_s_s_t_i_t_s_t_s_n
call dbg.debug
add esp, 0x20
jmp 0x8056557
mov eax, str._Leak_
jmp 0x8056628
push edx
mov eax, dword [ebx + 8]
push eax
push str._.8x
lea eax, [t]
push eax
call sym.imp.sprintf
jmp 0x80565b7
sub esp, 0xc
mov eax, dword [esi + 0x2c]
push eax
call dbg.memtouch
mov dl, byte [esi + 0x3e]
mov al, dl
shr al, 1
and eax, 7
sub eax, 2
add esp, 0x10
cmp eax, 1
jbe 0x80566e5
shr dl, 1
mov eax, edx
and eax, 7
cmp eax, 3
je 0x80566d4
cmp eax, 2
je 0x80566d4
dec eax
je 0x80566b9
inc edi
mov eax, dword [bot]
add esi, 0x48
cmp edi, dword [eax + 0x71c]
jl 0x805666d
jmp 0x805647f
mov ebx, dword [esi + 0x38]
test ebx, ebx
je 0x80566a2
sub esp, 0xc
push ebx
call dbg.memtouch
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x80566c0
jmp 0x80566a2
sub esp, 0xc
mov ecx, dword [esi + 0x38]
push ecx
call dbg.memtouch
add esp, 0x10
jmp 0x80566a2
sub esp, 0xc
mov eax, dword [esi + 0x30]
push eax
call dbg.memtouch
pop eax
mov ebx, dword [esi + 0x34]
push ebx
call dbg.memtouch
add esp, 0x10
mov dl, byte [esi + 0x3e]
jmp 0x805668e
jmp dword [reloc.exit]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x81c
mov esi, dword [arg_8h]
cmp esi, 0xffffffff
mov eax, 0xffffffff
je 0x8061329
push edx
lea eax, [arg]
push eax
mov edi, dword [format]
push edi
lea ebx, [bigbuf]
push ebx
call sym.imp.vsprintf
mov edi, ebx
add esp, 0xc
mov ecx, ebx
lea esi, [esi]
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x80612a0
test edx, 0x8080
jne 0x80612c5
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, edi
push ecx
push ebx
push esi
call sym.imp.write
add esp, 0x10
test ebx, ebx
mov edi, eax
mov dword [pt], ebx
je 0x8061323
cmp byte [ebx], 0
je 0x8061323
lea ebx, [pt]
mov esi, esi
sub esp, 8
push 0x80671db
push ebx
call dbg.get_token
add esp, 0xc
test eax, eax
je 0x806134f
push eax
push esi
push str._SSo___i__s_n
call dbg.debug
mov eax, dword [pt]
add esp, 0x10
test eax, eax
je 0x8061323
cmp byte [eax], 0
jne 0x80612f0
test edi, edi
js 0x8061331
mov eax, edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0x10
call sym.imp.__error
mov ebx, dword [eax]
add esp, 0xc
push ebx
push esi
push str._SSo___i_errno___i_n
call dbg.debug
add esp, 0x10
jmp 0x8061327
mov eax, obj.NULLSTR
jmp 0x8061305
push ebp
mov ebp, esp
sub esp, 0x14
mov edx, dword [arg_8h]
mov eax, dword [edx + 0x40]
push eax
lea eax, [edx + 0x44]
push eax
mov eax, dword [edx + 0x3c]
push eax
push 0x8067a31
push obj.get_nuhbuf
call sym.imp.sprintf
mov esp, ebp
mov eax, obj.get_nuhbuf
pop ebp
ret
push ebp
mov ecx, dword [obj.mcmd]
mov ebp, esp
test ecx, ecx
push esi
push ebx
mov esi, dword [arg_8h]
je 0x804f664
xor ebx, ebx
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push esi
mov edx, dword [ebx + obj.mcmd]
push edx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804f670
add ebx, 0x10
mov eax, dword [ebx + obj.mcmd]
test eax, eax
jne 0x804f640
mov eax, 0xffffffff
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
xor edx, edx
mov dl, byte [ebx + 0x807026c]
mov eax, edx
shr eax, 0x1f
dec eax
and eax, edx
jmp 0x804f669
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
mov esi, dword [from]
push esi
mov eax, dword [obj.current]
mov dword [obj.backup], eax
call dbg.getnick
pop ecx
pop ebx
push eax
push str._Rehash__from__s
call dbg.send_global_statmsg
mov esi, dword [obj.botlist]
add esp, 0x10
test esi, esi
je 0x8065a74
lea esi, [esi]
sub esp, 0xc
push str.Saving_Lists
mov dword [obj.current], esi
call dbg.send_statmsg
call dbg.write_levelfile
add esp, 0x10
test eax, eax
je 0x8065ac3
call dbg.saveuserlist
test eax, eax
je 0x8065aa3
mov eax, dword [obj.current]
sub esp, 8
mov edx, dword [eax + 0xb40]
push edx
add eax, 0xb44
push eax
call dbg.write_seenlist
add esp, 0x10
test eax, eax
je 0x8065a85
call dbg.read_seenlist
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
je 0x8065a6a
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [ebx + 4]
push eax
push str.WHO__s
call dbg.send_to_server
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x8065a50
mov esi, dword [esi]
test esi, esi
jne 0x80659e0
mov eax, dword [obj.backup]
mov dword [obj.current], eax
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
mov eax, dword [obj.current]
sub esp, 8
mov eax, dword [eax + 0xb40]
push eax
push str.SeenList_could_not_be_saved_to_file__s
call dbg.send_statmsg
add esp, 0x10
jmp 0x8065a31
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x724
push eax
push obj.ERR_NOSAVE
call dbg.send_statmsg
add esp, 0x10
jmp 0x8065a10
sub esp, 8
push str.._mech.levels
push str.Levels_could_not_be_saved_to__s
call dbg.send_statmsg
add esp, 0x10
jmp 0x8065a03
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
mov esi, dword [arg_8h]
je 0x804c047
mov esi, esi
lea edi, [edi]
sub esp, 8
push esi
push ebx
call dbg.find_chanuser
add esp, 0x10
test eax, eax
jne 0x804c050
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804c030
lea esp, [var_8h]
pop ebx
pop esi
xor eax, eax
pop ebp
ret
mov dword [arg_8h], eax
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.get_nuh
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x418
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
pop esi
mov edi, eax
pop eax
push 0x80679d7
push ebx
call dbg.get_token
pop edx
pop ecx
push eax
lea esi, [tbuf]
push esi
call sym.imp.strcpy
nop
lea esi, [esi]
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
je 0x80605fe
push eax
push esi
push 0x806e50a
push esi
call sym.imp.sprintf
jmp 0x80605e0
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
test ebx, ebx
je 0x806061c
lea esi, [esi]
cmp dword [ebx + 0x10], 5
je 0x8060630
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8060610
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
push esi
push edi
push str.IRCop______________s__s
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x8060616
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
mov eax, dword [banstring]
push eax
mov ebx, dword [arg_8h]
push ebx
call dbg.find_ban
add esp, 0x10
xor edx, edx
test eax, eax
je 0x804c2dc
sub esp, 8
push eax
push ebx
call dbg.remove_ban
mov edx, 1
mov ebx, dword [var_4h]
mov esp, ebp
mov eax, edx
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [arg_8h]
mov ebx, dword [eax]
test ebx, ebx
mov esi, dword [arg_ch]
je 0x804c17c
jmp 0x804c160
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
push esi
mov eax, dword [ebx + 8]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edx, ebx
je 0x804c17e
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804c160
xor edx, edx
lea esp, [var_8h]
pop ebx
pop esi
mov eax, edx
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
push str._remlink__Removing_link..._n
call dbg.debug
mov edx, dword [Link]
mov eax, dword [edx + 0x244]
add esp, 0x10
cmp eax, 0xffffffff
je 0x8059800
sub esp, 0xc
push eax
call sym.imp.close
add esp, 0x10
mov ecx, dword [Link]
mov al, byte [ecx + 8]
cmp al, 3
je 0x8059b42
movsx edx, al
mov dword [i], 0
mov eax, dword [obj.botlinkSIZE]
mov esi, dword [obj.botlinkBASE]
cmp dword [i], eax
mov edi, esi
jge 0x8059875
lea esi, [esi]
cmp byte [esi], 0
je 0x8059861
cmp esi, dword [Link]
je 0x8059b39
mov ecx, dword [Link]
mov eax, dword [ecx + 4]
cmp dword [esi + 0x250], eax
je 0x8059b30
cmp dword [esi + 0x254], eax
je 0x8059b20
mov eax, dword [obj.botlinkSIZE]
inc dword [i]
add esi, 0x258
cmp dword [i], eax
jl 0x8059830
mov edi, dword [obj.botlinkBASE]
mov ecx, dword [Link]
cmp byte [ecx + 0xa], 1
je 0x805997d
mov dword [i], 0
cmp dword [i], eax
mov esi, edi
jge 0x80598a9
cmp byte [esi], 0
je 0x805989b
cmp byte [esi + 8], 6
je 0x80598c0
inc dword [i]
add esi, 0x258
cmp dword [i], eax
jl 0x8059890
sub esp, 0xc
push str._remlink__Link_removed._n
call dbg.debug
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
cmp byte [esi + 9], 0x66
je 0x805993d
push eax
mov edi, dword [esi + 0x254]
push edi
mov ebx, dword [esi + 0x250]
push ebx
mov ecx, dword [esi + 4]
push ecx
mov edx, dword [esi + 0x244]
push edx
cmp esi, 0xfffffff4
push esi
mov eax, obj.NULLSTR
je 0x80598ee
lea eax, [esi + 0xc]
push eax
push str.Removing______10s____.8x____S:_i_I:_i_U:_i_L:_i___n
call dbg.wle
mov eax, dword [esi + 0x23c]
add esp, 0x20
test eax, eax
mov dword [ump], eax
je 0x8059927
lea edi, [ump]
lea esi, [esi]
sub esp, 0xc
mov ebx, dword [eax]
push edi
call dbg.MyFree
add esp, 0x10
test ebx, ebx
mov eax, ebx
mov dword [ump], ebx
jne 0x8059910
xor eax, eax
cld
mov ecx, 0x96
mov edi, esi
rep stosd dword es:[edi], eax
mov eax, dword [obj.botlinkSIZE]
jmp 0x805989b
cmp esi, 0xfffffff4
mov eax, obj.NULLSTR
je 0x805994a
lea eax, [esi + 0xc]
push eax
mov eax, dword [esi + 0x254]
push eax
mov eax, dword [esi + 0x250]
push eax
mov eax, dword [esi + 4]
push eax
mov eax, dword [esi + 0x244]
push eax
cmp esi, 0xffffffd4
push esi
mov eax, obj.NULLSTR
je 0x8059972
lea eax, [esi + 0x2c]
push eax
push str.Removing______10s____.8x____S:_i_I:_i_U:_i_L:_i___DCCUSER___s__n
jmp 0x80598f4
cmp edx, 1
je 0x8059882
cmp edx, 2
je 0x8059882
mov dword [i], 0
cmp dword [i], eax
mov esi, edi
jge 0x80598a9
jmp 0x80599b0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp byte [esi], 0
je 0x80599bb
cmp byte [esi + 8], 6
je 0x80599ce
inc dword [i]
add esi, 0x258
cmp dword [i], eax
jl 0x80599b0
jmp 0x8059882
movsx edx, byte [esi + 9]
cmp edx, 0x65
je 0x8059aad
cmp edx, 0x65
jg 0x8059a33
cmp edx, 0x64
jne 0x80599bb
mov dword [j], 0
cmp dword [j], eax
mov ebx, edi
jge 0x80599bb
cmp byte [ebx], 0
je 0x8059a03
cmp ebx, dword [from]
je 0x8059a03
cmp byte [ebx + 8], 3
je 0x8059a19
inc dword [j]
add ebx, 0x258
cmp dword [j], eax
jl 0x80599f3
mov edi, dword [obj.botlinkBASE]
jmp 0x80599bb
push eax
lea eax, [esi + 0xc]
push eax
push str._QUIT__s_n
push ebx
call dbg.send_to_link
add esp, 0x10
mov eax, dword [obj.botlinkSIZE]
jmp 0x8059a03
cmp edx, 0x66
jne 0x80599bb
mov dword [j], 0
cmp dword [j], eax
mov ebx, edi
jge 0x80599bb
cmp byte [ebx], 0
je 0x8059a5a
cmp ebx, dword [from]
je 0x8059a5a
cmp byte [ebx + 8], 3
je 0x8059a6a
inc dword [j]
add ebx, 0x258
cmp dword [j], eax
jl 0x8059a4a
jmp 0x8059a11
mov eax, dword [esi + 0x250]
push eax
push 0x258
mov eax, dword [obj.botlinkSIZE]
push eax
mov edi, dword [obj.botlinkBASE]
push edi
call dbg.findstruct
mov edx, eax
lea eax, [esi + 0x2c]
mov dword [esp], eax
lea eax, [esi + 0xc]
push eax
lea eax, [edx + 0xc]
push eax
push str._QUIT__s__s__s_n
push ebx
call dbg.send_to_link
add esp, 0x20
mov eax, dword [obj.botlinkSIZE]
jmp 0x8059a5a
mov dword [j], 0
cmp dword [j], eax
mov ebx, edi
mov edx, eax
jge 0x80599bb
cmp byte [ebx], 0
je 0x8059ad1
cmp ebx, dword [from]
je 0x8059ad1
cmp byte [ebx + 8], 3
je 0x8059ae6
inc dword [j]
add ebx, 0x258
cmp dword [j], eax
mov edx, eax
jl 0x8059ac1
jmp 0x8059a11
mov ecx, dword [esi + 0x250]
push ecx
push 0x258
push edx
mov eax, dword [obj.botlinkBASE]
push eax
call dbg.findstruct
mov edx, eax
lea eax, [esi + 0xc]
push eax
lea eax, [edx + 0xc]
push eax
push str._QUIT__s__s_n
push ebx
call dbg.send_to_link
add esp, 0x20
mov eax, dword [obj.botlinkSIZE]
jmp 0x8059ad1
lea esi, [esi]
mov byte [esi + 8], 6
jmp 0x805985c
lea esi, [esi]
mov byte [esi + 8], 6
jmp 0x8059850
mov byte [esi + 8], 6
jmp 0x805983e
mov dword [i], 0
mov edx, dword [obj.linkconfSIZE]
cmp dword [i], edx
mov ebx, dword [obj.linkconfBASE]
jge 0x805980e
mov esi, esi
cmp byte [ebx], 0
je 0x8059b6e
cmp dword [ebx + 0x9c], 2
je 0x8059b87
inc dword [i]
add ebx, 0xa0
cmp dword [i], edx
jl 0x8059b60
mov edx, dword [Link]
mov al, byte [edx + 8]
jmp 0x805980e
mov eax, dword [ebx + 0x98]
push eax
lea eax, [ebx + 0x48]
push eax
lea eax, [ebx + 8]
push eax
push str.LC__s___H:_s_P:_i___reset_to_LC_NOTRY__remlink__n
call dbg.wle
mov dword [ebx + 0x9c], 0
add esp, 0x10
mov edx, dword [obj.linkconfSIZE]
jmp 0x8059b6e
push ebp
mov ebp, esp
sub esp, 8
mov edx, dword [l_list]
mov eax, dword [edx]
test eax, eax
je 0x804b0ec
mov ecx, dword [Chan]
lea esi, [esi]
lea edi, [edi]
cmp eax, ecx
je 0x804b0f0
mov edx, eax
mov eax, dword [eax]
test eax, eax
jne 0x804b0e0
xor eax, eax
leave
ret
mov eax, dword [eax]
mov dword [edx], eax
sub esp, 0xc
mov eax, dword [Chan]
push eax
call dbg.delete_chanusers
mov eax, dword [Chan]
add eax, 0x18
mov dword [esp], eax
call dbg.delete_bans
mov eax, dword [Chan]
add eax, 4
mov dword [esp], eax
call dbg.MyFree
mov eax, dword [Chan]
add eax, 8
mov dword [esp], eax
call dbg.MyFree
mov eax, dword [Chan]
add eax, 0xc
mov dword [esp], eax
call dbg.MyFree
mov eax, dword [Chan]
add eax, 0x14
mov dword [esp], eax
call dbg.MyFree
mov eax, dword [Chan]
add eax, 0x24
mov dword [esp], eax
call dbg.free_strvars
lea eax, [Chan]
mov dword [esp], eax
call dbg.MyFree
mov eax, 1
jmp 0x804b0ee
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
call dbg.get_channel
mov esi, eax
pop eax
pop edx
push esi
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8052e50
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [nick], eax
je 0x8052ed2
push edi
push 0
mov ebx, dword [nick]
push ebx
mov ecx, dword [from]
push ecx
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov edi, eax
je 0x8052e3c
sub esp, 8
push esi
push eax
call dbg.get_userlevel
mov ebx, eax
pop eax
pop edx
push esi
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp ebx, eax
jle 0x8052eae
push edi
push str.Siteban_attempt_of__s
push obj.CurrentNick
push esi
call dbg.sendkick
jmp 0x8052e3c
push eax
push edi
mov edi, dword [nick]
push edi
push esi
call dbg.deop_siteban
push esi
mov esi, dword [nick]
push esi
push str._s_sitebanned_on__s
mov ebx, dword [from]
push ebx
call dbg.send_to_user
jmp 0x8052e3c
sub esp, 8
push str.No_nick_specified
jmp 0x8052ec4
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x21c
mov edx, dword [obj.current]
mov eax, dword [edx + 0x3b0]
mov al, byte [eax + 0x211]
and eax, 1
test al, al
jne 0x805cbf2
mov eax, dword [obj.PUnick]
test eax, eax
jne 0x805ccd2
push eax
lea eax, [linebuf]
push eax
mov eax, dword [edx + 0x3b0]
add eax, 4
push eax
mov eax, dword [edx + 0x3b0]
mov eax, dword [eax]
push eax
call dbg.sockread
add esp, 0x10
test eax, eax
mov dword [res], eax
je 0x805cca0
sub esp, 0xc
lea eax, [res]
push eax
call dbg.chop
mov esi, eax
mov eax, dword [obj.pucmd]
xor ebx, ebx
add esp, 0x10
test eax, eax
je 0x805cc70
mov edi, obj.pucmd
mov esi, esi
lea edi, [edi]
sub esp, 8
mov eax, dword [edi + ebx*8]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805cc8b
inc ebx
mov ecx, dword [ebx*8 + obj.pucmd]
test ecx, ecx
jne 0x805cc50
push edx
mov eax, dword [res]
push eax
push esi
push 0x8069012
call dbg.send_to_server
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
mov eax, dword [res]
push eax
call dword [edi + ebx*8 + 4]
jmp 0x805cc83
nop
lea esi, [esi]
call sym.imp.__error
mov eax, dword [eax]
cmp eax, 4
je 0x805cc83
cmp eax, 0x23
je 0x805cc83
sub esp, 0xc
push str._PPI__Closing_connection_to_pipeuser_n
call dbg.debug
mov eax, dword [obj.current]
add eax, 0x3b0
mov dword [esp], eax
call dbg.MyFree
jmp 0x805cc83
sub esp, 0xc
push eax
call dbg.pipeuser_refresh
mov dword [esp], obj.PUnick
call dbg.MyFree
add esp, 0x10
mov edx, dword [obj.current]
jmp 0x805cbf2
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x28
lea edi, [rest]
push edi
mov dword [c_users], 0
mov dword [c_invusers], 0
mov dword [tot_users], 0
mov dword [c_servers], 0
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, 1
mov ebx, eax
je 0x805fd27
mov al, byte [eax]
test al, al
je 0x805fd27
movsx eax, al
cmp eax, 0xff
ja 0x805fec0
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
je 0x805feb0
sub esp, 0xc
push ebx
call sym.imp.atol
xor esi, esi
mov dword [c_users], eax
add esp, 0x10
test esi, esi
je 0x805fd27
test ebx, ebx
je 0x805fd27
mov al, byte [ebx]
test al, al
jne 0x805fce2
sub esp, 0xc
push edi
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, 1
mov ebx, eax
je 0x805fd92
mov al, byte [eax]
test al, al
je 0x805fd92
movsx eax, al
cmp eax, 0xff
ja 0x805fea0
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
je 0x805fe90
sub esp, 0xc
push ebx
call sym.imp.atol
mov dword [c_invusers], eax
mov eax, dword [c_users]
add eax, dword [c_invusers]
xor esi, esi
mov dword [tot_users], eax
add esp, 0x10
test esi, esi
je 0x805fd92
test ebx, ebx
je 0x805fd92
mov al, byte [ebx]
test al, al
jne 0x805fd44
sub esp, 0xc
push edi
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, 1
mov ebx, eax
je 0x805fdf4
mov al, byte [eax]
test al, al
je 0x805fdf4
movsx eax, al
cmp eax, 0xff
ja 0x805fe80
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
je 0x805fe70
sub esp, 0xc
push ebx
call sym.imp.atol
xor esi, esi
mov dword [c_servers], eax
add esp, 0x10
test esi, esi
je 0x805fdf4
test ebx, ebx
je 0x805fdf4
mov al, byte [ebx]
test al, al
jne 0x805fdaf
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
test ebx, ebx
je 0x805fe1c
lea esi, [esi]
lea edi, [edi]
cmp dword [ebx + 0x10], 0xf
je 0x805fe30
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805fe10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x806e3e1
mov edi, dword [ebx + 8]
push edi
call dbg.send_to_user
pop esi
mov ecx, dword [c_servers]
push ecx
mov edx, dword [c_invusers]
push edx
mov eax, dword [tot_users]
push eax
push str.Users:_
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
add esp, 0x20
jmp 0x805fe16
jmp 0x805fe70
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
push edi
call dbg.chop
mov ebx, eax
jmp 0x805fde3
xor eax, eax
jmp 0x805fdcd
mov esi, esi
lea edi, [edi]
sub esp, 0xc
push edi
call dbg.chop
mov ebx, eax
jmp 0x805fd81
xor eax, eax
jmp 0x805fd62
mov esi, esi
lea edi, [edi]
sub esp, 0xc
push edi
call dbg.chop
mov ebx, eax
jmp 0x805fd16
xor eax, eax
jmp 0x805fd00
push ebp
mov ebp, esp
sub esp, 0x14
push obj.now
call sym.imp.time
mov dword [esp], str._sigterm__n
call dbg.debug
add esp, 0x10
test byte [obj.will], 4
jne 0x805db80
sub esp, 8
push dbg.sig_term
push 0xf
call sym.imp.signal
mov esp, ebp
pop ebp
ret
nop
lea esi, [esi]
call dbg.savesession
call dbg.close_all_dcc
mov dword [crap], str.What_have_I_done_to_deserve_this___aaaaaarrghhh___SIGTERM_
mov esp, ebp
pop ebp
jmp dbg.kill_all_bots
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x20
push 0x1b6
push 0x601
push str.._mech.session
call sym.imp.open
mov dword [sf], eax
mov edx, dword [sf]
add esp, 0x10
xor eax, eax
test edx, edx
js 0x804fd82
cmp byte [obj.my_entity], 0
jne 0x805004c
cmp byte [obj.my_pass], 0
jne 0x8050030
mov eax, dword [obj.linkport]
test eax, eax
jne 0x8050018
xor esi, esi
mov eax, dword [obj.linkconfSIZE]
cmp esi, eax
mov ebx, dword [obj.linkconfBASE]
jge 0x804fa2c
cmp byte [ebx], 0
jne 0x804ffe7
inc esi
add ebx, 0xa0
cmp esi, eax
jl 0x804fa18
mov al, byte [obj.will]
test eax, 1
je 0x804ffc9
test eax, 4
je 0x804ffab
test eax, 2
je 0x804ff8d
test eax, 8
jne 0x804ff6f
and eax, 0x20
jne 0x804ff56
sub esp, 8
push 0x806b2d9
mov eax, dword [sf]
push eax
call dbg.send_to_socket
mov eax, dword [obj.botlist]
add esp, 0x10
test eax, eax
mov dword [bot], eax
je 0x804fccb
mov eax, dword [bot]
push edi
add eax, 0x22d
push eax
push 0x8067216
mov esi, dword [sf]
push esi
call dbg.send_to_socket
mov eax, dword [bot]
add esp, 0xc
add eax, 0x23a
push eax
push 0x8068e54
mov ebx, dword [sf]
push ebx
call dbg.send_to_socket
mov edx, dword [bot]
add esp, 0x10
cmp byte [edx + 0x296], 0
je 0x804faf5
mov eax, dword [edx + 0x2dc]
cmp eax, 1
je 0x804ff16
cmp eax, 1
jle 0x804ff4d
cmp eax, 0x64
je 0x804ff3c
cmp eax, 0x65
je 0x804ff16
mov eax, dword [bot]
push edi
add eax, 0x246
push eax
push str.ircname__s_n
mov esi, dword [sf]
push esi
call dbg.send_to_socket
mov edx, dword [bot]
add esp, 0x10
cmp byte [edx + 0x360], 0
jne 0x804fef7
mov edx, dword [bot]
mov al, byte [edx + 0x380]
cmp al, 0x2d
je 0x804fb43
push edx
movsx eax, al
push eax
push str.cmdchar__c_n
mov eax, dword [sf]
push eax
call dbg.send_to_socket
add esp, 0x10
mov eax, dword [bot]
push edi
add eax, 0x724
push eax
push str.userfile__s_n_n
mov esi, dword [sf]
push esi
call dbg.send_to_socket
mov eax, dword [obj.current]
add esp, 0x10
test byte [eax + 0x3ac], 1
jne 0x804fed9
test byte [eax + 0x3ac], 2
jne 0x804febb
mov edx, dword [obj.VarName]
add eax, 0x3c0
xor edi, edi
test edx, edx
je 0x804fbf1
mov dword [var_1ch], 0
mov ebx, eax
mov esi, esi
lea edi, [edi]
mov eax, dword [ebx]
test eax, 8
je 0x804fbde
test eax, 1
mov edx, eax
je 0x804fe3b
mov eax, dword [ebx + 4]
mov edx, dword [var_1ch]
cmp dword [edx + 0x806cbc4], eax
je 0x804fbde
push eax
mov eax, dword [edi*8 + obj.VarName]
push eax
push str.set__s__i_n
mov eax, dword [sf]
push eax
call dbg.send_to_socket
add esp, 0x10
inc edi
mov esi, dword [edi*8 + obj.VarName]
add ebx, 0x14
add dword [var_1ch], 0x14
test esi, esi
jne 0x804fba0
mov eax, dword [bot]
mov esi, dword [eax + 0xb34]
test esi, esi
je 0x804fcbb
lea esi, [esi]
lea edi, [edi]
mov al, byte [esi + 0x38d]
and eax, 0xffffffb0
cmp al, 0x20
je 0x804fcb1
mov eax, dword [esi + 8]
test eax, eax
je 0x804fc2d
cmp byte [eax], 0
jne 0x804fc32
mov eax, sym..rodata
push eax
mov ebx, dword [esi + 4]
push ebx
push str.channel__s_n
mov ecx, dword [sf]
push ecx
call dbg.send_to_socket
mov edx, dword [obj.VarName]
xor edi, edi
add esp, 0x10
test edx, edx
lea eax, [esi + 0x24]
je 0x804fcb1
mov dword [var_18h], 0
mov ebx, eax
mov eax, dword [ebx]
test eax, 8
jne 0x804fc9e
test eax, 1
mov edx, eax
je 0x804fdb0
mov eax, dword [ebx + 4]
mov edx, dword [var_18h]
cmp eax, dword [edx + 0x806cbc4]
je 0x804fc9e
push eax
mov eax, dword [edi*8 + obj.VarName]
push eax
push str.set__s__i_n
mov eax, dword [sf]
push eax
call dbg.send_to_socket
add esp, 0x10
inc edi
mov eax, dword [edi*8 + obj.VarName]
add ebx, 0x14
add dword [var_18h], 0x14
test eax, eax
jne 0x804fc60
mov esi, dword [esi]
test esi, esi
jne 0x804fc10
mov eax, dword [bot]
mov eax, dword [eax]
test eax, eax
mov dword [bot], eax
jne 0x804fa8a
sub esp, 8
push 0x806b2d9
mov eax, dword [sf]
push eax
call dbg.send_to_socket
mov eax, dword [obj.mcmd]
add esp, 0x10
test eax, eax
je 0x804fd05
xor ebx, ebx
mov eax, dword [ebx + 0x8070264]
test eax, eax
jne 0x804fd91
add ebx, 0x10
mov esi, dword [ebx + obj.mcmd]
test esi, esi
jne 0x804fcea
sub esp, 8
push 0x806b2d9
mov ecx, dword [sf]
push ecx
call dbg.send_to_socket
xor esi, esi
mov eax, dword [obj.serverSIZE]
add esp, 0x10
cmp esi, eax
mov ebx, dword [obj.serverBASE]
jge 0x804fd71
cmp byte [ebx], 0
je 0x804fd66
sub esp, 0xc
cmp byte [ebx + 0x58], 0
je 0x804fd8a
lea eax, [ebx + 0x58]
push eax
mov eax, dword [ebx + 0x100]
test eax, eax
jne 0x804fd4b
mov eax, 0x1a0b
push eax
lea eax, [ebx + 8]
push eax
push str.server__s__i__s_n
mov edx, dword [sf]
push edx
call dbg.send_to_socket
add esp, 0x20
mov eax, dword [obj.serverSIZE]
inc esi
add ebx, 0x114
cmp esi, eax
jl 0x804fd2a
sub esp, 0xc
mov eax, dword [sf]
push eax
call sym.imp.close
mov eax, 1
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov eax, sym..rodata
jmp 0x804fd3b
push eax
mov eax, dword [ebx + obj.mcmd]
push eax
push str.alias__s__s_n
mov edi, dword [sf]
push edi
call dbg.send_to_socket
add esp, 0x10
jmp 0x804fcf8
nop
and edx, 2
je 0x804fe00
mov eax, dword [ebx + 8]
test eax, eax
je 0x804fc9e
sub esp, 8
push eax
mov eax, dword [var_18h]
mov eax, dword [eax + 0x806cbc8]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804fc9e
mov ecx, dword [ebx + 8]
push ecx
mov edx, dword [edi*8 + obj.VarName]
push edx
push str.set__s__s_n
jmp 0x804fc92
lea esi, [esi]
lea edi, [edi]
and eax, 4
je 0x804fc9e
mov eax, dword [ebx + 4]
mov edx, dword [var_18h]
cmp eax, dword [edx + 0x806cbc4]
je 0x804fc9e
test eax, eax
setne al
and eax, 0xff
add eax, 0x30
push eax
mov eax, dword [edi*8 + obj.VarName]
push eax
push str.tog__s__c_n
jmp 0x804fc92
and edx, 2
je 0x804fe80
mov eax, dword [ebx + 8]
test eax, eax
je 0x804fbde
sub esp, 8
push eax
mov eax, dword [var_1ch]
mov eax, dword [eax + 0x806cbc8]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804fbde
mov eax, dword [ebx + 8]
push eax
mov eax, dword [edi*8 + obj.VarName]
push eax
push str.set__s__s_n
jmp 0x804fbd2
nop
and eax, 4
je 0x804fbde
mov eax, dword [ebx + 4]
mov edx, dword [var_1ch]
cmp dword [edx + 0x806cbc4], eax
je 0x804fbde
test eax, eax
setne al
and eax, 0xff
add eax, 0x30
push eax
mov eax, dword [edi*8 + obj.VarName]
push eax
push str.tog__s__c_n
jmp 0x804fbd2
sub esp, 8
push str.usermaster_n
mov ecx, dword [sf]
push ecx
call dbg.send_to_socket
add esp, 0x10
mov eax, dword [obj.current]
jmp 0x804fb7d
sub esp, 8
push str.userslave_n
mov ebx, dword [sf]
push ebx
call dbg.send_to_socket
add esp, 0x10
mov eax, dword [obj.current]
jmp 0x804fb70
mov eax, edx
push ebx
add eax, 0x360
push eax
push str.modes__s_n
mov ecx, dword [sf]
push ecx
call dbg.send_to_socket
add esp, 0x10
jmp 0x804fb20
mov eax, dword [bot]
mov edx, dword [eax + 0x2d8]
push edx
add eax, 0x296
push eax
push str.wingate__s__i_n
mov eax, dword [sf]
push eax
call dbg.send_to_socket
add esp, 0x10
jmp 0x804faf5
mov eax, dword [bot]
push ecx
add eax, 0x296
push eax
push str.virtual__s_n
jmp 0x804ff2b
test eax, eax
je 0x804ff3c
jmp 0x804faf5
sub esp, 8
push str.autolink_n
mov eax, dword [sf]
push eax
call dbg.send_to_socket
add esp, 0x10
jmp 0x804fa66
sub esp, 8
push str.hasonotice_n
mov eax, dword [sf]
push eax
call dbg.send_to_socket
add esp, 0x10
mov al, byte [obj.will]
jmp 0x804fa5d
sub esp, 8
push str.noshellcmd_n
mov eax, dword [sf]
push eax
call dbg.send_to_socket
add esp, 0x10
mov al, byte [obj.will]
jmp 0x804fa52
sub esp, 8
push str.nosignals_n
mov eax, dword [sf]
push eax
call dbg.send_to_socket
add esp, 0x10
mov al, byte [obj.will]
jmp 0x804fa47
sub esp, 8
push str.noseen_n
mov eax, dword [sf]
push eax
call dbg.send_to_socket
add esp, 0x10
mov al, byte [obj.will]
jmp 0x804fa3c
sub esp, 8
mov ecx, dword [ebx + 0x98]
push ecx
lea eax, [ebx + 0x48]
push eax
lea eax, [ebx + 0x28]
push eax
lea eax, [ebx + 8]
push eax
push str.link__s__s__s__i_n
mov edx, dword [sf]
push edx
call dbg.send_to_socket
add esp, 0x20
mov eax, dword [obj.linkconfSIZE]
jmp 0x804fa21
push esi
push eax
push str.linkport__i_n
mov ebx, dword [sf]
push ebx
call dbg.send_to_socket
add esp, 0x10
jmp 0x804fa07
push eax
push obj.my_pass
push str.linkpass__s_n
mov edi, dword [sf]
push edi
call dbg.send_to_socket
add esp, 0x10
jmp 0x804f9fa
push eax
push obj.my_entity
push str.entity__s_n
mov eax, dword [sf]
push eax
call dbg.send_to_socket
add esp, 0x10
jmp 0x804f9ed
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.current]
mov ecx, dword [eax + 0xb3c]
test ecx, ecx
jne 0x80554a0
leave
ret
mov esi, esi
lea edi, [edi]
sub esp, 0xc
add eax, 0xb3c
push eax
call dbg.delete_client
mov eax, dword [obj.current]
mov edx, dword [eax + 0xb3c]
add esp, 0x10
test edx, edx
jne 0x80554a0
jmp 0x8055495
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x41c
mov eax, dword [obj.current]
xor ebx, ebx
mov edx, dword [eax + 0x720]
mov eax, dword [eax + 0x71c]
xor esi, esi
cmp ebx, eax
mov dword [u], 0
jge 0x806511a
mov edi, eax
jmp 0x8065100
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp byte [edx], 0
je 0x8065114
mov al, byte [edx + 0x3e]
shr al, 1
and eax, 7
dec eax
je 0x8065632
add edx, 0x48
dec edi
jne 0x8065100
sub esp, 8
push 0x806f0cf
mov edi, dword [from]
push edi
call dbg.send_to_user
pop edx
mov eax, dword [obj.current]
pop ecx
lea edx, [eax + 0x22d]
push edx
add eax, 0x220
push eax
call sym.imp.strcmp
add esp, 0x10
test eax, eax
je 0x806561c
mov eax, dword [obj.current]
lea edx, [eax + 0x22d]
push edx
add eax, 0x220
push eax
push str.Current_nick_________s__Wanted:__s_
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0xc
cmp ebx, 1
mov eax, sym..rodata
je 0x8065181
mov eax, 0x806a12e
push eax
cmp esi, 1
push ebx
mov eax, sym..rodata
je 0x8065192
mov eax, 0x806a12e
push eax
push esi
mov eax, dword [u]
push eax
push str.Users_in_userlist____i___i_Superuser_s___i_Bot_s_
mov eax, dword [from]
push eax
call dbg.send_to_user
mov byte [tmp], 0
mov eax, dword [obj.current]
mov esi, dword [eax + 0xb34]
xor edi, edi
add esp, 0x20
test esi, esi
mov dword [u], 0
je 0x80652c7
lea esi, [esi]
lea edi, [edi]
mov eax, dword [u]
test eax, eax
je 0x806526c
lea ebx, [tmp]
mov ecx, ebx
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ebx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ebx, 4
and edx, 0x80808080
je 0x8065200
test edx, 0x8080
jne 0x8065225
shr edx, 0x10
add ebx, 2
add dl, dl
sbb ebx, 3
mov eax, dword [esi + 4]
sub esp, 0xc
push eax
sub ebx, ecx
call sym.imp.strlen
lea eax, [eax + ebx]
add esp, 0x10
cmp eax, 0x39
jbe 0x806526c
test edi, edi
jne 0x806560a
push ebx
lea eax, [tmp]
push eax
push str.Active_channels_____s
mov edx, dword [from]
push edx
call dbg.send_to_user
inc edi
add esp, 0x10
mov byte [tmp], 0
sub esp, 8
push 0x8067364
lea eax, [tmp]
push eax
call dbg.Strcat
add esp, 0x10
test byte [esi + 0x38d], 8
jne 0x80655ee
mov eax, dword [obj.current]
cmp esi, dword [eax + 0xb38]
je 0x80655d3
mov eax, dword [esi + 4]
sub esp, 8
push eax
lea eax, [tmp]
push eax
call dbg.Strcat
mov esi, dword [esi]
add esp, 0x10
inc dword [u]
test esi, esi
jne 0x80651e0
test edi, edi
jne 0x80655c1
push eax
lea eax, [tmp]
push eax
push str.Active_channels_____s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov eax, dword [u]
add esp, 0x10
test eax, eax
je 0x80655a8
mov eax, dword [obj.current]
cmp byte [eax + 0x296], 0
je 0x806532e
mov edx, dword [eax + 0x2dc]
cmp edx, 1
je 0x8065594
cmp edx, 1
jle 0x806557e
cmp edx, 0x64
je 0x8065570
cmp edx, 0x65
je 0x8065548
mov eax, dword [eax + 0x10]
push eax
push 0x114
mov eax, dword [obj.serverSIZE]
push eax
mov edi, dword [obj.serverBASE]
push edi
call dbg.findstruct
add esp, 0x10
test eax, eax
je 0x806553b
mov esi, dword [eax + 0x100]
push esi
cmp byte [eax + 0xa8], 0
je 0x8065533
add eax, 0xa8
push eax
push str.Current_Server_______s:_i
mov ebx, dword [from]
push ebx
call dbg.send_to_user
pop edx
pop ecx
push 0
mov edx, dword [obj.current]
mov eax, dword [obj.now]
sub eax, dword [edx + 0xbbc]
push eax
call dbg.idle2str
add esp, 0xc
push eax
push str.Server_Ontime________s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov eax, dword [obj.current]
add esp, 0xc
cmp byte [eax + 0x360], 0
je 0x8065529
add eax, 0x360
push eax
push str.Mode_________________s
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
cmp byte [obj.my_entity], 0
je 0x8065407
push obj.my_pass
cmp byte [obj.my_pass], 0
push obj.my_entity
je 0x806551f
mov eax, str.Entity_Name__________s__Linkpass:__s_
push eax
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
cmp dword [obj.linkport], 0xffffffff
je 0x806543a
cmp dword [obj.linksock], 0xffffffff
je 0x8065515
mov eax, str._Active_
push eax
mov eax, dword [obj.linkport]
push eax
push str.Linkport_____________i__s
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
sub esp, 0xc
mov eax, dword [obj.now]
push eax
call dbg.time2str
add esp, 0xc
push eax
push str.Current_Time_________s
mov edi, dword [from]
push edi
call dbg.send_to_user
pop esi
mov ebx, dword [obj.uptime]
push ebx
call dbg.time2str
add esp, 0xc
push eax
mov ecx, dword [from]
push str.Started______________s
push ecx
call dbg.send_to_user
pop eax
pop edx
mov eax, dword [obj.now]
push 0
sub eax, dword [obj.uptime]
push eax
call dbg.idle2str
add esp, 0xc
push eax
push str.Uptime_______________s
mov edi, dword [from]
push edi
call dbg.send_to_user
push obj.SRCDATE
push obj.VERSION
push str.Version______________s___s_
mov esi, dword [from]
push esi
call dbg.send_to_user
add esp, 0x1c
cmp byte [obj.__mx_opts], 0
je 0x806550e
mov eax, obj.__mx_opts
push eax
mov ebx, dword [from]
push str.Features_____________s
push ebx
call dbg.send_to_user
mov eax, dword [obj.current]
add esp, 0xc
movsx eax, byte [eax + 0x380]
push eax
mov ecx, dword [from]
push str.Command_Char_________c
push ecx
call dbg.send_to_user
pop eax
pop edx
mov edi, dword [from]
push 0x806f1f6
push edi
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov eax, str._core_only_
jmp 0x80654c9
mov eax, str._Inactive_
jmp 0x8065422
mov eax, str.Entity_Name__________s
jmp 0x80653fa
mov eax, 0x806f231
jmp 0x80653c3
add eax, 8
jmp 0x806536d
sub esp, 8
push str.Current_Server_______not_in_serverlist_
jmp 0x8065373
mov edx, dword [eax + 0x2d8]
push edx
add eax, 0x296
push eax
push str.Virtual_host_________s:_i__WinGate___Inactive_
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
mov eax, dword [obj.current]
jmp 0x806532e
push ebx
add eax, 0x296
push eax
push str.Virtual_host_________s__IP_Alias___Inactive_
jmp 0x806555a
test edx, edx
jne 0x806532e
push esi
add eax, 0x296
push eax
push str.Virtual_host_________s__IP_Alias_
jmp 0x806555a
mov ecx, dword [eax + 0x2d8]
push ecx
add eax, 0x296
push eax
push str.Virtual_host_________s:_i__WinGate_
jmp 0x806555a
sub esp, 8
push str.Active_channels_____none_
mov edi, dword [from]
push edi
call dbg.send_to_user
add esp, 0x10
jmp 0x80652f6
push eax
lea eax, [tmp]
push eax
push str.____________________s
jmp 0x80652dc
mov eax, dword [esi + 4]
push eax
lea eax, [tmp]
push eax
push 0x806f24e
push eax
call sym.imp.sprintf
jmp 0x80652b4
sub esp, 8
push 0x806a108
lea eax, [tmp]
push eax
call dbg.Strcat
add esp, 0x10
jmp 0x8065290
push ecx
lea eax, [tmp]
push eax
push str.____________________s
jmp 0x8065258
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
push str.Current_nick_________s
jmp 0x8065166
inc dword [u]
mov eax, dword [edx + 0x3c]
shr eax, 9
and eax, 0xff
cmp eax, 0x64
je 0x8065659
cmp eax, 0xc8
jne 0x8065114
inc ebx
jmp 0x8065114
inc esi
jmp 0x8065648
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
mov eax, dword [arg_8h]
mov dword [from], eax
mov edi, dword [arg_10h]
push 1
mov eax, dword [channel]
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804aaad
sub esp, 0xc
cmp edi, 1
mov eax, sym..rodata
je 0x804aa2c
mov eax, 0x806a12e
push eax
push edi
mov eax, dword [ebx + 4]
push eax
push str.Users_on__s_that_are_idle_more_than__i_second_s:
mov eax, dword [from]
push eax
call dbg.send_to_user
mov esi, dword [ebx + 0x1c]
add esp, 0x20
test esi, esi
je 0x804aa63
lea esi, [esi]
mov ebx, dword [obj.now]
sub ebx, dword [esi + 0x38]
cmp ebx, edi
jg 0x804aa80
mov esi, dword [esi]
test esi, esi
jne 0x804aa50
mov eax, dword [from]
mov dword [channel], str.____end_of_list____
mov dword [arg_8h], eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_user
lea esi, [esi]
sub esp, 0xc
push esi
call dbg.get_nuh
add esp, 0x10
push eax
push eax
push 1
push ebx
call dbg.idle2str
add esp, 0xc
push eax
push 0x806ed2a
mov ebx, dword [from]
push ebx
call dbg.send_to_user
add esp, 0x10
jmp 0x804aa5d
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
mov ebx, dword [arg_10h]
mov esi, dword [arg_8h]
push ebx
call dbg.is_present
add esp, 0x10
test eax, eax
jne 0x8054d60
mov dword [to], str.That_user_is_not_on_any_of_my_channels
mov dword [arg_8h], esi
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.send_to_user
sub esp, 8
push 0
push ebx
call dbg.get_idletime
mov edx, dword [obj.now]
sub edx, eax
mov dword [esp], edx
call dbg.idle2str
mov dword [cmdlevel], eax
mov dword [arg_10h], ebx
mov dword [to], str._s_has_been_idle_for__s
mov dword [arg_8h], esi
add esp, 0x10
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.send_to_user
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x40c
mov eax, dword [rest]
test eax, eax
mov edi, dword [arg_8h]
je 0x8059d30
mov dl, byte [eax]
test dl, dl
je 0x8059d30
cmp dl, 0x3d
je 0x8059d0e
mov esi, 0x806e306
mov ebx, dword [obj.botlist]
mov eax, dword [obj.current]
test ebx, ebx
mov dword [obj.backup], eax
je 0x8059c38
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push esi
lea eax, [ebx + 0x220]
push eax
mov dword [obj.current], ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8059c90
cmp byte [esi], 0x2a
je 0x8059c90
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8059c10
sub esp, 8
mov edx, dword [rest]
push edx
push esi
mov eax, dword [obj.backup]
push edi
mov dword [obj.current], eax
add eax, 0x220
push eax
push str._CMD___s__s__s__s_n
push 0
call dbg.link_bcast
add esp, 0x14
mov eax, dword [rest]
push eax
push esi
mov eax, dword [obj.current]
push edi
add eax, 0x220
push eax
push str._do_linkcmd___CMD___s__s__s__s_n
call dbg.debug
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov ecx, dword [rest]
push ecx
mov eax, dword [obj.current]
movsx eax, byte [eax + 0x380]
push eax
push str._c_s
lea eax, [buf]
push eax
call sym.imp.sprintf
pop eax
pop edx
mov ecx, dword [to]
push ecx
push edi
call dbg.find_user
mov dword [obj.CurrentUser], eax
mov dword [esp], edi
mov dword [obj.CurrentShit], 0
call dbg.getnick
pop ecx
pop edx
push eax
push obj.CurrentNick
call sym.imp.strcpy
add esp, 0xc
lea eax, [buf]
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
push edi
call dbg.on_msg
add esp, 0x10
cmp byte [esi], 0x2a
je 0x8059c32
jmp 0x8059c7b
inc eax
sub esp, 0xc
mov dword [rest], eax
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8059d30
cmp byte [eax], 0
jne 0x8059bf2
sub esp, 8
mov ebx, dword [0x8070330]
push ebx
push edi
call dbg.usage
jmp 0x8059c7b
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x804
lea eax, [arg]
push eax
mov ecx, dword [format]
push ecx
lea esi, [buf]
push esi
call sym.imp.vsprintf
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
add esp, 0x10
test ebx, ebx
je 0x804b93b
jmp 0x804b920
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
push obj.CurrentNick
push ebx
call dbg.find_chanuser
add esp, 0x10
test eax, eax
jne 0x804b950
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804b920
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
push edx
push esi
push 0x806a12d
push ebx
call dbg.send_spy
add esp, 0x10
jmp 0x804b935
push ebp
mov ebp, esp
push ebx
sub esp, 0x808
lea eax, [arg]
push eax
mov eax, dword [format]
push eax
lea ebx, [buf]
push ebx
call sym.imp.vsprintf
push ebx
mov eax, dword [nick]
push eax
mov eax, dword [channel]
push eax
push str.KICK__s__s_:_s
call dbg.send_to_server
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8051fb0
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
jmp 0x8051fb0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push ebx
call dbg.usermode
add esp, 0x10
and eax, 2
je 0x8051f9a
mov eax, dword [rest]
test eax, eax
je 0x8051fe5
sub esp, 0xc
push 0x6f
push 0x2b
push 2
push eax
push ebx
call dbg.channel_massmode
jmp 0x8051f9a
push eax
push obj.CurrentNick
push str.o__s
push ebx
call dbg.sendmode
jmp 0x8051f9a
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8052520
cmp byte [eax], 0x23
je 0x80524f0
sub esp, 8
push str.Invalid_channel_name
push esi
call dbg.send_to_user
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
mov esi, esi
lea edi, [edi]
sub esp, 8
push eax
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x80524e0
push eax
push ebx
push str.Attempting_the_join_of__s
push esi
call dbg.send_to_user
add esp, 0xc
push 1
mov esi, dword [rest]
push esi
push ebx
call dbg.join_channel
jmp 0x80524e0
sub esp, 8
mov eax, dword [0x8070480]
push eax
push esi
call dbg.usage
jmp 0x80524e0
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [arg_ch]
mov esi, dword [arg_8h]
mov dword [key], eax
cmp byte [esi], 0x23
mov ebx, dword [arg_10h]
je 0x804b230
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 3
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
mov edi, eax
je 0x804b335
mov al, byte [eax + 0x38d]
shr al, 4
and eax, 3
dec eax
je 0x804b2e5
mov eax, dword [key]
test eax, eax
je 0x804b295
mov eax, dword [key]
cmp eax, dword [edi + 8]
je 0x804b295
lea eax, [edi + 8]
sub esp, 0xc
mov dword [var_14h], eax
push eax
call dbg.MyFree
mov dword [obj.mallocdoer], 0x804b200
pop ecx
pop eax
mov edx, dword [key]
push edx
mov eax, dword [var_14h]
push eax
call dbg.mstrcpy
add esp, 0x10
mov al, byte [edi + 0x38d]
or eax, 0xffffff80
test ebx, ebx
mov byte [edi + 0x38d], al
je 0x804b21a
and eax, 2
je 0x804b21a
push eax
mov eax, dword [key]
test eax, eax
je 0x804b2c5
mov eax, dword [key]
cmp byte [eax], 0
jne 0x804b2ca
mov eax, sym..rodata
push eax
push esi
push 0x8067939
call dbg.send_to_server
and byte [edi + 0x38d], 0xfd
add esp, 0x10
jmp 0x804b21a
mov eax, dword [obj.current]
mov dword [eax + 0xb38], edi
mov eax, dword [key]
test eax, eax
je 0x804b21a
mov eax, dword [key]
cmp eax, dword [edi + 8]
je 0x804b21a
lea esi, [edi + 8]
sub esp, 0xc
push esi
call dbg.MyFree
mov eax, dword [key]
mov dword [obj.mallocdoer], 0x804b200
add esp, 0x10
mov dword [arg_ch], eax
mov dword [arg_8h], esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.mstrcpy
sub esp, 0xc
mov dword [obj.mallocdoer], 0x804b200
push 0x390
call dbg.MyMalloc
mov dword [obj.mallocdoer], 0x804b200
pop ecx
mov edi, eax
pop eax
push esi
lea eax, [edi + 4]
push eax
call dbg.mstrcpy
mov dword [obj.mallocdoer], 0x804b200
pop eax
pop edx
mov ecx, dword [key]
push ecx
lea eax, [edi + 8]
push eax
call dbg.mstrcpy
pop eax
mov eax, dword [obj.current]
pop edx
add eax, 0x3c0
push eax
lea eax, [edi + 0x24]
push eax
call dbg.copy_vars
mov edx, dword [obj.current]
mov eax, dword [edx + 0xb34]
mov dword [edi], eax
mov dword [edx + 0xb34], edi
mov al, byte [edi + 0x38d]
and eax, 0xffffffef
or eax, 0xffffffa0
add esp, 0x10
test ebx, ebx
mov dword [edi + 0x388], 0
mov byte [edi + 0x38d], al
jne 0x804b2b5
or eax, 2
mov byte [edi + 0x38d], al
jmp 0x804b21a
push ebp
mov ebp, esp
push edi
push ebx
sub esp, 0x58
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov edx, eax
je 0x804a133
cld
xor eax, eax
lea edi, [User]
mov ecx, 0x12
rep stosd dword es:[edi], eax
mov eax, dword [obj.userident]
mov dword [obj.cfgUser], eax
mov dword [var_54h], eax
inc eax
mov dword [obj.userident], eax
mov al, byte [var_1ah]
and eax, 0xfffffff1
sub esp, 8
or eax, 4
push edx
mov byte [var_1ah], al
lea eax, [var_20h]
push eax
mov byte [User], 1
mov dword [obj.mallocdoer], 0x804a0b0
call dbg.mstrcpy
mov eax, dword [obj.current]
push 0x48
lea edx, [eax + 0x71c]
push edx
lea ebx, [User]
push ebx
add eax, 0x720
push eax
call dbg.addstruct
lea esp, [var_8h]
pop ebx
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc38
mov al, byte [arg_14h]
mov byte [mode], al
mov al, byte [arg_18h]
mov byte [typechar], al
lea eax, [pattern]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [pat], eax
je 0x804c359
cmp byte [eax], 0
jne 0x804c361
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push 0x2a
push eax
call sym.imp.strchr
test eax, eax
setne al
pop edx
pop ecx
and eax, 0xff
push 1
mov dword [ispat], eax
mov eax, dword [channel]
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
mov dword [Chan], eax
je 0x804c359
sub esp, 8
push 0xd
push 0
call dbg.get_int_varc
pop edi
mov dword [maxmode], eax
pop eax
push 0xb
mov esi, dword [Chan]
push esi
call dbg.get_int_varc
mov dword [mal], eax
movsx eax, byte [mode]
push eax
mov ebx, dword [channel]
push ebx
push str.MODE__s__c
lea eax, [dstring]
push eax
mov byte [burst], 0
call sym.imp.sprintf
add esp, 0x20
cmp byte [dstring], 0
lea edi, [dstring]
je 0x804c406
lea esi, [esi]
lea edi, [edi]
inc edi
cmp byte [edi], 0
jne 0x804c400
mov ecx, dword [maxmode]
test ecx, ecx
jle 0x804c431
mov eax, dword [maxmode]
mov dword [i], eax
lea esi, [esi]
mov al, byte [typechar]
mov byte [edi], al
inc edi
dec dword [i]
jne 0x804c420
mov byte [edi], 0
mov eax, dword [Chan]
mov esi, dword [eax + 0x1c]
test esi, esi
je 0x804c5e8
lea esi, [esi]
lea edi, [edi]
sub esp, 8
lea eax, [dstring]
push eax
lea eax, [deopstring]
push eax
call sym.imp.strcpy
add esp, 0x10
test esi, esi
mov dword [i], 0
je 0x804c524
mov eax, dword [maxmode]
cmp dword [i], eax
jge 0x804c524
lea esi, [esi]
xor ebx, ebx
cmp byte [mode], 0x2b
je 0x804c8a0
cmp byte [mode], 0x2d
je 0x804c880
sub esp, 0xc
push esi
call dbg.get_nuh
add esp, 0x10
test ebx, ebx
mov edi, eax
mov dword [lvl], 0
jne 0x804c790
sub esp, 0xc
mov eax, dword [pat]
push eax
mov ecx, dword [lvl]
push ecx
test ebx, ebx
push edi
mov eax, str.TRUE
jne 0x804c4ec
mov eax, str.FALSE
push eax
push str._massmode_2___willdo___s___s__i____pat_s__n
call dbg.debug
add esp, 0x20
test ebx, ebx
je 0x804c508
test byte [esi + 5], 8
je 0x804c750
mov esi, dword [esi]
test esi, esi
je 0x804c6f0
mov eax, dword [maxmode]
cmp dword [i], eax
jl 0x804c490
mov eax, dword [i]
test eax, eax
je 0x804c5e0
lea ecx, [deopstring]
mov ebx, ecx
lea esi, [esi]
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x804c540
test edx, 0x8080
jne 0x804c565
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
lea edi, [burst]
sub ecx, ebx
mov ebx, edi
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ebx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ebx, 4
and edx, 0x80808080
je 0x804c580
test edx, 0x8080
jne 0x804c5a5
shr edx, 0x10
add ebx, 2
add dl, dl
sbb ebx, 3
lea eax, [burst]
sub ebx, eax
lea eax, [ebx + ecx]
cmp eax, 0x1df
ja 0x804c681
sub esp, 8
lea eax, [deopstring]
push eax
push edi
call dbg.Strcat
pop eax
pop edx
push 0x806b2d9
push edi
call dbg.Strcat
add esp, 0x10
test esi, esi
jne 0x804c450
cmp byte [burst], 0
jne 0x804c622
mov eax, dword [Chan]
mov esi, dword [eax + 0x1c]
test esi, esi
je 0x804c359
lea esi, [esi]
lea edi, [edi]
and dword [esi + 4], 0xfffff7ff
mov esi, dword [esi]
test esi, esi
jne 0x804c610
jmp 0x804c359
sub esp, 8
lea ebx, [burst]
push ebx
push str._...__n_s_n
call dbg.debug
mov esi, ebx
add esp, 0xc
mov ecx, ebx
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x804c63d
test edx, 0x8080
jne 0x804c662
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, esi
push ecx
push ebx
mov eax, dword [obj.current]
mov eax, dword [eax + 8]
push eax
call sym.imp.write
add esp, 0x10
jmp 0x804c5f1
sub esp, 8
push edi
push str._channel_massmode__n_s_n
call dbg.debug
mov ebx, edi
add esp, 0xc
mov ecx, edi
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x804c6a0
test edx, 0x8080
jne 0x804c6c5
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, ebx
push ecx
push edi
mov eax, dword [obj.current]
mov eax, dword [eax + 8]
push eax
call sym.imp.write
pop ecx
pop ebx
lea eax, [deopstring]
push eax
push edi
call sym.imp.strcpy
jmp 0x804c5d0
sub esp, 0xc
lea eax, [pattern]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [pat], eax
je 0x804c70e
cmp byte [eax], 0
jne 0x804c71b
test esi, esi
jne 0x804c512
jmp 0x804c524
sub esp, 8
push 0x2a
push eax
call sym.imp.strchr
add esp, 0x10
test eax, eax
setne al
and eax, 0xff
mov dword [ispat], eax
mov eax, dword [Chan]
mov esi, dword [eax + 0x1c]
jmp 0x804c70e
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x8067364
lea eax, [deopstring]
push eax
call dbg.Strcat
pop eax
pop edx
mov eax, dword [esi + 0x3c]
push eax
lea eax, [deopstring]
push eax
call dbg.Strcat
or dword [esi + 4], 0x800
inc dword [i]
add esp, 0x10
jmp 0x804c508
nop
lea esi, [esi]
sub esp, 8
mov edx, dword [channel]
push edx
push eax
call dbg.get_userlevel
mov dword [lvl], eax
mov eax, dword [ispat]
xor ebx, ebx
add esp, 0x10
test eax, eax
je 0x804c830
sub esp, 8
push edi
mov eax, dword [pat]
push eax
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x804c4cc
cmp byte [typechar], 0x76
je 0x804c81d
cmp byte [mode], 0x2b
je 0x804c808
cmp byte [mode], 0x2d
jne 0x804c4cc
mov eax, dword [mal]
cmp dword [lvl], eax
jge 0x804c4cc
mov ebx, 1
jmp 0x804c4cc
mov eax, dword [mal]
cmp dword [lvl], eax
jl 0x804c7df
mov ebx, 1
jmp 0x804c7df
mov ebx, 1
jmp 0x804c7d6
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [esi + 0x3c]
push eax
mov eax, dword [pat]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804c4cc
cmp byte [mode], 0x2d
jne 0x804c7fe
sub esp, 8
mov eax, dword [pat]
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804c4cc
jmp 0x804c7fe
mov esi, esi
mov eax, dword [filtmode]
test dword [esi + 4], eax
je 0x804c4ac
mov ebx, 1
jmp 0x804c4ac
lea esi, [esi]
lea edi, [edi]
mov eax, dword [filtmode]
test dword [esi + 4], eax
jne 0x804c49f
mov ebx, 1
jmp 0x804c49f
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
mov edi, dword [arg_8h]
call dbg.get_channel
mov esi, eax
mov dword [esp], ebx
call dbg.chop
mov ebx, eax
pop eax
mov eax, dword [obj.current]
pop edx
add eax, 0x220
push eax
push esi
call dbg.usermode
add esp, 0x10
and eax, 2
je 0x8053a70
test ebx, ebx
je 0x8053aac
sub esp, 8
push 0x2a
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x8053a80
push eax
push 0
push ebx
push esi
call dbg.channel_massunban
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
push eax
push 0
push ebx
push edi
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8053a70
sub esp, 8
push eax
push esi
call dbg.channel_unban
push esi
push ebx
push str._s_unbanned_on__s
push edi
call dbg.send_to_user
jmp 0x8053a70
sub esp, 8
push edi
push esi
call dbg.channel_unban
add esp, 0xc
push esi
push str.You_have_been_unbanned_on__s
jmp 0x8053aa4
push ebp
mov ebp, esp
sub esp, 0x10
push 1
mov ecx, dword [channel]
push ecx
call dbg.find_channel
add esp, 0x10
xor edx, edx
test eax, eax
je 0x804c093
sub esp, 8
mov edx, dword [nick]
push edx
push eax
call dbg.find_chanuser
add esp, 0x10
xor edx, edx
test eax, eax
je 0x804c093
mov edx, dword [eax + 4]
mov esp, ebp
mov eax, edx
pop ebp
ret
jmp dword [reloc.strchr]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x434
push 1
mov eax, dword [channel]
push eax
call dbg.find_channel
mov ebx, eax
add esp, 0x10
xor eax, eax
test ebx, ebx
je 0x804ca6b
sub esp, 8
push 0xc
push 0
call dbg.get_int_varc
mov ebx, dword [ebx + 0x18]
add esp, 0x10
test ebx, ebx
mov dword [maxmode], eax
mov dword [count], 0
je 0x804ca65
lea edi, [unbanstring]
mov esi, esi
xor esi, esi
test ebx, ebx
mov word [unbanmode], 0x2d
mov byte [unbanstring], 0
je 0x804ca4b
cmp esi, dword [maxmode]
jl 0x804ca80
push edi
lea eax, [unbanmode]
push eax
push 0x806e50a
mov eax, dword [channel]
push eax
call dbg.sendmode
add esp, 0x10
test ebx, ebx
jne 0x804ca30
mov eax, dword [count]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [ebx + 8]
push eax
mov eax, dword [pattern]
push eax
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x804cb00
mov ecx, dword [seconds]
test ecx, ecx
je 0x804caab
mov eax, dword [obj.now]
sub eax, dword [ebx + 0x10]
cmp eax, dword [seconds]
jle 0x804cadf
sub esp, 8
push 0x806e330
lea eax, [unbanmode]
push eax
call dbg.Strcat
pop eax
pop edx
push 0x8067364
push edi
call dbg.Strcat
pop ecx
pop eax
mov edx, dword [ebx + 8]
push edx
push edi
call dbg.Strcat
inc esi
inc dword [count]
add esp, 0x10
mov ebx, dword [ebx]
test ebx, ebx
je 0x804ca4b
cmp esi, dword [maxmode]
jl 0x804ca80
jmp 0x804ca4b
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [pattern]
push eax
mov eax, dword [ebx + 8]
push eax
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x804cadf
jmp 0x804ca97
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_ch]
test ebx, ebx
mov esi, dword [arg_10h]
je 0x80588d4
cmp byte [ebx], 0
jne 0x80588e0
xor edx, edx
lea esp, [var_8h]
pop ebx
pop esi
mov eax, edx
pop ebp
ret
nop
sub esp, 8
push 0x21
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x8058906
sub esp, 8
push 0x40
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
mov edx, ebx
jne 0x80588d6
sub esp, 8
push ebx
push global_buffer.0
call sym.imp.strcpy
pop edx
pop ecx
push 0x21
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
jne 0x8058937
sub esp, 8
push 0x40
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x805898b
sub esp, 8
push 0x40
push ebx
mov word [global_buffer.0], 0x212a
mov byte [0x8072ea2], 0
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x8058974
sub esp, 8
push ebx
push global_buffer.0
call dbg.Strcat
add esp, 0x10
mov edx, global_buffer.0
jmp 0x80588d6
sub esp, 8
push 0x806e306
push global_buffer.0
call dbg.Strcat
add esp, 0x10
jmp 0x8058959
sub esp, 8
push ebx
mov eax, dword [from]
push eax
call dbg.find_userhost
add esp, 0x10
test eax, eax
je 0x80588d4
cmp byte [eax], 0
je 0x80588d4
test esi, esi
jne 0x80589c0
sub esp, 8
push eax
push global_buffer.0
call sym.imp.strcpy
jmp 0x8058967
sub esp, 8
push esi
push eax
call dbg.format_uh
add esp, 0x10
jmp 0x80589b0
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x434
push 1
mov eax, dword [channel]
push eax
call dbg.find_channel
mov edi, eax
add esp, 0x10
xor eax, eax
test edi, edi
je 0x804cc1c
mov ebx, dword [edi + 0x18]
test ebx, ebx
mov dword [count], 0
je 0x804cc16
xor esi, esi
mov word [unbanmode], 0x2d
mov byte [unbanstring], 0
lea esi, [esi]
test ebx, ebx
je 0x804cbf2
sub esp, 8
push 0xc
push edi
call dbg.get_int_varc
add esp, 0x10
cmp esi, eax
jge 0x804cbf2
sub esp, 8
mov eax, dword [user]
push eax
mov ecx, dword [ebx + 8]
push ecx
call dbg.matches
add esp, 0x10
test eax, eax
je 0x804cbb0
mov ebx, dword [ebx]
jmp 0x804cb70
jmp 0x804cbb0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
push 0x806e330
lea eax, [unbanmode]
push eax
call dbg.Strcat
pop eax
pop edx
push 0x8067364
lea eax, [unbanstring]
push eax
call dbg.Strcat
pop ecx
pop eax
mov edx, dword [ebx + 8]
push edx
lea eax, [unbanstring]
push eax
call dbg.Strcat
inc esi
inc dword [count]
add esp, 0x10
jmp 0x804cb9d
lea eax, [unbanstring]
push eax
lea eax, [unbanmode]
push eax
push 0x806e50a
mov eax, dword [channel]
push eax
call dbg.sendmode
add esp, 0x10
test ebx, ebx
jne 0x804cb5b
mov eax, dword [count]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x10c
mov esi, dword [arg_8h]
xor eax, eax
test esi, esi
je 0x8058cc1
sub esp, 8
push 0x40
push esi
mov byte [global_result], 0
call sym.imp.strchr
add esp, 0x10
test eax, eax
lea ebx, [temphost]
jne 0x8058dd7
sub esp, 8
push esi
push ebx
call sym.imp.strcpy
add esp, 0x10
cmp byte [temphost], 0
je 0x8058cc9
sub esp, 0xc
push ebx
call sym.imp.strlen
movsx eax, byte [eax + ebx - 1]
add esp, 0x10
cmp eax, 0xff
ja 0x8058dd0
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
je 0x8058cc9
mov esi, ebx
mov edi, 1
sub esp, 8
push 0x2e
push esi
call sym.imp.strchr
mov edx, edi
add esp, 0x10
dec dl
lea esi, [eax + 1]
mov edi, edx
jns 0x8058c7d
sub esp, 8
mov byte [eax + 1], 0
push ebx
push 0x8073720
call dbg.Strcat
pop ecx
pop ebx
push 0x806a10e
push 0x8073720
call dbg.Strcat
add esp, 0x10
mov eax, 0x8073720
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push 3
push ebx
call dbg.right
mov esi, eax
pop eax
pop edx
push 0x806b8cf
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edi, 1
jne 0x8058d7c
mov eax, edi
movsx esi, al
nop
lea esi, [esi]
test ebx, ebx
je 0x8058d34
cmp byte [ebx], 0
je 0x8058d34
sub esp, 8
push 0x2e
push ebx
call dbg.numchar
add esp, 0x10
cmp eax, esi
jle 0x8058d34
sub esp, 8
push 0x2e
push ebx
call sym.imp.strchr
mov ebx, eax
add esp, 0x10
xor eax, eax
test ebx, ebx
je 0x8058cc1
inc ebx
jmp 0x8058d00
sub esp, 8
push 0x806e306
push 0x8073720
call dbg.Strcat
pop esi
pop edi
lea edx, [temphost]
push edx
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8058d65
sub esp, 8
push ebx
jmp 0x8058caf
sub esp, 8
push 0x8068345
push 0x8073720
call dbg.Strcat
add esp, 0x10
jmp 0x8058d5c
sub esp, 8
push 0x806b8d3
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8058cf3
sub esp, 8
push 0x806b8cf
push ebx
call dbg.my_stristr
add esp, 0x10
test eax, eax
je 0x8058db4
mov edi, 2
jmp 0x8058cf3
sub esp, 8
push 0x806b8d3
push ebx
call dbg.my_stristr
add esp, 0x10
test eax, eax
je 0x8058cf3
jmp 0x8058daa
nop
xor eax, eax
jmp 0x8058c72
sub esp, 8
push esi
push 0x8073720
call sym.imp.strcpy
pop ecx
pop edi
push 0x40
push 0x8073720
call sym.imp.strchr
mov byte [eax], 0
pop eax
pop edx
push 0x806a108
push 0x8073720
call dbg.Strcat
pop edi
pop eax
push 0x40
push esi
call sym.imp.strchr
mov esi, eax
inc esi
add esp, 0x10
jmp 0x8058c2c
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.current]
test eax, eax
je 0x8049210
or byte [eax + 0x3ac], 2
mov esp, ebp
pop ebp
ret
lea esi, [esi]
sub esp, 8
push obj.ERR_INIT
push str._s_Stray_USERMASTER_tag__ignored__n
call sym.imp.printf
jmp 0x8049206
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
mov edi, dword [arg_8h]
call dbg.get_channel
mov esi, eax
pop eax
pop edx
push esi
push edi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8052580
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 1
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8052600
push ecx
push esi
push str.Leaving__s
push edi
call dbg.send_to_user
mov al, byte [ebx + 0x38d]
and eax, 0x4f
or eax, 0x20
mov byte [ebx + 0x38d], al
pop eax
pop edx
push esi
push str.PART__s
call dbg.send_to_server
mov edx, dword [obj.current]
add esp, 0x10
cmp ebx, dword [edx + 0xb38]
jne 0x805256c
mov ebx, dword [edx + 0xb34]
test ebx, ebx
je 0x80525f5
nop
lea esi, [esi]
mov al, byte [ebx + 0x38d]
shr al, 4
and eax, 3
dec eax
je 0x80525f5
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80525e0
mov dword [edx + 0xb38], ebx
jmp 0x805256c
push ebx
push esi
push obj.ERR_CHAN
push edi
call dbg.send_to_user
jmp 0x805256c
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push 0
mov esi, dword [arg_8h]
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x805e010
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [rest]
push eax
call dbg.chop
mov ebx, eax
pop eax
pop edx
push str.port
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805e070
sub esp, 0xc
mov ecx, dword [rest]
push ecx
call sym.imp.atoi
mov edx, eax
lea eax, [eax - 1]
add esp, 0x10
cmp eax, 0xfffe
ja 0x805e055
mov dword [obj.uptimeport], edx
jmp 0x805dffb
sub esp, 8
push str.Port_number_must_be_in_the_range_1_65535
push esi
call dbg.send_to_user
jmp 0x805dffb
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x80683f3
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805e0b1
sub esp, 0xc
push obj.uptimehost
call dbg.MyFree
pop eax
pop edx
mov esi, dword [rest]
push esi
push obj.uptimehost
mov dword [obj.mallocdoer], 0x805dfe0
call dbg.mstrcpy
jmp 0x805dffb
sub esp, 8
push str.send
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805e0d0
call dbg.send_uptime
jmp 0x805dffb
sub esp, 8
mov ebx, dword [0x80708a0]
push ebx
push esi
call dbg.usage
jmp 0x805dffb
push ebp
mov ebp, esp
push esi
mov esi, dword [obj.serverBASE]
mov ecx, dword [obj.current]
mov eax, dword [obj.now]
test esi, esi
push ebx
mov dword [ecx + 0xbb0], eax
je 0x8050c2a
mov ebx, dword [ecx + 0xb34]
test ebx, ebx
jne 0x8050c78
mov eax, dword [ecx + 0x14]
test eax, eax
jne 0x8050c31
xor ebx, ebx
mov eax, dword [obj.serverSIZE]
cmp ebx, eax
mov edx, dword [obj.serverBASE]
jge 0x8050c1a
mov esi, dword [obj.now]
mov ecx, eax
mov esi, esi
cmp byte [edx], 0
je 0x8050c11
cmp dword [edx + 0x10c], esi
je 0x8050c11
test ebx, ebx
je 0x8050c0f
mov eax, dword [ebx + 0xfc]
cmp dword [edx + 0xfc], eax
jge 0x8050c11
mov ebx, edx
add edx, 0x114
dec ecx
jne 0x8050bf0
test ebx, ebx
je 0x8050c2a
sub esp, 0xc
push ebx
call dbg.try_server
add esp, 0x10
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push eax
push 0x114
mov ecx, dword [obj.serverSIZE]
push ecx
mov edx, dword [obj.serverBASE]
push edx
call dbg.findstruct
mov edx, eax
add esp, 0x10
mov eax, dword [obj.current]
test edx, edx
mov dword [eax + 0x14], 0
je 0x8050bd5
sub esp, 0xc
push edx
call dbg.try_server
add esp, 0x10
test eax, eax
jns 0x8050c2a
jmp 0x8050bd5
sub esp, 0xc
push str._CtS__Setting_rejoin__and_synced_status_for_all_channels_n
call dbg.debug
mov ecx, dword [obj.current]
mov edx, dword [ecx + 0xb34]
add esp, 0x10
test edx, edx
je 0x8050bce
lea esi, [esi]
mov cl, byte [edx + 0x38d]
mov al, cl
shr al, 4
and eax, 3
dec eax
je 0x8050ce0
mov al, byte [edx + 0x38d]
or eax, 2
and eax, 0xfffffff7
mov byte [edx + 0x38d], al
mov edx, dword [edx]
test edx, edx
jne 0x8050ca0
mov ecx, dword [obj.current]
jmp 0x8050bce
lea esi, [esi]
lea edi, [edi]
and ecx, 0xffffffcf
or ecx, 0xffffffa0
mov byte [edx + 0x38d], cl
jmp 0x8050cb1
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edx, dword [obj.botlinkSIZE]
mov dword [y], 0
cmp dword [y], edx
mov byte [obj.ec_tmp], 0
mov esi, dword [obj.botlinkBASE]
mov dword [i], 0
jge 0x8064a69
nop
cmp byte [esi], 0
je 0x8064a5b
cmp byte [esi + 9], 0x64
je 0x8064aa0
inc dword [i]
add esi, 0x258
cmp dword [i], edx
jl 0x8064a50
mov ecx, dword [y]
test ecx, ecx
je 0x8064a7e
mov eax, dword [pp]
add dword [eax], 6
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push str.No_Links
mov eax, dword [rp]
mov edx, dword [eax]
push edx
call dbg.Strcat
mov edx, dword [rp]
mov dword [edx], eax
add esp, 0x10
jmp 0x8064a70
nop
lea esi, [esi]
cmp byte [esi + 8], 3
je 0x8064b7b
push eax
lea eax, [esi + 0xc]
push eax
push 0x806f04e
push obj.ec_tmp
call sym.imp.sprintf
xor edi, edi
mov edx, dword [obj.botlinkSIZE]
add esp, 0x10
cmp edi, edx
mov dword [x], 0
mov ebx, dword [obj.botlinkBASE]
jge 0x8064af6
lea esi, [esi]
cmp byte [ebx], 0
je 0x8064aeb
cmp byte [ebx + 9], 0x65
je 0x8064b30
inc edi
add ebx, 0x258
cmp edi, edx
jl 0x8064ae0
sub esp, 8
push 0x806f055
push obj.ec_tmp
call dbg.Strcat
pop edi
pop eax
push obj.ec_tmp
mov eax, dword [rp]
mov ebx, dword [eax]
push ebx
call dbg.Strcat
mov edx, dword [rp]
mov dword [edx], eax
add esp, 0x10
mov edx, dword [obj.botlinkSIZE]
jmp 0x8064a5b
lea esi, [esi]
mov eax, dword [esi + 4]
cmp dword [ebx + 0x250], eax
jne 0x8064aeb
mov eax, dword [x]
test eax, eax
jne 0x8064b64
sub esp, 8
lea eax, [ebx + 0xc]
push eax
push obj.ec_tmp
call dbg.Strcat
inc dword [x]
inc dword [y]
add esp, 0x10
mov edx, dword [obj.botlinkSIZE]
jmp 0x8064aeb
sub esp, 8
push 0x8069e39
push obj.ec_tmp
call dbg.Strcat
add esp, 0x10
jmp 0x8064b42
push eax
lea eax, [esi + 0xc]
push eax
push str.__s__
jmp 0x8064ab4
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
call dbg.get_channel
mov esi, eax
pop eax
pop edx
push esi
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8053010
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [nick], eax
je 0x80530b5
push edi
push 0
mov ebx, dword [nick]
push ebx
mov ecx, dword [from]
push ecx
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov edi, eax
je 0x8052ffc
sub esp, 8
push esi
push eax
call dbg.get_userlevel
mov ebx, eax
pop eax
pop edx
push esi
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp ebx, eax
jle 0x8053072
push edi
push str.Sitekickban_attempt_of__s
push obj.CurrentNick
push esi
call dbg.sendkick
jmp 0x8052ffc
push eax
push edi
mov eax, dword [nick]
push eax
push esi
call dbg.deop_siteban
mov eax, dword [rest]
test eax, eax
jne 0x805308a
mov eax, str.Requested_Kick
push eax
push 0x806a12d
mov edi, dword [nick]
push edi
push esi
call dbg.sendkick
add esp, 0x20
push esi
mov esi, dword [nick]
push esi
push str._s_sitekickbanned_on__s
mov ebx, dword [from]
push ebx
call dbg.send_to_user
jmp 0x8052ffc
sub esp, 8
push str.No_nick_specified
jmp 0x80530a7
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [arg_8h]
add dword [eax], 9
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
mov esi, dword [arg_ch]
je 0x8064a07
mov byte [obj.ec_tmp], 0
lea esi, [esi]
lea edi, [edi]
mov dl, byte [ebx + 0x38d]
mov al, dl
shr al, 4
and eax, 3
dec eax
je 0x80649e0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80649b0
mov eax, dword [esi]
mov byte [eax], 0
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
and edx, 8
je 0x80649ec
mov eax, dword [esi]
mov byte [eax], 0x40
inc dword [esi]
sub esp, 8
mov eax, dword [ebx + 4]
push eax
mov eax, dword [esi]
push eax
call dbg.Strcat
mov dword [esi], eax
mov byte [eax], 0x20
inc dword [esi]
add esp, 0x10
jmp 0x80649c1
sub esp, 8
push obj.ERR_NOCHANNELS
mov eax, dword [esi]
push eax
call dbg.Strcat
mov dword [esi], eax
jmp 0x80649cc
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
mov edi, dword [arg_8h]
push 0x806a63d
push edi
call dbg.send_to_user
xor esi, esi
mov eax, dword [obj.current]
add esp, 0x10
cmp esi, dword [eax + 0xb24]
mov ebx, dword [eax + 0xb28]
jge 0x8054804
nop
cmp byte [ebx], 0
jne 0x8054820
inc esi
add ebx, 0xa1
cmp esi, dword [eax + 0xb24]
jl 0x80547f0
mov dword [to], 0x806a64b
mov dword [arg_8h], edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_user
lea esi, [esi]
lea eax, [ebx + 0x51]
push eax
lea eax, [ebx + 1]
push eax
push str.__12s__s
push edi
call dbg.send_to_user
add esp, 0x10
mov eax, dword [obj.current]
jmp 0x80547f5
push ebp
mov ebp, esp
sub esp, 0x14
push obj.now
call sym.imp.time
mov eax, dword [obj.respawn]
inc eax
add esp, 0x10
cmp eax, 0xa
mov dword [obj.respawn], eax
jg 0x805db03
sub esp, 0xc
push str._sigsegv__n
call dbg.debug
add esp, 0x10
test byte [obj.will], 4
je 0x805daf0
mov eax, dword [obj.debug_on_exit]
test eax, eax
jne 0x805dad0
call dbg.savesession
call dbg.close_all_dcc
mov dword [obj.do_exec], 1
mov dword [crap], str.Mary_had_a_little_signal_segmentation_fault__SIGSEGV_
mov esp, ebp
pop ebp
jmp dbg.kill_all_bots
lea esi, [esi]
push 0
push 0
push 0
push 0
call dbg.do_debug
mov dword [obj.debug_on_exit], 0
add esp, 0x10
jmp 0x805daa9
lea esi, [esi]
sub esp, 8
push dbg.sig_segv
push 0xb
call sym.imp.signal
mov esp, ebp
pop ebp
ret
mov eax, dword [obj.debug_on_exit]
test eax, eax
je 0x805db1c
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov eax, dword [obj.do_exec]
test eax, eax
je 0x805db2a
call dbg.mech_exec
sub esp, 0xc
push 1
call sym.imp.exit
lea esi, [esi]
lea edi, [edi]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc10
lea eax, [arg]
push eax
mov ebx, dword [format]
push ebx
lea eax, [buf]
push eax
mov edi, dword [arg_8h]
call sym.imp.vsprintf
pop edx
pop ecx
push 0x28
push edi
call dbg.get_int_varc
add esp, 0x10
test eax, eax
jne 0x804ba3b
mov eax, dword [obj.current]
xor esi, esi
cmp esi, dword [eax + 0xb24]
mov ebx, dword [eax + 0xb28]
jge 0x804b9d4
lea esi, [esi]
cmp byte [ebx], 0
jne 0x804b9e0
inc esi
add ebx, 0xa1
cmp esi, dword [eax + 0xb24]
jl 0x804b9c0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
mov eax, dword [edi + 4]
push eax
lea eax, [ebx + 1]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804ba19
cmp byte [ebx + 0x51], 0x23
je 0x804ba20
lea eax, [buf]
push eax
mov eax, dword [edi + 4]
push eax
push 0x806794b
lea eax, [ebx + 0x51]
push eax
call dbg.send_to_user
add esp, 0x10
mov eax, dword [obj.current]
jmp 0x804b9c5
lea eax, [buf]
push eax
mov eax, dword [edi + 4]
push eax
push 0x806794b
lea eax, [ebx + 0x51]
push eax
call dbg.sendprivmsg
jmp 0x804ba16
sub esp, 8
mov eax, dword [edi + 4]
push eax
lea ebx, [fchan]
push ebx
call sym.imp.strcpy
mov al, byte [fchan]
add esp, 0x10
test al, al
mov edx, ebx
je 0x804ba74
lea esi, [esi]
and eax, 0xff
mov al, byte [eax + obj.tolowertab]
mov byte [edx], al
inc edx
mov al, byte [edx]
test al, al
jne 0x804ba60
push eax
push 0x1b6
push 0x209
push ebx
call sym.imp.open
add esp, 0x10
test eax, eax
mov ebx, eax
js 0x804b9a8
lea eax, [buf]
push eax
sub esp, 8
mov eax, dword [obj.now]
push eax
call dbg.time2medium
add esp, 0xc
push eax
push str.__s___s_n
push ebx
call dbg.send_to_socket
mov dword [esp], ebx
call sym.imp.close
add esp, 0x10
jmp 0x804b9a8
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
mov esi, dword [arg_8h]
je 0x804aaf5
mov esi, esi
lea edi, [edi]
mov al, byte [ebx + 0x38d]
shr al, 4
and eax, 3
dec eax
je 0x804ab00
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804aae0
xor edx, edx
lea esp, [var_8h]
pop ebx
pop esi
mov eax, edx
pop ebp
ret
sub esp, 8
push esi
push ebx
call dbg.find_chanuser
add esp, 0x10
test eax, eax
mov edx, 1
je 0x804aaef
jmp 0x804aaf7
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
mov edi, dword [arg_8h]
push edi
call dbg.getnick
pop eax
pop edx
lea eax, [rest]
push eax
mov esi, dword [to]
push esi
call dbg.get_channel
pop ecx
pop ebx
push 1
push eax
mov esi, eax
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x806591d
test byte [obj.will], 8
jne 0x8065908
mov ebx, dword [eax + 0x1c]
test ebx, ebx
je 0x80658cc
lea esi, [esi]
lea edi, [edi]
test byte [ebx + 4], 2
jne 0x80658f0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80658c0
push eax
push esi
push str.Sent_wallop_to__s
push edi
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x80658f0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [rest]
push eax
push esi
mov eax, dword [ebx + 0x3c]
push eax
push str.NOTICE__s_:_Wallop__s___s
call dbg.send_to_server
add esp, 0x10
jmp 0x80658c6
mov eax, dword [rest]
push eax
push esi
push esi
push str.NOTICE___s_:_Wallop__s___s
call dbg.send_to_server
add esp, 0x10
jmp 0x80658cc
push edx
push esi
push obj.ERR_CHAN
jmp 0x80658d3
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x810
lea eax, [arg]
push eax
mov ebx, dword [format]
push ebx
lea edi, [buf]
push edi
call sym.imp.vsprintf
xor esi, esi
mov eax, dword [obj.current]
add esp, 0x10
cmp esi, dword [eax + 0xb24]
mov ebx, dword [eax + 0xb28]
jge 0x804b6a4
nop
lea esi, [esi]
cmp byte [ebx], 0
jne 0x804b6b0
inc esi
add ebx, 0xa1
cmp esi, dword [eax + 0xb24]
jl 0x804b690
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
push str.spymsg
lea eax, [ebx + 1]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804b6cf
mov eax, dword [obj.current]
jmp 0x804b695
sub esp, 8
push edi
lea eax, [ebx + 0x51]
push eax
call dbg.send_chat
add esp, 0x10
test eax, eax
jne 0x804b6c8
push ecx
push 0xa1
push 0
push ebx
call sym.imp.memset
add esp, 0x10
jmp 0x804b6c8
push ebp
mov ebp, esp
lea eax, [when]
sub esp, 0x14
push eax
call sym.imp.localtime
mov ecx, dword [when]
add esp, 0x10
test ecx, ecx
jne 0x8057ec0
xor edx, edx
mov esp, ebp
mov eax, edx
pop ebp
ret
jmp 0x8057ec0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov edx, dword [eax + 4]
push edx
mov ecx, dword [eax + 8]
push ecx
push 0x806b848
push obj.timebuf
call sym.imp.sprintf
add esp, 0x10
test eax, eax
mov edx, obj.timebuf
jne 0x8057eab
jmp 0x8057ea9
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
mov esi, dword [arg_8h]
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x80520d0
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push ebx
call dbg.usermode
add esp, 0x10
and eax, 2
je 0x80520bb
mov eax, dword [rest]
test eax, eax
je 0x8052105
sub esp, 0xc
push 0x6f
push 0x2d
push 2
push eax
push ebx
call dbg.channel_massmode
jmp 0x80520bb
sub esp, 8
mov ebx, dword [0x80703c0]
push ebx
push esi
call dbg.usage
jmp 0x80520bb
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x10
mov edi, dword [arg_8h]
push 0x806f422
push 0x806f9a0
push edi
call dbg.send_to_user
xor esi, esi
mov eax, dword [obj.serverSIZE]
add esp, 0x10
cmp esi, eax
mov ebx, dword [obj.serverBASE]
jge 0x8066721
lea esi, [esi]
lea edi, [edi]
cmp byte [ebx], 0
je 0x8066712
mov edx, dword [ebx + 0x108]
test edx, edx
jne 0x80667a0
mov eax, dword [ebx + 0x104]
cmp eax, 6
ja case.0x80666b2.0
jmp dword [eax*4 + 0x806fc00]
mov ecx, str._no_authorization_
mov esi, esi
push eax
mov eax, dword [obj.current]
mov eax, dword [eax + 0x10]
cmp dword [ebx + 4], eax
je 0x8066750
mov eax, sym..rodata
test edx, edx
push eax
mov eax, 0x80682f8
jne 0x80666e6
mov eax, sym..rodata
push eax
push ecx
mov edx, dword [ebx + 0x100]
push edx
cmp byte [ebx + 0xa8], 0
je 0x8066740
lea eax, [ebx + 0xa8]
push eax
push str.__30s_____5i____s_s_s
push edi
call dbg.send_to_user
add esp, 0x20
mov eax, dword [obj.serverSIZE]
inc esi
add ebx, 0x114
cmp esi, eax
jl 0x8066690
mov dword [to], 0x806f452
mov dword [arg_8h], edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_user
mov esi, esi
lea edi, [edi]
lea eax, [ebx + 8]
jmp 0x80666fe
lea esi, [esi]
lea edi, [edi]
mov eax, str.__current_
jmp 0x80666d7
lea esi, [esi]
mov ecx, str._never_
jmp 0x80666c0
mov ecx, str._K_lined_
jmp 0x80666c0
mov ecx, str._connection_class_full_
jmp 0x80666c0
mov ecx, str._connection_timed_out_
jmp 0x80666c0
mov ecx, str._unable_to_connect_
jmp 0x80666c0
mov ecx, str._use_a_different_port_
jmp 0x80666c0
lea esi, [esi]
sub esp, 8
push 0
mov eax, dword [obj.now]
sub eax, edx
push eax
call dbg.idle2str
mov ecx, eax
add esp, 0x10
mov edx, dword [ebx + 0x108]
jmp 0x80666c0
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push 1
mov esi, dword [arg_ch]
push esi
mov edi, dword [arg_8h]
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804f389
mov eax, dword [rest]
push eax
push obj.CurrentNick
push 0x806844f
push ebx
call dbg.send_spy
pop ecx
pop eax
push esi
push edi
call dbg.update_idletime
add esp, 0x10
test byte [ebx + 0x38d], 8
jne 0x804f3a0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x804f3a0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
mov edx, dword [rest]
push edx
call dbg.capslevel
add esp, 0x10
cmp eax, 0x31
jg 0x804f475
push eax
push 2
push ebx
push edi
call dbg.check_mass
add esp, 0x10
test eax, eax
jle 0x804f3f3
dec eax
jg 0x804f460
push eax
push str.Get_out_you_flooder_
push obj.CurrentNick
push esi
call dbg.sendkick
add esp, 0xc
push esi
push edi
push str._s_kicked_from__s_for_flooding
call dbg.send_statmsg
add esp, 0x10
sub esp, 8
push 0x1e
push ebx
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804f389
sub esp, 8
push esi
mov eax, dword [rest]
push eax
call dbg.check_kicksay
add esp, 0x10
test eax, eax
mov edx, eax
je 0x804f389
mov eax, dword [obj.CurrentUser]
test eax, eax
je 0x804f436
mov eax, dword [eax + 0x3c]
shr eax, 9
test al, al
jne 0x804f389
sub esp, 8
push obj.CurrentNick
mov edi, dword [edx + 0x34]
push edi
call dbg.formatgreet
push eax
push 0x806a12d
push obj.CurrentNick
push esi
call dbg.sendkick
add esp, 0x20
jmp 0x804f389
push eax
push edi
push obj.CurrentNick
push esi
call dbg.deop_ban
add esp, 0x10
jmp 0x804f3d0
push eax
push 1
push ebx
push edi
call dbg.check_mass
add esp, 0x10
test eax, eax
je 0x804f3b8
push eax
push str.STOP_YELLING_ALREADY___
push obj.CurrentNick
push esi
call dbg.sendkick
add esp, 0x10
jmp 0x804f3b8
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x810
lea eax, [arg]
push eax
mov ecx, dword [format]
push ecx
lea eax, [buf]
push eax
mov edi, dword [arg_8h]
xor esi, esi
call sym.imp.vsprintf
mov eax, dword [obj.botlinkSIZE]
add esp, 0x10
cmp esi, eax
mov ebx, dword [obj.botlinkBASE]
jge 0x805a63a
mov esi, esi
lea edi, [edi]
cmp byte [ebx], 0
je 0x805a62f
cmp ebx, edi
je 0x805a62f
cmp byte [ebx + 8], 3
je 0x805a642
inc esi
add ebx, 0x258
cmp esi, eax
jl 0x805a620
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
lea eax, [buf]
push eax
push ebx
call dbg.link_write
add esp, 0x10
mov eax, dword [obj.botlinkSIZE]
jmp 0x805a62f
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
mov edi, dword [arg_8h]
call dbg.chop
mov esi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
je 0x806701b
cmp byte [eax], 0
jne 0x8067040
sub esp, 8
mov eax, dword [0x8070940]
push eax
push edi
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push eax
call dbg.Atoi
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x806705f
mov eax, dword [eax]
test eax, eax
jle 0x806705f
cmp eax, 0xffff
jle 0x806706f
sub esp, 8
push str.Port_number_must_be_in_the_range_1_65535
push edi
call dbg.send_to_user
jmp 0x806702a
sub esp, 8
mov eax, dword [obj.current]
push esi
add eax, 0x296
push eax
call sym.imp.strcpy
mov edx, dword [ebx]
mov eax, dword [obj.current]
mov dword [eax + 0x2d8], edx
mov dword [eax + 0x2dc], 1
push edx
add eax, 0x296
push eax
push str.WinGate_has_been_set_to__s:_i
push edi
call dbg.send_to_user
add esp, 0x18
push str.Bot_must_reconnect_for_this_change_to_take_effect
jmp 0x8067067
push ebp
mov ebp, esp
sub esp, 0x18
mov dword [obj.upPack], 0
call sym.imp.getpid
xchg al, ah
ror eax, 0x10
xchg al, ah
mov dword [0x8075e44], eax
mov eax, 1
xchg al, ah
ror eax, 0x10
xchg al, ah
mov dword [0x8075e48], eax
mov eax, dword [obj.uptime]
xchg al, ah
ror eax, 0x10
xchg al, ah
mov dword [0x8075e4c], 0
mov dword [0x8075e50], eax
call sym.imp.rand
sub esp, 8
push str.uptime.energymech.net
push obj.uptimehost
mov dword [obj.uptimecookie], eax
mov dword [obj.uptimecount], 0
mov dword [obj.uptimelast], 0
mov dword [obj.uptimeip], 0xffffffff
mov dword [obj.mallocdoer], 0x805dc70
call dbg.mstrcpy
add esp, 0xc
push 0
push 2
push 2
call sym.imp.socket
add esp, 0x10
test eax, eax
mov edx, eax
mov dword [obj.uptimesock], eax
js 0x805dd8e
push ecx
push 0x10
lea eax, [ebp - 0x18]
push eax
push edx
mov dword [ebp - 0x18], 0
mov dword [var_10h], 0
mov dword [var_ch], 0
mov dword [var_14h], 0
mov byte [var_17h], 2
call sym.imp.bind
add esp, 0x10
test eax, eax
js 0x805dd80
sub esp, 8
push 3
mov eax, dword [obj.uptimesock]
push eax
call sym.imp.fcntl
or eax, 4
add esp, 0xc
push eax
push 4
mov ecx, dword [obj.uptimesock]
push ecx
call sym.imp.fcntl
xor eax, eax
leave
ret
lea esi, [esi]
sub esp, 0xc
mov eax, dword [obj.uptimesock]
push eax
call sym.imp.close
mov eax, 0xffffffff
mov dword [obj.uptimesock], 0xffffffff
jmp 0x805dd78
jmp dword [reloc.getpid]
jmp dword [reloc.rand]
jmp dword [reloc.socket]
jmp dword [reloc.bind]
jmp dword [reloc.fcntl]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ebx, dword [arg_8h]
xor esi, esi
test ebx, ebx
je 0x8058f17
cmp byte [ebx], 0
jne 0x8058f30
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x8058f30
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
push ebx
call sym.imp.strlen
mov edi, eax
mov al, byte [ebx]
add esp, 0x10
test al, al
je 0x8058f92
lea esi, [esi]
lea edi, [edi]
movsx edx, al
cmp edx, 0xff
ja 0x8058fc0
mov eax, dword [obj._CurrentRuneLocale]
mov eax, dword [eax + edx*4 + 0x34]
and eax, 0x100
test eax, eax
je 0x8058f8b
movsx edx, byte [ebx]
cmp edx, 0xff
ja 0x8058fb0
mov eax, dword [obj._CurrentRuneLocale]
mov eax, dword [eax + edx*4 + 0x34]
and eax, 0x8000
test eax, eax
je 0x8058f8b
inc esi
inc ebx
mov al, byte [ebx]
test al, al
jne 0x8058f50
lea eax, [esi + esi*4]
lea eax, [eax + eax*4]
shl eax, 2
cdq
idiv edi
jmp 0x8058f19
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push edx
call sym.imp.___runetype
add esp, 0x10
jmp 0x8058f81
mov esi, esi
sub esp, 0xc
push edx
call sym.imp.___runetype
add esp, 0x10
jmp 0x8058f64
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [obj.serverBASE]
test eax, eax
jne 0x80664f0
sub esp, 8
push str.No_servers_in_serverlist_
mov eax, dword [from]
push eax
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 0xc
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [name], eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
je 0x806663b
sub esp, 0xc
push eax
call dbg.Atoi
add esp, 0x10
test eax, eax
je 0x8066624
mov esi, dword [eax]
xor edi, edi
mov eax, dword [obj.serverSIZE]
cmp edi, eax
mov dword [n], 0
mov dword [dp], 0
mov ebx, dword [obj.serverBASE]
jge 0x8066560
mov esi, esi
lea edi, [edi]
cmp byte [ebx], 0
jne 0x80665d0
inc edi
add ebx, 0x114
cmp edi, eax
jl 0x8066550
mov edi, dword [n]
test edi, edi
je 0x80665b3
cmp dword [n], 1
je 0x8066588
push eax
mov eax, dword [name]
push eax
push str.Several_entries_for__s_exists__please_specify_port_also
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x80664e3
mov eax, dword [dp]
mov edx, dword [eax + 0x100]
push edx
mov eax, dword [name]
push eax
push str.Server_has_been_deleted:__s:_i
mov eax, dword [from]
push eax
call dbg.send_to_user
cld
mov ecx, 0x45
xor eax, eax
mov edi, dword [dp]
rep stosd dword es:[edi], eax
jmp 0x8066580
test esi, esi
je 0x80665c3
push esi
mov esi, dword [name]
push esi
push str.No_matching_entries_was_found_for__s:_i
jmp 0x8066577
push ebx
mov ecx, dword [name]
push ecx
push str.No_matching_entries_was_found_for__s:
jmp 0x8066577
nop
sub esp, 8
lea eax, [ebx + 8]
push eax
mov eax, dword [name]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8066608
test esi, esi
je 0x8066600
cmp dword [ebx + 0x100], esi
je 0x8066600
mov eax, dword [obj.serverSIZE]
jmp 0x8066555
lea esi, [esi]
mov dword [dp], ebx
inc dword [n]
jmp 0x80665f3
sub esp, 8
lea eax, [ebx + 0xa8]
push eax
mov eax, dword [name]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x80665f3
jmp 0x80665e7
sub esp, 8
mov eax, dword [0x80703b0]
push eax
mov eax, dword [from]
push eax
call dbg.usage
jmp 0x80664e3
xor esi, esi
jmp 0x8066528
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
pop edx
pop ecx
push 1
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8060a98
sub esp, 0xc
push ebx
call dbg.chop
mov dword [banstring], eax
mov dword [esp], ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
test eax, eax
je 0x8060a84
cmp byte [eax], 0
jne 0x8060aa0
mov eax, dword [obj.now]
push eax
mov eax, dword [banstring]
push eax
push edi
lea eax, [esi + 0x18]
push eax
call dbg.make_ban
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
push eax
call sym.imp.atol
add esp, 0x10
jmp 0x8060a89
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea eax, [rest]
push eax
mov edi, dword [arg_8h]
call dbg.chop
pop ebx
mov esi, eax
pop eax
push 3
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805f652
sub esp, 0xc
push edi
call dbg.getnick
pop edx
pop ecx
push eax
push obj.CurrentNick
call sym.imp.strcpy
sub esp, 0xc
push edi
call dbg.getuh
add esp, 0x10
push eax
push obj.CurrentNick
push str._Parts:__s___s_
push ebx
call dbg.send_spy
add esp, 0x18
mov eax, dword [obj.current]
push obj.CurrentNick
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805f622
mov al, byte [ebx + 0x38d]
or eax, 0x20
and eax, 0xffffffe7
mov byte [ebx + 0x38d], al
sub esp, 8
push esi
push 1
mov ecx, dword [obj.now]
push ecx
push str.none
push edi
push obj.CurrentNick
call dbg.make_seen
add esp, 0x18
push obj.CurrentNick
push ebx
call dbg.remove_chanuser
call dbg.check_all_steal
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edx, dword [nick]
xor eax, eax
mov al, byte [edx]
mov bl, byte [eax + obj.tolowertab]
mov eax, dword [obj.current]
lea edi, [eax + 0xb44]
mov eax, dword [eax + 0xb44]
test eax, eax
je 0x8063bf1
mov edx, eax
lea esi, [esi]
xor eax, eax
mov al, byte [edx + 0x18]
mov al, byte [eax + obj.tolowertab]
cmp bl, al
je 0x8063ce0
cmp bl, al
ja 0x8063bf1
mov eax, dword [edx]
test eax, eax
mov edi, edx
mov edx, eax
jne 0x8063bd0
mov esi, dword [nick]
sub esp, 0xc
push esi
mov dword [obj.mallocdoer], 0x8063ba0
call sym.imp.strlen
mov ecx, dword [userhost]
pop ebx
push ecx
mov ebx, eax
call sym.imp.strlen
pop edx
mov esi, dword [kicker]
push esi
add ebx, eax
call sym.imp.strlen
pop ecx
mov edx, dword [msg]
push edx
add ebx, eax
call sym.imp.strlen
lea eax, [eax + ebx + 0x1c]
mov dword [esp], eax
call dbg.MyMalloc
mov esi, eax
mov dword [Seen], eax
pop eax
mov eax, dword [nick]
push eax
call sym.imp.strlen
mov ebx, dword [Seen]
lea eax, [eax + ebx + 0x19]
mov dword [esi + 4], eax
pop eax
mov eax, dword [userhost]
push eax
call sym.imp.strlen
add eax, dword [ebx + 4]
inc eax
mov dword [ebx + 8], eax
pop eax
mov eax, dword [msg]
push eax
mov ebx, dword [Seen]
call sym.imp.strlen
add eax, dword [ebx + 8]
inc eax
mov dword [ebx + 0xc], eax
pop ebx
pop esi
mov ecx, dword [nick]
mov eax, dword [Seen]
push ecx
add eax, 0x18
push eax
call sym.imp.strcpy
pop eax
pop edx
mov eax, dword [userhost]
push eax
mov eax, dword [Seen]
mov eax, dword [eax + 4]
push eax
call sym.imp.strcpy
pop esi
pop eax
mov ebx, dword [msg]
push ebx
mov eax, dword [Seen]
mov ecx, dword [eax + 8]
push ecx
call sym.imp.strcpy
pop eax
pop edx
mov eax, dword [kicker]
push eax
mov eax, dword [Seen]
mov eax, dword [eax + 0xc]
push eax
call sym.imp.strcpy
mov edx, dword [Seen]
mov eax, dword [arg_14h]
mov dword [edx + 0x10], eax
mov eax, dword [arg_18h]
mov dword [edx + 0x14], eax
mov eax, dword [edi]
mov dword [edx], eax
mov dword [edi], edx
mov eax, dword [Seen]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
lea eax, [edx + 0x18]
push eax
mov eax, dword [nick]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8063cfe
mov edx, dword [edi]
jmp 0x8063be7
mov eax, dword [edi]
mov dword [Seen], eax
mov eax, dword [eax]
mov dword [edi], eax
sub esp, 0xc
lea eax, [Seen]
push eax
call dbg.MyFree
add esp, 0x10
jmp 0x8063bf1
push ebp
mov ebp, esp
push ebx
push ecx
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
je 0x804a955
lea esi, [esi]
lea edi, [edi]
mov al, byte [ebx + 0x38d]
shr al, 4
and eax, 3
dec eax
je 0x804a960
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804a940
mov ebx, dword [var_4h]
leave
ret
lea esi, [esi]
mov eax, dword [ebx + 0x1c]
test eax, eax
je 0x804a94f
mov edx, dword [eax]
test edx, edx
jne 0x804a94f
test byte [eax + 4], 2
jne 0x804a94f
sub esp, 0xc
mov eax, dword [ebx + 4]
push eax
call dbg.cycle_channel
add esp, 0x10
jmp 0x804a94f
push ebp
mov ebp, esp
push edi
push esi
mov edx, 8
push ebx
xor eax, eax
cld
mov edi, obj.my_entity
mov ecx, edx
sub esp, 0xc
mov dword [obj.cfgChan], 0
mov dword [obj.current], 0
mov dword [obj.cfgUser], 0
rep stosd dword es:[edi], eax
mov edi, obj.my_pass
mov ecx, edx
rep stosd dword es:[edi], eax
mov eax, str.._mech.set
mov dword [var_14h], 1
mov edi, obj.configfile
mov ecx, 0xb
mov esi, eax
repe cmpsb byte [esi], byte ptr es:[edi]
mov ebx, 0xffffffff
je 0x804a8e0
mov eax, dword [var_14h]
test eax, eax
jne 0x804a8b0
sub esp, 8
push dbg.readcfgfile_callback
push ebx
call dbg.readline
mov dword [esp], ebx
call sym.imp.close
mov eax, dword [obj.botlist]
add esp, 0x10
test eax, eax
je 0x804a868
mov edi, dword [obj.sigmaster]
test edi, edi
jne 0x804a73e
or byte [eax + 0x3ac], 4
inc dword [obj.sigmaster]
cmp dword [obj.linkport], 0xffffffff
je 0x804a754
cmp byte [obj.my_entity], 0
je 0x804a844
mov eax, dword [obj.current]
test eax, eax
je 0x804a76b
mov esi, dword [eax + 0xb34]
test esi, esi
je 0x804a826
sub esp, 0xc
push str.init:_Mech_s__added___
mov dword [var_14h], 0
call sym.imp.printf
mov ebx, dword [obj.botlist]
add esp, 0x10
test ebx, ebx
je 0x804a7f8
lea esi, [esi]
cmp dword [var_14h], 0x1e
jg 0x804a814
mov edx, dword [var_14h]
push ecx
lea edi, [ebx + 0x220]
test edx, edx
push edi
mov eax, 0x8067271
jle 0x804a80d
push eax
push 0x8069e64
call sym.imp.printf
mov ecx, edi
mov esi, esi
lea edi, [edi]
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x804a7c0
test edx, 0x8080
jne 0x804a7e5
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, edi
mov ebx, dword [ebx]
add dword [var_14h], ecx
add esp, 0x10
test ebx, ebx
jne 0x804a790
sub esp, 0xc
push 0x8067366
call sym.imp.puts
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov eax, sym..rodata
jmp 0x804a7aa
sub esp, 0xc
push str.__...
call sym.imp.printf
add esp, 0x10
jmp 0x804a7f8
push ebx
add eax, 0x220
push eax
push obj.ERR_INIT
push str._s__s_will_not_join_any_channels_n
call sym.imp.printf
add esp, 0x10
jmp 0x804a76b
sub esp, 8
push obj.ERR_INIT
push str._s_Entity_name_not_set__deactivating_linkport_n
call sym.imp.printf
mov dword [obj.linkport], 0xffffffff
add esp, 0x10
jmp 0x804a754
sub esp, 0xc
push str.init:_Error:_No_bots_in_the_configfile
call sym.imp.puts
mov eax, dword [obj.debug_on_exit]
add esp, 0x10
test eax, eax
je 0x804a891
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov eax, dword [obj.do_exec]
test eax, eax
je 0x804a89f
call dbg.mech_exec
sub esp, 0xc
push 1
call sym.imp.exit
lea esi, [esi]
sub esp, 8
push 0
push obj.configfile
call sym.imp.open
add esp, 0x10
test eax, eax
mov ebx, eax
jns 0x804a701
sub esp, 8
push obj.configfile
push str.init:_Couldnt_open_the_file__s_n
call sym.imp.printf
jmp 0x804a875
sub esp, 8
push 0
push str.._mech.session
call sym.imp.open
add esp, 0x10
test eax, eax
mov ebx, eax
js 0x804a6f6
sub esp, 0xc
push str.init:_Restoring_previously_saved_session...
call sym.imp.puts
mov dword [var_14h], 0
add esp, 0x10
jmp 0x804a6f6
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edx, dword [obj.current]
xor edi, edi
xor esi, esi
cmp edi, dword [edx + 0x71c]
mov dword [best], 0
mov ebx, dword [edx + 0x720]
jge 0x8061fae
nop
lea esi, [esi]
cmp byte [ebx], 0
je 0x8061fa2
mov al, byte [ebx + 0x3e]
shr al, 1
and eax, 7
cmp eax, 3
je 0x8061fc0
inc esi
add ebx, 0x48
cmp esi, dword [edx + 0x71c]
jl 0x8061f90
lea esp, [var_ch]
pop ebx
pop esi
mov eax, edi
pop edi
pop ebp
ret
nop
lea esi, [esi]
mov eax, dword [channel]
test eax, eax
je 0x8062000
sub esp, 8
mov eax, dword [ebx + 0x2c]
push eax
mov eax, dword [channel]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8062000
mov eax, dword [ebx + 0x2c]
cmp byte [eax], 0x2a
je 0x8062000
mov eax, dword [channel]
cmp byte [eax], 0x2a
je 0x8062000
mov edx, dword [obj.current]
jmp 0x8061fa2
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov ecx, dword [string]
push ecx
mov edx, dword [ebx + 0x38]
push edx
call dbg.num_matches
add esp, 0x10
cmp eax, dword [best]
jle 0x8061fee
mov dword [best], eax
mov edi, ebx
jmp 0x8061fee
push ebp
mov ebp, esp
mov eax, dword [rest]
push esi
test eax, eax
push ebx
mov ebx, dword [arg_8h]
je 0x8051df4
cmp byte [eax], 0
jne 0x8051e20
push eax
mov eax, dword [obj.current]
mov eax, dword [eax + 0xb38]
test eax, eax
mov edx, 0x806f231
je 0x8051e0c
mov edx, dword [eax + 4]
push edx
push str.Current_channel:__s
push ebx
call dbg.send_to_user
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
sub esp, 0xc
lea eax, [rest]
push eax
call dbg.chop
pop edx
pop ecx
push 1
push eax
mov esi, eax
call dbg.find_channel
add esp, 0x10
test eax, eax
mov edx, eax
je 0x8051e61
mov eax, dword [obj.current]
mov dword [eax + 0xb38], edx
push eax
mov eax, dword [edx + 4]
push eax
push str.Current_channel_set_to__s
push ebx
call dbg.send_to_user
add esp, 0x10
jmp 0x8051e18
push eax
push esi
push obj.ERR_CHAN
jmp 0x8051e56
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
mov eax, dword [rest]
add esp, 0x10
test eax, eax
je 0x806083c
cmp byte [eax], 0
je 0x806083c
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
test ebx, ebx
je 0x806083c
lea esi, [esi]
lea edi, [edi]
cmp dword [ebx + 0x10], 5
je 0x8060850
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8060830
mov ebx, dword [var_4h]
leave
ret
jmp 0x8060850
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [rest]
cmp byte [eax], 0x3a
je 0x8060870
push ecx
mov edx, dword [rest]
push edx
push str.Channels___________s
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x8060836
inc eax
mov dword [rest], eax
jmp 0x8060858
push ebp
mov ebp, esp
push ebx
sub esp, 0x808
lea eax, [arg]
push eax
mov eax, dword [format]
lea ebx, [buf]
push eax
push ebx
call sym.imp.vsprintf
add esp, 0xc
push ebx
mov ebx, dword [to]
push ebx
push str.PRIVMSG__s_:
call dbg.send_to_server
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x68
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [handle], eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, ebx
mov ebx, eax
je 0x8052980
mov al, byte [eax]
test al, al
je 0x8052980
cmp al, 0x23
je 0x80527e5
sub esp, 8
push 0x806e306
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8052980
mov al, byte [ebx]
cmp al, 0x2a
je 0x8052b50
sub esp, 8
push ebx
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
mov edi, eax
jge 0x8052810
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 0xc
mov eax, dword [handle]
push eax
call sym.imp.strlen
add esp, 0x10
cmp eax, 0xc
jbe 0x8052837
push ebx
push 0xc
push str.Handle_must_be_between_1_and__i_chars_in_length
mov eax, dword [from]
push eax
call dbg.send_to_user
jmp 0x8052804
sub esp, 0xc
mov ecx, dword [handle]
push ecx
call dbg.find_handle
add esp, 0x10
test eax, eax
je 0x8052856
push edx
add eax, 8
push eax
push str.Handle__s_is_already_in_use
jmp 0x805282c
sub esp, 0xc
push esi
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [nick], eax
je 0x8052b3e
sub esp, 0xc
push esi
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [level], eax
je 0x8052b31
sub esp, 0xc
push esi
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [aopa], eax
je 0x8052b25
sub esp, 0xc
push esi
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [prota], eax
je 0x8052b19
sub esp, 0xc
push esi
call dbg.chop
mov dword [pass], eax
mov esi, dword [level]
pop eax
push esi
call dbg.Atoi
add esp, 0x10
test eax, eax
je 0x8052980
mov eax, dword [eax]
cmp eax, 0xc8
mov dword [axs], eax
je 0x80528e8
cmp eax, 0x64
ja 0x8052b0c
cmp edi, 0x64
je 0x80528f6
cmp dword [axs], edi
jg 0x8052b00
push eax
push 1
mov eax, dword [nick]
push eax
mov eax, dword [from]
push eax
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8052804
sub esp, 8
push 0x806a107
push eax
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x8052934
push eax
push esi
push str.Problem_adding__s__global_mask_
jmp 0x805282c
sub esp, 8
push esi
push str.__.
call dbg.matches
add esp, 0x10
test eax, eax
je 0x8052955
push eax
push esi
push str.Problem_adding__s__invalid_mask_
jmp 0x805282c
sub esp, 0xc
mov edi, dword [prota]
push edi
call dbg.Atoi
add esp, 0x10
test eax, eax
je 0x8052980
mov eax, dword [eax]
test eax, eax
mov dword [var_58h], eax
js 0x8052980
cmp eax, 4
jle 0x8052998
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov esi, dword [0x8070270]
push esi
mov ebx, dword [from]
push ebx
call dbg.usage
jmp 0x8052804
sub esp, 0xc
mov ecx, dword [aopa]
push ecx
call dbg.Atoi
add esp, 0x10
test eax, eax
je 0x8052980
mov eax, dword [eax]
test eax, eax
mov dword [var_5ch], eax
js 0x8052980
dec eax
jg 0x8052980
sub esp, 8
push ebx
push esi
call dbg.is_user
add esp, 0x10
test eax, eax
jne 0x8052ada
cmp dword [axs], 0xc8
sete al
and eax, 0xff
dec eax
and dword [pass], eax
je 0x80529ed
mov eax, dword [pass]
cmp byte [eax], 0
jne 0x8052ac5
mov byte [passwd], 0
lea edi, [passwd]
sub esp, 8
cmp byte [passwd], 0
sete al
and eax, 0xff
dec eax
and edi, eax
push edi
push ebx
mov eax, dword [var_58h]
push eax
mov eax, dword [var_5ch]
push eax
mov eax, dword [axs]
push eax
mov eax, dword [handle]
push eax
call dbg.add_to_userlist
add esp, 0x20
test eax, eax
je 0x8052aac
sub esp, 8
push esi
push eax
call dbg.addmasktouser
mov dword [esp], ebx
mov eax, dword [handle]
push esi
push eax
push str._s_has_been_added_as__s_on__s
mov edi, dword [from]
push edi
call dbg.send_to_user
mov esi, dword [pass]
add esp, 0x1c
test esi, esi
je 0x8052a5a
mov eax, dword [pass]
cmp byte [eax], 0
jne 0x8052a5f
mov eax, sym..rodata
mov ebx, dword [pass]
test ebx, ebx
push eax
je 0x8052aa5
mov eax, dword [pass]
cmp byte [eax], 0
je 0x8052aa5
mov eax, str.Password:
mov edx, dword [var_5ch]
push eax
mov ecx, dword [var_58h]
test edx, edx
push ecx
mov eax, 0x8069e79
jne 0x8052a8a
mov eax, 0x8069e7d
push eax
mov eax, dword [axs]
push eax
push str.Access_level:__i__Auto_op:__s__Protect_level:__i___s__s
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x20
jmp 0x8052804
mov eax, sym..rodata
jmp 0x8052a74
sub esp, 8
push str.Problem_adding_the_user
mov edi, dword [from]
push edi
call dbg.send_to_user
add esp, 0x10
jmp 0x8052804
sub esp, 8
push eax
lea edi, [passwd]
push edi
call dbg.makepass
add esp, 0x10
jmp 0x80529f4
sub esp, 0xc
push ebx
push esi
mov edx, dword [nick]
push edx
push str._s__s_on__s_is_already_a_user
mov eax, dword [from]
push eax
call dbg.send_to_user
jmp 0x8052804
lea esi, [esi]
lea edi, [edi]
push edx
push ebx
push str.Level_must_be_less_than_or_equal_to_yours_on__s
jmp 0x805282c
push ecx
push 0x64
push str.Valid_levels_are_from_0_thru__i
jmp 0x805282c
mov dword [prota], 0x806d397
jmp 0x80528b2
mov dword [aopa], 0x806d397
jmp 0x805289b
sub esp, 8
push str.No_level_specified
jmp 0x805282c
sub esp, 8
push str.No_nick_or_userhost_specified
jmp 0x805282c
nop
lea esi, [esi]
sub esp, 8
push 0
jmp 0x80527f1
push ebp
mov ebp, esp
push ebx
push eax
mov eax, dword [obj.current]
mov eax, dword [eax + 0x10]
mov ebx, dword [arg_8h]
push eax
push 0x114
mov eax, dword [obj.serverSIZE]
push eax
mov eax, dword [obj.serverBASE]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
mov edx, eax
je 0x80656c5
mov eax, dword [eax + 0x100]
cmp byte [edx + 0xa8], 0
mov dword [cmdlevel], eax
je 0x80656c0
lea eax, [edx + 0xa8]
mov dword [arg_8h], ebx
mov dword [rest], eax
mov dword [to], str.Current_Server:__s:_i
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
jmp dbg.send_to_user
lea eax, [edx + 8]
jmp 0x80656a8
mov dword [arg_8h], ebx
mov dword [to], str.Current_Server:__not_in_serverlist_
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
jmp dbg.send_to_user
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
push str.._randfiles_randsignoff.e
call dbg.randstring
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8066450
call dbg.close_all_dcc
mov dword [obj.do_exec], 1
mov dword [from], ebx
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
jmp dbg.kill_all_bots
mov esi, esi
lea edi, [edi]
mov ebx, str.rehash_
jmp 0x806642a
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
test ebx, ebx
mov byte [global_res], 0
je 0x8063780
sub esp, 0xc
mov esi, dword [ebx + 0x30]
push esi
call dbg.getnick
mov esi, eax
mov eax, dword [ebx + 0x40]
add esp, 0x10
test eax, eax
jne 0x8063750
sub esp, 8
push esi
push 0x8074240
call dbg.Strcat
pop eax
pop edx
push 0x8068373
push 0x8074240
call dbg.Strcat
mov eax, dword [ebx + 0x34]
add esp, 0x10
test eax, eax
jne 0x8063740
sub esp, 8
push str.GET_THE_HELL_OUT___
push 0x8074240
call dbg.Strcat
add esp, 0x10
lea esp, [var_8h]
pop ebx
pop esi
mov eax, 0x8074240
pop ebp
ret
lea esi, [esi]
sub esp, 8
push eax
jmp 0x8063720
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push eax
call dbg.time2small
pop edx
pop ecx
push eax
push 0x8074240
call dbg.Strcat
pop ecx
pop eax
push 0x8067364
push 0x8074240
call dbg.Strcat
add esp, 0x10
jmp 0x80636ef
nop
sub esp, 8
push str.YOU_ARE_SHITLISTED___
jmp 0x8063720
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x10
push 0x1b6
push 0x601
push str.._mech.levels
call sym.imp.open
mov esi, eax
add esp, 0x10
xor eax, eax
test esi, esi
js 0x804f71f
mov eax, dword [obj.mcmd]
test eax, eax
mov edi, dword [obj.dodebug]
mov dword [obj.dodebug], 0
je 0x804f70b
xor ebx, ebx
lea esi, [esi]
lea edi, [edi]
xor eax, eax
mov al, byte [ebx + 0x807026c]
push eax
mov eax, dword [ebx + obj.mcmd]
push eax
push str._s__d_n
push esi
add ebx, 0x10
call dbg.send_to_socket
mov eax, dword [ebx + obj.mcmd]
add esp, 0x10
test eax, eax
jne 0x804f6e0
sub esp, 0xc
push esi
call sym.imp.close
mov dword [obj.dodebug], edi
mov eax, 1
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x14
push obj.now
call sym.imp.time
mov dword [esp], str._sigusr2__n
call dbg.debug
pop eax
pop edx
push dbg.sig_usr2
push 0x1f
call sym.imp.signal
push 0
push 0
push 0
push 0
call dbg.do_debug
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x10
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x804935f
sub esp, 8
push eax
mov eax, dword [obj.current]
add eax, 0x724
push eax
call sym.imp.strcpy
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [obj.current]
mov esi, dword [eax + 0xb34]
test esi, esi
je 0x804aca8
nop
lea esi, [esi]
sub esp, 8
push 0x17
push esi
call dbg.get_int_varc
add esp, 0x10
test eax, eax
jne 0x804acb0
mov esi, dword [esi]
test esi, esi
jne 0x804ac90
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
mov eax, dword [esi + 4]
push eax
call dbg.usermode
add esp, 0x10
and eax, 2
je 0x804aca2
sub esp, 8
push 0xa
push esi
call dbg.get_int_varc
lea eax, [eax + eax*2]
mov ebx, dword [esi + 0x1c]
lea eax, [eax + eax*4]
add esp, 0x10
test ebx, ebx
lea edi, [eax*4]
je 0x804aca2
jmp 0x804ad00
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [obj.now]
sub eax, dword [ebx + 0x38]
cmp eax, edi
jge 0x804ad20
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804ad00
jmp 0x804aca2
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [esi + 4]
push eax
push ebx
call dbg.get_nuh
mov dword [esp], eax
call dbg.is_user
add esp, 0x10
test eax, eax
je 0x804ad0c
test byte [ebx + 4], 2
jne 0x804ad0c
sub esp, 8
push 0xa
push esi
call dbg.get_int_varc
add esp, 0x10
push eax
push str.Idle_for__s_minutes
mov eax, dword [ebx + 0x3c]
push eax
mov eax, dword [esi + 4]
push eax
call dbg.sendkick
add esp, 0x10
jmp 0x804ad0c
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x118
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
mov edi, eax
mov dword [esp], esi
call dbg.password_needed
mov ebx, eax
mov dword [esp], esi
call dbg.verified
add esp, 0x10
test ebx, ebx
je 0x8051cf0
test eax, eax
jne 0x8051cd0
test edi, edi
je 0x8051c08
cmp byte [edi], 0
jne 0x8051c30
sub esp, 8
push str.No_password_given__not_verified
push esi
call dbg.send_to_user
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x8051c30
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
push edi
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x32
jbe 0x8051c45
mov byte [edi + 0x32], 0
sub esp, 8
push edi
push esi
call dbg.correct_password
add esp, 0x10
test eax, eax
je 0x8051cb8
sub esp, 8
push str.You_are_now_officially_immortal
push esi
call dbg.send_to_user
pop ebx
pop eax
mov eax, dword [obj.current]
push esi
add eax, 0xb2c
push eax
call dbg.make_time
add esp, 0x10
test eax, eax
mov edx, eax
je 0x8051c88
mov eax, dword [obj.now]
mov dword [edx + 0xc], eax
sub esp, 0xc
push obj.CurrentNick
call dbg.op_all_chan
push edi
push esi
push 0x806e50a
lea ebx, [tms]
push ebx
call sym.imp.sprintf
add esp, 0x18
push ebx
push 0
call dbg.Link_userverify
jmp 0x8051c16
sub esp, 8
push str.Incorrect_password__not_authorized
jmp 0x8051c10
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push str.You_have_already_been_authorized
push esi
call dbg.send_to_user
jmp 0x8051c19
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push str.You_dont_need_a_password_to_do_commands
jmp 0x8051cd8
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
xor esi, esi
mov edx, dword [obj.botlinkSIZE]
cmp esi, edx
mov edi, dword [arg_ch]
mov ebx, dword [obj.botlinkBASE]
jge 0x8059798
mov esi, esi
cmp byte [ebx], 0
je 0x805978d
movsx eax, byte [ebx + 9]
cmp eax, edi
je 0x80597a4
inc esi
add ebx, 0x258
cmp esi, edx
jl 0x8059780
xor edx, edx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
sub esp, 8
mov eax, dword [name]
push eax
lea eax, [ebx + 0xc]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edx, ebx
je 0x805979a
mov edx, dword [obj.botlinkSIZE]
jmp 0x805978d
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
pop ebx
pop edx
push 3
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
mov edx, eax
je 0x8060b0d
mov al, byte [eax + 0x38d]
and eax, 0xffffffcf
or eax, 0x22
mov byte [edx + 0x38d], al
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push 0x12
mov ebx, dword [arg_ch]
push ebx
mov esi, dword [arg_8h]
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x8058407
test byte [ebx + 0x38d], 8
jne 0x8058420
xor edx, edx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov ebx, dword [ebx + 4]
push ebx
push esi
mov dword [channel], ebx
call dbg.is_user
add esp, 0x10
xor edx, edx
test eax, eax
jne 0x8058409
sub esp, 8
mov eax, dword [channel]
push eax
push esi
call dbg.find_shit
add esp, 0x10
xor edx, edx
test eax, eax
mov edi, eax
je 0x8058409
mov eax, dword [eax + 0x38]
test eax, eax
je 0x8058407
cmp byte [eax], 0
je 0x8058407
mov eax, dword [edi + 0x3c]
shr eax, 9
and eax, 0xff
cmp eax, 1
jg 0x80584b4
dec eax
jne 0x8058407
sub esp, 0xc
push esi
call dbg.getnick
pop edx
pop ecx
push eax
mov edi, dword [channel]
push edi
call dbg.usermode
add esp, 0x10
and eax, 2
je 0x8058407
sub esp, 0xc
push esi
call dbg.getnick
add esp, 0xc
push eax
push str._o__s
mov ebx, dword [channel]
push ebx
call dbg.sendmode
add esp, 0x10
jmp 0x8058407
sub esp, 0xc
push edi
call dbg.get_shitreason
mov ebx, eax
add esp, 0xc
mov eax, dword [edi + 0x38]
push eax
push edi
push esi
call dbg.getnick
pop edx
pop ecx
push eax
mov eax, dword [channel]
push eax
call dbg.deop_ban
push ebx
push 0x806a12d
push eax
push esi
call dbg.getnick
pop esi
pop edi
push eax
mov ebx, dword [channel]
push ebx
call dbg.sendkick
mov edx, 1
jmp 0x8058409
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ecx, dword [obj.CurrentShit]
test ecx, ecx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
mov edi, dword [arg_10h]
je 0x804e580
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push ebx
mov eax, dword [obj.current]
add eax, 0xb2c
push eax
call dbg.find_time
add esp, 0x10
test eax, eax
mov edx, eax
je 0x804e5a5
mov eax, dword [obj.now]
mov dword [edx + 0xc], eax
cmp byte [esi], 0x23
je 0x804e658
sub esp, 8
push 1
push ebx
call dbg.search_list
add esp, 0x10
test eax, eax
je 0x804e60c
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb3c]
test ebx, ebx
je 0x804e56c
nop
test byte [ebx + 0x208], 1
jne 0x804e5f0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804e5d0
jmp 0x804e56c
jmp 0x804e5f0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push edi
push obj.CurrentNick
push 0x80684aa
lea eax, [ebx + 0x20c]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x804e5d9
sub esp, 8
push 0x22
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804e63b
sub esp, 8
movsx eax, byte [edi]
push eax
push 0x806843f
call sym.imp.strchr
add esp, 0x10
test eax, eax
jne 0x804e56c
mov dword [arg_10h], edi
mov dword [arg_ch], obj.CurrentNick
mov dword [arg_8h], str._message____s__s
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_spymsg
sub esp, 8
push 1
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
mov dword [Chan], eax
je 0x804e56c
push edi
push obj.CurrentNick
push 0x80684aa
push eax
call dbg.send_spy
pop eax
pop edx
push esi
push ebx
call dbg.update_idletime
mov dword [esp], edi
call dbg.capslevel
add esp, 0x10
cmp eax, 0x31
jle 0x804e6b3
push eax
push 1
mov eax, dword [Chan]
push eax
push ebx
call dbg.check_mass
add esp, 0x10
test eax, eax
jne 0x804e77a
push eax
push 2
mov eax, dword [Chan]
push eax
push ebx
call dbg.check_mass
add esp, 0x10
test eax, eax
jle 0x804e709
dec eax
jg 0x804e6f7
push edx
push str.Get_out_you_flooder_
push obj.CurrentNick
push esi
call dbg.sendkick
mov dword [arg_10h], esi
mov dword [arg_ch], ebx
mov dword [arg_8h], str._s_kicked_from__s_for_flooding
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_statmsg
push ecx
push ebx
push obj.CurrentNick
push esi
call dbg.deop_ban
add esp, 0x10
jmp 0x804e6ca
sub esp, 8
push 0x1e
mov eax, dword [Chan]
push eax
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804e56c
sub esp, 8
push esi
push edi
call dbg.check_kicksay
add esp, 0x10
test eax, eax
mov edx, eax
je 0x804e56c
mov eax, dword [obj.CurrentUser]
test eax, eax
je 0x804e750
mov eax, dword [eax + 0x3c]
shr eax, 9
test al, al
jne 0x804e56c
sub esp, 8
push obj.CurrentNick
mov eax, dword [edx + 0x34]
push eax
call dbg.formatgreet
push eax
push 0x806a12d
push obj.CurrentNick
push esi
call dbg.sendkick
add esp, 0x20
jmp 0x804e56c
mov dword [arg_10h], str.STOP_YELLING_ALREADY___
mov dword [arg_ch], obj.CurrentNick
mov dword [arg_8h], esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.sendkick
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x824
push 1
mov esi, dword [arg_ch]
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804bfc0
push eax
push esi
push str.Names_on__s:
mov eax, dword [from]
push eax
call dbg.send_to_user
mov ebx, dword [ebx + 0x1c]
add esp, 0x10
test ebx, ebx
je 0x804bf98
mov dword [sendit], 0
mov byte [buffer], 0
lea esi, [esi]
lea edi, [edi]
test ebx, ebx
je 0x804bf86
lea ecx, [buffer]
mov esi, ecx
mov edi, ecx
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x804bef0
test edx, 0x8080
jne 0x804bf15
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, edi
cmp ecx, 0x18f
ja 0x804bf86
mov eax, dword [ebx + 4]
inc dword [sendit]
test eax, 1
jne 0x804bf70
and eax, 2
jne 0x804bf5d
sub esp, 8
mov eax, dword [ebx + 0x3c]
push eax
push esi
call dbg.Strcat
pop ecx
pop edi
push 0x8067364
push esi
call dbg.Strcat
mov ebx, dword [ebx]
add esp, 0x10
jmp 0x804bed0
sub esp, 8
push 0x806a108
push esi
call dbg.Strcat
add esp, 0x10
jmp 0x804bf39
sub esp, 8
push 0x8069001
push esi
call dbg.Strcat
add esp, 0x10
mov eax, dword [ebx + 4]
jmp 0x804bf34
mov edx, dword [sendit]
test edx, edx
jne 0x804bfa5
test ebx, ebx
jne 0x804beb2
mov eax, 1
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push eax
lea eax, [buffer]
push eax
push 0x806a12d
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x804bf90
push ebx
push esi
push str.Im_not_on__s__checking_old_channels...
mov ecx, dword [from]
push ecx
call dbg.send_to_user
pop eax
pop edx
push 2
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804bfef
push eax
push esi
push str.Users_on__s_the_last_time_I_was_there:
jmp 0x804be9b
sub esp, 8
mov eax, dword [from]
push str.Nope...not_found
push eax
call dbg.send_to_user
xor eax, eax
jmp 0x804bf9d
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
mov esi, dword [arg_8h]
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test edi, edi
mov ebx, eax
je 0x8054a56
cmp byte [edi], 0
je 0x8054a56
test eax, eax
je 0x8054a56
cmp byte [eax], 0
jne 0x8054a70
sub esp, 8
mov ebx, dword [0x8070710]
push ebx
push esi
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
sub esp, 0xc
push eax
call sym.imp.strlen
add esp, 0x10
cmp eax, 4
ja 0x8054a91
push ecx
push 4
push str.Password_must_be_at_least__i_characters_long
push esi
call dbg.send_to_user
jmp 0x8054a66
sub esp, 0xc
push ebx
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x31
jbe 0x8054aa6
mov byte [ebx + 0x32], 0
sub esp, 0xc
push edi
call dbg.find_handle
add esp, 0x10
test eax, eax
mov dword [User], eax
je 0x8054b4f
mov eax, dword [User]
sub esp, 8
mov edx, dword [eax + 0x2c]
push edx
push esi
call dbg.get_userlevel
mov edx, dword [User]
mov edi, eax
mov eax, dword [edx + 0x3c]
shr eax, 9
and eax, 0xff
add esp, 0x10
cmp edi, eax
jl 0x8054afe
sub esp, 8
push str.none
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8054b2b
cmp edi, 0x4f
jg 0x8054b08
sub esp, 8
push str.Access_denied
jmp 0x8054a89
mov edi, dword [User]
add edi, 0x15
cld
mov ecx, 5
rep stosd dword es:[edi], eax
mov byte [edi], 0
push eax
mov eax, dword [User]
add eax, 8
push eax
push str.Password_for__s_has_been_removed
jmp 0x8054a89
sub esp, 8
mov eax, dword [User]
push ebx
add eax, 0x15
push eax
call dbg.makepass
mov eax, dword [User]
add esp, 0xc
add eax, 8
push eax
push str.New_password_for__s_has_been_set
jmp 0x8054a89
sub esp, 8
push str.Unknown_handle
jmp 0x8054a89
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x424
mov edi, dword [arg_8h]
mov eax, dword [obj.now]
mov dword [edi + 0x384], eax
push 0xd
push 0
call dbg.get_int_varc
mov dword [max], eax
add esp, 0xc
mov eax, dword [edi + 4]
push eax
push str.MODE__s_
lea eax, [modes]
push eax
call sym.imp.sprintf
mov byte [nicks], 0
mov eax, dword [edi + 0x380]
xor esi, esi
add esp, 0x10
test eax, eax
mov dword [end], 0
mov dword [sp], eax
je 0x8050d9e
mov esi, esi
lea edi, [edi]
cmp esi, dword [max]
jge 0x8050eaa
sub esp, 8
add eax, 4
push eax
push edi
call dbg.find_chanuser
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8050d8c
cmp byte [eax + 4], 0
je 0x8050e50
mov eax, dword [sp]
mov eax, dword [eax]
test eax, eax
mov dword [sp], eax
jne 0x8050d60
push eax
lea eax, [nicks]
push eax
lea eax, [modes]
push eax
push str._parse_avoice___s__s_n
call dbg.debug
mov eax, dword [edi + 0x380]
add esp, 0x10
test eax, eax
mov dword [sp], eax
je 0x8050df2
lea esi, [sp]
sub esp, 0xc
mov ebx, dword [eax]
push esi
call dbg.MyFree
add esp, 0x10
cmp ebx, dword [end]
je 0x8050df2
test ebx, ebx
mov eax, ebx
mov dword [sp], ebx
jne 0x8050dd0
mov eax, dword [end]
mov dword [edi + 0x380], eax
push eax
lea eax, [nicks]
push eax
lea eax, [modes]
push eax
push 0x8069012
call dbg.send_to_server
mov ebx, dword [edi + 0x1c]
add esp, 0x10
test ebx, ebx
je 0x8050e3a
jmp 0x8050e30
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
and dword [ebx + 4], 0xfffffffb
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8050e30
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x806b7f5
lea eax, [modes]
push eax
call dbg.Strcat
add esp, 0x10
test esi, esi
jne 0x8050e91
mov eax, dword [sp]
sub esp, 8
add eax, 4
push eax
lea eax, [nicks]
push eax
call dbg.Strcat
inc esi
or dword [ebx + 4], 4
add esp, 0x10
jmp 0x8050d8c
sub esp, 8
push 0x8067364
lea eax, [nicks]
push eax
call dbg.Strcat
add esp, 0x10
jmp 0x8050e6b
mov dword [end], eax
jmp 0x8050d9e
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [arg_8h]
mov ebx, dword [arg_14h]
mov dword [from], eax
mov esi, dword [arg_10h]
mov edi, dword [arg_ch]
push ebx
push esi
push edi
push eax
call dbg.do_savelists
push ebx
push esi
push edi
mov esi, dword [from]
push esi
call dbg.do_savelevels
mov eax, dword [obj.current]
add esp, 0x18
mov ebx, dword [eax + 0xb40]
push ebx
add eax, 0xb44
push eax
call dbg.write_seenlist
add esp, 0x10
test eax, eax
je 0x8054e00
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov eax, dword [obj.current]
mov eax, dword [eax + 0xb40]
mov dword [arg_ch], eax
mov dword [arg_8h], str.SeenList_could_not_be_saved_to_file__s
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_user
push ebp
mov ebp, esp
push ebx
push eax
mov eax, dword [obj.current]
add eax, 0x724
mov dword [cmdlevel], eax
mov ebx, dword [arg_8h]
call dbg.saveuserlist
test eax, eax
mov edx, sym..rodata
jne 0x8052cf8
mov edx, str._could_not_be
mov dword [rest], edx
mov dword [to], str.Lists_s_saved_to_file__s
mov dword [arg_8h], ebx
pop eax
pop ebx
pop ebp
jmp dbg.send_to_user
push ebp
mov ebp, esp
test byte [obj.will], 1
push esi
push ebx
jne 0x80639a0
mov eax, 1
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
push edx
push 0x1b6
push 0x601
mov eax, dword [filename]
push eax
call sym.imp.open
mov esi, eax
add esp, 0x10
xor eax, eax
test esi, esi
js 0x8063993
mov eax, dword [arg_8h]
mov ebx, dword [eax]
test ebx, ebx
je 0x80639ed
nop
lea esi, [esi]
mov eax, dword [ebx + 0x10]
sub eax, dword [obj.now]
cmp eax, 0x127500
jg 0x80639e7
mov eax, dword [ebx + 0x14]
test eax, eax
jne 0x8063a00
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80639d0
sub esp, 0xc
push esi
call sym.imp.close
jmp 0x806398e
nop
lea esi, [esi]
mov eax, dword [ebx + 8]
push eax
mov eax, dword [ebx + 0x14]
push eax
mov eax, dword [ebx + 0x10]
push eax
mov eax, dword [ebx + 0xc]
push eax
mov ecx, dword [ebx + 4]
push ecx
lea eax, [ebx + 0x18]
push eax
push str._s__s__s__li__i__s_n
push esi
call dbg.send_to_socket
add esp, 0x20
jmp 0x80639e7
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [arg_8h]
mov dword [from], eax
cmp byte [eax], 0x24
je 0x8053f70
mov edx, dword [obj.current]
xor edi, edi
cmp edi, dword [edx + 0xb24]
mov dword [var_18h], edx
mov ebx, dword [edx + 0xb28]
mov dword [i], 0
jge 0x8053f70
lea esi, [esi]
lea edi, [edi]
cmp byte [ebx], 0
je 0x8053f59
mov eax, str.spymsg
lea esi, [ebx + 1]
mov ecx, 7
cld
mov edi, eax
repe cmpsb byte [esi], byte ptr es:[edi]
je 0x8053f80
inc dword [i]
mov eax, dword [i]
mov edi, dword [var_18h]
add ebx, 0xa1
cmp eax, dword [edi + 0xb24]
jl 0x8053f40
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
mov eax, dword [from]
push eax
lea eax, [ebx + 0x51]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8053fa2
mov edx, dword [obj.current]
mov dword [var_18h], edx
jmp 0x8053f59
push eax
push 0xa1
push 0
push ebx
call sym.imp.memset
mov eax, dword [from]
mov dword [to], str.No_longer_redirecting_messages_to_you
mov dword [arg_8h], eax
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_user
mov edx, dword [obj.now]
mov eax, edx
push ebp
sub eax, dword [global_last]
mov ebp, esp
cmp eax, 0x1d
push esi
push ebx
mov ecx, dword [arg_8h]
jle 0x804c139
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
mov dword [global_last], edx
je 0x804c139
lea eax, [ecx + ecx*2]
lea eax, [eax + eax*4]
lea esi, [eax*4]
lea esi, [esi]
push eax
push esi
push str.__
mov eax, dword [ebx + 4]
push eax
call dbg.channel_massunban
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x804c120
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [obj.VarName]
test eax, eax
mov dword [i], 0
je 0x8063ffe
mov edi, dword [dst]
add edi, 8
xor esi, esi
mov ebx, dword [src]
lea esi, [esi]
lea edi, [edi]
mov edx, dword [dst]
mov eax, dword [ebx]
mov dword [edx + esi], eax
mov eax, dword [ebx + 4]
mov dword [edx + esi + 4], eax
mov eax, dword [ebx + 0xc]
mov dword [edx + esi + 0xc], eax
mov eax, dword [ebx + 0x10]
mov dword [edx + esi + 0x10], eax
mov eax, dword [ebx + 8]
test eax, eax
jne 0x8064010
inc dword [i]
mov eax, dword [i]
mov eax, dword [eax*8 + obj.VarName]
add edi, 0x14
add ebx, 0x14
add esi, 0x14
test eax, eax
jne 0x8063fc0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push eax
push edi
mov dword [obj.mallocdoer], 0x8063f90
call dbg.mstrcpy
add esp, 0x10
jmp 0x8063fe4
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x4c
call sym.readcfgfile
mov dword [obj.botlinkBASE], 0
mov dword [obj.botlinkSIZE], 0xffffffff
mov dword [obj.linksock], 0xffffffff
call dbg.read_levelfile
mov eax, dword [obj.botlist]
test eax, eax
mov dword [bot], eax
je 0x805e1bf
mov edx, dword [bot]
mov ebx, dword [edx]
test ebx, ebx
je 0x805e161
lea esi, [edx + 0x724]
sub esp, 8
lea eax, [ebx + 0x724]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805e950
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805e140
mov eax, dword [bot]
mov dword [obj.current], eax
call dbg.readuserlist
call dbg.read_seenlist
mov edx, dword [bot]
mov edx, dword [edx]
test edx, edx
mov dword [bot], edx
jne 0x805e131
mov eax, dword [obj.botlist]
test eax, eax
mov dword [bot], eax
je 0x805e1bf
mov edx, dword [bot]
mov eax, dword [edx + 0x71c]
test eax, eax
jne 0x805e1b3
push eax
mov eax, edx
add eax, 0x22d
push eax
push obj.ERR_INIT
push str._s__s_has_no_userlist__running_in_setup_mode_n
call sym.imp.printf
add esp, 0x10
mov eax, dword [bot]
mov eax, dword [eax]
test eax, eax
mov dword [bot], eax
jne 0x805e18b
sub esp, 0xc
push str.init:_EnergyMech_running...
call sym.imp.puts
mov eax, dword [obj.do_fork]
add esp, 0x10
test eax, eax
je 0x805e232
sub esp, 0xc
push 0
call sym.imp.close
mov dword [esp], 1
call sym.imp.close
mov dword [esp], 2
call sym.imp.close
add esp, 0x10
call sym.imp.fork
cmp eax, 0xffffffff
je 0x805e91f
test eax, eax
jne 0x805e915
call sym.imp.getppid
dec eax
je 0x805e22d
sub esp, 0xc
push 0xc350
call sym.imp.usleep
add esp, 0x10
jmp 0x805e213
call sym.imp.setsid
push edi
push 0x180
push 0x601
push str.._mech.pid
call sym.imp.open
add esp, 0x10
test eax, eax
mov ebx, eax
js 0x805e272
sub esp, 0x10
call sym.imp.getpid
add esp, 0xc
push eax
push 0x806e685
push ebx
call dbg.send_to_socket
mov dword [esp], ebx
call sym.imp.close
add esp, 0x10
sub esp, 0xc
push str.EnergyMech_started..._n
call dbg.wle
mov dword [esp], obj.now
call sym.imp.time
add esp, 0x10
sub esp, 8
mov esi, dword [obj.now]
push esi
push str._doit__tick__lu_n
call dbg.debug
mov eax, dword [obj.runtime]
add esp, 0x10
test eax, eax
je 0x805e2ba
cmp eax, dword [obj.now]
jl 0x805e8d5
mov eax, dword [obj.linkport]
test eax, eax
jle 0x805e2d0
cmp dword [obj.linksock], 0xffffffff
je 0x805e88e
call dbg.reset_botstate
mov edx, dword [obj.short_tv]
test edx, edx
sete al
and eax, 0xff
dec eax
and eax, 0xffffffe3
add eax, 0x1e
mov dword [ebp - 0x30], eax
mov dword [var_2ch], 0
mov eax, 0x20
nop
lea esi, [esi]
dec eax
test eax, eax
mov dword [eax*4 + obj.read_fds], 0
jne 0x805e300
mov eax, 0x20
lea esi, [esi]
lea edi, [edi]
dec eax
test eax, eax
mov dword [eax*4 + obj.write_fds], 0
jne 0x805e320
mov eax, dword [obj.botlist]
test eax, eax
mov dword [hisock], 0xffffffff
mov dword [j], 0
mov dword [bot], eax
je 0x805e4db
mov esi, esi
mov edx, dword [bot]
cmp dword [edx + 8], 0xffffffff
mov dword [obj.current], edx
je 0x805e86f
mov esi, dword [obj.current]
cmp dword [esi + 8], 0xffffffff
je 0x805e400
mov ebx, dword [esi + 0xc]
test ebx, ebx
jne 0x805e3aa
push ecx
lea eax, [j]
push eax
lea eax, [ebp - 0x28]
push eax
mov edx, dword [esi + 8]
push edx
mov dword [j], 0x10
call sym.imp.getsockname
add esp, 0x10
test eax, eax
jne 0x805e864
mov esi, dword [obj.current]
mov eax, dword [var_24h]
mov dword [esi + 0xc], eax
mov edx, dword [esi + 4]
lea eax, [edx - 2]
cmp eax, 1
ja 0x805e823
mov eax, dword [obj.now]
sub eax, dword [esi + 0xbb0]
inc dword [j]
cmp eax, 0x1e
jle 0x805e81e
mov eax, dword [esi + 8]
sub esp, 8
push eax
push str._doit___i_Connection_timed_out_n
call dbg.debug
pop eax
mov eax, dword [obj.current]
mov eax, dword [eax + 8]
push eax
call sym.imp.close
mov esi, dword [obj.current]
add esp, 0x10
mov dword [esi + 8], 0xffffffff
mov ebx, dword [esi + 0xb3c]
test ebx, ebx
mov dword [Client], ebx
je 0x805e429
lea esi, [esi]
cmp dword [ebx + 0x208], 0x80
je 0x805e804
mov ebx, dword [ebx]
test ebx, ebx
mov dword [Client], ebx
jne 0x805e410
mov ebx, dword [esi + 0xb3c]
test ebx, ebx
mov dword [Client], ebx
je 0x805e49b
mov edi, obj.read_fds
nop
lea esi, [esi]
test byte [ebx + 0x209], 2
je 0x805e46a
mov eax, dword [ebx + 4]
cmp eax, dword [hisock]
jle 0x805e454
mov dword [hisock], eax
mov ecx, eax
and ecx, 0x1f
mov edx, 1
shl edx, cl
shr eax, 5
or dword [eax*4 + obj.write_fds], edx
mov edx, dword [ebx + 4]
cmp edx, 0xffffffff
je 0x805e48c
cmp edx, dword [hisock]
jle 0x805e47a
mov dword [hisock], edx
mov ecx, edx
and ecx, 0x1f
mov eax, 1
shl eax, cl
shr edx, 5
or dword [edi + edx*4], eax
mov eax, dword [ebx]
test eax, eax
mov ebx, eax
jne 0x805e440
mov dword [Client], 0
mov eax, dword [esi + 0x3b0]
test eax, eax
je 0x805e4c5
mov edx, dword [eax]
cmp edx, dword [hisock]
jle 0x805e4af
mov dword [hisock], edx
mov ecx, edx
and ecx, 0x1f
mov eax, 1
shl eax, cl
shr edx, 5
or dword [edx*4 + obj.read_fds], eax
mov eax, dword [bot]
mov eax, dword [eax]
test eax, eax
mov dword [bot], eax
jne 0x805e350
mov edx, dword [obj.short_tv]
mov eax, dword [j]
test eax, eax
jne 0x805e7fc
and edx, 0xfffffffb
mov dword [obj.short_tv], edx
mov edx, dword [obj.linksock]
cmp edx, 0xffffffff
je 0x805e518
cmp edx, dword [hisock]
jle 0x805e502
mov dword [hisock], edx
mov ecx, edx
and ecx, 0x1f
mov eax, 1
shl eax, cl
shr edx, 5
or dword [edx*4 + obj.read_fds], eax
xor edi, edi
mov esi, dword [obj.botlinkSIZE]
cmp edi, esi
mov dword [j], 0
mov ebx, dword [obj.botlinkBASE]
jge 0x805e57e
cmp byte [ebx], 0
je 0x805e573
mov edx, dword [ebx + 0x244]
cmp edx, 0xffffffff
je 0x805e573
cmp byte [ebx + 9], 0x63
je 0x805e7c0
cmp edx, dword [hisock]
jle 0x805e553
mov dword [hisock], edx
cmp byte [ebx + 8], 1
je 0x805e7a5
mov ecx, edx
and ecx, 0x1f
mov eax, 1
shl eax, cl
shr edx, 5
or dword [edx*4 + obj.read_fds], eax
inc edi
add ebx, 0x258
cmp edi, esi
jl 0x805e531
mov edi, dword [j]
test edi, edi
jne 0x805e58c
and dword [obj.short_tv], 0xfffffffd
sub esp, 0xc
lea eax, [ebp - 0x30]
push eax
push 0
push obj.write_fds
inc dword [hisock]
push obj.read_fds
mov esi, dword [hisock]
push esi
call sym.imp.select
add esp, 0x20
inc eax
jne 0x805e5bf
call sym.imp.__error
cmp dword [eax], 4
je 0x805e28e
sub esp, 0xc
push obj.now
call sym.imp.time
call dbg.parse_link_input
mov eax, dword [obj.botlist]
add esp, 0x10
test eax, eax
mov dword [bot], eax
je 0x805e66f
mov edx, dword [bot]
mov dword [obj.current], edx
call dbg.parse_dcc_input
mov esi, dword [obj.current]
cmp dword [esi + 8], 0xffffffff
je 0x805e609
call dbg.parse_server_input
mov esi, dword [obj.current]
mov eax, dword [esi + 0x3b0]
test eax, eax
je 0x805e636
mov eax, dword [eax]
mov ecx, eax
shr eax, 5
and ecx, 0x1f
mov eax, dword [eax*4 + obj.read_fds]
shr eax, cl
and eax, 1
je 0x805e636
call dbg.parse_pipe_input
mov esi, dword [obj.current]
cmp dword [esi + 4], 4
je 0x805e747
mov eax, dword [bot]
mov eax, dword [eax]
test eax, eax
mov dword [bot], eax
jne 0x805e5e4
mov edx, dword [obj.botlist]
test edx, edx
mov dword [bot], edx
je 0x805e66f
mov eax, dword [bot]
cmp dword [eax + 4], 6
je 0x805e720
mov edx, dword [eax]
test edx, edx
mov dword [bot], edx
jne 0x805e659
mov edx, dword [obj.uptimesock]
mov eax, edx
shr eax, 5
mov ecx, edx
and ecx, 0x1f
mov eax, dword [eax*4 + obj.read_fds]
shr eax, cl
and eax, 1
je 0x805e6b5
sub esp, 8
lea eax, [len]
push eax
lea eax, [ebp - 0x28]
push eax
push 0
push 8
lea eax, [var_48h]
push eax
push edx
mov dword [len], 0x10
call sym.imp.recvfrom
add esp, 0x20
cmp eax, 8
je 0x805e6ee
mov eax, dword [obj.now]
cmp dword [obj.uptimelast], eax
jge 0x805e6d1
add eax, 0x5460
mov dword [obj.uptimelast], eax
call dbg.send_uptime
mov ecx, dword [obj.killsocks]
test ecx, ecx
je 0x805e28e
sub esp, 0xc
push 0xffffffffffffffff
call dbg.killsock
jmp 0x805e28b
mov eax, dword [var_44h]
xchg al, ah
ror eax, 0x10
xchg al, ah
cmp dword [0x8075e4c], eax
jne 0x805e6b5
mov ebx, dword [obj.upPack]
test ebx, ebx
jne 0x805e6b5
mov eax, dword [var_48h]
xchg al, ah
ror eax, 0x10
xchg al, ah
mov dword [obj.upPack], eax
jmp 0x805e6b5
nop
lea esi, [esi]
mov edx, dword [bot]
sub esp, 8
mov eax, dword [edx + 0x3a4]
push eax
mov eax, dword [edx + 0x3a8]
push eax
mov dword [obj.current], edx
call dbg.signoff
add esp, 0x10
jmp 0x805e64c
call dbg.update_auths
sub esp, 8
push 0x27
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x805e640
mov eax, dword [obj.now]
mov edx, dword [obj.current]
sub eax, dword [edx + 0xb9c]
cmp eax, 0xd2
jle 0x805e640
sub esp, 0xc
push str.PRIVMSG__:0
call dbg.send_to_server
mov edx, dword [obj.now]
mov eax, dword [obj.current]
mov dword [eax + 0xb9c], edx
add esp, 0x10
jmp 0x805e640
mov ecx, edx
and ecx, 0x1f
mov eax, 1
shl eax, cl
shr edx, 5
or dword [edx*4 + obj.write_fds], eax
jmp 0x805e573
mov eax, dword [obj.now]
sub eax, dword [ebx + 0x24c]
dec eax
jle 0x805e7f4
sub esp, 8
mov byte [ebx + 9], 0
push str.Please_enter_your_nickname._n
push ebx
call dbg.send_to_link
add esp, 0x10
mov esi, dword [obj.botlinkSIZE]
mov edx, dword [ebx + 0x244]
jmp 0x805e54b
inc dword [j]
jmp 0x805e54b
or edx, 4
jmp 0x805e4e9
sub esp, 0xc
lea eax, [Client]
push eax
call dbg.delete_client
add esp, 0x10
mov esi, dword [obj.current]
jmp 0x805e400
cmp edx, 2
je 0x805e849
mov edx, dword [esi + 8]
cmp edx, dword [hisock]
jle 0x805e82e
mov dword [hisock], edx
mov ecx, edx
and ecx, 0x1f
mov eax, 1
shl eax, cl
shr edx, 5
or dword [edx*4 + obj.read_fds], eax
jmp 0x805e400
mov eax, dword [esi + 8]
mov ecx, eax
and ecx, 0x1f
mov edx, 1
shl edx, cl
shr eax, 5
or dword [eax*4 + obj.write_fds], edx
jmp 0x805e823
mov esi, dword [obj.current]
jmp 0x805e3aa
mov eax, dword [obj.now]
sub eax, dword [edx + 0xbb0]
inc dword [j]
dec eax
jle 0x805e363
call dbg.connect_to_server
jmp 0x805e363
sub esp, 0xc
push eax
call dbg.SockListener
add esp, 0x10
cmp eax, 0xffffffff
mov dword [obj.linksock], eax
je 0x805e2d0
push edx
push eax
mov eax, dword [obj.linkport]
push eax
push str.Linksock_active:__i___S:_i___n
call dbg.wle
pop edi
pop eax
mov esi, dword [obj.linkport]
push esi
push str._doit__Linksocket_is_active___i__n
call dbg.debug
add esp, 0x10
jmp 0x805e2d0
sub esp, 0xc
push 0
call dbg.kill_all_bots
mov ebx, dword [obj.debug_on_exit]
add esp, 0x10
test ebx, ebx
je 0x805e8fc
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov ecx, dword [obj.do_exec]
test ecx, ecx
je 0x805e90b
call dbg.mech_exec
sub esp, 0xc
push 0
call sym.imp.exit
mov dword [obj.debug_on_exit], 0
mov eax, dword [obj.debug_on_exit]
test eax, eax
je 0x805e938
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov eax, dword [obj.do_exec]
test eax, eax
je 0x805e946
call dbg.mech_exec
sub esp, 0xc
push 0
call sym.imp._exit
push eax
lea eax, [ebx + 0x220]
push eax
mov eax, dword [bot]
add eax, 0x220
push eax
push str.init:_Error:_UserList_for__s_matches_the_userlist_for__s_n
call sym.imp.printf
mov dword [esp], str._____________Bots_can_not_share_the_same_userlist__please_specify_a_new_one.
call sym.imp.puts
jmp 0x805e8df
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x40c
push 0xbc0
mov esi, dword [arg_8h]
mov dword [obj.mallocdoer], 0x8050070
call dbg.MyMalloc
mov dword [eax + 4], 0
mov dword [eax + 8], 0xffffffff
mov byte [eax + 0x380], 0x2d
mov ebx, eax
pop eax
pop edx
push esi
lea eax, [ebx + 0x220]
push eax
call sym.imp.strcpy
pop ecx
pop eax
push esi
lea eax, [ebx + 0x22d]
push eax
call sym.imp.strcpy
pop eax
pop edx
push obj.BOTLOGIN
lea eax, [ebx + 0x23a]
push eax
call sym.imp.strcpy
push obj.VERSION
push obj.BOTCLASS
push 0x806e50a
lea eax, [ebx + 0x246]
push eax
call sym.imp.sprintf
add esp, 0x18
lea eax, [ebx + 0x3c0]
push obj.BinaryDefault
push eax
call dbg.copy_vars
add esp, 0xc
push esi
push str..__s.seen
lea esi, [buffer]
push esi
call sym.imp.sprintf
pop ecx
pop eax
push esi
lea eax, [ebx + 0xb40]
push eax
mov dword [obj.mallocdoer], 0x8050070
call dbg.mstrcpy
mov eax, dword [obj.now]
mov dword [ebx + 0xbb8], eax
mov eax, dword [obj.botlist]
mov dword [ebx], eax
mov dword [obj.botlist], ebx
lea esp, [var_8h]
mov eax, ebx
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8060dd0
mov al, byte [eax]
test al, al
je 0x8060dd0
cmp al, 0x3a
je 0x8060e60
mov edi, esi
xor esi, esi
mov eax, dword [rest]
cmp byte [eax], 0x3a
je 0x8060e57
mov al, byte [edi]
sub eax, 0x31
cmp al, 7
jbe 0x8060e00
mov eax, dword [obj.pFuncsA]
test eax, eax
je 0x8060dd0
xor ebx, ebx
lea esi, [esi]
sub esp, 8
push edi
mov eax, dword [ebx + obj.pFuncsA]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8060dd8
add ebx, 0xc
mov ecx, dword [ebx + obj.pFuncsA]
test ecx, ecx
jne 0x8060da0
lea esi, [esi]
lea edi, [edi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
test byte [ebx + 0x8071564], 1
je 0x8060de5
test esi, esi
je 0x8060dd0
sub esp, 8
mov edi, dword [rest]
push edi
push esi
call dword [ebx + 0x8071568]
jmp 0x8060dd0
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push edi
call dbg.Atoi
add esp, 0x10
test eax, eax
je 0x8060dd0
mov edi, dword [obj.pFuncsN]
test edi, edi
mov eax, dword [eax]
je 0x8060dd0
xor edx, edx
mov esi, esi
cmp dword [edx + obj.pFuncsN], eax
je 0x8060e37
add edx, 0xc
mov ecx, dword [edx + obj.pFuncsN]
test ecx, ecx
jne 0x8060e20
jmp 0x8060dd0
test byte [edx + 0x8071624], 1
je 0x8060e44
test esi, esi
je 0x8060dd0
sub esp, 8
mov ebx, dword [rest]
push ebx
push esi
call dword [edx + 0x8071628]
jmp 0x8060dd0
inc eax
mov dword [rest], eax
jmp 0x8060d89
sub esp, 0xc
lea eax, [rest]
push eax
call dbg.chop
inc esi
mov edi, eax
add esp, 0x10
jmp 0x8060d7d
push ebp
mov ebp, esp
push esi
push ebx
mov edx, dword [obj.current]
xor esi, esi
cmp esi, dword [edx + 0x71c]
mov ebx, dword [edx + 0x720]
jge 0x806363e
nop
lea esi, [esi]
cmp byte [ebx], 0
je 0x8063632
mov al, byte [ebx + 0x3e]
shr al, 1
and eax, 7
cmp eax, 2
je 0x8063645
inc esi
add ebx, 0x48
cmp esi, dword [edx + 0x71c]
jl 0x8063620
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
sub esp, 0xc
push ebx
call dbg.remove_user
add esp, 0x10
mov edx, dword [obj.current]
jmp 0x8063632
push ebp
mov ebp, esp
sub esp, 0x14
push str._sigpipe__n
call dbg.debug
pop ecx
pop eax
push dbg.sig_pipe
push 0xd
call sym.imp.signal
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edi, dword [arg_8h]
test edi, edi
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
je 0x8058b50
test esi, esi
je 0x8058b50
test ebx, ebx
je 0x8058b50
sub esp, 8
push 0x2a
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x8058b60
push ebx
push esi
push str._ob__s__s
push edi
call dbg.sendmode
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push 2
push ebx
call dbg.format_uh
add esp, 0x10
push eax
jmp 0x8058b41
push ebp
mov ebp, esp
push ebx
sub esp, 0x808
lea eax, [arg]
push eax
mov eax, dword [format]
lea ebx, [buf]
push eax
push ebx
call sym.imp.vsprintf
add esp, 0xc
push ebx
mov eax, dword [to]
push eax
push str.MODE__s__s
call dbg.send_to_server
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x41c
mov ecx, dword [userhost]
push ecx
lea eax, [temp]
push eax
mov dword [ptr], eax
call sym.imp.strcpy
pop eax
pop edx
push 0x2a
mov ebx, dword [ptr]
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x8058a30
sub esp, 8
mov ecx, dword [ptr]
push ecx
push 0x80736a0
call sym.imp.strcpy
mov eax, 0x80736a0
mov ebx, dword [var_4h]
leave
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x8068523
lea ebx, [ptr]
push ebx
call dbg.get_token
pop eax
pop edx
push 0x806a108
push ebx
call dbg.get_token
mov ebx, eax
add esp, 0x10
test ebx, ebx
mov eax, dword [ptr]
je 0x8058a65
cmp byte [ebx], 0x7e
je 0x8058ac0
cmp dword [type], 1
ja 0x8058aa0
sub esp, 0xc
push eax
call dbg.cluster
add esp, 0x10
push eax
push eax
push 9
push ebx
call dbg.right
add esp, 0xc
push eax
push str.__s__s
push 0x80736a0
call sym.imp.sprintf
add esp, 0x10
jmp 0x8058a1b
lea esi, [esi]
sub esp, 0xc
push eax
call dbg.cluster
add esp, 0xc
push eax
push 0x806b8bd
jmp 0x8058a8a
lea esi, [esi]
lea edi, [edi]
inc ebx
jmp 0x8058a65
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x5c
mov ebx, dword [arg_8h]
test ebx, ebx
mov esi, dword [arg_18h]
je 0x8062391
cmp byte [ebx], 0
je 0x8062391
test esi, esi
je 0x8062391
cmp byte [esi], 0
jne 0x80623b0
sub esp, 0xc
push str._add_to_userlist__PANIC:_never_happen_scenario_n
call dbg.debug
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
xor eax, eax
cld
mov ecx, 0x12
lea edi, [new]
rep stosd dword es:[edi], eax
mov eax, dword [obj.userident]
mov dword [var_64h], eax
inc eax
movzx edx, byte [axs]
mov dword [obj.userident], eax
mov eax, dword [var_2ch]
shl edx, 9
and eax, 0xfffe01ff
or eax, edx
mov dword [var_2ch], eax
mov eax, dword [aop]
test eax, eax
setne dl
mov al, byte [var_2ch]
add edx, edx
and eax, 0xfffffffd
or eax, edx
cmp dword [prot], 4
mov byte [new], 1
mov byte [var_2ch], al
jg 0x806252b
mov eax, dword [prot]
test eax, eax
js 0x8062524
mov edx, eax
and edx, 7
mov eax, dword [var_2ch]
shl edx, 6
and eax, 0xfffffe3f
or eax, edx
mov word [var_2ch], ax
push eax
push 0xc
push ebx
lea eax, [dest]
push eax
call sym.imp.strncpy
pop edi
pop eax
push esi
lea eax, [var_3ch]
push eax
mov byte [var_54h], 0
mov dword [obj.mallocdoer], 0x8062370
call dbg.mstrcpy
mov ebx, dword [pass]
add esp, 0x10
test ebx, ebx
je 0x8062460
mov eax, dword [pass]
cmp byte [eax], 0
jne 0x806250b
mov al, byte [var_2ah]
and eax, 0xfffffff1
or eax, 2
mov byte [var_2ah], al
mov eax, dword [obj.CurrentUser]
or byte [var_2ch], 0x20
test eax, eax
mov esi, 0xffffffff
mov ebx, 0xffffffff
je 0x8062486
mov ebx, dword [eax + 4]
mov eax, dword [obj.CurrentShit]
test eax, eax
je 0x8062492
mov esi, dword [eax + 4]
mov eax, dword [obj.current]
push 0x48
lea edx, [eax + 0x71c]
push edx
lea edx, [new]
push edx
add eax, 0x720
push eax
call dbg.addstruct
add esp, 0x10
cmp ebx, 0xffffffff
mov edi, eax
je 0x80624dc
push ebx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov eax, dword [eax + 0x720]
push eax
call dbg.findstruct
mov dword [obj.CurrentUser], eax
add esp, 0x10
cmp esi, 0xffffffff
je 0x8062504
push esi
push 0x48
mov eax, dword [obj.current]
mov ebx, dword [eax + 0x71c]
push ebx
mov ecx, dword [eax + 0x720]
push ecx
call dbg.findstruct
mov dword [obj.CurrentShit], eax
add esp, 0x10
mov eax, edi
jmp 0x80623a0
push ecx
push 0x14
push eax
lea eax, [var_53h]
push eax
call sym.imp.strncpy
mov byte [var_3fh], 0
add esp, 0x10
jmp 0x8062460
xor eax, eax
jmp 0x806240d
mov eax, 4
jmp 0x806240d
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [rest]
test eax, eax
mov edi, dword [arg_8h]
je 0x8055de8
cmp byte [eax], 0
jne 0x8055df0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
lea eax, [rest]
push eax
call dbg.chop
mov esi, eax
mov ebx, eax
add esp, 0x10
lea esi, [esi]
lea edi, [edi]
mov al, byte [ebx]
test al, al
je 0x8055e36
movsx edx, al
cmp edx, 0xff
ja 0x8055ea0
mov eax, dword [obj._CurrentRuneLocale]
mov eax, dword [eax + edx*4 + 0x834]
test al, al
mov byte [ebx], al
je 0x8055e36
inc ebx
jmp 0x8055e10
sub esp, 0xc
push edi
call dbg.max_userlevel
mov ebx, eax
pop eax
mov eax, dword [rest]
test eax, eax
jne 0x8055e4e
mov eax, obj.NULLSTR
push eax
push esi
push ebx
push obj.CurrentNick
push str._DCC__:_s__i_:_Requested_DCC__s___s_
call dbg.send_statmsg
add esp, 0x20
cmp ebx, 9
jle 0x8055de8
cmp ebx, 0xc8
je 0x8055de8
sub esp, 8
push str.CHAT
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8055de8
sub esp, 8
mov ebx, dword [rest]
push ebx
push edi
call dbg.dcc_connect
jmp 0x8055de8
nop
sub esp, 0xc
push edx
call sym.imp.___toupper
add esp, 0x10
jmp 0x8055e2d
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
mov esi, dword [arg_8h]
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x80543a0
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 1
push ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
jne 0x80543d0
push eax
push ebx
push obj.ERR_CHAN
push esi
call dbg.send_to_user
add esp, 0x10
jmp 0x805438b
lea esi, [esi]
lea edi, [edi]
push eax
push ebx
push str.Cycling_channel__s
push esi
call dbg.send_to_user
mov dword [esp], ebx
call dbg.cycle_channel
jmp 0x80543bf
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x20c
mov edi, dword [rest]
mov al, byte [edi]
test al, al
je 0x80617ac
cmp al, 0xa
je 0x80618ad
cmp al, 0xd
je 0x80618ad
inc edi
mov al, byte [edi]
test al, al
jne 0x8061795
xor eax, eax
mov ebx, edi
cld
mov esi, edi
mov ecx, 0x80
lea edi, [tmp]
sub ebx, dword [rest]
rep stosd dword es:[edi], eax
push eax
push 0x1fe
lea edi, [tmp]
push edi
mov eax, dword [s]
push eax
call sym.imp.read
mov edx, eax
add esp, 0x10
xor eax, eax
cmp edx, 0xffffffff
je 0x8061814
test edx, edx
je 0x806189d
cmp byte [tmp], 0
je 0x806180f
mov al, byte [edi]
cmp al, 0xd
je 0x8061823
cmp al, 0xa
je 0x8061823
cmp ebx, 0x1fd
jle 0x806181c
inc edi
mov al, byte [edi]
test al, al
jne 0x80617f8
mov byte [esi], 0
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov byte [esi], al
inc edi
inc esi
inc ebx
jmp 0x8061809
mov byte [edi], 0
mov byte [esi], 0
sub esp, 8
mov eax, dword [rest]
push eax
mov eax, dword [line]
push eax
inc edi
call sym.imp.strcpy
mov al, byte [edi]
add esp, 0x10
cmp al, 0xa
je 0x8061890
cmp al, 0xd
je 0x8061890
sub esp, 8
push edi
mov eax, dword [rest]
push eax
call sym.imp.strcpy
add esp, 0xc
mov edi, dword [line]
push edi
mov esi, dword [s]
push esi
push str._SoR___i__s_n
call dbg.debug
call sym.imp.__error
mov dword [eax], 0x23
mov eax, dword [line]
add esp, 0x10
cmp byte [eax], 0
sete al
and eax, 0xff
dec eax
and eax, dword [line]
jmp 0x8061814
nop
lea esi, [esi]
inc edi
mov al, byte [edi]
cmp al, 0xa
je 0x8061890
cmp al, 0xd
je 0x8061890
jmp 0x8061847
call sym.imp.__error
mov dword [eax], 0x20
jmp 0x8061812
mov byte [edi], 0
sub esp, 8
mov edx, dword [rest]
push edx
mov eax, dword [line]
push eax
inc edi
call sym.imp.strcpy
mov al, byte [edi]
add esp, 0x10
cmp al, 0xa
je 0x80618e0
cmp al, 0xd
jne 0x8061847
lea esi, [esi]
lea edi, [edi]
inc edi
mov al, byte [edi]
cmp al, 0xa
je 0x80618e0
cmp al, 0xd
je 0x80618e0
jmp 0x8061847
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
mov esi, dword [arg_8h]
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x8052371
mov eax, dword [rest]
test eax, eax
jne 0x8052380
sub esp, 8
mov eax, dword [0x8070530]
push eax
push esi
call dbg.usage
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
push esi
push eax
push str.ACTION__s
push ebx
call dbg.send_ctcp
jmp 0x8052371
push ebp
mov ebp, esp
push ebx
push eax
mov eax, dword [arg_8h]
test eax, eax
mov ebx, dword [arg_ch]
je 0x8063e20
sub esp, 8
push 3
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
mov ecx, eax
je 0x8063e20
lea eax, [ebx + ebx*4]
lea edx, [eax*4]
lea eax, [ecx + edx]
test byte [eax + 0x24], 8
je 0x8063e10
mov eax, edx
add eax, dword [obj.current]
mov eax, dword [eax + 0x3c4]
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
nop
lea esi, [esi]
mov eax, dword [eax + 0x28]
jmp 0x8063e04
lea esi, [esi]
lea edi, [edi]
mov dword [arg_ch], ebx
mov dword [arg_8h], 0
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
jmp dbg.get_int_varc
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8065b25
mov eax, dword [rest]
test eax, eax
je 0x8065b25
cmp byte [eax], 0
jne 0x8065b50
sub esp, 8
mov eax, dword [0x8070370]
push eax
mov eax, dword [from]
push eax
call dbg.usage
mov ebx, dword [var_4h]
add esp, 0x10
mov esp, ebp
pop ebp
ret
jmp 0x8065b50
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
push str.PING
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8065b7a
push ecx
mov edx, dword [obj.now]
push edx
push str.PING__lu
push ebx
call dbg.send_ctcp
jmp 0x8065b37
push eax
mov eax, dword [rest]
push eax
push 0x806a12d
jmp 0x8065b72
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push 0
mov eax, dword [userhost]
push eax
mov ebx, dword [arg_ch]
call dbg.find_user
add esp, 0x10
xor edx, edx
test eax, eax
je 0x80632d9
cmp byte [eax + 0x15], 0
jne 0x80632f0
mov edx, 1
mov ebx, dword [var_4h]
mov esp, ebp
mov eax, edx
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
test ebx, ebx
je 0x806330d
sub esp, 8
add eax, 0x15
push eax
push ebx
call dbg.passmatch
add esp, 0x10
test eax, eax
mov edx, 1
jne 0x80632d9
xor edx, edx
jmp 0x80632d9
push ebp
mov ebp, esp
sub esp, 0x10
mov eax, dword [encoded]
push eax
mov eax, dword [plain]
push eax
call dbg.cipher
mov dword [esp], eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
sete al
mov esp, ebp
and eax, 0xff
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
mov edx, dword [arg_8h]
test edx, edx
je 0x8059004
mov al, byte [edx]
xor ebx, ebx
xor edi, edi
xor esi, esi
test al, al
mov dword [B4a], 0
mov dword [B1a], 0
mov dword [B4b], 0
mov dword [ptr], edx
jne 0x8059010
xor eax, eax
add esp, 0x18
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
and eax, 0xff
mov dword [R1], eax
mov dword [i], 7
nop
test dword [R1], 1
je 0x8059036
or dword [B1a], 0x80008000
or esi, 0x80008000
xor ebx, dword [B1a]
xor edi, esi
mov ecx, dword [B1a]
xor ecx, ebx
mov edx, edi
xor edx, esi
mov eax, ecx
shl eax, 0x1e
shr edx, 2
or edx, eax
shr ecx, 2
xor ebx, ecx
xor edi, edx
neg dword [B4b]
not dword [B4a]
mov eax, dword [B1a]
xor dword [B4a], ebx
xor dword [B4b], edi
shr esi, 1
neg edi
shl eax, 0x1f
not ebx
shr dword [R1], 1
xor ebx, dword [B4a]
xor edi, dword [B4b]
or esi, eax
shr dword [B1a], 1
dec dword [i]
jns 0x8059020
inc dword [ptr]
mov edx, dword [ptr]
mov al, byte [edx]
test al, al
jne 0x8059010
mov eax, dword [B1a]
test eax, eax
je 0x8059139
mov esi, esi
lea edi, [edi]
xor edi, esi
xor ebx, dword [B1a]
mov ecx, dword [B1a]
xor ecx, ebx
mov edx, edi
xor edx, esi
mov eax, ecx
shl eax, 0x1e
shr edx, 2
or edx, eax
shr ecx, 2
xor ebx, ecx
xor edi, edx
neg dword [B4b]
not dword [B4a]
mov eax, dword [B1a]
xor dword [B4a], ebx
xor dword [B4b], edi
shr esi, 1
neg edi
shl eax, 0x1f
not ebx
xor ebx, dword [B4a]
xor edi, dword [B4b]
or esi, eax
shr dword [B1a], 1
jne 0x80590a0
test esi, esi
jne 0x80590a0
mov edi, global_res.0
cld
mov ecx, 0xa
xor eax, eax
rep stosd dword es:[edi], eax
mov dword [i], 0
mov esi, esi
mov eax, dword [B4b]
and eax, 0x3f
mov edx, dword [i]
mov al, byte [eax + obj.pctab]
mov byte [edx + global_res.0], al
mov eax, dword [B4a]
shr dword [B4b], 6
shl eax, 0x1a
inc edx
or dword [B4b], eax
shr dword [B4a], 6
cmp edx, 9
mov dword [i], edx
jle 0x8059100
mov eax, global_res.0
jmp 0x8059006
test esi, esi
jne 0x80590a0
jmp 0x80590e8
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_10h]
test ebx, ebx
mov esi, dword [arg_8h]
je 0x80667e4
cmp byte [ebx], 0
jne 0x8066830
sub esp, 0xc
push 0x806d249
call dbg.send_to_server
pop ebx
pop eax
push str.No_longer_set__away
push esi
call dbg.send_to_user
mov eax, dword [obj.current]
and byte [eax + 0x3ac], 0xf7
mov edx, dword [obj.now]
mov eax, dword [obj.current]
mov dword [eax + 0xbb4], edx
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov ecx, dword [obj.now]
sub esp, 0xc
push ecx
call dbg.time2away
add esp, 0xc
push eax
push ebx
push str.AWAY_:_s
call dbg.send_to_server
pop eax
pop edx
push str.Now_set__away
push esi
call dbg.send_to_user
mov eax, dword [obj.current]
or byte [eax + 0x3ac], 8
jmp 0x806681b
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x24
lea ebx, [rest]
push ebx
mov edi, dword [to]
push edi
call dbg.get_channel2
mov dword [chan], eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
je 0x8064360
sub esp, 8
push 3
push eax
call dbg.find_var_name
add esp, 0x10
cmp eax, 0xffffffff
mov edi, eax
je 0x8064350
sub esp, 0xc
push ebx
call dbg.chop
mov dword [value], eax
mov edx, dword [obj.current]
lea eax, [edi + edi*4]
mov ecx, dword [value]
lea eax, [edx + eax*4]
add esp, 0x10
test ecx, ecx
lea esi, [eax + 0x3c0]
mov dword [num], 0
je 0x8064141
test byte [eax + 0x3c0], 1
jne 0x80642f0
lea eax, [edi + edi*4]
shl eax, 2
test byte [edx + eax + 0x3c0], 8
jne 0x806416f
mov ecx, dword [chan]
cmp byte [ecx], 0x2a
je 0x8064240
sub esp, 8
push edi
mov ecx, dword [chan]
push ecx
call dbg.find_var
mov esi, eax
add esp, 0x10
test esi, esi
je 0x806422e
push eax
mov eax, dword [edi*8 + 0x806cf24]
push eax
push str.Var:__s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov eax, dword [value]
add esp, 0x10
test eax, eax
je 0x80641e8
test byte [esi], 1
je 0x80641c0
mov eax, dword [num]
mov dword [esi + 4], eax
push eax
mov eax, dword [chan]
push eax
push str.Value_for__s:_Now_changed_to__i
mov eax, dword [from]
push eax
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
sub esp, 8
mov eax, dword [value]
push eax
lea eax, [esi + 8]
push eax
mov dword [obj.mallocdoer], 0x80640c0
call dbg.mstrcpy
add esp, 0xc
mov eax, dword [value]
push eax
push str.Value:_Now_changed_to__s
jmp 0x80641ad
mov eax, dword [esi]
test eax, 1
jne 0x8064211
and eax, 2
je 0x80641b6
mov ecx, dword [esi + 8]
push ecx
mov edx, dword [chan]
push edx
push str.Value_for__s:__s
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x80641b6
mov eax, dword [esi + 4]
push eax
mov edi, dword [chan]
push edi
push str.Value_for__s:__i
mov ebx, dword [from]
push ebx
call dbg.send_to_user
add esp, 0x10
mov eax, dword [esi]
jmp 0x80641f1
push edx
mov eax, dword [chan]
push eax
push str.Problem_finding_the_variable__Am_I_on__s____
jmp 0x80641ad
lea esi, [esi]
mov ecx, dword [value]
test ecx, ecx
je 0x80642e1
mov ebx, dword [edx + 0xb34]
test ebx, ebx
je 0x806427b
mov dword [var_1ch], eax
nop
lea esi, [esi]
mov edx, dword [var_1ch]
lea eax, [edx + ebx]
test byte [eax + 0x24], 1
lea esi, [eax + 0x24]
je 0x80642a0
mov ecx, dword [num]
mov dword [esi + 4], ecx
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8064260
push eax
mov eax, dword [edi*8 + 0x806cf24]
push eax
push str.Var:__s
mov edi, dword [from]
push edi
call dbg.send_to_user
pop ebx
pop esi
push str.Value_changed_on_all_channels
jmp 0x80641ad
mov esi, esi
mov edx, dword [esi + 8]
test edx, edx
jne 0x80642d0
lea esi, [eax + 0x2c]
sub esp, 8
mov eax, dword [value]
push eax
push esi
mov dword [obj.mallocdoer], 0x80640c0
call dbg.mstrcpy
add esp, 0x10
jmp 0x8064275
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea esi, [eax + 0x2c]
push esi
call dbg.MyFree
add esp, 0x10
jmp 0x80642aa
sub esp, 8
push str.Please_specify_a_value
jmp 0x80641ad
mov esi, esi
sub esp, 8
mov eax, dword [value]
push eax
mov eax, dword [from]
push eax
call dbg.check_for_number
add esp, 0x10
test eax, eax
jne 0x80641b6
sub esp, 0xc
mov eax, dword [value]
push eax
call sym.imp.atoi
add esp, 0x10
cmp eax, dword [esi + 0xc]
mov dword [num], eax
jl 0x8064327
cmp eax, dword [esi + 0x10]
jle 0x8064339
mov edi, dword [esi + 0x10]
push edi
mov ebx, dword [esi + 0xc]
push ebx
push str.Possible_values_are__i_through__i
jmp 0x80641ad
mov edx, dword [obj.current]
jmp 0x8064141
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push str.No_such_variable_name
jmp 0x80641ad
lea esi, [esi]
sub esp, 8
mov esi, dword [0x8070700]
push esi
mov ebx, dword [from]
push ebx
call dbg.usage
jmp 0x80641b6
push ebp
mov ebp, esp
mov dword [from], str.PONG_:_s
pop ebp
jmp dbg.send_to_server
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea edi, [rest]
push edi
mov dword [c_opers], 0
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, 1
mov ebx, eax
je 0x805ff3e
mov al, byte [eax]
test al, al
je 0x805ff3e
movsx eax, al
cmp eax, 0xff
ja 0x805ffa0
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
je 0x805ff90
sub esp, 0xc
push ebx
call sym.imp.atol
xor esi, esi
mov dword [c_opers], eax
add esp, 0x10
test esi, esi
je 0x805ff3e
test ebx, ebx
je 0x805ff3e
mov al, byte [ebx]
test al, al
jne 0x805fefd
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
test ebx, ebx
je 0x805ff5c
lea esi, [esi]
cmp dword [ebx + 0x10], 0xf
je 0x805ff70
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805ff50
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
push eax
mov eax, dword [c_opers]
push eax
push str.IRC_Operators_
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x805ff56
nop
lea esi, [esi]
sub esp, 0xc
push edi
call dbg.chop
mov ebx, eax
jmp 0x805ff2d
lea esi, [esi]
xor eax, eax
jmp 0x805ff1b
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
call dbg.get_channel
mov esi, eax
pop eax
pop edx
push esi
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8053100
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [nick], eax
je 0x80531a6
push edi
push 0
mov ebx, dword [nick]
push ebx
mov ecx, dword [from]
push ecx
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov edi, eax
je 0x80530ec
sub esp, 8
push esi
push eax
call dbg.get_userlevel
mov ebx, eax
pop eax
pop edx
push esi
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp ebx, eax
jg 0x8053190
mov eax, dword [rest]
test eax, eax
je 0x805317e
push eax
push 0x806a12d
mov edi, dword [nick]
push edi
push esi
call dbg.sendkick
push esi
mov esi, dword [nick]
push esi
push str._s_kicked_from__s
mov ebx, dword [from]
push ebx
call dbg.send_to_user
jmp 0x80530ec
sub esp, 0xc
push str.._randfiles_randkicks.e
call dbg.randstring
add esp, 0x10
jmp 0x8053156
push edi
push str.Kick_attempt_of__s
push obj.CurrentNick
push esi
call dbg.sendkick
jmp 0x80530ec
sub esp, 8
push str.No_nick_specified
jmp 0x8053170
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push 0
mov ebx, dword [var_8h]
push ebx
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x80670e1
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push edx
push eax
push eax
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
push str.Shutdown_initiated_by__s__i___flatlining_...
call dbg.send_global_statmsg
mov dword [esp], 0
call dbg.kill_all_bots
mov eax, dword [obj.debug_on_exit]
add esp, 0x10
test eax, eax
je 0x806711f
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov eax, dword [obj.do_exec]
test eax, eax
je 0x806712d
call dbg.mech_exec
sub esp, 0xc
push 0
call sym.imp.exit
nop
nop
nop
nop
nop
nop
nop
nop
nop
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x1010
lea eax, [arg]
push eax
mov eax, dword [format]
push eax
lea ebx, [buf]
push ebx
call sym.imp.vsprintf
push ebx
sub esp, 8
mov eax, dword [obj.now]
push eax
call dbg.time2medium
add esp, 0xc
push eax
push 0x806794b
lea eax, [buf2]
push eax
call sym.imp.sprintf
mov esi, dword [obj.botlist]
mov eax, dword [obj.current]
add esp, 0x20
test esi, esi
mov dword [obj.backup], eax
je 0x804b86f
nop
lea esi, [esi]
mov eax, dword [esi + 0xb28]
test eax, eax
je 0x804b869
xor edi, edi
cmp edi, dword [esi + 0xb24]
mov dword [obj.current], esi
mov ebx, eax
jge 0x804b869
lea esi, [esi]
cmp byte [ebx], 0
jne 0x804b890
inc edi
mov eax, dword [obj.current]
add ebx, 0xa1
cmp edi, dword [eax + 0xb24]
jl 0x804b850
mov esi, dword [esi]
test esi, esi
jne 0x804b830
mov eax, dword [obj.backup]
mov dword [obj.current], eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x804b890
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
push str.statmsg
lea eax, [ebx + 1]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804b855
sub esp, 8
lea eax, [buf2]
push eax
lea eax, [ebx + 0x51]
push eax
call dbg.send_chat
add esp, 0x10
test eax, eax
jne 0x804b855
push eax
push 0xa1
push 0
push ebx
call sym.imp.memset
add esp, 0x10
jmp 0x804b855
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
mov eax, dword [obj.now]
mov ebx, dword [arg_ch]
mov esi, dword [arg_8h]
push eax
call dbg.time2away
add esp, 0x10
cmp byte [ebx], 0x23
je 0x8051d40
mov dword [rest], eax
mov dword [arg_ch], str.Current_time_is:__s
mov dword [arg_8h], esi
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.send_to_user
lea esi, [esi]
mov dword [rest], eax
mov dword [arg_ch], str.Current_time_is:__s
mov dword [arg_8h], ebx
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.sendprivmsg
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_ch]
push eax
mov ebx, dword [arg_8h]
test esi, esi
push ebx
mov eax, str.adding
jne 0x80596fb
mov eax, str.deleting
push eax
push str._link_dccuser___s_DCC_user___s_n
call dbg.debug
add esp, 0x10
test esi, esi
je 0x8059740
sub esp, 0xc
mov eax, dword [obj.current]
push ebx
add eax, 0x220
push eax
push obj.my_entity
push str._LINK_USER__s__s__s_n
push 0
call dbg.link_bcast
add esp, 0x20
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
mov esi, esi
lea edi, [edi]
sub esp, 0xc
mov eax, dword [obj.current]
push ebx
add eax, 0x220
push eax
push obj.my_entity
push str._QUIT__s__s__s_n
jmp 0x8059726
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
test ecx, ecx
push ebx
je 0x80560d7
mov ebx, dword [obj.mrrec]
test ebx, ebx
je 0x80560d7
xor edx, edx
mov eax, ebx
lea esi, [esi]
cmp dword [eax + 4], ecx
je 0x80560da
inc edx
add eax, 0x14
cmp edx, 0xc7
jle 0x80560c0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80560b5
pop ebx
pop ebp
ret
mov byte [eax + 0x14], 1
jmp 0x80560d7
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg]
mov al, byte [ebx]
test al, al
mov ecx, obj.__escape_string__
je 0x8059462
lea esi, [esi]
lea edi, [edi]
movsx edx, al
cmp edx, 0xd
je 0x80594b0
cmp edx, 0xd
jg 0x80594c0
cmp edx, 0xa
je 0x80594b0
movsx edx, al
cmp edx, 0xd
je 0x80594a0
cmp edx, 0xd
jg 0x8059480
cmp edx, 0xa
je 0x8059470
mov byte [ecx], al
inc ebx
mov al, byte [ebx]
inc ecx
test al, al
jne 0x8059430
mov byte [ecx], 0
pop ebx
mov eax, obj.__escape_string__
pop ebp
ret
lea esi, [esi]
mov byte [ecx], 0x6e
jmp 0x805945a
lea esi, [esi]
lea edi, [edi]
cmp edx, 0x20
je 0x8059490
cmp edx, 0x5c
jne 0x8059458
mov byte [ecx], 0x5c
jmp 0x805945a
nop
mov byte [ecx], 0x73
jmp 0x805945a
lea esi, [esi]
lea edi, [edi]
mov byte [ecx], 0x72
jmp 0x805945a
lea esi, [esi]
lea edi, [edi]
mov byte [ecx], 0x5c
mov al, byte [ebx]
inc ecx
jmp 0x8059446
nop
lea esi, [esi]
cmp edx, 0x20
je 0x80594b0
cmp edx, 0x5c
jmp 0x8059444
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
mov ebx, dword [s]
mov esi, dword [arg_8h]
push ebx
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x3e
jbe 0x80664a0
mov dword [to], str.Hostname_exceeds_maximum_length
mov dword [arg_8h], esi
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.send_to_user
jmp 0x80664a0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push eax
push ebx
push str.Attempting_to_add_server__s_to_server_list
push esi
call dbg.send_to_user
mov dword [arg_8h], ebx
add esp, 0x10
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.cfg_server
push ebp
mov ebp, esp
and byte [obj.will], 0xfb
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
mov ebx, dword [arg_8h]
push ebx
call dbg.is_localbot
add esp, 0x10
test eax, eax
mov edx, 1
je 0x8062fe0
mov ebx, dword [var_4h]
mov esp, ebp
mov eax, edx
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [channel]
push eax
push ebx
call dbg.find_user
add esp, 0x10
xor edx, edx
test eax, eax
je 0x8062fcc
mov eax, dword [eax + 0x3c]
shr eax, 9
movzx edx, al
jmp 0x8062fcc
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
pop edx
pop ecx
push 1
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x8060680
or byte [eax + 0x38d], 6
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804a223
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov ebx, dword [eax + 0x720]
push ebx
call dbg.findstruct
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804a223
mov al, byte [eax + 0x3e]
shr al, 1
and eax, 7
dec eax
je 0x804a223
sub esp, 0xc
push esi
call sym.imp.atol
mov dword [ebx + 0x40], eax
add esp, 0x10
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
jmp dword [reloc.atol]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
pop ebx
pop esi
push str.__t_r_n
mov edi, eax
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804a420
mov ebx, eax
mov al, byte [eax]
test al, al
je 0x804a384
mov esi, esi
movsx edx, al
cmp edx, 0xff
ja 0x804a490
mov eax, dword [obj._CurrentRuneLocale]
mov eax, dword [eax + edx*4 + 0x834]
mov byte [ebx], al
inc ebx
mov al, byte [ebx]
test al, al
jne 0x804a360
mov ecx, dword [obj.mcmd]
test ecx, ecx
je 0x804a420
xor ebx, ebx
sub esp, 8
push esi
mov edx, dword [ebx + obj.mcmd]
push edx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804a472
sub esp, 8
push esi
mov eax, dword [ebx + 0x8070264]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804a462
add ebx, 0x10
mov eax, dword [ebx + obj.mcmd]
test eax, eax
jne 0x804a394
mov eax, dword [obj.mcmd]
test eax, eax
je 0x804a420
xor ebx, ebx
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push edi
mov eax, dword [ebx + obj.mcmd]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804a428
add ebx, 0x10
mov eax, dword [ebx + obj.mcmd]
test eax, eax
jne 0x804a3f0
lea esi, [esi]
lea edi, [edi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov eax, dword [ebx + 0x8070264]
test eax, eax
jne 0x804a44e
add ebx, 0x8070264
sub esp, 8
push esi
push ebx
mov dword [obj.mallocdoer], 0x804a320
call dbg.mstrcpy
jmp 0x804a420
sub esp, 0xc
add ebx, 0x8070264
push ebx
call dbg.MyFree
add esp, 0x10
jmp 0x804a438
sub esp, 8
push esi
push str.init:_Alias__s_already_exists__ignored__n
call sym.imp.printf
jmp 0x804a420
sub esp, 0xc
push str.init:_Alias_replacing_original_command__ignored_
call sym.imp.puts
jmp 0x804a420
jmp 0x804a490
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
push edx
call sym.imp.___toupper
add esp, 0x10
jmp 0x804a37b
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push 0x40
mov edi, dword [s]
push edi
call sym.imp.strchr
add esp, 0x10
test eax, eax
jne 0x805f6a0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [rest]
push eax
call dbg.chop
mov esi, eax
mov eax, dword [rest]
add esp, 0x10
cmp byte [eax], 0x3a
je 0x805f738
cmp byte [esi], 0x23
setne bl
and ebx, 0xff
dec ebx
sub esp, 8
and ebx, esi
push ebx
push edi
call dbg.find_user
pop ecx
mov dword [obj.CurrentUser], eax
pop eax
push ebx
push edi
call dbg.find_shit
mov dword [obj.CurrentShit], eax
mov dword [esp], edi
call dbg.getnick
pop ebx
pop edx
push eax
push obj.CurrentNick
call sym.imp.strcpy
mov eax, dword [rest]
add esp, 0x10
cmp byte [eax], 1
je 0x805f713
push edx
push eax
push esi
push edi
call dbg.on_msg
jmp 0x805f68b
sub esp, 8
inc eax
push 0x806e6c6
push eax
mov dword [rest], eax
call dbg.terminate
add esp, 0xc
mov ecx, dword [rest]
push ecx
push esi
push edi
call dbg.on_ctcp
jmp 0x805f68b
inc eax
mov dword [rest], eax
jmp 0x805f6b9
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb3c]
test ebx, ebx
mov edi, dword [arg_8h]
je 0x80552ed
nop
lea esi, [esi]
sub esp, 8
lea esi, [ebx + 0x20c]
push esi
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8055300
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80552d0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [newnuh]
push eax
push esi
call sym.imp.strcpy
add esp, 0x10
jmp 0x80552e7
push ebp
mov ebp, esp
push ebx
push ebx
mov ebx, dword [arg_8h]
test ebx, ebx
je 0x804a241
cmp byte [ebx], 0
jne 0x804a250
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
nop
lea esi, [esi]
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov eax, dword [eax + 0x720]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
mov edx, eax
je 0x804a241
mov al, byte [eax + 0x3e]
shr al, 1
and eax, 7
dec eax
je 0x804a241
sub esp, 8
push ebx
lea eax, [edx + 0x34]
push eax
mov dword [obj.mallocdoer], 0x804a230
call dbg.mstrcpy
add esp, 0x10
jmp 0x804a241
push ebp
mov ebp, esp
sub esp, 8
mov edx, dword [obj.current]
test edx, edx
mov eax, dword [arg_8h]
je 0x8049770
test eax, eax
je 0x8049763
mov al, byte [eax]
test al, al
je 0x8049763
mov byte [edx + 0x380], al
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
sub esp, 8
push obj.ERR_INIT
push str._s_Stray_CMDCHAR_setting__ignored__n
call sym.imp.printf
jmp 0x8049763
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea eax, [line]
push eax
call dbg.chop
mov dword [nick], eax
lea eax, [line]
mov dword [esp], eax
call dbg.chop
mov dword [userhost], eax
lea eax, [line]
mov dword [esp], eax
call dbg.chop
mov edi, eax
lea eax, [line]
mov dword [esp], eax
call dbg.chop
mov ebx, eax
lea eax, [line]
mov dword [esp], eax
call dbg.chop
add esp, 0x10
test ebx, ebx
mov esi, eax
je 0x8063a86
cmp byte [ebx], 0
jne 0x8063ae0
mov ebx, dword [obj.now]
mov eax, ebx
sub eax, ebx
cmp eax, 0x1274ff
jg 0x8063abc
test esi, esi
je 0x8063aa0
cmp byte [esi], 0
jne 0x8063ad0
xor eax, eax
sub esp, 8
mov esi, dword [line]
push esi
push eax
push ebx
push edi
mov ebx, dword [userhost]
push ebx
mov ecx, dword [nick]
push ecx
call dbg.make_seen
add esp, 0x20
lea esp, [var_ch]
pop ebx
pop esi
pop edi
xor eax, eax
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push esi
call sym.imp.atoi
add esp, 0x10
jmp 0x8063aa2
mov esi, esi
sub esp, 0xc
push ebx
call sym.imp.atol
mov ebx, eax
add esp, 0x10
mov eax, dword [obj.now]
jmp 0x8063a8e
push ebp
mov ebp, esp
push edi
push ebx
sub esp, 0x58
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov edx, eax
je 0x8049cc1
cld
xor eax, eax
lea edi, [User]
mov ecx, 0x12
rep stosd dword es:[edi], eax
push edi
push 0xd
push edx
lea eax, [dest]
push eax
call sym.imp.strncpy
mov eax, dword [obj.userident]
mov dword [obj.cfgUser], eax
mov dword [var_54h], eax
inc eax
mov dword [obj.userident], eax
mov al, byte [var_1ah]
and eax, 0xfffffff1
or eax, 2
mov byte [var_1ah], al
mov eax, dword [obj.current]
push 0x48
lea edx, [eax + 0x71c]
push edx
lea ebx, [User]
push ebx
add eax, 0x720
push eax
mov byte [var_43h], 0
mov byte [User], 1
or byte [var_1ch], 0x20
call dbg.addstruct
lea esp, [var_8h]
pop ebx
pop edi
pop ebp
ret
jmp dword [reloc.strncpy]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea esi, [rest]
push esi
mov edi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8054643
cmp byte [eax], 0x23
je 0x8054660
sub esp, 8
mov edx, dword [0x8070640]
push edx
push edi
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push eax
push edi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x8054653
sub esp, 0xc
push esi
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [who], eax
je 0x80547b0
mov eax, dword [who]
push eax
push ebx
push edi
push str._do_rspy___s___s___s_n
call dbg.debug
mov eax, dword [obj.current]
mov edx, dword [eax + 0xb28]
mov dword [pt], edx
xor edx, edx
add esp, 0x10
cmp edx, dword [eax + 0xb24]
mov dword [i], 0
jge 0x80546f6
mov esi, dword [pt]
add esi, 0x51
jmp 0x80546d0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp byte [esi - 0x51], 0
jne 0x8054708
inc dword [i]
mov eax, dword [obj.current]
mov edx, dword [i]
add esi, 0xa1
add dword [pt], 0xa1
cmp edx, dword [eax + 0xb24]
jl 0x80546d0
push ecx
push ebx
push str.You_are_not_spying_on__s
push edi
call dbg.send_to_user
jmp 0x8054653
push eax
mov eax, dword [pt]
push esi
inc eax
push eax
push str._RSPY__type_s_who_s_n
call dbg.debug
add esp, 0x10
cmp byte [esi - 0x51], 0
je 0x80546d6
sub esp, 8
mov eax, dword [pt]
push ebx
inc eax
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x80546d6
sub esp, 8
mov eax, dword [who]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805476b
sub esp, 8
mov eax, dword [who]
push eax
push esi
call dbg.getnick
mov dword [esp], eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x80546d6
sub esp, 8
mov eax, dword [who]
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x80547a4
push eax
push ebx
push str.No_longer_spying_on__s_for_you
push edi
call dbg.send_to_user
add esp, 0xc
push 0xa1
push 0
mov ebx, dword [pt]
push ebx
call sym.imp.memset
jmp 0x8054653
mov esi, dword [who]
push esi
push ebx
push str.No_longer_spying_on__s_for__s
jmp 0x8054786
mov dword [who], edi
jmp 0x8054689
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
mov esi, dword [s]
push esi
mov edi, dword [arg_10h]
mov dword [obj.mallocdoer], 0x804cca0
call sym.imp.strlen
mov ebx, eax
mov dword [esp], edi
call sym.imp.strlen
lea eax, [eax + ebx + 0x48]
mov dword [esp], eax
call dbg.MyMalloc
mov ebx, eax
mov dword [esp], esi
call sym.imp.strlen
lea eax, [eax + ebx + 0x45]
mov dword [ebx + 0x40], eax
pop eax
pop edx
push esi
lea eax, [ebx + 0x44]
push eax
call sym.imp.strcpy
pop esi
pop eax
push edi
mov ecx, dword [ebx + 0x40]
push ecx
call sym.imp.strcpy
pop eax
pop edx
mov eax, dword [nick]
push eax
lea eax, [ebx + 0x3c]
push eax
mov dword [obj.mallocdoer], 0x804cca0
call dbg.mstrcpy
mov edx, dword [obj.CurrentChan]
mov eax, dword [edx + 0x1c]
mov dword [ebx], eax
mov eax, dword [obj.now]
mov dword [ebx + 0x38], eax
mov dword [ebx + 0x34], eax
mov dword [ebx + 0x30], eax
mov dword [ebx + 0x2c], eax
mov dword [ebx + 0x28], eax
mov dword [ebx + 0x24], eax
mov dword [ebx + 0x20], eax
mov dword [edx + 0x1c], ebx
lea esp, [var_ch]
mov eax, ebx
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x28
push 1
mov esi, dword [arg_8h]
push esi
call dbg.search_list
add esp, 0x10
test eax, eax
je 0x8055b70
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
jmp 0x8055b70
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
push 0x264
mov dword [obj.mallocdoer], 0x8055b40
call dbg.MyMalloc
mov ebx, eax
pop eax
pop edx
push esi
lea esi, [ebx + 0x20c]
push esi
call sym.imp.strcpy
mov eax, dword [obj.now]
mov dword [ebx + 0x260], eax
mov dword [ebx + 4], 0xffffffff
mov dword [ebx + 0x208], 0x11
mov dword [esp], ebx
call dbg.add_client
or dword [ebx + 0x208], 0x10
mov dword [esp], 0
call dbg.SockListener
add esp, 0x10
test eax, eax
mov dword [ebx + 4], eax
js 0x8055c30
push eax
lea eax, [sz]
push eax
lea eax, [ebp - 0x18]
push eax
mov eax, dword [ebx + 4]
push eax
mov dword [sz], 0x10
call sym.imp.getsockname
add esp, 0x10
test eax, eax
js 0x8055c30
mov dx, word [sai.sin_len]
xchg dl, dh
and edx, 0xffff
mov eax, dword [obj.current]
mov eax, dword [eax + 0xc]
push edx
xchg al, ah
ror eax, 0x10
xchg al, ah
push eax
push str.DCC_CHAT_CHAT__lu__i
push esi
call dbg.getnick
mov dword [esp], eax
call dbg.send_ctcp
jmp 0x8055b5a
mov esi, esi
mov dword [ebx + 0x208], 0x80
jmp 0x8055b5a
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea eax, [rest]
push eax
mov edi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804f923
cmp byte [eax], 0
jne 0x804f940
sub esp, 8
mov ebx, dword [0x8070860]
push ebx
push edi
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
mov edx, dword [obj.mcmd]
test edx, edx
je 0x804f987
xor ebx, ebx
sub esp, 8
mov eax, dword [ebx + obj.mcmd]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804f996
sub esp, 8
mov eax, dword [ebx + 0x8070264]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804f996
add ebx, 0x10
mov eax, dword [ebx + obj.mcmd]
test eax, eax
jne 0x804f94c
push eax
push esi
push str.Unknown_command:__s
push edi
call dbg.send_to_user
jmp 0x804f933
sub esp, 8
mov ecx, dword [ebx + obj.mcmd]
push ecx
jmp 0x804f92d
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x27c
mov eax, dword [args]
test eax, eax
je 0x805af68
cmp byte [eax], 0
jne 0x805af70
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push edx
push eax
push str._LINK__s_n
mov eax, dword [Link]
push eax
lea ebx, [args]
call dbg.link_bcast
mov dword [esp], ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
mov esi, eax
mov dword [esp], ebx
call dbg.chop
mov dword [bot], eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test edi, edi
mov ebx, eax
je 0x805af68
cmp byte [edi], 0
je 0x805af68
test esi, esi
je 0x805af68
cmp byte [esi], 0
je 0x805af68
sub esp, 8
push 0x806ad7e
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov dword [lntype], 0x64
jne 0x805b1b0
sub esp, 0xc
push esi
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x1f
ja 0x805af68
mov eax, dword [lntype]
sub eax, 0x65
cmp eax, 1
ja 0x805b049
mov eax, dword [bot]
test eax, eax
je 0x805af68
mov eax, dword [bot]
cmp byte [eax], 0
je 0x805af68
sub esp, 0xc
push eax
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x1f
ja 0x805af68
cmp dword [lntype], 4
je 0x805b182
sub esp, 0xc
test ebx, ebx
mov eax, ebx
je 0x805b178
push eax
mov eax, dword [bot]
test eax, eax
je 0x805b16e
push eax
push edi
push esi
push str._Link_link__adding_new_link_::_entity___s__type___s__bot___s__nick___s_n
call dbg.debug
lea edi, [new]
xor eax, eax
cld
mov ecx, 0x96
rep stosd dword es:[edi], eax
mov eax, dword [obj.botlinkident]
mov dword [var_274h], eax
mov dl, byte [lntype]
inc eax
mov dword [obj.botlinkident], eax
mov byte [var_26fh], dl
mov eax, dword [obj.now]
mov edx, dword [Link]
mov dword [var_2ch], eax
add esp, 0x20
mov eax, dword [edx + 4]
cmp dword [lntype], 0x64
mov byte [new], 1
mov byte [var_26eh], 1
mov dword [var_34h], 0xffffffff
mov byte [var_270h], 5
mov dword [var_24h], eax
je 0x805b155
cmp dword [lntype], 0x65
je 0x805b143
sub esp, 8
mov eax, dword [bot]
push eax
lea eax, [dest]
push eax
call sym.imp.strcpy
pop ecx
pop edi
push ebx
lea eax, [var_24ch]
push eax
call sym.imp.strcpy
pop eax
pop edx
push 0x64
push esi
call dbg.find_entity
mov eax, dword [eax + 4]
mov dword [var_28h], eax
add esp, 0x10
push 0x258
push obj.botlinkSIZE
lea eax, [new]
push eax
push obj.botlinkBASE
call dbg.addstruct
mov eax, dword [obj.now]
mov dword [obj.last_autolink], eax
jmp 0x805af68
mov eax, dword [bot]
sub esp, 8
push eax
lea eax, [dest]
jmp 0x805b100
sub esp, 8
push esi
lea eax, [dest]
push eax
call sym.imp.strcpy
mov dword [var_28h], 0
jmp 0x805b116
mov eax, obj.NULLSTR
jmp 0x805b065
mov eax, obj.NULLSTR
jmp 0x805b056
test ebx, ebx
je 0x805af68
cmp byte [ebx], 0
je 0x805af68
sub esp, 0xc
push ebx
call sym.imp.strlen
add esp, 0x10
cmp eax, 0xb
jbe 0x805b049
jmp 0x805af68
lea esi, [esi]
sub esp, 8
push 0x806ad88
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov dword [lntype], 0x65
je 0x805afe7
sub esp, 8
push 0x806b467
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805af68
mov dword [lntype], 0x66
jmp 0x805afe7
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x1034
push 1
mov esi, dword [channel]
push esi
mov byte [sign], 0x2b
call dbg.find_channel
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804e884
sub esp, 8
push 0x14
push eax
call dbg.get_int_varc
mov ebx, dword [rest]
push ebx
sub esp, 8
mov ecx, dword [from]
push ecx
mov dword [togprot], eax
mov byte [unminmode], 0
mov byte [unminparams], 0
mov byte [unplusmode], 0
mov byte [unplusparams], 0
call dbg.getnick
add esp, 0xc
push eax
push str.__s_sets_mode:__s
push esi
call dbg.send_spy
add esp, 0x14
lea eax, [rest]
push eax
call dbg.chop
mov edi, eax
mov eax, dword [rest]
mov dword [params], eax
mov dl, byte [edi]
add esp, 0x10
test dl, dl
je 0x804e869
mov esi, esi
lea edi, [edi]
movsx eax, dl
sub eax, 0x2b
cmp eax, 0x4b
ja case.0x804e84b.44
jmp dword [eax*4 + 0x8068d24]
mov byte [sign], dl
nop
lea esi, [esi]
inc edi
mov al, byte [edi]
test al, al
mov dl, al
jne 0x804e840
cmp byte [unplusmode], 0
jne 0x804e87b
cmp byte [unminmode], 0
je 0x804e884
test byte [esi + 0x38d], 8
jne 0x804e88c
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
lea eax, [unminparams]
push eax
lea eax, [unplusparams]
push eax
lea eax, [unminmode]
push eax
lea eax, [unplusmode]
push eax
push str._s__s__s__s
mov ebx, dword [channel]
push ebx
call dbg.sendmode
add esp, 0x20
jmp 0x804e884
sub esp, 0xc
lea eax, [params]
push eax
call dbg.chop
add esp, 0x10
cmp byte [sign], 0x2b
mov dword [parm], eax
je 0x804e9d7
sub esp, 8
mov ebx, dword [parm]
push ebx
lea eax, [esi + 0x18]
push eax
call dbg.delete_ban
pop edx
pop ecx
push 0x12
push esi
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je case.0x804e84b.44
sub esp, 8
mov eax, dword [channel]
push eax
mov eax, dword [parm]
push eax
call dbg.get_shituser
add esp, 0x10
test eax, eax
mov dword [User], eax
je 0x804e9d0
mov ebx, dword [eax + 0x3c]
shr ebx, 9
and ebx, 0xff
cmp ebx, 2
jle 0x804e992
mov eax, dword [User]
mov eax, dword [eax + 0x38]
test eax, eax
je case.0x804e84b.44
sub esp, 8
push 0x806e330
lea eax, [unplusmode]
push eax
call dbg.Strcat
pop ebx
mov edx, dword [User]
pop eax
mov ecx, dword [edx + 0x38]
push ecx
lea ebx, [unplusparams]
push ebx
call dbg.Strcat
pop eax
pop edx
push 0x8067364
push ebx
call dbg.Strcat
add esp, 0x10
jmp case.0x804e84b.44
sub esp, 8
mov eax, dword [channel]
push eax
mov eax, dword [parm]
push eax
call dbg.find_shit
add esp, 0x10
test eax, eax
mov dword [User], eax
je 0x804e9cc
mov ebx, dword [eax + 0x3c]
shr ebx, 9
and ebx, 0xff
cmp ebx, 2
jle case.0x804e84b.44
jmp 0x804e940
xor ebx, ebx
jmp 0x804e9be
xor ebx, ebx
jmp 0x804e93b
mov ebx, dword [obj.now]
push ebx
push eax
mov ecx, dword [from]
push ecx
lea eax, [esi + 0x18]
push eax
call dbg.make_ban
pop eax
pop edx
push 0
push esi
call dbg.get_int_varc
add esp, 0x10
test eax, eax
jne 0x804eb20
mov eax, dword [obj.CurrentUser]
test eax, eax
je 0x804ea18
mov eax, dword [eax + 0x3c]
shr eax, 9
cmp al, 0xc8
je case.0x804e84b.44
sub esp, 0xc
mov eax, dword [from]
push eax
call dbg.is_localbot
add esp, 0x10
test eax, eax
jne case.0x804e84b.44
push eax
push 8
push esi
mov ebx, dword [from]
push ebx
call dbg.check_mass
add esp, 0x10
test eax, eax
je 0x804ea6f
mov eax, dword [obj.CurrentUser]
test eax, eax
je 0x804ea5c
mov eax, dword [eax + 0x3c]
shr eax, 9
and eax, 0xff
cmp eax, 0x4f
jg 0x804ea6f
sub esp, 8
mov ecx, dword [channel]
push ecx
mov edx, dword [from]
push edx
call dbg.mass_action
add esp, 0x10
mov eax, dword [togprot]
test eax, eax
je case.0x804e84b.44
sub esp, 8
mov eax, dword [channel]
push eax
mov eax, dword [parm]
push eax
call dbg.get_protuseraccess
add esp, 0x10
test eax, eax
je case.0x804e84b.44
sub esp, 8
mov eax, dword [channel]
push eax
mov eax, dword [parm]
push eax
call dbg.get_shituser
add esp, 0x10
test eax, eax
mov dword [User], eax
je 0x804eac9
mov eax, dword [eax + 0x3c]
shr eax, 9
test al, al
jne case.0x804e84b.44
sub esp, 8
push 0x806e330
lea eax, [unminmode]
push eax
call dbg.Strcat
pop ebx
pop eax
mov ecx, dword [parm]
push ecx
lea ebx, [unminparams]
push ebx
call dbg.Strcat
pop eax
pop edx
push 0x8067364
push ebx
call dbg.Strcat
add esp, 0xc
mov eax, dword [parm]
push eax
push esi
mov eax, dword [from]
push eax
call dbg.prot_action
jmp 0x804e98a
nop
lea esi, [esi]
sub esp, 0xc
mov eax, dword [channel]
push eax
call dbg.num_banned
add esp, 0x10
cmp eax, 0x14
jne 0x804ea01
sub esp, 8
push 0
push esi
call dbg.get_int_varc
lea eax, [eax + eax*2]
lea eax, [eax + eax*4]
add esp, 0xc
shl eax, 2
push eax
push str.__
mov eax, dword [channel]
push eax
call dbg.channel_massunbanfrom
add esp, 0x10
jmp 0x804ea01
lea esi, [esi]
lea edi, [edi]
movsx eax, byte [sign]
push eax
push 0x69
push esi
mov eax, dword [from]
push eax
call dbg.reverse_mode
add esp, 0x10
test eax, eax
je 0x804ebab
cmp byte [sign], 0x2b
je 0x804ebce
sub esp, 8
push 0x806f5ac
lea eax, [unplusmode]
push eax
call dbg.Strcat
add esp, 0x10
cmp byte [sign], 0x2b
sete dl
mov al, byte [esi + 0x38c]
shl edx, 5
and eax, 0xffffffdf
or eax, edx
mov byte [esi + 0x38c], al
jmp case.0x804e84b.44
sub esp, 8
push 0x806f5ac
lea eax, [unminmode]
jmp 0x804eba2
sub esp, 0xc
lea eax, [params]
push eax
call dbg.chop
mov dword [parm], eax
movsx eax, byte [sign]
push eax
push 0x6b
push esi
mov eax, dword [from]
push eax
call dbg.reverse_mode
add esp, 0x20
cmp byte [sign], 0x2b
mov ecx, eax
je 0x804ec54
and byte [esi + 0x38c], 0x7f
test eax, eax
je case.0x804e84b.44
mov eax, dword [parm]
test eax, eax
je case.0x804e84b.44
sub esp, 8
push 0x806a2cd
lea eax, [unplusmode]
push eax
call dbg.Strcat
pop ebx
pop eax
mov ecx, dword [parm]
push ecx
jmp 0x804e971
or byte [esi + 0x38c], 0x80
mov ebx, dword [parm]
test ebx, ebx
mov al, byte [esi + 0x38d]
sete dl
and eax, 0xfffffffe
or eax, edx
test ecx, ecx
mov byte [esi + 0x38d], al
je 0x804ecbe
mov ecx, dword [parm]
test ecx, ecx
je 0x804ecbe
sub esp, 8
push 0x806a2cd
lea eax, [unminmode]
push eax
call dbg.Strcat
pop eax
pop edx
mov eax, dword [parm]
push eax
lea ebx, [unminparams]
push ebx
call dbg.Strcat
pop ecx
pop eax
push 0x8067364
push ebx
call dbg.Strcat
add esp, 0x10
sub esp, 0xc
lea ebx, [esi + 8]
push ebx
call dbg.MyFree
pop eax
mov eax, dword [parm]
test eax, eax
mov dword [obj.mallocdoer], 0x804e7a0
pop edx
je 0x804ecec
push eax
push ebx
call dbg.mstrcpy
jmp 0x804e98a
mov eax, 0x8067964
jmp 0x804ece0
lea esi, [esi]
lea edi, [edi]
cmp byte [sign], 0x2b
je 0x804ed7e
and byte [esi + 0x38c], 0xef
movsx eax, byte [sign]
push eax
push 0x6c
push esi
mov eax, dword [from]
push eax
call dbg.reverse_mode
add esp, 0x10
test eax, eax
je case.0x804e84b.44
cmp byte [sign], 0x2b
je 0x804ed6a
sub esp, 8
push 0x8068575
lea eax, [unplusmode]
push eax
call dbg.Strcat
mov eax, dword [esi + 0x10]
push eax
lea eax, [unplusparams]
push eax
push str._s__i_
push eax
call sym.imp.sprintf
add esp, 0x20
jmp case.0x804e84b.44
sub esp, 8
push 0x8068575
lea eax, [unminmode]
push eax
jmp 0x804e985
sub esp, 0xc
lea eax, [params]
push eax
call dbg.chop
mov dword [esp], eax
call dbg.Atoi
add esp, 0x10
xor edx, edx
test eax, eax
je 0x804eda0
mov edx, dword [eax]
or byte [esi + 0x38c], 0x10
mov dword [esi + 0x10], edx
jmp 0x804ed10
movsx eax, byte [sign]
push eax
push 0x6d
push esi
mov eax, dword [from]
push eax
call dbg.reverse_mode
add esp, 0x10
test eax, eax
je 0x804edea
cmp byte [sign], 0x2b
je 0x804ee05
sub esp, 8
push 0x806b8d1
lea eax, [unplusmode]
push eax
call dbg.Strcat
add esp, 0x10
cmp byte [sign], 0x2b
sete dl
mov al, byte [esi + 0x38c]
shl edx, 2
and eax, 0xfffffffb
jmp 0x804ebc1
sub esp, 8
push 0x806b8d1
lea eax, [unminmode]
jmp 0x804ede1
movsx eax, byte [sign]
push eax
push 0x6e
push esi
mov eax, dword [from]
push eax
call dbg.reverse_mode
add esp, 0x10
test eax, eax
je 0x804ee50
cmp byte [sign], 0x2b
je 0x804ee6b
sub esp, 8
push 0x806a72f
lea eax, [unplusmode]
push eax
call dbg.Strcat
add esp, 0x10
cmp byte [sign], 0x2b
sete dl
mov al, byte [esi + 0x38c]
shl edx, 6
and eax, 0xffffffbf
jmp 0x804ebc1
sub esp, 8
push 0x806a72f
lea eax, [unminmode]
jmp 0x804ee47
sub esp, 0xc
lea eax, [params]
push eax
call dbg.chop
mov dword [esp], eax
mov dword [nick], eax
call dbg.find_nuh
add esp, 0x10
test eax, eax
mov dword [nickuh], eax
je case.0x804e84b.44
sub esp, 8
mov edx, dword [channel]
push edx
push eax
call dbg.get_userlevel
add esp, 0x10
cmp byte [sign], 0x2b
mov ebx, eax
je 0x804f071
push eax
mov eax, dword [nick]
push eax
push 0x102
push esi
call dbg.del_mode
add esp, 0x10
cmp ebx, 0xc8
je 0x804f040
sub esp, 8
mov edx, dword [nick]
push edx
push obj.CurrentNick
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je case.0x804e84b.44
sub esp, 8
mov eax, dword [channel]
push eax
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, 0xc8
je case.0x804e84b.44
cmp eax, 0x4f
jle 0x804f010
mov ebx, dword [togprot]
test ebx, ebx
je case.0x804e84b.44
sub esp, 8
mov ecx, dword [channel]
push ecx
mov edx, dword [nickuh]
push edx
call dbg.get_protlevel
add esp, 0x10
test eax, eax
je case.0x804e84b.44
sub esp, 8
mov eax, dword [channel]
push eax
mov eax, dword [nickuh]
push eax
call dbg.get_shitlevel
add esp, 0x10
test eax, eax
jne case.0x804e84b.44
sub esp, 0xc
mov eax, dword [nickuh]
push eax
call dbg.password_needed
add esp, 0x10
test eax, eax
je 0x804efa6
sub esp, 0xc
mov eax, dword [nickuh]
push eax
call dbg.verified
add esp, 0x10
test eax, eax
je 0x804efeb
sub esp, 8
push 0x80682fb
lea eax, [unplusmode]
push eax
call dbg.Strcat
pop ebx
pop eax
mov ecx, dword [nick]
push ecx
lea ebx, [unplusparams]
push ebx
call dbg.Strcat
pop eax
pop edx
push 0x8067364
push ebx
call dbg.Strcat
add esp, 0xc
mov ecx, dword [nick]
push ecx
jmp 0x804eb09
sub esp, 0xc
mov eax, dword [nickuh]
push eax
call dbg.is_localbot
add esp, 0x10
test eax, eax
je case.0x804e84b.44
jmp 0x804efa6
mov esi, esi
lea edi, [edi]
push eax
push 4
push esi
mov eax, dword [from]
push eax
call dbg.check_mass
add esp, 0x10
test eax, eax
je 0x804ef30
sub esp, 8
mov eax, dword [channel]
push eax
mov eax, dword [from]
push eax
call dbg.mass_action
add esp, 0x10
jmp 0x804ef30
sub esp, 8
mov ecx, dword [nick]
mov eax, dword [obj.current]
push ecx
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne case.0x804e84b.44
and byte [esi + 0x38d], 0xf7
jmp case.0x804e84b.44
push eax
mov ecx, dword [nick]
push ecx
push 2
push esi
call dbg.add_mode
add esp, 0xc
mov edx, dword [nick]
push edx
push 0x100
push esi
call dbg.del_mode
add esp, 0x10
cmp ebx, 0xc8
je 0x804f12c
test ebx, ebx
jne case.0x804e84b.44
sub esp, 8
mov eax, dword [channel]
push eax
mov ebx, dword [nickuh]
push ebx
call dbg.get_shitlevel
add esp, 0x10
test eax, eax
jne 0x804f104
sub esp, 8
push 0x18
push esi
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804f0ee
sub esp, 8
push 0x40
mov ecx, dword [from]
push ecx
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x804f104
sub esp, 8
push 0x19
push esi
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je case.0x804e84b.44
sub esp, 8
push 0x80682fb
lea eax, [unminmode]
push eax
call dbg.Strcat
pop eax
pop edx
mov eax, dword [nick]
push eax
lea ebx, [unminparams]
jmp 0x804e977
sub esp, 8
mov eax, dword [nick]
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804f0a5
or byte [esi + 0x38d], 8
call dbg.check_shit
mov eax, dword [esi + 0x14]
test eax, eax
jne 0x804f175
sub esp, 0xc
lea eax, [esi + 0x14]
push eax
call dbg.MyFree
jmp 0x804e98a
sub esp, 8
push 0xe
push esi
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804f164
sub esp, 8
mov eax, dword [channel]
push eax
mov eax, dword [esi + 0x14]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, 0x4f
jg 0x804f164
push eax
push str.Doh__This_is_revenge_fucker_
push eax
mov ebx, dword [esi + 0x14]
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
mov eax, dword [channel]
push eax
call dbg.sendkick
add esp, 0x10
jmp 0x804f164
movsx eax, byte [sign]
push eax
push 0x70
push esi
mov edx, dword [from]
push edx
call dbg.reverse_mode
add esp, 0x10
test eax, eax
je 0x804f1fb
cmp byte [sign], 0x2b
je 0x804f213
sub esp, 8
push 0x806d473
lea eax, [unplusmode]
push eax
call dbg.Strcat
add esp, 0x10
cmp byte [sign], 0x2b
mov al, byte [esi + 0x38c]
sete dl
and eax, 0xfffffffe
jmp 0x804ebc1
sub esp, 8
push 0x806d473
lea eax, [unminmode]
jmp 0x804f1f2
movsx eax, byte [sign]
push eax
push 0x73
push esi
mov eax, dword [from]
push eax
call dbg.reverse_mode
add esp, 0x10
test eax, eax
je 0x804f25e
cmp byte [sign], 0x2b
je 0x804f278
sub esp, 8
push 0x806a12e
lea eax, [unplusmode]
push eax
call dbg.Strcat
add esp, 0x10
cmp byte [sign], 0x2b
sete dl
mov al, byte [esi + 0x38c]
add edx, edx
and eax, 0xfffffffd
jmp 0x804ebc1
sub esp, 8
push 0x806a12e
lea eax, [unminmode]
jmp 0x804f255
movsx eax, byte [sign]
push eax
push 0x74
push esi
mov eax, dword [from]
push eax
call dbg.reverse_mode
add esp, 0x10
test eax, eax
je 0x804f2c3
cmp byte [sign], 0x2b
je 0x804f2de
sub esp, 8
push 0x806d170
lea eax, [unplusmode]
push eax
call dbg.Strcat
add esp, 0x10
cmp byte [sign], 0x2b
sete dl
mov al, byte [esi + 0x38c]
shl edx, 3
and eax, 0xfffffff7
jmp 0x804ebc1
sub esp, 8
push 0x806d170
lea eax, [unminmode]
jmp 0x804f2ba
sub esp, 0xc
lea eax, [params]
push eax
call dbg.chop
add esp, 0x10
cmp byte [sign], 0x2b
mov dword [nick], eax
je 0x804f324
push eax
mov eax, dword [nick]
push eax
push 1
push esi
call dbg.del_mode
jmp 0x804e98a
push edx
push eax
push 1
push esi
call dbg.add_mode
jmp 0x804e98a
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
test ebx, ebx
je 0x80587cd
sub esp, 0xc
push ebx
call dbg.getnick
mov ebx, dword [obj.botlist]
add esp, 0x10
test ebx, ebx
mov esi, eax
je 0x80587c2
lea esi, [esi]
lea edi, [edi]
sub esp, 8
lea eax, [ebx + 0x220]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edx, 1
je 0x80587c4
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80587a0
xor edx, edx
lea esp, [var_8h]
pop ebx
pop esi
mov eax, edx
pop ebp
ret
sub esp, 0xc
push str._is_localbot__PANIC:_called_with_a_NULL_arg__n
call dbg.debug
mov byte [0], 0
add esp, 0x10
jmp 0x805877c
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
mov edi, dword [arg_ch]
mov esi, dword [arg_10h]
push obj.CurrentNick
push edi
call dbg.find_chanuser
add esp, 0x10
xor edx, edx
test eax, eax
mov ebx, eax
je 0x804ada5
test esi, 3
je 0x804add0
test byte [eax + 4], 2
je 0x804adb0
xor edx, edx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
nop
sub esp, 8
mov eax, dword [edi + 4]
push eax
push ebx
call dbg.get_nuh
mov dword [esp], eax
call dbg.get_userlevel
add esp, 0x10
test eax, eax
jne case.0x804add5.0
lea esi, [esi]
cmp esi, 0x10
ja case.0x804add5.0
jmp dword [esi*4 + 0x8067c50]
mov edx, dword [obj.now]
mov eax, edx
sub eax, dword [ebx + 0x34]
cmp eax, 0xa
jle 0x804adf6
mov dword [ebx + 0x34], edx
mov dword [ebx + 0x1c], 0
sub esp, 8
inc dword [ebx + 0x1c]
push 2
push edi
call dbg.get_int_varc
add esp, 0x10
cmp dword [ebx + 0x1c], eax
jl case.0x804add5.0
sub esp, 8
push 0x10
push edi
call dbg.get_int_varc
add esp, 0x10
test eax, eax
mov edx, 1
jne 0x804ada5
jmp case.0x804add5.0
mov edx, dword [obj.now]
mov eax, edx
sub eax, dword [ebx + 0x20]
cmp eax, 0xa
jle 0x804ae42
mov dword [ebx + 0x20], edx
mov dword [ebx + 8], 0
sub esp, 8
inc dword [ebx + 8]
push 7
push edi
call dbg.get_int_varc
add esp, 0x10
cmp dword [ebx + 8], eax
jl case.0x804add5.0
mov dword [arg_ch], 8
mov dword [from], edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.get_int_varc
mov edx, dword [obj.now]
mov eax, edx
sub eax, dword [ebx + 0x28]
cmp eax, 0xa
jle 0x804ae8c
mov dword [ebx + 0x28], edx
mov dword [ebx + 0x10], 0
sub esp, 8
inc dword [ebx + 0x10]
push 3
push edi
call dbg.get_int_varc
add esp, 0x10
cmp dword [ebx + 0x10], eax
jl case.0x804add5.0
mov edx, 1
jmp 0x804ada5
mov edx, dword [obj.now]
mov eax, edx
sub eax, dword [ebx + 0x24]
cmp eax, 0xa
jle 0x804aeca
mov dword [ebx + 0x24], edx
mov dword [ebx + 0xc], 0
sub esp, 8
inc dword [ebx + 0xc]
push 4
push edi
call dbg.get_int_varc
add esp, 0x10
cmp dword [ebx + 0xc], eax
jmp 0x804aea0
mov edx, dword [obj.now]
mov eax, edx
sub eax, dword [ebx + 0x2c]
cmp eax, 0xa
jle 0x804aefa
mov dword [ebx + 0x2c], edx
mov dword [ebx + 0x14], 0
sub esp, 8
inc dword [ebx + 0x14]
push 5
push edi
call dbg.get_int_varc
add esp, 0x10
cmp dword [ebx + 0x14], eax
jmp 0x804aea0
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push 1
mov ecx, dword [channel]
push ecx
mov edi, dword [arg_8h]
call dbg.find_channel
add esp, 0x10
test eax, eax
mov esi, eax
je 0x80582bf
sub esp, 8
push 0x1b
push eax
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x80582bf
mov ebx, dword [esi + 0x1c]
test ebx, ebx
je 0x80582bf
lea esi, [esi]
sub esp, 0xc
push ebx
call dbg.get_nuh
pop ecx
pop edx
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x80582c7
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80582a0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
test ebx, ebx
je 0x80582bf
sub esp, 8
push 1
push edi
call dbg.format_uh
mov dword [temp], eax
pop eax
pop edx
push 6
push esi
call dbg.get_int_varc
add esp, 0x10
cmp eax, 2
mov dword [mpl], eax
jg 0x805835a
cmp dword [mpl], 1
jle 0x8058325
mov eax, dword [ebx + 4]
and eax, 0x500
cmp eax, 0x500
je 0x8058325
push eax
mov eax, dword [temp]
push eax
push esi
push edi
call dbg.getnick
pop edx
pop ecx
push eax
mov eax, dword [channel]
push eax
call dbg.deop_ban
or dword [ebx + 4], 0x500
add esp, 0x10
mov eax, dword [mpl]
test eax, eax
jle 0x80582bf
test byte [ebx + 5], 2
jne 0x80582bf
push eax
push 0x806b960
push esi
push edi
call dbg.getnick
pop edx
pop ecx
push eax
mov eax, dword [channel]
push eax
call dbg.sendkick
or dword [ebx + 4], 0x200
add esp, 0x10
jmp 0x80582bf
sub esp, 8
push 0x15
push esi
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x80582ee
sub esp, 8
mov esi, dword [channel]
push esi
push edi
call dbg.is_user
add esp, 0x10
test eax, eax
jne 0x80582ee
sub esp, 0xc
push edi
call dbg.getnick
pop edx
pop ecx
push eax
mov eax, dword [channel]
push eax
call dbg.usermode
add esp, 0x10
and eax, 2
jne 0x80582ee
mov edx, dword [obj.now]
push eax
lea eax, [edx + 0x15180]
push eax
push edx
push str.Quit_the_damn_mass_modes
push str.Auto_Shit
mov eax, dword [channel]
push eax
push 2
mov eax, dword [temp]
push eax
call dbg.add_to_shitlist
add esp, 0x20
jmp 0x80582ee
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x10
mov eax, dword [channel]
test eax, eax
je 0x8063120
push eax
mov eax, dword [userhost]
test eax, eax
je 0x8063116
push eax
push str._get_protuseraccess__userhost___s__channel___s_n
call dbg.debug
mov eax, dword [obj.current]
mov edi, dword [eax + 0xb34]
add esp, 0x10
test edi, edi
je 0x80630ea
mov ebx, dword [edi + 0x1c]
test ebx, ebx
je 0x80630e4
sub esp, 0xc
push ebx
call dbg.get_nuh
mov esi, eax
pop eax
pop edx
push esi
mov eax, dword [userhost]
push eax
call dbg.matches
add esp, 0x10
test eax, eax
je 0x8063100
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80630c0
mov edi, dword [edi]
test edi, edi
jne 0x80630b9
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [channel]
push eax
push esi
call dbg.get_protlevel
add esp, 0x10
test eax, eax
je 0x80630de
jmp 0x80630ec
mov eax, obj.NULLSTR
jmp 0x806309c
mov eax, obj.NULLSTR
jmp 0x8063094
push ebp
mov ebp, esp
sub esp, 0x10
push 1
mov eax, dword [channel]
push eax
call dbg.find_channel
add esp, 0x10
xor edx, edx
test eax, eax
je 0x804c0d7
mov eax, dword [eax + 0x18]
xor edx, edx
test eax, eax
je 0x804c0d7
lea esi, [esi]
lea edi, [edi]
mov eax, dword [eax]
inc edx
test eax, eax
jne 0x804c0d0
mov eax, edx
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x8c
mov ebx, dword [arg_ch]
test byte [ebx + 0x38d], 8
je 0x804b500
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x1a
push ebx
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804b4e8
sub esp, 8
push 0x1c
push ebx
call dbg.get_str_varc
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804b4e8
mov al, byte [m]
mov byte [mode], al
sub esp, 8
movsx edi, byte [mode]
push edi
mov al, byte [s]
push esi
mov byte [sign], al
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x804b55b
xor eax, eax
cmp byte [sign], 0x2b
je 0x804b4ea
sub esp, 8
push edi
push esi
call sym.imp.strchr
add esp, 0x10
test eax, eax
jne 0x804b57b
xor eax, eax
cmp byte [sign], 0x2d
je 0x804b4ea
sub esp, 8
mov edx, dword [ebx + 4]
push edx
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, 0x4f
jle 0x804b5f0
lea edx, [buffer]
cmp byte [sign], 0x2d
mov edi, edx
je 0x804b5d3
sub esp, 8
push esi
mov al, byte [mode]
push edx
mov byte [buffer], al
mov byte [var_87h], 0
call dbg.Strcat
add esp, 0x10
push eax
push edi
push 0x1c
push ebx
call dbg.set_str_varc
jmp 0x804b4e8
mov al, byte [esi]
test al, al
je 0x804b5eb
cmp al, byte [mode]
je 0x804b5e4
mov byte [edx], al
inc edx
inc esi
mov al, byte [esi]
test al, al
jne 0x804b5d9
mov byte [edx], 0
jmp 0x804b5c4
mov eax, 1
jmp 0x804b4ea
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
mov ebx, dword [arg_8h]
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edx, 1
jne 0x8063050
mov ebx, dword [var_4h]
mov esp, ebp
mov eax, edx
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
mov eax, dword [channel]
push eax
push ebx
call dbg.find_user
add esp, 0x10
test eax, eax
je 0x8063073
mov ax, word [eax + 0x3c]
shr ax, 6
mov edx, eax
and edx, 7
jmp 0x806303f
xor edx, edx
jmp 0x806303f
push ebp
mov ebp, esp
sub esp, 0x10
push 0x806e306
mov eax, dword [userhost]
push eax
call dbg.find_user
add esp, 0x10
xor edx, edx
test eax, eax
je 0x80632a8
cmp byte [eax + 0x15], 0
setne al
xor edx, edx
mov dl, al
mov esp, ebp
mov eax, edx
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [obj.current]
mov esi, dword [eax + 0xb34]
test esi, esi
je 0x804ac21
lea esi, [esi]
lea edi, [edi]
mov ebx, dword [esi + 0x1c]
test ebx, ebx
je 0x804ac1b
mov esi, esi
lea edi, [edi]
sub esp, 8
push esi
push ebx
call dbg.get_nuh
mov dword [esp], eax
call dbg.shit_action
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x804ac00
mov esi, dword [esi]
test esi, esi
jne 0x804abf0
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov edx, dword [arg_ch]
mov eax, dword [edx]
test eax, eax
mov ecx, dword [arg_8h]
je 0x805886c
mov al, byte [eax]
cmp al, 0x2a
je 0x80588b0
cmp al, 0x23
je 0x80588b0
cmp byte [ecx], 0x23
je 0x80588a0
mov eax, dword [obj.current]
mov eax, dword [eax + 0xb38]
test eax, eax
je 0x80588a0
mov eax, dword [eax + 4]
mov dword [arg_ch], eax
mov dword [arg_8h], obj.channelbuf
mov esp, ebp
pop ebp
jmp sym.imp.strcpy
lea esi, [esi]
lea edi, [edi]
mov eax, ecx
jmp 0x8058883
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push edx
call dbg.chop
add esp, 0x10
jmp 0x8058883
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xe8
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [chan], eax
mov dword [esp], ebx
call dbg.chop
mov esi, eax
pop eax
pop edx
mov eax, dword [chan]
push eax
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x8054485
test esi, esi
je 0x8054441
cmp byte [esi], 0
sete al
and eax, 0xff
dec eax
and esi, eax
mov eax, dword [chan]
test eax, eax
je 0x80545fd
sub esp, 8
push 1
mov edi, dword [chan]
push edi
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x80545f0
test esi, esi
je 0x80544c6
cmp byte [esi], 0x23
je 0x805448d
sub esp, 8
push str.Object_must_be_a_channel
mov ebx, dword [from]
push ebx
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push 1
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
jne 0x80544a8
push ecx
push esi
push obj.ERR_CHAN
jmp 0x805447c
sub esp, 8
push esi
mov edx, dword [from]
push edx
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x80545da
cmp byte [esi], 0
jne 0x80544c9
mov esi, dword [from]
mov eax, dword [obj.current]
xor edx, edx
cmp edx, dword [eax + 0xb24]
mov ebx, dword [eax + 0xb28]
mov dword [i], 0
jge 0x8054513
nop
lea esi, [esi]
cmp byte [ebx], 0
jne 0x8054590
inc dword [i]
mov edi, dword [i]
add ebx, 0xa1
cmp edi, dword [eax + 0xb24]
jl 0x80544f0
lea edx, [new]
cld
mov edi, edx
xor eax, eax
mov ecx, 0x28
rep stosd dword es:[edi], eax
mov byte [edi], 0
sub esp, 8
mov eax, dword [chan]
push eax
lea eax, [dest]
push eax
mov byte [new], 1
call sym.imp.strcpy
pop edi
pop eax
push esi
lea eax, [var_77h]
push eax
call sym.imp.strcpy
mov eax, dword [obj.current]
push 0xa1
lea edx, [eax + 0xb24]
push edx
lea ebx, [new]
push ebx
add eax, 0xb28
push eax
call dbg.addstruct
add esp, 0x1c
mov esi, dword [chan]
push esi
push str.Now_spying_on__s
jmp 0x805447c
nop
lea esi, [esi]
sub esp, 8
mov eax, dword [chan]
push eax
lea eax, [ebx + 1]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x80545b4
mov eax, dword [obj.current]
jmp 0x80544f9
sub esp, 8
push esi
lea eax, [ebx + 0x51]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x80545aa
push eax
mov eax, dword [chan]
push eax
push str.You_are_already_spying_on__s
jmp 0x805447c
push eax
push esi
push str.You_dont_have_enough_access_on__s
jmp 0x805447c
lea esi, [esi]
lea edi, [edi]
push esi
mov ebx, dword [chan]
push ebx
jmp 0x80544a1
sub esp, 8
mov eax, dword [0x80707a0]
push eax
mov eax, dword [from]
push eax
call dbg.usage
jmp 0x8054485
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
mov edi, dword [arg_8h]
push str.____Channel_________String____________Kick_Reason_______
push edi
call dbg.send_to_user
xor esi, esi
mov edx, dword [obj.current]
add esp, 0x10
cmp esi, dword [edx + 0x71c]
mov ebx, dword [edx + 0x720]
jge 0x806206e
cmp byte [ebx], 0
je 0x8062062
mov al, byte [ebx + 0x3e]
shr al, 1
and eax, 7
cmp eax, 3
je 0x8062084
inc esi
add ebx, 0x48
cmp esi, dword [edx + 0x71c]
jl 0x8062050
mov dword [to], str.____End_of_kicksay_list____
mov dword [arg_8h], edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_user
sub esp, 0xc
mov eax, dword [ebx + 0x34]
push eax
mov eax, dword [ebx + 0x38]
push eax
mov eax, dword [ebx + 0x2c]
push eax
push str._15s__s______s
push edi
call dbg.send_to_user
add esp, 0x20
mov edx, dword [obj.current]
jmp 0x8062062
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [rest]
test eax, eax
je 0x8066159
cmp byte [eax], 0
jne 0x8066207
mov edi, 5
lea eax, [edi - 1]
cmp eax, 0x13
jbe 0x8066190
sub esp, 8
mov ecx, dword [0x80704d0]
push ecx
mov edx, dword [from]
push edx
call dbg.usage
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
push eax
push edi
push 0x806f3d4
mov eax, dword [from]
push eax
xor ebx, ebx
call dbg.send_to_user
add esp, 0x10
cmp ebx, edi
mov esi, 1
jge 0x80661de
mov esi, esi
test esi, esi
je 0x80661de
mov eax, dword [obj.current]
mov esi, dword [eax + ebx*4 + 0xb48]
test esi, esi
push eax
mov eax, esi
je 0x8066200
push eax
push 0x806a12d
mov eax, dword [from]
push eax
inc ebx
call dbg.send_to_user
add esp, 0x10
cmp ebx, edi
jl 0x80661b0
sub esp, 8
push 0x806a64b
mov eax, dword [from]
push eax
call dbg.send_to_user
jmp 0x8066179
jmp 0x8066200
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, 0x806f231
jmp 0x80661c7
sub esp, 0xc
lea eax, [rest]
push eax
call dbg.chop
mov dword [esp], eax
call sym.imp.atoi
mov edi, eax
add esp, 0x10
jmp 0x806615e
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_10h]
test ebx, ebx
mov esi, dword [arg_8h]
je 0x8066eb4
cmp byte [ebx], 0
jne 0x8066ee0
mov eax, dword [obj.current]
movsx eax, byte [eax + 0x380]
mov dword [arg_10h], eax
mov dword [to], str.Current_commandchar_is__c
mov dword [arg_8h], esi
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.send_to_user
nop
lea esi, [esi]
sub esp, 8
push 0
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, 0x64
je 0x8066efa
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
mov dl, byte [ebx]
test dl, dl
je 0x8066f06
cmp byte [ebx + 1], 0
je 0x8066f1b
mov dword [to], str.Please_specify_a_single_character_to_be_used_as_commandchar
mov dword [arg_8h], esi
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.send_to_user
mov eax, dword [obj.current]
mov byte [eax + 0x380], dl
movsx eax, byte [ebx]
mov dword [arg_10h], eax
mov dword [to], str.Commandchar_set_to__c
jmp 0x8066eca
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb2c]
test ebx, ebx
je 0x8057817
lea esi, [esi]
lea edi, [edi]
mov eax, dword [obj.now]
sub eax, dword [ebx + 0xc]
cmp eax, 0x258
mov esi, dword [ebx]
jg 0x8057820
test esi, esi
mov ebx, esi
jne 0x8057800
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
mov esi, esi
sub esp, 0xc
mov eax, dword [ebx + 8]
push eax
call dbg.getnick
mov dword [esp], eax
call dbg.is_present
add esp, 0x10
test eax, eax
je 0x8057845
mov eax, dword [obj.now]
mov dword [ebx + 0xc], eax
jmp 0x8057811
sub esp, 8
mov eax, dword [obj.current]
push ebx
add eax, 0xb2c
push eax
call dbg.remove_time
add esp, 0x10
jmp 0x8057811
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [incmd], eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8062320
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov edi, eax
je 0x8062320
sub esp, 0xc
push esi
call dbg.find_handle
add esp, 0x10
test eax, eax
mov esi, eax
je 0x806235b
sub esp, 8
mov edx, dword [eax + 0x2c]
push edx
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, 0x64
mov edx, eax
je 0x8062233
mov eax, dword [esi + 0x3c]
shr eax, 9
and eax, 0xff
cmp edx, eax
jl 0x806234e
mov eax, dword [incmd]
test eax, eax
je 0x8062320
sub esp, 8
push 0x806803a
mov eax, dword [incmd]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8062301
mov ebx, dword [esi + 0x38]
test ebx, ebx
je 0x806228a
jmp 0x8062270
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
push edi
lea eax, [ebx + 4]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x80622f5
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8062270
sub esp, 8
push 0x806a107
push edi
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x80622c1
push eax
push edi
push str.Problem_adding__s__global_mask_
lea esi, [esi]
lea edi, [edi]
mov edi, dword [from]
push edi
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push edi
push str.__.
call dbg.matches
add esp, 0x10
test eax, eax
je 0x80622df
push eax
push edi
push str.Problem_adding__s__invalid_mask_
jmp 0x80622b0
sub esp, 8
push edi
push esi
call dbg.addmasktouser
lea eax, [esi + 8]
push eax
push edi
push str.Added_mask__s_to_user__s
jmp 0x80622b0
lea eax, [esi + 8]
push eax
push edi
push str.Mask__s_already_exists_for__s
jmp 0x80622b0
sub esp, 8
push 0x8068043
mov eax, dword [incmd]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8062335
lea esi, [esi]
sub esp, 8
mov esi, dword [0x8070440]
push esi
mov ebx, dword [from]
push ebx
call dbg.usage
jmp 0x80622b9
sub esp, 8
push edi
push esi
call dbg.delmaskfromuser
lea eax, [esi + 8]
push eax
push edi
push str.Deleted_mask__s_from_user__s
jmp 0x80622b0
sub esp, 8
push str.Access_denied
jmp 0x80622b0
sub esp, 8
push str.Invalid_handle
jmp 0x80622b0
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.cfgChan]
test eax, eax
jne 0x8049700
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x80496ef
cmp byte [eax], 0
je 0x80496ef
sub esp, 8
push eax
mov eax, dword [obj.cfgChan]
mov eax, dword [eax + 4]
push eax
call dbg.set_enftopic
add esp, 0x10
jmp 0x80496ef
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
call dbg.chop
pop ecx
pop esi
push ebx
mov edx, dword [to]
push edx
mov edi, eax
call dbg.get_channel
mov esi, eax
mov dword [esp], str.._randfiles_randpickup.e
call dbg.randstring
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x806500f
mov eax, dword [rest]
test eax, eax
jne 0x8064ff0
mov eax, dword [to]
cmp byte [eax], 0x23
je 0x8064fe0
sub esp, 8
mov eax, dword [0x80705d0]
push eax
mov edi, dword [from]
push edi
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push eax
push ebx
push 0x806a12d
push esi
call dbg.sendprivmsg
jmp 0x8064fd8
nop
push eax
push ebx
push edi
push str.PRIVMSG__s_:_s
call dbg.send_to_server
push ebx
push edi
push str.__s___s
mov eax, dword [from]
push eax
call dbg.send_to_user
jmp 0x8064fd8
push eax
push str.._randfiles_randpickup.e
push obj.ERR_FILEOPEN
jmp 0x8065004
push ebp
mov ebp, esp
or byte [obj.will], 0x20
pop ebp
ret
mov ecx, dword [obj.mrrec]
push ebp
test ecx, ecx
mov ebp, esp
je 0x805608f
lea eax, [ecx + 0x14]
mov edx, 0xc7
lea esi, [esi]
lea edi, [edi]
mov byte [eax], 0
add eax, 0x14
dec edx
jns 0x8056080
mov ecx, dword [ecx]
test ecx, ecx
jne 0x805606d
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea edi, [rest]
push edi
mov dword [c_servers], 0
mov dword [c_clients], 0
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, 1
mov ebx, eax
je 0x80601e9
mov al, byte [eax]
test al, al
je 0x80601e9
movsx eax, al
cmp eax, 0xff
ja 0x8060320
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
je 0x8060310
sub esp, 0xc
push ebx
call sym.imp.atol
xor esi, esi
mov dword [c_clients], eax
add esp, 0x10
test esi, esi
je 0x80601e9
test ebx, ebx
je 0x80601e9
mov al, byte [ebx]
test al, al
jne 0x80601a4
sub esp, 0xc
push edi
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, 1
mov ebx, eax
je 0x806024b
mov al, byte [eax]
test al, al
je 0x806024b
movsx eax, al
cmp eax, 0xff
ja 0x8060300
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
je 0x80602f0
sub esp, 0xc
push ebx
call sym.imp.atol
xor esi, esi
mov dword [c_servers], eax
add esp, 0x10
test esi, esi
je 0x806024b
test ebx, ebx
je 0x806024b
mov al, byte [ebx]
test al, al
jne 0x8060206
mov eax, dword [obj.current]
mov esi, dword [eax + 0xb30]
test esi, esi
je 0x806028c
lea esi, [esi]
cmp dword [esi + 0x10], 0xf
je 0x80602c0
mov esi, dword [esi]
test esi, esi
jne 0x8060260
mov eax, dword [obj.current]
mov esi, dword [eax + 0xb30]
test esi, esi
je 0x806028c
nop
lea esi, [esi]
cmp dword [esi + 0x10], 0xf
je 0x80602a0
mov esi, dword [esi]
test esi, esi
jne 0x8060280
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [obj.current]
mov ebx, dword [esi]
add eax, 0xb30
push esi
push eax
call dbg.remove_time
mov esi, ebx
add esp, 0x10
jmp 0x8060288
lea esi, [esi]
mov edi, dword [c_servers]
push edi
mov ebx, dword [c_clients]
push ebx
push str.Clients:_
mov ecx, dword [esi + 8]
push ecx
call dbg.send_to_user
pop eax
pop edx
push 0x806e450
mov edi, dword [esi + 8]
push edi
call dbg.send_to_user
add esp, 0x10
jmp 0x8060266
mov esi, esi
sub esp, 0xc
push edi
call dbg.chop
mov ebx, eax
jmp 0x806023a
xor eax, eax
jmp 0x8060224
mov esi, esi
lea edi, [edi]
sub esp, 0xc
push edi
call dbg.chop
mov ebx, eax
jmp 0x80601d8
xor eax, eax
jmp 0x80601c2
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x49c
mov edx, dword [obj.linksock]
cmp edx, 0xffffffff
je 0x805cd33
mov eax, edx
shr eax, 5
mov ecx, edx
and ecx, 0x1f
mov eax, dword [eax*4 + obj.read_fds]
shr eax, cl
and eax, 1
jne 0x805d211
xor esi, esi
mov ebx, dword [obj.botlinkSIZE]
mov edx, dword [obj.botlinkBASE]
cmp esi, ebx
mov dword [bl], edx
jge 0x805cdd8
nop
mov ecx, dword [bl]
cmp byte [ecx], 0
je 0x805cdc5
mov edx, dword [ecx + 0x244]
cmp edx, 0xffffffff
je 0x805cdb5
mov eax, edx
shr eax, 5
mov ecx, edx
and ecx, 0x1f
mov eax, dword [eax*4 + obj.write_fds]
shr eax, cl
and eax, 1
jne 0x805d1e0
cmp edx, 0xffffffff
je 0x805cdb5
mov ecx, edx
shr edx, 5
and ecx, 0x1f
mov eax, dword [edx*4 + obj.read_fds]
shr eax, cl
and eax, 1
jne 0x805d112
mov edi, dword [bl]
mov eax, dword [edi + 0x248]
test eax, eax
jne 0x805d112
mov edi, dword [bl]
cmp byte [edi + 8], 1
je 0x805d070
inc esi
add dword [bl], 0x258
cmp esi, ebx
jl 0x805cd50
mov eax, dword [obj.linkconfBASE]
test eax, eax
je 0x805cdff
test byte [obj.will], 0x20
je 0x805cdff
mov edx, dword [obj.now]
mov eax, edx
sub eax, dword [obj.last_autolink]
cmp eax, 0xef
jg 0x805ce07
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
push str._PLI__Trying_to_autolink..._n
mov dword [obj.last_autolink], edx
call dbg.debug
mov edx, dword [obj.linkconfSIZE]
xor esi, esi
mov eax, dword [obj.linkconfBASE]
add esp, 0x10
cmp esi, edx
mov dword [lc], eax
mov ecx, eax
mov eax, edx
jge 0x805cdff
nop
lea esi, [esi]
mov ebx, dword [lc]
cmp byte [ebx], 0
je 0x805ce5f
mov edi, dword [ebx + 0x98]
test edi, edi
je 0x805ce5f
mov ebx, dword [ebx + 0x9c]
test ebx, ebx
je 0x805ced5
inc esi
add dword [lc], 0xa0
cmp esi, eax
jl 0x805ce40
xor esi, esi
cmp esi, eax
mov dword [lc], ecx
jge 0x805cdff
mov edi, dword [lc]
cmp byte [edi], 0
je 0x805ce91
mov eax, dword [edi + 0x9c]
dec eax
cmp eax, 1
jbe 0x805cea5
inc esi
add dword [lc], 0xa0
cmp esi, edx
jl 0x805ce7a
jmp 0x805cdff
mov eax, dword [edi + 0x98]
mov dword [edi + 0x9c], 0
push eax
mov eax, edi
add eax, 0x48
push eax
sub eax, 0x40
push eax
push str.LC__s___H:_s_P:_i___reset_to_LC_NOTRY_n
call dbg.wle
add esp, 0x10
mov edx, dword [obj.linkconfSIZE]
jmp 0x805ce91
xor esi, esi
mov ebx, dword [obj.botlinkSIZE]
mov eax, dword [obj.botlinkBASE]
cmp esi, ebx
mov dword [bl], eax
jge 0x805d059
mov edx, dword [lc]
add edx, 8
mov dword [src], edx
mov ecx, dword [bl]
cmp byte [ecx], 0
je 0x805cf14
cmp byte [ecx + 9], 0x64
je 0x805d001
inc esi
add dword [bl], 0x258
cmp esi, ebx
jl 0x805ceff
mov edi, dword [lc]
mov eax, dword [edi + 0x98]
mov ebx, edi
push eax
add ebx, 0x48
push ebx
mov esi, dword [src]
push esi
push str.LC__s___H:_s_P:_i___set_to_LC_HASTRY_n
call dbg.wle
mov ecx, dword [edi + 0x98]
push ecx
push ebx
mov edx, dword [src]
push edx
push str.Autolink_attempt_to__s___H:_s_P:_i___n
call dbg.wle
lea edx, [new]
mov dword [edi + 0x9c], 1
cld
mov edi, edx
xor eax, eax
mov ecx, 0x96
rep stosd dword es:[edi], eax
mov eax, dword [obj.botlinkident]
mov dword [var_274h], eax
inc eax
add esp, 0x18
mov dword [obj.botlinkident], eax
mov eax, dword [src]
push eax
lea eax, [dest]
push eax
mov esi, edx
mov byte [new], 1
mov byte [var_26eh], 1
mov byte [var_26dh], 1
call sym.imp.strcpy
add esp, 0xc
mov eax, dword [obj.now]
push 0
mov dword [var_2ch], eax
mov byte [var_270h], 1
mov eax, dword [lc]
mov eax, dword [eax + 0x98]
push eax
push ebx
call dbg.SockConnect
push 0x258
push obj.botlinkSIZE
push esi
push obj.botlinkBASE
mov dword [var_34h], eax
call dbg.addstruct
add esp, 0x20
jmp 0x805cdff
mov eax, ecx
sub esp, 8
add eax, 0xc
push eax
mov eax, dword [src]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805d028
mov ebx, dword [obj.botlinkSIZE]
jmp 0x805cf14
mov eax, dword [lc]
mov ecx, dword [eax + 0x98]
mov dword [eax + 0x9c], 2
push ecx
add eax, 0x48
push eax
mov edx, dword [src]
push edx
push str.LC__s___H:_s_P:_i___set_to_LC_LINKED_n
call dbg.wle
jmp 0x805ce1a
mov ebx, dword [lc]
add ebx, 8
mov dword [src], ebx
jmp 0x805cf23
lea esi, [esi]
mov eax, dword [obj.now]
sub eax, dword [edi + 0x24c]
cmp eax, 0x1d
jle 0x805cdc5
cmp byte [edi + 0xb], 0
je 0x805d0fa
mov eax, dword [bl]
lea ebx, [eax + 0xc]
mov edx, dword [bl]
mov ecx, dword [edx + 0x244]
sub esp, 0xc
push ecx
call sym.imp.close
pop eax
pop edx
push ebx
push str._PLI__Timeout_for__s__removing..._n
call dbg.debug
mov ecx, dword [bl]
mov eax, dword [ecx + 0x244]
push eax
cmp ecx, 0xfffffff4
push ecx
mov eax, ebx
je 0x805d0f3
push eax
push str.Timeout_for__s__0x_.8x___removing...___S:_i___n
call dbg.wle
cld
mov ecx, 0x96
xor eax, eax
mov edi, dword [bl]
rep stosd dword es:[edi], eax
add esp, 0x20
mov ebx, dword [obj.botlinkSIZE]
jmp 0x805cdc5
mov eax, obj.NULLSTR
jmp 0x805d0ca
mov ebx, edi
sub esp, 8
add ebx, 0xc
push ebx
push str.Link_to___s__failed
call dbg.send_global_statmsg
add esp, 0x10
jmp 0x805d093
push eax
lea eax, [linebuf]
push eax
mov eax, dword [bl]
add eax, 0x39
push eax
mov eax, dword [bl]
mov eax, dword [eax + 0x244]
push eax
call dbg.sockread
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805d1a2
push eax
mov edx, dword [bl]
mov eax, dword [edx + 0x254]
push eax
mov eax, dword [edx + 0x250]
push eax
mov eax, dword [edx + 4]
push eax
mov edi, dword [edx + 0x244]
push edi
push edx
cmp byte [edx + 0xc], 0
je 0x805d19b
mov eax, edx
add eax, 0xc
push eax
push str.Net_Read______10s____.8x____S:_i_I:_i_U:_i_L:_i__:__s_n
call dbg.wle
add esp, 0x18
push ebx
mov esi, dword [bl]
push esi
call dbg.process_link_input
mov ecx, dword [bl]
mov dword [ecx + 0x248], 1
jmp 0x805cdff
mov eax, obj.NULLSTR
jmp 0x805d16b
call sym.imp.__error
mov eax, dword [eax]
cmp eax, 4
je 0x805d1c9
cmp eax, 0x23
je 0x805d1c9
sub esp, 8
push 0
mov ebx, dword [bl]
push ebx
call dbg.remlink
jmp 0x805cdff
mov ebx, dword [bl]
mov dword [ebx + 0x248], 0
jmp 0x805cdff
mov esi, esi
sub esp, 0xc
push str._PLI__Asynch_connect_n
call dbg.debug
mov ebx, dword [bl]
mov byte [ebx + 8], 2
push obj.my_pass
push obj.my_entity
push str._LOGIN__s__s_n
push ebx
call dbg.send_to_link
jmp 0x805d0e5
sub esp, 8
push edx
mov eax, dword [obj.now]
push str.Socket_accept___linksock:_i___n
mov dword [obj.last_autolink], eax
call dbg.wle
add esp, 0xc
lea eax, [blen]
push eax
lea eax, [ebp - 0x288]
push eax
mov edi, dword [obj.linksock]
push edi
mov dword [blen], 0x10
call sym.imp.accept
add esp, 0x10
cmp eax, 0xffffffff
je 0x805d269
sub esp, 0xc
push eax
call dbg.newlinksock
add esp, 0x10
jmp 0x805cd33
call sym.imp.__error
cmp dword [eax], 0x23
je 0x805cd33
sub esp, 0x10
call sym.imp.__error
mov esi, dword [eax]
add esp, 0xc
push esi
sub esp, 8
call sym.imp.__error
mov ecx, dword [eax]
pop ebx
push ecx
call sym.imp.strerror
pop edi
pop edx
push eax
push str.accept___error___s___i__n
call dbg.wle
pop esi
mov ebx, dword [obj.linksock]
push ebx
call sym.imp.close
mov dword [obj.linksock], 0xffffffff
jmp 0x805d261
push ebp
mov ebp, esp
push ebx
push eax
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
je 0x804be3f
lea esi, [esi]
lea edi, [edi]
mov dl, byte [ebx + 0x38d]
mov al, dl
shr al, 4
and eax, 3
dec eax
je 0x804be39
and edx, 0x80
jne 0x804be50
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804be20
mov ebx, dword [var_4h]
leave
ret
lea esi, [esi]
lea edi, [edi]
push eax
push 1
mov eax, dword [ebx + 8]
push eax
mov eax, dword [ebx + 4]
push eax
call dbg.join_channel
add esp, 0x10
jmp 0x804be39
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
mov dword [flag], 0
je 0x804af3f
nop
test byte [ebx + 0x38d], 8
jne 0x804af50
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804af30
mov eax, dword [flag]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
push obj.CurrentNick
push ebx
call dbg.find_chanuser
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804af39
mov edx, dword [obj.now]
mov eax, edx
sub eax, dword [esi + 0x30]
cmp eax, 0xa
jle 0x804af81
mov dword [esi + 0x30], edx
mov dword [esi + 0x18], 0
sub esp, 8
inc dword [esi + 0x18]
push 9
push ebx
call dbg.get_int_varc
add esp, 0x10
cmp dword [esi + 0x18], eax
jl 0x804af39
sub esp, 8
push 1
mov ecx, dword [from]
push ecx
mov dword [flag], 1
call dbg.format_uh
mov edi, eax
pop eax
pop edx
mov eax, dword [ebx + 4]
push eax
mov eax, dword [from]
push eax
call dbg.is_user
add esp, 0x10
test eax, eax
jne 0x804afca
test byte [esi + 4], 2
je 0x804b00d
push eax
push edi
push obj.CurrentNick
mov esi, dword [ebx + 4]
push esi
call dbg.deop_ban
add esp, 0xc
push str.Get_the_hell_out_nick_flooding_lamer___
push obj.CurrentNick
mov ecx, dword [ebx + 4]
push ecx
call dbg.sendkick
add esp, 0xc
mov edx, dword [ebx + 4]
push edx
mov eax, dword [from]
push eax
push str._s_kicked_from__s_for_nick_flooding
call dbg.send_statmsg
add esp, 0x10
jmp 0x804af39
sub esp, 8
push 0x15
push ebx
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804afca
mov edx, dword [obj.now]
push eax
lea eax, [edx + 0x15180]
push eax
push edx
push str.Quit_the_nick_floods_you_lamer
push str.Auto_Shit
mov eax, dword [ebx + 4]
push eax
push 2
push edi
call dbg.add_to_shitlist
add esp, 0x20
jmp 0x804afca
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
pop edx
pop ecx
push 3
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
mov edx, eax
je 0x8060c9d
mov al, byte [eax + 0x38d]
and eax, 0xffffffcf
or eax, 0x22
mov byte [edx + 0x38d], al
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x14
push str._sigalrm__n
call dbg.debug
pop eax
pop edx
push dbg.sig_alrm
push 0xe
call sym.imp.signal
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8054f70
sub esp, 8
push 2
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x8054f60
sub esp, 8
push eax
mov eax, dword [obj.current]
add eax, 0xb34
push eax
call dbg.delete_channel
add esp, 0x10
test eax, eax
je 0x8054f50
push eax
push ebx
push str.Channel__s_is_now_forgotten
push esi
call dbg.send_to_user
add esp, 0x10
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
jmp 0x8054f50
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push eax
push ebx
push str.Channel__s_couldnt_be_forgotten
jmp 0x8054f31
lea esi, [esi]
push eax
push ebx
push str.Channel__s_is_not_in_memory
push esi
call dbg.send_to_user
jmp 0x8054f3a
nop
sub esp, 8
mov eax, dword [0x8070420]
push eax
push esi
call dbg.usage
jmp 0x8054f3a
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.sigmaster]
test eax, eax
jne 0x80496d0
mov ecx, dword [obj.current]
test ecx, ecx
setne al
and eax, 0xff
dec eax
and eax, str._s_Stray_SIGMASTER_setting__ingored__n
test eax, eax
je 0x80496b0
sub esp, 8
push obj.ERR_INIT
push eax
call sym.imp.printf
mov esp, ebp
pop ebp
ret
nop
lea esi, [esi]
mov eax, dword [obj.current]
or byte [eax + 0x3ac], 4
inc dword [obj.sigmaster]
jmp 0x80496a7
lea esi, [esi]
lea edi, [edi]
mov eax, str._s_Multiple_SIGMASTER:_Only_one_bot_can_be_sigmaster__ignored__n
jmp 0x8049695
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea eax, [rest]
push eax
mov ebx, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [chan], eax
je 0x80551b5
mov al, byte [eax]
test al, al
jne 0x80551d0
sub esp, 8
mov ecx, dword [0x8070620]
push ecx
push ebx
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
cmp al, 0x23
je 0x80551e8
mov eax, 2
mov esi, dword [chan]
mov edi, 0x806e306
cld
mov ecx, eax
repe cmpsb byte [esi], byte ptr es:[edi]
jne 0x805523e
mov eax, dword [rest]
test eax, eax
je 0x80551f4
cmp byte [eax], 0
jne 0x8055204
sub esp, 8
push str.No_kicksay_string_specified
push ebx
call dbg.send_to_user
jmp 0x80551c5
sub esp, 8
mov edx, dword [chan]
push edx
push eax
call dbg.find_kicksay
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8055234
push eax
mov edi, dword [esi + 0x38]
push edi
push str.No_longer_kicking_on__s
push ebx
call dbg.send_to_user
mov dword [esp], esi
call dbg.remove_user
jmp 0x80551c5
sub esp, 8
push str.Im_not_kicking_on_that
jmp 0x80551fc
sub esp, 8
push str.Specify_a_channel_name_or__for_all
jmp 0x80551fc
push ebp
mov ebp, esp
sub esp, 8
mov edx, dword [cptr]
mov ecx, dword [edx + 4]
test ecx, ecx
je 0x80638d0
mov eax, dword [edx]
mov dword [ecx], eax
mov ecx, dword [edx]
test ecx, ecx
je 0x80638b3
mov eax, dword [edx + 4]
mov dword [ecx + 4], eax
mov edx, dword [cptr]
sub esp, 0xc
lea eax, [edx + 8]
push eax
call dbg.MyFree
lea eax, [cptr]
mov dword [esp], eax
call dbg.MyFree
mov esp, ebp
pop ebp
ret
mov esi, esi
mov ecx, dword [edx]
mov eax, dword [arg_8h]
test ecx, ecx
mov dword [eax], ecx
je 0x80638a4
mov dword [ecx + 4], 0
jmp 0x80638a4
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804a01a
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov eax, dword [eax + 0x720]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804a01a
push eax
push 0x14
push esi
lea eax, [ebx + 0x15]
push eax
call sym.imp.strncpy
mov byte [ebx + 0x29], 0
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
lea eax, [rest]
sub esp, 0x10
push eax
mov eax, dword [to]
push eax
call dbg.get_channel
pop edx
pop ecx
push eax
mov eax, dword [from]
push eax
call dbg.show_names_on_channel
mov esp, ebp
pop ebp
ret
push ebp
mov eax, dword [obj.current]
mov ebp, esp
test eax, eax
push esi
push ebx
jne 0x80497c0
sub esp, 8
push obj.ERR_INIT
push str._s_Stray_SET_setting__ignored__n
call sym.imp.printf
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
mov esi, esi
lea edi, [edi]
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80497b0
sub esp, 8
push 3
push eax
mov esi, dword [args]
call dbg.find_var_name
add esp, 0x10
cmp eax, 0xffffffff
mov edx, eax
je 0x8049895
test esi, esi
je 0x80497b0
cmp byte [esi], 0
je 0x80497b0
lea eax, [eax + eax*4]
shl eax, 2
add eax, dword [obj.current]
test byte [eax + 0x3c0], 8
lea ecx, [eax + 0x3c0]
je 0x8049867
mov ebx, ecx
test ebx, ebx
je 0x80497b0
test byte [ebx], 1
je 0x804984b
sub esp, 0xc
push esi
call sym.imp.atoi
add esp, 0x10
cmp eax, dword [ebx + 0xc]
jl 0x80497b0
cmp eax, dword [ebx + 0x10]
jg 0x80497b0
mov dword [ebx + 4], eax
jmp 0x80497b0
sub esp, 8
push esi
lea eax, [ebx + 8]
push eax
mov dword [obj.mallocdoer], 0x8049790
call dbg.mstrcpy
jmp 0x80497b0
mov eax, dword [obj.cfgChan]
test eax, eax
jne 0x8049881
push eax
push ebx
push obj.ERR_INIT
push str._s_Channel_SET___s__with_no_active_channel__ignored__n
jmp 0x80497ab
sub esp, 8
push edx
mov eax, dword [eax + 4]
push eax
call dbg.find_var
mov ebx, eax
add esp, 0x10
jmp 0x804981c
push obj.configfile
push ebx
push obj.ERR_INIT
push str._s_Unknown_set___s__in__s_n
jmp 0x80497ab
push ebp
mov ebp, esp
and byte [obj.will], 0xfd
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80669f0
sub esp, 8
mov eax, dword [obj.current]
push esi
add eax, 0xb30
push eax
call dbg.make_time
mov dword [eax + 0x10], 0x19
pop ecx
pop esi
push ebx
push str.WHOIS__s
call dbg.send_to_server
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
sub esp, 8
mov eax, dword [0x8070880]
push eax
push esi
call dbg.usage
jmp 0x80669e5
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
and esp, 0xfffffff0
sub esp, 0xc
push obj.now
mov ebx, dword [envp]
call sym.imp.time
pop eax
pop edx
push 1
push 0xfa4
mov dword [obj.runtime], 0
mov dword [obj.dodebug], 0
mov dword [obj.debug_fd], 0xffffffff
mov byte [obj.debugfile], 0
call sym.imp.calloc
mov dword [obj.mrrec], eax
mov eax, dword [ebx]
add esp, 0x10
test eax, eax
mov dword [obj.debug_on_exit], 0
mov dword [obj.LE], 0xffffffff
je 0x805ef17
cmp byte [eax], 0
je 0x805ef17
sub esp, 8
push 0x20
push eax
call sym.imp.strchr
add esp, 0x10
test eax, eax
mov edx, eax
je 0x805ea31
sub esp, 0xc
inc edx
mov byte [eax], 0
push edx
call dbg.Atoi
add esp, 0x10
test eax, eax
je 0x805ef17
mov eax, dword [eax]
mov dword [obj.respawn], eax
sub esp, 8
push obj.mechbin
mov eax, dword [ebx]
push eax
call sym.imp.stat
add esp, 0x10
test eax, eax
js 0x805ef08
sub esp, 8
mov eax, dword [ebx]
push eax
push obj.executable
mov dword [0x8076fd8], 0
mov dword [0x8076fe0], 0
mov dword [0x8076fe8], 0
mov edi, obj.configfile
call sym.imp.strcpy
mov esi, str.._mech.set
mov ax, word [0x806734c]
cld
mov ecx, 2
rep movsd dword es:[edi], dword ptr [esi]
mov word [0x8075ea8], ax
mov al, byte [0x806734e]
mov byte [0x8075eaa], al
mov al, byte [obj.will]
or eax, 7
and eax, 0xffffffd7
mov edx, dword [obj.now]
mov byte [obj.will], al
lea eax, [edx - 0xe6]
mov dword [esp], edx
mov dword [obj.need_dcc], 0
mov dword [obj.shell_cmd], 0
xor esi, esi
mov dword [obj.dccKill], 0
mov dword [obj.respawn], 0
mov dword [obj.sigmaster], 0
mov dword [obj.do_fork], 1
mov dword [obj.do_exec], 0
mov dword [obj.killsocks], 0
mov dword [obj.botlist], 0
mov dword [obj.serverBASE], 0
mov dword [obj.serverSIZE], 0
mov dword [obj.serverident], 1
mov dword [obj.userident], 1
mov dword [obj.last_autolink], eax
mov dword [obj.botlinkBASE], 0
mov dword [obj.botlinkSIZE], 0
mov dword [obj.botlinkident], 1
mov dword [obj.linkconfBASE], 0
mov dword [obj.linkconfSIZE], 0
mov dword [obj.linkport], 0xffffffff
mov dword [obj.makecore], 0
call sym.imp.srand
add esp, 0x10
cmp dword [argc], 1
jle 0x805ebaa
mov eax, dword [ebx + 4]
cmp byte [eax], 0x2d
je 0x805ece0
push ecx
push obj.SRCDATE
push obj.VERSION
push str.EnergyMech__s___s_n
call sym.imp.printf
mov dword [esp], str.Compiled_on_Feb_20_2005_15:36:31
call sym.imp.puts
pop eax
cmp byte [obj.__mx_opts], 0
pop edx
je 0x805ecd0
mov eax, obj.__mx_opts
push eax
push str.Features:__s_n
call sym.imp.printf
add esp, 0x10
test esi, esi
jne 0x805ecc4
sub esp, 8
push dbg.sig_child
push 0x14
call sym.imp.signal
pop esi
pop edi
push dbg.sig_hup
push 1
call sym.imp.signal
pop ecx
pop ebx
push dbg.sig_int
push 2
call sym.imp.signal
pop eax
pop edx
push dbg.sig_bus
push 0xa
call sym.imp.signal
pop esi
pop edi
push dbg.sig_pipe
push 0xd
call sym.imp.signal
pop ecx
pop ebx
push dbg.sig_alrm
push 0xe
call sym.imp.signal
pop eax
pop edx
push dbg.sig_term
push 0xf
call sym.imp.signal
pop esi
pop edi
push dbg.sig_usr1
push 0x1e
call sym.imp.signal
pop ecx
pop ebx
push dbg.sig_usr2
push 0x1f
call sym.imp.signal
mov edx, dword [obj.makecore]
add esp, 0x10
test edx, edx
je 0x805ecb0
sub esp, 0xc
push obj.uptime
call sym.imp.time
mov dword [esp], obj.now
call sym.imp.time
call dbg.init_uptime
call dbg.doit
lea esp, [var_ch]
pop ebx
pop esi
pop edi
xor eax, eax
pop ebp
ret
mov esi, esi
sub esp, 8
push dbg.sig_segv
push 0xb
call sym.imp.signal
add esp, 0x10
jmp 0x805ec81
sub esp, 0xc
push 0
call sym.imp._exit
mov esi, esi
mov eax, str._core_only_
jmp 0x805ebdf
lea esi, [esi]
add ebx, 4
dec dword [argc]
mov edx, dword [ebx]
movsx eax, byte [edx + 1]
sub eax, 0x58
cmp eax, 0x1e
ja case.0x805ecf8.89
jmp dword [eax*4 + 0x806d078]
mov esi, 1
lea esi, [esi]
lea edi, [edi]
cmp dword [argc], 1
jle 0x805ebaa
mov eax, dword [ebx + 4]
cmp byte [eax], 0x2d
je 0x805ece0
jmp 0x805ebaa
mov dword [obj.debug_on_exit], 1
jmp 0x805ed10
mov dword [obj.makecore], 1
jmp 0x805ed10
mov dword [obj.dodebug], 1
mov dword [obj.do_fork], 0
jmp 0x805ed10
cmp byte [edx + 2], 0
jne 0x805ed9e
add ebx, 4
mov eax, dword [ebx]
test eax, eax
je 0x805ed8b
sub esp, 8
push eax
push obj.configfile
call sym.imp.strcpy
dec dword [argc]
pop edi
pop eax
push obj.configfile
push str.init:_Using_config_file:__s_n
call sym.imp.printf
add esp, 0x10
jmp 0x805ed10
sub esp, 0xc
push str.init:_No_configfile_specified
call sym.imp.puts
pop eax
jmp 0x805ecc7
sub esp, 8
lea eax, [edx + 2]
push eax
push obj.configfile
call sym.imp.strcpy
jmp 0x805ed75
sub esp, 8
push obj.executable
push str.Usage:__s__switches__args___n
call sym.imp.printf
mov dword [esp], str.__f__file____read_configuration_from__file_
call sym.imp.puts
mov dword [esp], str.__c__________make_core_file_instead_of_coredebug_reset
call sym.imp.puts
mov dword [esp], str.__r__num_____run_only_for__num__seconds
call sym.imp.puts
mov dword [esp], str.__d__________start_mech_in_debug_mode
call sym.imp.puts
mov dword [esp], str.__o__file____write_debug_output_to__file_
call sym.imp.puts
mov dword [esp], str.__X__________write_a_debug_file_before_exit
call sym.imp.puts
mov dword [esp], str.__h__________show_this_help
call sym.imp.puts
mov dword [esp], str.__v__________show_EnergyMech_version
jmp 0x805ed93
cmp byte [edx + 2], 0
jne 0x805ee70
add ebx, 4
mov eax, dword [ebx]
test eax, eax
je 0x805ee55
sub esp, 8
push eax
push obj.debugfile
call sym.imp.strcpy
dec dword [argc]
add esp, 0x10
mov dword [obj.do_fork], 1
jmp 0x805ed10
sub esp, 0xc
push str.init:_No_debugfile_specified
jmp 0x805ed93
lea esi, [esi]
lea edi, [edi]
sub esp, 8
lea eax, [edx + 2]
push eax
push obj.debugfile
call sym.imp.strcpy
jmp 0x805ee43
cmp byte [edx + 2], 0
jne 0x805eee0
add ebx, 4
mov eax, dword [ebx]
test eax, eax
je 0x805eec9
sub esp, 0xc
push eax
call dbg.Atoi
dec dword [argc]
add esp, 0x10
test eax, eax
je 0x805eebc
mov eax, dword [eax]
cmp eax, 0x1d
jle 0x805eebc
add eax, dword [obj.now]
mov dword [obj.runtime], eax
jmp 0x805ed10
sub esp, 0xc
push str.init:_runtime_must_be_longer_than_30_seconds
jmp 0x805ed93
sub esp, 0xc
push str.init:_argument_to___r_is_missing
jmp 0x805ed93
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [edx + 2]
push eax
call dbg.Atoi
jmp 0x805ee9e
sub esp, 8
push edx
push str.init:_Unknown_option__s_n
call sym.imp.printf
mov dword [esp], 1
jmp 0x805ecc9
sub esp, 0xc
push str.init:_Error:_unable_to_stat_executable
call sym.imp.puts
jmp 0x805eefc
sub esp, 0xc
mov eax, dword [obj.bad_exe]
push eax
jmp 0x805eef7
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea edi, [rest]
push edi
mov dword [c_ucons], 0
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, 1
mov ebx, eax
je 0x806001e
mov al, byte [eax]
test al, al
je 0x806001e
movsx eax, al
cmp eax, 0xff
ja 0x8060080
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
je 0x8060070
sub esp, 0xc
push ebx
call sym.imp.atol
xor esi, esi
mov dword [c_ucons], eax
add esp, 0x10
test esi, esi
je 0x806001e
test ebx, ebx
je 0x806001e
mov al, byte [ebx]
test al, al
jne 0x805ffdd
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
test ebx, ebx
je 0x806003c
lea esi, [esi]
cmp dword [ebx + 0x10], 0xf
je 0x8060050
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8060030
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov eax, dword [c_ucons]
push eax
mov eax, dword [from]
push eax
push str.Unknown_Connections:_
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x8060036
nop
lea esi, [esi]
sub esp, 0xc
push edi
call dbg.chop
mov ebx, eax
jmp 0x806000d
lea esi, [esi]
xor eax, eax
jmp 0x805fffb
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov esi, dword [arg_8h]
cmp byte [esi], 0
jne 0x80629f0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 0xc
lea eax, [esi + 0x2c]
push eax
call dbg.MyFree
lea eax, [esi + 0x30]
mov dword [esp], eax
call dbg.MyFree
lea eax, [esi + 0x34]
mov dword [esp], eax
call dbg.MyFree
mov al, byte [esi + 0x3e]
shr al, 1
and eax, 7
add esp, 0x10
cmp eax, 1
je 0x8062a49
cmp eax, 1
jl 0x8062a3b
cmp eax, 3
jg 0x8062a3b
sub esp, 0xc
lea eax, [esi + 0x38]
push eax
call dbg.MyFree
add esp, 0x10
cld
mov ecx, 0x12
xor eax, eax
mov edi, esi
rep stosd dword es:[edi], eax
jmp 0x80629e1
mov eax, dword [esi + 0x38]
test eax, eax
mov dword [ump], eax
je 0x8062a3b
lea edi, [ump]
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
mov ebx, dword [eax]
push edi
call dbg.MyFree
add esp, 0x10
test ebx, ebx
mov eax, ebx
mov dword [ump], ebx
jne 0x8062a60
jmp 0x8062a3b
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push 1
mov eax, dword [to]
push eax
call dbg.search_list
mov ebx, eax
add esp, 0x10
xor eax, eax
test ebx, ebx
je 0x8055c68
test byte [ebx + 0x208], 0x20
jne 0x8055c70
xor eax, eax
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
nop
push eax
mov eax, dword [text]
push eax
push 0x806726d
mov ecx, dword [ebx + 4]
push ecx
call dbg.send_to_socket
add esp, 0x10
cmp eax, 0xffffffff
je 0x8055ca1
test eax, eax
je 0x8055c9a
mov eax, dword [obj.now]
mov dword [ebx + 0x260], eax
mov eax, 1
jmp 0x8055c68
mov dword [ebx + 0x208], 0x80
jmp 0x8055c66
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x2c
mov eax, dword [rest]
xor esi, esi
test eax, eax
mov edi, dword [arg_ch]
mov dword [vhpi], 0
mov dword [vt], 0
mov dword [channel], 0
mov dword [server], 0
mov dword [login], 0
mov dword [ircname], 0
mov dword [cmdchar], 0
mov dword [port], 0
mov dword [vhost], 0
je 0x80501e1
cmp byte [eax], 0
je 0x80501e1
lea ebx, [rest]
lea esi, [esi]
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
cmp byte [eax], 0x2d
je 0x8050480
mov eax, dword [rest]
test eax, eax
je 0x80501e1
cmp byte [eax], 0
jne 0x80501c0
test esi, esi
je 0x8050210
sub esp, 8
mov eax, dword [0x8070790]
push eax
mov eax, dword [from]
push eax
call dbg.usage
xor eax, eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x8050210
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
push edi
call dbg.add_bot
add esp, 0x10
test eax, eax
mov esi, eax
je 0x80501f7
sub esp, 8
mov eax, dword [obj.current]
mov dword [obj.backup], eax
mov dword [obj.current], esi
lea ebx, [esi + 0x220]
mov byte [edi + 0xc], 0
push edi
push ebx
call sym.imp.strcpy
pop ecx
pop eax
push edi
lea eax, [esi + 0x22d]
push eax
call sym.imp.strcpy
pop eax
mov eax, dword [obj.current]
pop edx
add eax, 0x381
push eax
lea eax, [esi + 0x381]
push eax
call sym.imp.strcpy
add esp, 0xc
push ebx
push str.users._s
lea eax, [esi + 0x724]
push eax
call sym.imp.sprintf
mov edi, dword [login]
add esp, 0x10
test edi, edi
je 0x8050299
mov edx, dword [login]
cmp byte [edx], 0
jne 0x805045d
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x23a
push eax
lea eax, [esi + 0x23a]
push eax
call sym.imp.strcpy
mov ecx, dword [ircname]
add esp, 0x10
test ecx, ecx
je 0x80502c9
mov eax, dword [ircname]
cmp byte [eax], 0
jne 0x8050441
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x246
push eax
lea eax, [esi + 0x246]
push eax
call sym.imp.strcpy
mov eax, dword [vhost]
add esp, 0x10
test eax, eax
je 0x8050422
mov edx, dword [vhost]
cmp byte [edx], 0
je 0x8050422
cmp dword [vt], 1
je 0x8050414
push eax
push 0x3f
mov eax, dword [vhost]
push eax
lea eax, [esi + 0x296]
push eax
call sym.imp.strncpy
mov byte [esi + 0x2d5], 0
mov edx, dword [vt]
mov dword [esi + 0x2dc], edx
mov edi, dword [cmdchar]
add esp, 0x10
test edi, edi
je 0x805033d
mov edx, dword [cmdchar]
mov al, byte [edx]
test al, al
jne 0x8050348
mov eax, dword [obj.current]
mov al, byte [eax + 0x380]
mov byte [esi + 0x380], al
mov eax, dword [obj.current]
mov ebx, dword [port]
mov eax, dword [eax + 0x10]
test ebx, ebx
mov dword [esi + 0x10], eax
je 0x805036c
mov eax, dword [port]
cmp byte [eax], 0
jne 0x8050403
mov eax, 0x1a0b
mov ecx, dword [server]
test ecx, ecx
je 0x8050388
push edx
push 0
push eax
mov eax, dword [server]
push eax
call dbg.add_server
add esp, 0x10
mov eax, dword [channel]
test eax, eax
je 0x80503b1
push ebx
push 0
push 0
mov ecx, dword [channel]
push ecx
call dbg.join_channel
add esp, 0x10
mov eax, dword [obj.backup]
mov dword [obj.current], eax
mov eax, esi
jmp 0x80501f9
mov eax, dword [obj.backup]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
je 0x80503a5
mov dl, byte [ebx + 0x38d]
mov al, dl
shr al, 4
and eax, 3
dec eax
je 0x80503d9
and edx, 0x80
je 0x80503fb
push eax
push 0
mov edi, dword [ebx + 8]
push edi
mov ecx, dword [ebx + 4]
push ecx
call dbg.join_channel
pop eax
pop edx
mov eax, dword [ebx + 0xc]
push eax
mov edi, dword [ebx + 4]
push edi
call dbg.set_enftopic
add esp, 0x10
mov ebx, dword [ebx]
test ebx, ebx
jne 0x80503c0
jmp 0x80503a0
sub esp, 0xc
push eax
call sym.imp.atoi
add esp, 0x10
jmp 0x8050371
mov eax, dword [vhpi]
mov dword [esi + 0x2d8], eax
jmp 0x8050307
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x296
push eax
lea eax, [esi + 0x296]
push eax
call sym.imp.strcpy
jmp 0x805032a
push edx
push 0x4f
push eax
lea eax, [esi + 0x246]
push eax
call sym.imp.strncpy
mov byte [esi + 0x295], 0
jmp 0x80502e3
push ebx
push 0xb
push edx
lea eax, [esi + 0x23a]
push eax
call sym.imp.strncpy
mov byte [esi + 0x245], 0
jmp 0x80502b3
lea esi, [esi]
movsx eax, byte [eax + 1]
sub eax, 0x63
cmp eax, 0x17
ja case.0x805048c.100
jmp dword [eax*4 + 0x80690cc]
sub esp, 0xc
push ebx
call dbg.chop
mov dword [channel], eax
add esp, 0x10
jmp 0x80501d5
mov eax, dword [rest]
mov dword [ircname], eax
mov dword [rest], 0
jmp 0x80501d5
sub esp, 0xc
push ebx
call dbg.chop
mov dword [login], eax
jmp 0x805049f
sub esp, 0xc
push ebx
call dbg.chop
mov dword [esp], eax
mov dword [port], eax
call sym.imp.atoi
add esp, 0x10
test eax, eax
jne 0x80501d5
lea esi, [esi]
lea edi, [edi]
inc esi
jmp 0x80501d5
sub esp, 0xc
push ebx
call dbg.chop
mov dword [server], eax
jmp 0x805049f
sub esp, 0xc
push ebx
call dbg.chop
mov dword [vhost], eax
mov dword [vt], 0
jmp 0x805049f
sub esp, 0xc
push ebx
call dbg.chop
pop edx
pop ecx
push 0x3a
push eax
mov dword [vhost], eax
mov dword [vt], 1
call sym.imp.strchr
add esp, 0x10
test eax, eax
je case.0x805048c.100
sub esp, 0xc
mov byte [eax], 0
inc eax
push eax
call dbg.Atoi
add esp, 0x10
test eax, eax
je case.0x805048c.100
mov eax, dword [eax]
mov dword [vhpi], eax
jmp 0x80501d5
sub esp, 0xc
push ebx
call dbg.chop
mov dword [cmdchar], eax
jmp 0x805049f
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x10
mov ebx, dword [obj.current]
cmp dword [ebx + 4], 4
je 0x8060ba0
lea ecx, [ebx + 0x220]
mov esi, ecx
lea esi, [esi]
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x8060b40
test edx, 0x8080
jne 0x8060b65
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, esi
cmp ecx, 9
je 0x8060ba7
sub esp, 8
push 0x806e53a
lea eax, [ebx + 0x220]
push eax
call dbg.Strcat
add esp, 0x10
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push str.NICK__s
call dbg.send_to_server
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
cmp byte [ebx + 0x220], 0x5f
lea edx, [ebx + 0x220]
je 0x8060c20
mov al, byte [edx]
test al, al
je 0x8060bc1
mov byte [edx], 0x5f
jmp 0x8060b88
push eax
push 5
lea eax, [ebx + 0x22d]
push eax
lea eax, [ebx + 0x220]
push eax
call sym.imp.strncpy
mov eax, dword [obj.current]
mov byte [eax + 0x225], 0
call sym.imp.rand
mov edx, 0x2710
mov ecx, edx
cdq
add esp, 0xc
idiv ecx
push edx
push 0x806b82b
lea ebx, [randomstr]
push ebx
call sym.imp.sprintf
pop ecx
pop esi
mov eax, dword [obj.current]
push ebx
add eax, 0x220
jmp 0x8060b7f
lea esi, [esi]
lea edi, [edi]
inc edx
mov al, byte [edx]
cmp al, 0x5f
je 0x8060c20
jmp 0x8060bb8
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x138
lea esi, [rest]
push esi
mov edi, dword [arg_8h]
mov dword [aday], 0
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80534fa
mov al, byte [eax]
test al, al
je 0x80534fa
cmp al, 0x23
je 0x8053520
sub esp, 8
push 0x806e306
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8053520
sub esp, 8
mov eax, dword [0x8070720]
push eax
push edi
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x8053520
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
push ebx
push edi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
mov dword [uaxs], eax
jl 0x8053509
sub esp, 0xc
push esi
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [nick], eax
je 0x80537be
sub esp, 0xc
push esi
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [level], eax
je 0x80537b1
mov edx, dword [rest]
test edx, edx
je 0x80535a2
movsx eax, byte [edx]
cmp eax, 0xff
ja 0x80537aa
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
jne 0x8053790
test edx, edx
je 0x80535a2
cmp byte [edx], 0
jne 0x80535b5
sub esp, 8
push str.No_reason_specified
push edi
call dbg.send_to_user
jmp 0x8053509
push eax
push 0
mov esi, dword [nick]
push esi
push edi
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8053509
sub esp, 8
push ebx
push eax
call dbg.is_shitted
add esp, 0x10
test eax, eax
je 0x80535ec
push ecx
push esi
push str._s_is_in_my_shitlist_already_for_this_channel
jmp 0x80535aa
sub esp, 8
push ebx
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [uaxs]
jle 0x8053613
cmp dword [uaxs], 0x64
je 0x8053613
push ebx
push esi
push str._s_is_a_God_compared_to_you_on__s
jmp 0x80535aa
sub esp, 8
push 1
push esi
call dbg.format_uh
add esp, 0x10
test eax, eax
mov dword [uh], eax
je 0x8053509
sub esp, 8
push eax
push str.__
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x8053651
sub esp, 8
push str.Problem_shitting_____try_again
jmp 0x80535aa
sub esp, 8
mov edx, dword [level]
push edx
push edi
call dbg.check_for_number
add esp, 0x10
test eax, eax
jne 0x8053509
sub esp, 0xc
mov eax, dword [level]
push eax
call sym.imp.atoi
mov dword [axs], eax
dec eax
add esp, 0x10
cmp eax, 2
ja 0x805377b
mov eax, dword [aday]
test eax, eax
je 0x8053771
sub esp, 0xc
mov eax, dword [aday]
push eax
call sym.imp.atol
mov esi, eax
add esp, 0x10
sub esp, 8
push edi
lea eax, [whoshit]
push eax
call sym.imp.strcpy
lea eax, [esi + esi*4]
lea eax, [esi + eax*4]
lea eax, [esi + eax*8]
shl eax, 2
sub eax, esi
shl eax, 7
mov edx, dword [obj.now]
add esp, 0xc
lea eax, [eax + edx]
push eax
mov eax, dword [rest]
test eax, eax
push edx
je 0x80536eb
cmp byte [eax], 0
jne 0x80536f0
mov eax, sym..rodata
push eax
lea eax, [whoshit]
push eax
push ebx
mov eax, dword [axs]
push eax
mov eax, dword [uh]
push eax
call dbg.add_to_shitlist
add esp, 0x20
test eax, eax
je 0x8053761
push ebx
mov ebx, dword [uh]
push ebx
push str.The_user_has_been_shitted_as__s_on__s
push edi
call dbg.send_to_user
lea eax, [esi + esi*4]
lea eax, [esi + eax*4]
lea eax, [esi + eax*8]
shl eax, 2
sub eax, esi
shl eax, 7
add eax, dword [obj.now]
mov dword [esp], eax
call dbg.time2str
add esp, 0xc
push eax
push str.The_shitlist_will_expire:__s
push edi
call dbg.send_to_user
call dbg.check_shit
add esp, 0x10
jmp 0x8053509
sub esp, 8
push str.Problem_shitting_the_user
push edi
call dbg.send_to_user
jmp 0x8053759
mov esi, 0x1e
jmp 0x80536b0
push eax
push 3
push str.Valid_levels_are_from_1_thru__i
jmp 0x80535aa
nop
lea esi, [esi]
sub esp, 0xc
push esi
call dbg.chop
mov dword [aday], eax
add esp, 0x10
mov edx, dword [rest]
jmp 0x8053599
xor eax, eax
jmp 0x8053591
sub esp, 8
push str.No_level_specified
jmp 0x80535aa
sub esp, 8
push str.No_nick_or_userhost_specified
jmp 0x80535aa
push ebp
mov ebp, esp
and byte [obj.will], 0xfe
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0xc
mov eax, dword [nick]
push eax
push str.No_information_found_for__s
mov ecx, dword [who]
push ecx
call dbg.send_to_user
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x12c
xor ebx, ebx
mov eax, dword [obj.serverSIZE]
cmp ebx, eax
mov esi, dword [arg_8h]
mov edi, dword [obj.serverBASE]
jge 0x8050a2f
cmp byte [edi], 0
je 0x8050a24
mov edx, dword [port]
cmp dword [edi + 0x100], edx
je 0x8050abc
inc ebx
add edi, 0x114
cmp ebx, eax
jl 0x8050a10
lea ebx, [new]
xor eax, eax
cld
mov ecx, 0x45
mov edi, ebx
rep stosd dword es:[edi], eax
mov eax, dword [obj.serverident]
sub esp, 8
mov dword [var_134h], eax
inc eax
push esi
mov dword [obj.serverident], eax
lea eax, [dest]
push eax
mov byte [new], 1
call sym.imp.strcpy
mov eax, dword [pass]
add esp, 0x10
test eax, eax
je 0x8050a7b
mov eax, dword [pass]
cmp byte [eax], 0
jne 0x8050aa7
mov eax, dword [port]
test eax, eax
jne 0x8050a87
mov eax, 0x1a0b
push 0x114
push obj.serverSIZE
push ebx
push obj.serverBASE
mov dword [var_38h], eax
call dbg.addstruct
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push eax
lea eax, [var_e0h]
push eax
call sym.imp.strcpy
add esp, 0x10
jmp 0x8050a7b
sub esp, 8
lea eax, [edi + 8]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8050af1
sub esp, 8
lea eax, [edi + 0xa8]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8050af1
mov eax, dword [obj.serverSIZE]
jmp 0x8050a24
mov eax, edi
jmp 0x8050a9f
push ebp
mov ebp, esp
mov edx, dword [obj.current]
mov ecx, dword [arg_8h]
mov eax, dword [edx + 0xb3c]
mov dword [ecx], eax
mov dword [edx + 0xb3c], ecx
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov byte [global_modestr], 0x2b
mov al, byte [esi + 0x38c]
test eax, 1
mov ebx, 0x8072721
je 0x804bb63
mov byte [0x8072721], 0x70
mov ebx, 0x8072722
mov al, byte [esi + 0x38c]
test eax, 2
je 0x804bb74
mov byte [ebx], 0x73
mov al, byte [esi + 0x38c]
inc ebx
test eax, 4
je 0x804bb85
mov byte [ebx], 0x6d
mov al, byte [esi + 0x38c]
inc ebx
test eax, 8
je 0x804bb96
mov byte [ebx], 0x74
mov al, byte [esi + 0x38c]
inc ebx
test eax, 0x20
je 0x804bba7
mov byte [ebx], 0x69
mov al, byte [esi + 0x38c]
inc ebx
test eax, 0x40
je 0x804bbb8
mov byte [ebx], 0x6e
mov al, byte [esi + 0x38c]
inc ebx
test eax, 0x10
je 0x804bbd0
mov edx, dword [esi + 0x10]
test edx, edx
je 0x804bbd0
mov byte [ebx], 0x6c
mov al, byte [esi + 0x38c]
inc ebx
test eax, 0x80
je 0x804bbe1
mov byte [ebx], 0x6b
mov al, byte [esi + 0x38c]
inc ebx
test eax, 0x10
je 0x804bbef
mov edx, dword [esi + 0x10]
test edx, edx
jne 0x804bc35
test eax, 0x80
je 0x804bc26
push eax
mov eax, dword [esi + 8]
test eax, eax
jne 0x804bc03
mov eax, 0x8067964
push eax
push 0x806a12c
push ebx
call sym.imp.sprintf
add esp, 0x10
cmp byte [ebx], 0
je 0x804bc26
mov esi, esi
lea edi, [edi]
inc ebx
cmp byte [ebx], 0
jne 0x804bc20
mov byte [ebx], 0
lea esp, [var_8h]
pop ebx
pop esi
mov eax, 0x8072720
pop ebp
ret
push eax
push edx
push 0x806a469
push ebx
call sym.imp.sprintf
add esp, 0x10
cmp byte [ebx], 0
je 0x804bc56
lea esi, [esi]
inc ebx
cmp byte [ebx], 0
jne 0x804bc50
mov al, byte [esi + 0x38c]
jmp 0x804bbef
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_10h]
test esi, esi
mov ebx, dword [arg_8h]
je 0x8055ed4
cmp byte [esi], 0
jne 0x8055ee0
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 0xc
push esi
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x64
ja 0x8055ed4
sub esp, 0xc
push ebx
call dbg.max_userlevel
add esp, 0xc
push eax
push obj.CurrentNick
mov ebx, eax
push str._CTCP__:_s__i_:_Requested_Ping_Info
call dbg.send_statmsg
add esp, 0x10
cmp ebx, 0x4f
jg 0x8055f2a
sub esp, 8
push 0x23
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
jne 0x8055ed4
mov dword [arg_10h], esi
mov dword [to], str.PING__s
mov dword [arg_8h], obj.CurrentNick
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.send_ctcp_reply
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
mov esi, dword [arg_8h]
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x8052252
mov eax, dword [rest]
test eax, eax
mov dword [nick], obj.CurrentNick
je 0x80521f2
cmp byte [eax], 0
je 0x80521f2
mov dword [nick], eax
sub esp, 8
push 1
push ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x8052260
mov eax, dword [nick]
test eax, eax
je 0x8052245
cmp byte [eax], 0
je 0x8052245
lea edi, [nick]
lea esi, [esi]
lea edi, [edi]
push eax
push ebx
push eax
push edi
call dbg.chop
pop edx
pop ecx
push eax
push str.INVITE__s__s
call dbg.send_to_server
mov eax, dword [nick]
add esp, 0x10
test eax, eax
je 0x8052245
cmp byte [eax], 0
jne 0x8052220
push edi
push ebx
push str.User_s__invited_to__s
push esi
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
push eax
push ebx
push obj.ERR_CHAN
jmp 0x805224c
push ebp
mov ebp, esp
sub esp, 0x14
push obj.now
call sym.imp.time
mov eax, dword [obj.respawn]
inc eax
add esp, 0x10
cmp eax, 0xa
mov dword [obj.respawn], eax
jg 0x805da23
sub esp, 0xc
push str._sigbus__n
call dbg.debug
add esp, 0x10
test byte [obj.will], 4
jne 0x805da00
sub esp, 8
push dbg.sig_bus
push 0xa
call sym.imp.signal
mov esp, ebp
pop ebp
ret
nop
call dbg.savesession
call dbg.close_all_dcc
mov dword [obj.do_exec], 1
mov dword [crap], str.Another_one_drives_the_bus___SIGBUS_
mov esp, ebp
pop ebp
jmp dbg.kill_all_bots
mov eax, dword [obj.debug_on_exit]
test eax, eax
je 0x805da3c
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov eax, dword [obj.do_exec]
test eax, eax
je 0x805da4a
call dbg.mech_exec
sub esp, 0xc
push 1
call sym.imp.exit
lea esi, [esi]
lea edi, [edi]
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
mov ebx, dword [arg_ch]
push obj.BOTCLASS
mov eax, dword [ebx]
push eax
mov esi, dword [arg_8h]
call dbg.Strcat
mov dword [ebx], eax
mov byte [eax], 0x20
pop ecx
pop eax
push obj.VERSION
mov eax, dword [ebx]
inc eax
push eax
call dbg.Strcat
mov dword [ebx], eax
add dword [esi], 4
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edi, dword [arg_8h]
mov eax, dword [edi + 0x1c]
test eax, eax
mov dword [rem], eax
je 0x804ce22
lea esi, [rem]
lea esi, [esi]
mov ebx, dword [eax]
sub esp, 0xc
add eax, 0x3c
push eax
call dbg.MyFree
mov dword [esp], esi
call dbg.MyFree
add esp, 0x10
test ebx, ebx
mov eax, ebx
mov dword [rem], ebx
jne 0x804ce00
mov dword [edi + 0x20], 0
mov dword [edi + 0x1c], 0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
lea ebx, [rest]
push ebx
mov eax, dword [to]
push eax
call dbg.get_channel
mov esi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
je 0x8054b8b
cmp byte [eax], 0
jne 0x8054b90
mov eax, 0x806a6d1
sub esp, 0xc
push eax
call sym.imp.atoi
add esp, 0xc
push eax
push esi
mov esi, dword [from]
push esi
call dbg.show_idletimes
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea edi, [rest]
push edi
mov dword [c_chans], 0
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, 1
mov ebx, eax
je 0x80600fe
mov al, byte [eax]
test al, al
je 0x80600fe
movsx eax, al
cmp eax, 0xff
ja 0x8060160
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
je 0x8060150
sub esp, 0xc
push ebx
call sym.imp.atol
xor esi, esi
mov dword [c_chans], eax
add esp, 0x10
test esi, esi
je 0x80600fe
test ebx, ebx
je 0x80600fe
mov al, byte [ebx]
test al, al
jne 0x80600bd
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
test ebx, ebx
je 0x806011c
lea esi, [esi]
cmp dword [ebx + 0x10], 0xf
je 0x8060130
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8060110
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
push esi
mov ecx, dword [c_chans]
push ecx
push str.Channels:_
mov edx, dword [ebx + 8]
push edx
call dbg.send_to_user
add esp, 0x10
jmp 0x8060116
nop
lea esi, [esi]
sub esp, 0xc
push edi
call dbg.chop
mov ebx, eax
jmp 0x80600ed
lea esi, [esi]
xor eax, eax
jmp 0x80600db
push ebp
mov ebp, esp
sub esp, 0x10
mov eax, dword [what]
push eax
mov eax, dword [spec]
push eax
call dbg.matches
add esp, 0x10
xor edx, edx
test eax, eax
jne 0x805d5f3
mov edx, dword [obj.nummatch]
inc edx
mov esp, ebp
mov eax, edx
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ebx, dword [ma]
test ebx, ebx
mov edi, dword [na]
mov dword [mask], ebx
mov dword [wild], 0
mov dword [obj.nummatch], 0
je 0x805d4c8
test edi, edi
je 0x805d4c8
mov al, byte [ebx]
mov dl, byte [edi]
mov esi, esi
lea edi, [edi]
test al, al
jne 0x805d5a0
test dl, dl
je 0x805d55c
dec ebx
mov al, byte [ebx]
cmp al, 0x3f
je 0x805d570
cmp al, 0x2a
je 0x805d549
mov edi, dword [wild]
test edi, edi
je 0x805d4c8
inc dword [na]
mov ebx, dword [ma]
mov edi, dword [na]
mov al, byte [ebx]
cmp al, 0x2a
je 0x805d530
cmp al, 0x5c
je 0x805d510
mov dword [q], 0
xor edx, edx
mov dl, al
cmp edx, 0xff
ja 0x805d4f0
mov eax, dword [obj._CurrentRuneLocale]
mov esi, dword [eax + edx*4 + 0x434]
xor edx, edx
mov dl, byte [edi]
cmp edx, 0xff
ja 0x805d4e0
mov eax, dword [obj._CurrentRuneLocale]
mov eax, dword [eax + edx*4 + 0x434]
cmp esi, eax
je 0x805d494
cmp byte [ebx], 0x3f
jne 0x805d4b3
mov esi, dword [q]
test esi, esi
jne 0x805d4b3
inc dword [obj.nummatch]
mov al, byte [ebx]
test al, al
je 0x805d4a3
inc ebx
mov al, byte [ebx]
mov dl, byte [edi]
test dl, dl
je 0x805d400
inc edi
jmp 0x805d3f5
mov ecx, dword [wild]
test ecx, ecx
je 0x805d4c8
inc dword [na]
mov ebx, dword [ma]
mov edi, dword [na]
jmp 0x805d3f3
mov eax, 1
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push edx
call sym.imp.___tolower
add esp, 0x10
jmp 0x805d484
mov esi, esi
sub esp, 0xc
push edx
call sym.imp.___tolower
mov esi, eax
add esp, 0x10
jmp 0x805d46c
lea esi, [esi]
lea edi, [edi]
mov dl, byte [ebx + 1]
cmp dl, 0x2a
je 0x805d521
cmp dl, 0x3f
jne 0x805d449
inc ebx
mov dword [q], 1
mov al, byte [ebx]
jmp 0x805d450
inc ebx
mov al, byte [ebx]
cmp al, 0x2a
je 0x805d530
mov dword [wild], 1
mov dword [ma], ebx
mov dword [na], edi
jmp 0x805d441
cmp ebx, dword [mask]
jbe 0x805d423
cmp byte [ebx - 1], 0x5c
je 0x805d423
xor eax, eax
jmp 0x805d4cd
lea esi, [esi]
lea edi, [edi]
cmp ebx, dword [mask]
jbe 0x805d41b
lea esi, [esi]
dec ebx
mov al, byte [ebx]
cmp al, 0x3f
jne 0x805d41b
cmp ebx, dword [mask]
ja 0x805d580
jmp 0x805d41b
lea esi, [esi]
lea edi, [edi]
test dl, dl
jne 0x805d439
cmp al, 0x2a
je 0x805d5bb
test al, al
setne al
and eax, 0xff
jmp 0x805d4cd
inc ebx
mov al, byte [ebx]
cmp al, 0x2a
je 0x805d5bb
jmp 0x805d5ac
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push str.__t_r_n
lea eax, [line]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804a678
mov al, byte [eax]
test al, al
je 0x804a678
cmp al, 0x23
je 0x804a678
mov eax, dword [obj.config_cmds]
xor edi, edi
test eax, eax
je 0x804a64d
mov ebx, obj.config_cmds
lea esi, [esi]
sub esp, 8
mov eax, dword [ebx]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804a64d
add ebx, 0xc
mov eax, dword [ebx]
inc edi
test eax, eax
jne 0x804a630
lea eax, [edi + edi*2]
shl eax, 2
mov ecx, dword [eax + obj.config_cmds]
test ecx, ecx
je 0x804a667
mov eax, dword [eax + 0x8070024]
test eax, eax
jne 0x804a682
sub esp, 8
push esi
push str.init:_Unknown_configuration_item:___s___ignored__n
call sym.imp.printf
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
xor eax, eax
pop ebp
ret
sub esp, 0xc
mov edx, dword [line]
push edx
call eax
jmp 0x804a675
push ebp
mov ebp, esp
sub esp, 8
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov eax, dword [eax + 0x720]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
je 0x8049ef2
or byte [eax + 0x3c], 1
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x14
push 0
push 1
push 2
call sym.imp.socket
mov esi, eax
add esp, 0x10
test esi, esi
mov eax, 0xffffffff
js 0x8060f37
sub esp, 0xc
push 4
lea ebx, [pram]
push ebx
push 0x80
push 0xffff
push esi
mov dword [pram], 0
call sym.imp.setsockopt
add esp, 0x14
push 4
push ebx
push 8
push 0xffff
push esi
mov dword [pram], 1
call sym.imp.setsockopt
add esp, 0x18
push 3
push esi
call sym.imp.fcntl
or eax, 4
add esp, 0xc
push eax
push 4
push esi
call sym.imp.fcntl
mov eax, esi
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
jmp dword [reloc.setsockopt]
push ebp
mov ebp, esp
sub esp, 0x10
push 0x20
mov eax, dword [rest]
push eax
call sym.imp.strchr
inc eax
mov dword [rest], eax
lea eax, [rest]
mov dword [esp], eax
call dbg.chop
add esp, 0x10
test eax, eax
je 0x80608ac
cmp byte [eax], 0x3a
je 0x80608c0
push ecx
mov edx, dword [rest]
push edx
push eax
mov eax, dword [from]
push eax
call dbg.on_mode
mov esp, ebp
pop ebp
ret
nop
inc eax
jmp 0x80608ac
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.current]
mov edx, dword [eax + 0xb34]
test edx, edx
je 0x804b1b1
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push edx
add eax, 0xb34
push eax
call dbg.delete_channel
mov eax, dword [obj.current]
mov edx, dword [eax + 0xb34]
add esp, 0x10
test edx, edx
jne 0x804b190
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
mov edi, dword [arg_8h]
mov esi, 0xffffffff
je 0x804a9d5
sub esp, 8
push edi
push ebx
call dbg.find_chanuser
add esp, 0x10
test eax, eax
je 0x804a9cf
cmp esi, 0xffffffff
je 0x804a9e0
mov eax, dword [eax + 0x38]
cmp eax, esi
jge 0x804a9cf
mov esi, eax
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804a9b0
lea esp, [var_ch]
pop ebx
mov eax, esi
pop esi
pop edi
pop ebp
ret
nop
mov eax, dword [eax + 0x38]
jmp 0x804a9cd
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
je 0x804f5f0
sub esp, 0xc
push eax
call sym.imp.atoi
add esp, 0x10
cmp eax, 0x64
mov esi, eax
ja 0x804f5e0
sub esp, 8
push 0
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp esi, eax
jg 0x804f5d3
mov ecx, dword [obj.mcmd]
test ecx, ecx
je 0x804f544
xor ebx, ebx
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push edi
mov edx, dword [ebx + obj.mcmd]
push edx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804f55d
add ebx, 0x10
mov eax, dword [ebx + obj.mcmd]
test eax, eax
jne 0x804f520
sub esp, 8
push str.That_command_is_not_known
mov eax, dword [from]
push eax
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov al, byte [ebx + 0x807026c]
and eax, 0xff
cmp esi, 0xffffffff
mov edi, eax
je 0x804f5b7
sub esp, 8
push 0
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp edi, eax
jg 0x804f5ad
cmp edi, esi
je 0x804f5a3
push esi
push edi
push str.Immortality_level_changed_from__i_to__i
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
mov dword [ebx + 0x807026c], esi
jmp 0x804f555
sub esp, 8
push str.The_level_was_not_changed
jmp 0x804f58f
sub esp, 8
push str.Cant_change_a_level_that_is_higher_than_yours
jmp 0x804f54c
push eax
push edi
push str.The_level_needed_for_that_command_is__i
mov edi, dword [from]
push edi
call dbg.send_to_user
pop ebx
pop esi
push str.To_change_it__specify_a_level
jmp 0x804f54c
sub esp, 8
push str.Cant_change_level_to_one_higher_than_yours
jmp 0x804f54c
push eax
push 0x64
push str.Immortality_level_must_be_between_0_and__i
jmp 0x804f54c
lea esi, [esi]
test edi, edi
je 0x804f5fe
mov esi, 0xffffffff
jmp 0x804f4ee
sub esp, 8
mov eax, dword [0x80702e0]
push eax
mov eax, dword [from]
push eax
call dbg.usage
jmp 0x804f555
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x484
mov eax, dword [rest]
test eax, eax
jne 0x8059e78
mov eax, str._null_
push eax
push str._do_link___s_n
call dbg.debug
add esp, 0x10
cmp byte [obj.my_entity], 0
jne 0x8059eb0
sub esp, 8
push str.No_entity_name_set__no_linking_possible
mov esi, dword [from]
push esi
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 0xc
lea ebx, [rest]
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, eax
je 0x805a3af
sub esp, 8
push 0x8067d87
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805a0e0
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, eax
je 0x805a0c5
sub esp, 8
push obj.my_entity
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805a0b9
xor ebx, ebx
mov eax, dword [obj.linkconfSIZE]
cmp ebx, eax
mov edi, dword [obj.linkconfBASE]
mov dword [lc2], 0
jge 0x8059f44
lea esi, [esi]
cmp byte [edi], 0
jne 0x805a090
inc ebx
add edi, 0xa0
cmp ebx, eax
jl 0x8059f30
mov eax, dword [lc2]
test eax, eax
je 0x805a082
mov edi, dword [lc2]
cmp byte [edi + 0x48], 0
je 0x805a076
mov edi, dword [edi + 0x98]
test edi, edi
je 0x805a06a
xor ebx, ebx
mov eax, dword [obj.botlinkSIZE]
cmp ebx, eax
mov edi, dword [obj.botlinkBASE]
jge 0x8059fa4
jmp 0x8059f90
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp byte [edi], 0
jne 0x805a040
inc ebx
add edi, 0x258
cmp ebx, eax
jl 0x8059f90
lea edx, [new]
cld
mov edi, edx
xor eax, eax
mov ecx, 0x96
rep stosd dword es:[edi], eax
mov eax, dword [obj.botlinkident]
sub esp, 8
mov dword [var_474h], eax
inc eax
push esi
mov dword [obj.botlinkident], eax
lea eax, [dest]
push eax
mov ebx, edx
mov byte [new], 1
mov byte [var_46eh], 1
call sym.imp.strcpy
add esp, 0xc
mov eax, dword [obj.now]
push 0
mov dword [var_22ch], eax
mov byte [var_470h], 1
mov eax, dword [lc2]
mov ecx, dword [eax + 0x98]
push ecx
add eax, 0x48
push eax
call dbg.SockConnect
push 0x258
push obj.botlinkSIZE
push ebx
push obj.botlinkBASE
mov dword [var_234h], eax
call dbg.addstruct
add esp, 0x1c
push esi
push str.Trying_to_link_to_entity___s_
jmp 0x8059e97
lea esi, [esi]
sub esp, 8
push esi
lea eax, [edi + 0xc]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805a05e
mov eax, dword [obj.botlinkSIZE]
jmp 0x8059f99
push eax
push esi
push str.Entity___s__is_already_linked_
jmp 0x8059e97
push ebx
push esi
push str.Entity___s__has_no_linkport_
jmp 0x8059e97
push eax
push esi
push str.Entry_for___s__is_missing_hostname
jmp 0x8059e97
push eax
push esi
push str.Unknown_entity___s_
jmp 0x8059e97
mov esi, esi
sub esp, 8
push esi
lea eax, [edi + 8]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805a0ae
mov eax, dword [obj.linkconfSIZE]
jmp 0x8059f39
mov dword [lc2], edi
jmp 0x8059f44
push eax
push esi
push str.Entity___s__is_ME_
jmp 0x8059e97
sub esp, 8
push str.Usag:_LINK_UP__entity_
jmp 0x8059e97
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x806803a
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805a1b0
sub esp, 0xc
push ebx
call dbg.chop
mov esi, eax
mov dword [esp], ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
mov dword [host], eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test esi, esi
je 0x805a139
cmp byte [esi], 0
je 0x805a139
test edi, edi
je 0x805a139
cmp byte [edi], 0
jne 0x805a14f
sub esp, 8
push str.LINK_ADD
mov ecx, dword [from]
push ecx
call dbg.usage
jmp 0x8059ea0
mov edx, dword [host]
test edx, edx
je 0x805a164
mov edx, dword [host]
cmp byte [edx], 0
jne 0x805a16e
mov dword [host], str.none
test eax, eax
je 0x805a177
cmp byte [eax], 0
jne 0x805a196
xor eax, eax
push eax
mov eax, dword [host]
push eax
push edi
push esi
call dbg.addlinkconf
add esp, 0xc
push esi
push str.Entity___s__added
jmp 0x8059e97
sub esp, 0xc
push eax
call sym.imp.atoi
add esp, 0x10
jmp 0x805a179
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x8068043
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805a250
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, eax
je 0x805a23b
xor ebx, ebx
mov eax, dword [obj.linkconfSIZE]
cmp ebx, eax
mov edi, dword [obj.linkconfBASE]
jge 0x805a200
lea esi, [esi]
cmp byte [edi], 0
jne 0x805a20c
inc ebx
add edi, 0xa0
cmp ebx, eax
jl 0x805a1f0
push eax
push esi
push str.Entity___s__not_found
jmp 0x8059e97
sub esp, 8
push esi
lea eax, [edi + 8]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805a227
mov eax, dword [obj.linkconfSIZE]
jmp 0x805a1f5
cld
mov ecx, 0x28
rep stosd dword es:[edi], eax
push edi
push esi
push str.Entity___s__removed
jmp 0x8059e97
sub esp, 8
push str.LINK_DEL
jmp 0x805a141
nop
lea esi, [esi]
sub esp, 8
push 0x8067e0f
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805a2e1
sub esp, 0xc
push ebx
call dbg.chop
pop edi
mov ebx, eax
pop eax
push 0x64
push ebx
call dbg.find_entity
add esp, 0x10
test eax, eax
mov edi, eax
je 0x805a2da
sub esp, 8
push 0
mov ecx, dword [from]
push ecx
call dbg.find_user
pop esi
pop edx
push obj.my_entity
mov eax, dword [eax + 0x3c]
shr eax, 9
and eax, 0xff
push eax
mov ecx, dword [from]
sub esp, 0xc
push ecx
call dbg.getnick
add esp, 0x10
push eax
push ebx
push str._MSG___Forced_delink_of___s__by__s__i_____s
push 0
call dbg.link_bcast
add esp, 0x18
push 0
push edi
call dbg.remlink
add esp, 0xc
push ebx
push str.Entity___s__unlinked
jmp 0x8059e97
push esi
push ebx
jmp 0x805a084
sub esp, 8
push 0x806805e
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805a3a0
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805a311
cmp byte [eax], 0
jne 0x805a31e
sub esp, 8
push str.LINK_PORT
jmp 0x805a141
sub esp, 0xc
push eax
call dbg.Atoi
mov esi, eax
add esp, 0xc
xor eax, eax
test esi, esi
je 0x805a334
mov eax, dword [esi]
push eax
push ebx
push str._do_linkcmd__linkport__ps___s__port___i_n
call dbg.debug
add esp, 0x10
test esi, esi
je 0x805a354
mov eax, dword [esi]
test eax, eax
jle 0x805a354
cmp eax, 0xffff
jle 0x805a361
sub esp, 8
push str.Port_number_must_be_in_the_range_1_65535
jmp 0x8059e97
push edx
push eax
push str.Changing_linkport_to__i
mov eax, dword [from]
push eax
call dbg.send_to_user
pop eax
mov eax, dword [obj.linksock]
push eax
call sym.imp.close
mov dword [obj.linksock], 0xffffffff
mov eax, dword [esi]
mov dword [obj.linkport], eax
jmp 0x8059ea0
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov ebx, dword [0x80704e0]
push ebx
jmp 0x805a141
sub esp, 8
push str.___Entity_______Password_______Host____________________________Port___
mov ebx, dword [from]
push ebx
mov dword [valid], 0
call dbg.send_to_user
mov eax, dword [obj.linkconfSIZE]
xor ebx, ebx
add esp, 0x10
cmp esi, eax
mov edi, dword [obj.linkconfBASE]
jge 0x805a447
mov esi, esi
cmp byte [edi], 0
je 0x805a43c
mov eax, dword [edi + 0x98]
test eax, eax
jne 0x805a459
mov dword [tmp], 0x656e6f6e
mov byte [var_214h], 0
lea esi, [tmp]
sub esp, 8
cmp edi, 0xffffffb8
push esi
mov eax, str.none
je 0x805a417
lea eax, [edi + 0x48]
push eax
lea eax, [edi + 0x28]
push eax
lea eax, [edi + 8]
push eax
push str.____11s____13s____30s___s
mov edx, dword [from]
push edx
call dbg.send_to_user
inc dword [valid]
add esp, 0x20
mov eax, dword [obj.linkconfSIZE]
inc ebx
add edi, 0xa0
cmp ebx, eax
jl 0x805a3e0
push eax
mov eax, dword [valid]
push eax
push str.___Total:__i_known_entities___
jmp 0x8059e97
push ecx
push eax
push 0x806f5ab
lea esi, [tmp]
push esi
call sym.imp.sprintf
add esp, 0x10
jmp 0x805a406
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
mov edi, dword [arg_8h]
push str.________Losers_Userhosts_____________Channel___Lvl___Shitter
push edi
call dbg.send_to_user
xor esi, esi
mov edx, dword [obj.current]
add esp, 0x10
cmp esi, dword [edx + 0x71c]
mov ebx, dword [edx + 0x720]
jge 0x80635ae
cmp byte [ebx], 0
je 0x80635a2
mov al, byte [ebx + 0x3e]
shr al, 1
and eax, 7
cmp eax, 2
je 0x80635c4
inc esi
add ebx, 0x48
cmp esi, dword [edx + 0x71c]
jl 0x8063590
mov dword [to], str.______________________________________________________________
mov dword [arg_8h], edi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_user
sub esp, 0xc
mov eax, dword [ebx + 0x30]
push eax
call dbg.getnick
pop edx
pop ecx
push eax
mov eax, dword [ebx + 0x3c]
shr eax, 9
and eax, 0xff
push eax
mov eax, dword [ebx + 0x2c]
push eax
mov eax, dword [ebx + 0x38]
push eax
push str.____30s__12s___3d__10s
push edi
call dbg.send_to_user
add esp, 0x20
mov edx, dword [obj.current]
jmp 0x80635a2
push ebp
mov ebp, esp
push ebx
push ecx
mov ebx, dword [arg_8h]
cmp byte [ebx], 0x3a
je 0x804d200
mov eax, dword [obj.dh_j]
test eax, eax
jne 0x804d1e0
xor eax, eax
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
nop
push eax
push ebx
push 0x806a12d
mov eax, dword [obj.dh_from]
push eax
call dbg.send_to_user
inc dword [obj.dh_i]
add esp, 0x10
jmp 0x804d1d6
lea esi, [esi]
mov edx, dword [obj.dh_j]
test edx, edx
je 0x804d245
mov eax, dword [obj.dh_i]
test eax, eax
je 0x804d22d
sub esp, 8
mov eax, dword [obj.dh_from]
push 0x8068319
push eax
call dbg.send_to_user
mov eax, 1
jmp 0x804d1d8
sub esp, 8
push str.No_help_found_on_that_topic.
mov eax, dword [obj.dh_from]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x804d213
sub esp, 8
inc ebx
push ebx
mov eax, dword [obj.dh_rest]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x804d1d6
push eax
push ebx
push 0x8068347
mov eax, dword [obj.dh_from]
push eax
call dbg.send_to_user
mov dword [esp], ebx
call dbg.level_needed
add esp, 0x10
test eax, eax
jle 0x804d297
push ecx
push eax
push str.Level_needed:__i
mov edx, dword [obj.dh_from]
push edx
call dbg.send_to_user
add esp, 0x10
inc dword [obj.dh_j]
jmp 0x804d1d6
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
mov ebx, dword [arg_8h]
push 0
mov eax, dword [obj.now]
mov edx, dword [obj.current]
sub eax, dword [edx + 0xbb8]
push eax
call dbg.idle2str
mov dword [rest], eax
mov dword [arg_8h], ebx
mov dword [to], str.Uptime:__s
mov ebx, dword [var_4h]
add esp, 0x10
mov esp, ebp
pop ebp
jmp dbg.send_to_user
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x22c
mov edi, dword [arg_8h]
test byte [edi + 0x208], 0x10
je 0x8055650
sub esp, 0xc
push str._process_incoming_chat__new_user_connecting_n
call dbg.debug
add esp, 0xc
lea eax, [size]
push eax
lea eax, [ebp - 0x28]
push eax
mov eax, dword [edi + 4]
push eax
mov dword [size], 0x10
call sym.imp.accept
pop esi
mov ecx, dword [edi + 4]
mov ebx, eax
push ecx
call sym.imp.close
add esp, 0x10
cmp ebx, 0xffffffff
je 0x8055640
sub esp, 8
mov dword [edi + 4], ebx
push 3
push ebx
call sym.imp.fcntl
or eax, 4
add esp, 0xc
push eax
push 4
push ebx
call sym.imp.fcntl
mov eax, dword [edi + 0x208]
and eax, 0xffffffef
or eax, 0x20
mov dword [edi + 0x208], eax
mov eax, dword [obj.now]
lea esi, [edi + 0x20c]
mov dword [edi + 0x260], eax
mov dword [esp], esi
call dbg.max_userlevel
mov dword [maxul], eax
pop eax
pop edx
push 1
push esi
call dbg.getnick
mov dword [esp], eax
call dbg.link_dccuser
pop eax
mov eax, dword [maxul]
push eax
sub esp, 0xc
push esi
call dbg.getnick
add esp, 0x10
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
push str.__s___s__i__has_connected
lea ebx, [linebuf]
push ebx
call sym.imp.sprintf
add esp, 0x20
push ebx
sub esp, 8
mov eax, dword [obj.now]
push eax
call dbg.time2medium
add esp, 0xc
push eax
push str.__s___s_n
mov eax, dword [edi + 4]
push eax
call dbg.send_to_socket
add esp, 0x10
test eax, eax
js 0x8055640
sub esp, 0xc
push ebx
call dbg.send_global_statmsg
add esp, 0x10
cmp dword [maxul], 0x64
je 0x8055618
lea esi, [esi]
lea edi, [edi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push 0x64
mov eax, dword [obj.current]
push 0
add eax, 0x220
push eax
push esi
call dbg.do_statmsg
add esp, 0x10
jmp 0x8055610
lea esi, [esi]
lea edi, [edi]
mov dword [edi + 0x208], 0x80
jmp 0x8055610
lea esi, [esi]
call sym.imp.__error
mov dword [eax], 0x23
push ebx
lea eax, [linebuf]
push eax
lea eax, [edi + 8]
push eax
mov ecx, dword [edi + 4]
push ecx
call dbg.sockread
mov esi, eax
call sym.imp.__error
add esp, 0x10
test esi, esi
mov eax, dword [eax]
je 0x80557d0
cmp byte [esi], 0
je 0x80557d0
mov ebx, dword [obj.now]
sub ebx, dword [edi + 0x260]
cmp ebx, 0xa
jle 0x8055790
sub esp, 0xc
push esi
call sym.imp.strlen
add esp, 0x10
mov dword [edi + 0x25c], eax
sub esp, 8
mov eax, dword [obj.now]
mov dword [edi + 0x260], eax
push 0
lea eax, [edi + 0x20c]
push eax
mov dword [var_238h], eax
call dbg.find_user
mov dword [obj.CurrentUser], eax
pop eax
pop edx
push 0
mov eax, dword [var_238h]
push eax
call dbg.find_shit
mov dword [obj.CurrentShit], eax
pop eax
mov eax, dword [var_238h]
push eax
call dbg.getnick
pop ecx
pop ebx
push eax
push obj.CurrentNick
call sym.imp.strcpy
add esp, 0x10
cmp byte [esi], 1
je 0x805575c
push eax
mov eax, dword [obj.current]
push esi
add eax, 0x220
push eax
mov ebx, dword [var_238h]
push ebx
mov dword [obj.dccKill], 1
call dbg.on_msg
add esp, 0x10
cmp dword [obj.dccKill], 2
je 0x8055750
mov dword [obj.dccKill], 0
jmp 0x8055610
mov dword [edi + 0x208], 0x80
jmp 0x8055741
sub esp, 0xc
lea ebx, [bp]
push ebx
mov dword [bp], esi
call dbg.chop
pop eax
pop edx
push 0x806e6c6
push ebx
call dbg.get_token
mov esi, eax
add esp, 0x10
jmp 0x8055712
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push esi
call sym.imp.strlen
lea edx, [ebx + ebx*4]
lea edx, [edx + edx*4]
add eax, dword [edi + 0x25c]
shl edx, 3
mov dword [edi + 0x25c], eax
sub eax, edx
add esp, 0x10
cmp eax, 0x7d0
jg 0x8055640
jmp 0x80556b4
lea esi, [esi]
lea edi, [edi]
cmp eax, 4
je 0x8055610
cmp eax, 0x23
jne 0x8055640
jmp 0x8055610
jmp dword [reloc.accept]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xcc
mov eax, dword [from]
cmp byte [eax], 0x24
je 0x8053ec5
mov edx, dword [obj.current]
xor eax, eax
cmp eax, dword [edx + 0xb24]
mov dword [var_d0h], edx
mov ebx, dword [edx + 0xb28]
mov dword [i], 0
jge 0x8053e4b
mov esi, esi
cmp byte [ebx], 0
je 0x8053e2b
lea esi, [ebx + 1]
mov edi, str.statmsg
mov ecx, 8
cld
repe cmpsb byte [esi], byte ptr es:[edi]
je 0x8053ed0
inc dword [i]
mov edx, dword [i]
mov eax, dword [var_d0h]
add ebx, 0xa1
cmp edx, dword [eax + 0xb24]
jl 0x8053e10
cld
xor eax, eax
lea edi, [new]
mov ecx, 0x28
rep stosd dword es:[edi], eax
mov byte [edi], 0
sub esp, 8
mov esi, dword [from]
push esi
lea eax, [dest]
push eax
mov byte [new], 1
call sym.imp.strcpy
mov eax, dword [obj.current]
push 0xa1
lea edx, [eax + 0xb24]
push edx
lea ebx, [new]
push ebx
add eax, 0xb28
push eax
mov dword [var_c7h], 0x74617473
mov dword [var_c3h], 0x67736d
call dbg.addstruct
add esp, 0x14
mov ebx, dword [from]
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
push str.__s__Added_to_mech_core
call dbg.send_statmsg
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
mov edi, dword [from]
push edi
lea eax, [ebx + 0x51]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8053ec5
mov edx, dword [obj.current]
mov dword [var_d0h], edx
jmp 0x8053e2b
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
mov ebx, dword [arg_8h]
mov esi, dword [arg_10h]
push 1
push ebx
call dbg.search_list
add esp, 0x10
test eax, eax
je 0x80522b0
mov dword [to], str.You_are_already_DCC_chatting_me
mov dword [arg_8h], ebx
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.send_to_user
lea esi, [esi]
lea edi, [edi]
mov dword [to], esi
mov dword [arg_8h], ebx
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.dcc_chat
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [args]
push ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov esi, eax
je 0x805bcff
cmp byte [eax], 0
je 0x805bcff
mov ebx, dword [obj.botlist]
test ebx, ebx
je 0x805bcef
lea esi, [esi]
lea edi, [edi]
test byte [ebx + 0x3ac], 1
jne 0x805bd10
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805bce0
push esi
push edi
push str._USERMASK__s__s_n
mov eax, dword [Link]
push eax
call dbg.link_bcast
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
lea edi, [edi]
sub esp, 0xc
push edi
mov dword [obj.current], ebx
call dbg.find_handle
add esp, 0x10
test eax, eax
je 0x805bce9
test byte [eax + 0x3c], 0x20
jne 0x805bce9
sub esp, 8
push esi
push eax
call dbg.addmasktouser
add esp, 0x10
jmp 0x805bce9
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov eax, dword [esi]
test eax, eax
je 0x804c315
mov esi, esi
sub esp, 8
mov ebx, dword [eax]
push eax
push esi
call dbg.remove_ban
add esp, 0x10
test ebx, ebx
mov eax, ebx
jne 0x804c300
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
mov esi, dword [arg_8h]
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8052160
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push ebx
call dbg.usermode
add esp, 0x10
and eax, 2
je 0x805214b
mov eax, dword [rest]
test eax, eax
je 0x8052195
sub esp, 0xc
push 0x76
push 0x2d
push 3
push eax
push ebx
call dbg.channel_massmode
jmp 0x805214b
sub esp, 8
mov ebx, dword [0x8070830]
push ebx
push esi
call dbg.usage
jmp 0x805214b
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
mov eax, dword [rest]
add esp, 0x10
cmp byte [eax], 0x3a
je 0x805fbc8
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
test ebx, ebx
je 0x805fb9c
mov esi, esi
cmp dword [ebx + 0x10], 0x14
je 0x805fbb0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805fb90
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov eax, dword [rest]
push eax
push esi
push 0x806e3d7
mov ecx, dword [ebx + 8]
push ecx
call dbg.send_to_user
add esp, 0x10
jmp 0x805fb96
inc eax
mov dword [rest], eax
jmp 0x805fb7f
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea eax, [rest]
push eax
mov edi, dword [arg_8h]
call dbg.chop
mov ebx, eax
pop eax
pop edx
push 1
push ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
mov esi, eax
je 0x805f84e
mov eax, dword [rest]
test eax, eax
je 0x805f826
cmp byte [eax], 0x3a
je 0x805f860
push eax
mov eax, dword [rest]
push eax
push ebx
push edi
call dbg.reverse_topic
mov ecx, dword [rest]
push ecx
sub esp, 8
push edi
call dbg.getnick
add esp, 0xc
push eax
push str.__s_changes_topic_to___s_
push esi
call dbg.send_spy
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
inc eax
mov dword [rest], eax
jmp 0x805f826
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x228
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
pop esi
pop edi
push 1
push eax
call dbg.find_channel
add esp, 0x10
test eax, eax
mov dword [obj.CurrentChan], eax
jne 0x8060910
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 0xc
push ebx
call dbg.chop
mov dword [user], eax
mov dword [esp], ebx
call dbg.chop
mov dword [host], eax
mov dword [esp], ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
pop ecx
mov edx, dword [host]
push edx
mov esi, eax
mov eax, dword [user]
push eax
push edi
push 0x8067a31
lea ebx, [nuh]
push ebx
call sym.imp.sprintf
add esp, 0x18
push str.no_info
push 0
mov eax, dword [obj.now]
push eax
push str.none
push ebx
push edi
call dbg.make_seen
mov eax, dword [obj.CurrentChan]
add esp, 0x20
test byte [eax + 0x38d], 4
jne 0x8060903
push eax
mov eax, dword [host]
push eax
mov eax, dword [user]
push eax
push edi
call dbg.make_chanuser
mov ebx, eax
mov al, byte [esi]
add esp, 0x10
test al, al
je 0x8060903
nop
movsx eax, al
cmp eax, 0x2b
je 0x8060a20
cmp eax, 0x40
je 0x80609e0
inc esi
mov al, byte [esi]
test al, al
jne 0x80609c0
jmp 0x8060903
lea esi, [esi]
mov eax, dword [ebx + 4]
or eax, 2
and eax, 0xfffffffe
sub esp, 8
mov dword [ebx + 4], eax
mov eax, dword [obj.current]
push edi
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x80609cd
mov eax, dword [obj.CurrentChan]
or byte [eax + 0x38d], 8
jmp 0x80609cd
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ebx + 4]
or eax, 1
and eax, 0xfffffffd
mov dword [ebx + 4], eax
jmp 0x80609cd
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xb4
push obj.my_entity
mov esi, dword [arg_8h]
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8059e1c
xor ebx, ebx
mov eax, dword [obj.linkconfSIZE]
cmp ebx, eax
mov edi, dword [obj.linkconfBASE]
jge 0x8059da4
lea esi, [esi]
lea edi, [edi]
cmp byte [edi], 0
jne 0x8059e40
inc ebx
add edi, 0xa0
cmp ebx, eax
jl 0x8059d90
lea ebx, [new]
sub esp, 8
cld
xor eax, eax
mov ecx, 0x28
mov edi, ebx
rep stosd dword es:[edi], eax
push esi
lea eax, [dest]
push eax
mov byte [new], 1
call sym.imp.strcpy
pop eax
pop edx
mov edi, dword [pass]
push edi
lea eax, [var_90h]
push eax
call sym.imp.strcpy
mov esi, dword [host]
add esp, 0x10
test esi, esi
je 0x8059df1
mov eax, dword [host]
cmp byte [eax], 0
jne 0x8059e24
mov eax, dword [port]
push 0xa0
test eax, eax
push obj.linkconfSIZE
mov dword [var_20h], eax
sete al
and eax, 0xff
push ebx
lea eax, [eax + eax*2]
push obj.linkconfBASE
mov dword [var_1ch], eax
call dbg.addstruct
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push eax
lea eax, [var_70h]
push eax
call sym.imp.strcpy
add esp, 0x10
jmp 0x8059df1
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push esi
lea eax, [edi + 8]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8059e1c
mov eax, dword [obj.linkconfSIZE]
jmp 0x8059d99
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push 0
mov ebx, dword [arg_8h]
mov eax, dword [ebx]
add eax, 0x20c
push eax
call dbg.getnick
mov dword [esp], eax
call dbg.link_dccuser
mov edi, dword [obj.current]
mov ecx, dword [ebx]
mov eax, dword [edi + 0xb3c]
add esp, 0x10
cmp ecx, eax
mov dword [ptr], ecx
mov dword [var_14h], edi
je 0x805546a
mov edx, eax
mov eax, dword [eax]
cmp eax, ecx
je 0x8055398
lea esi, [esi]
mov edx, eax
mov eax, dword [eax]
cmp eax, ecx
jne 0x8055390
mov eax, dword [ecx]
mov dword [edx], eax
mov eax, dword [var_14h]
xor esi, esi
cmp esi, dword [eax + 0xb24]
mov ebx, dword [eax + 0xb28]
jge 0x80553c4
nop
cmp byte [ebx], 0
jne 0x8055430
inc esi
add ebx, 0xa1
cmp esi, dword [edi + 0xb24]
jl 0x80553b0
mov eax, dword [ptr]
sub esp, 0xc
add eax, 0x20c
push eax
call dbg.max_userlevel
push eax
mov eax, dword [ptr]
sub esp, 8
add eax, 0x20c
push eax
call dbg.getnick
add esp, 0xc
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
push str.__s___s__i__has_disconnected
call dbg.send_global_statmsg
mov eax, dword [ptr]
add esp, 0x14
mov edx, dword [eax + 4]
push edx
call sym.imp.close
lea eax, [ptr]
mov dword [esp], eax
call dbg.MyFree
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ptr]
sub esp, 8
add eax, 0x20c
push eax
lea eax, [ebx + 0x51]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8055457
mov edi, dword [obj.current]
jmp 0x80553b5
push ecx
push 0xa1
push 0
push ebx
call sym.imp.memset
add esp, 0x10
jmp 0x805544c
mov eax, dword [ecx]
mov dword [edi + 0xb3c], eax
jmp 0x805539c
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x101c
mov ebx, dword [arg_8h]
test ebx, ebx
mov edi, dword [arg_ch]
mov dword [save], ebx
je 0x8058130
test edi, edi
je 0x8058130
lea eax, [n1]
lea edx, [n2]
mov dword [ptr2], edx
mov dword [ptr1], eax
mov edx, dword [save]
mov al, byte [edx]
test al, al
je 0x80580a0
lea esi, [esi]
movsx edx, al
inc ebx
mov esi, dword [ptr1]
inc dword [ptr1]
cmp edx, 0xff
ja 0x8058150
mov eax, dword [obj._CurrentRuneLocale]
mov eax, dword [eax + edx*4 + 0x834]
mov byte [esi], al
mov al, byte [ebx]
test al, al
jne 0x8058070
mov al, byte [edi]
test al, al
je 0x80580dc
lea esi, [esi]
lea edi, [edi]
movsx edx, al
inc edi
mov ebx, dword [ptr2]
inc dword [ptr2]
cmp edx, 0xff
ja 0x8058140
mov eax, dword [obj._CurrentRuneLocale]
mov eax, dword [eax + edx*4 + 0x834]
mov byte [ebx], al
mov al, byte [edi]
test al, al
jne 0x80580b0
mov eax, dword [ptr1]
mov byte [eax], 0
sub esp, 8
mov edx, dword [ptr2]
lea eax, [n2]
mov byte [edx], 0
push eax
lea edx, [n1]
push edx
call sym.imp.strstr
add esp, 0x10
test eax, eax
je 0x8058130
lea edx, [n1]
sub eax, edx
add eax, dword [save]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x8058130
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
xor eax, eax
jmp 0x8058119
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push edx
call sym.imp.___toupper
add esp, 0x10
jmp 0x80580d4
mov esi, esi
sub esp, 0xc
push edx
call sym.imp.___toupper
add esp, 0x10
jmp 0x8058098
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8051f30
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
jmp 0x8051f30
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push ebx
call dbg.usermode
add esp, 0x10
and eax, 2
je 0x8051f1a
push eax
push obj.CurrentNick
push str._o__s
push ebx
call dbg.sendmode
add esp, 0x10
jmp 0x8051f1a
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x10
push 0x1b6
mov eax, dword [obj.current]
push 0x601
add eax, 0x724
push eax
call sym.imp.open
mov edi, eax
add esp, 0x10
xor eax, eax
test edi, edi
js 0x8061cb5
mov eax, dword [obj.dodebug]
mov ecx, dword [obj.current]
mov dword [dodeb], eax
xor eax, eax
cmp eax, dword [ecx + 0x71c]
mov dword [obj.dodebug], 0
mov ebx, dword [ecx + 0x720]
mov dword [i], 0
jge 0x8061c9f
lea esi, [esi]
cmp byte [ebx], 0
je 0x8061c8e
mov dl, byte [ebx + 0x3e]
mov al, dl
shr al, 1
and eax, 7
cmp eax, 2
je 0x8061e90
test byte [ebx + 0x3c], 0x10
je 0x8061cc0
add ebx, 0x48
inc dword [i]
mov eax, dword [i]
cmp eax, dword [ecx + 0x71c]
jl 0x8061c70
sub esp, 0xc
push edi
call sym.imp.close
mov eax, dword [dodeb]
mov dword [obj.dodebug], eax
mov eax, 1
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
shr dl, 1
mov eax, edx
and eax, 7
cmp eax, 2
je 0x8061e58
cmp eax, 2
jg 0x8061e40
dec eax
je 0x8061d4e
push eax
mov eax, dword [ebx + 0x2c]
push eax
push str.channel_t_t_s_n
push edi
call dbg.send_to_socket
mov eax, dword [ebx + 0x3c]
shr eax, 9
add esp, 0x10
and eax, 0xff
jne 0x8061d3c
mov eax, dword [ebx + 0x30]
test eax, eax
jne 0x8061d2a
mov eax, dword [ebx + 0x34]
test eax, eax
jne 0x8061d18
add ebx, 0x48
mov ecx, dword [obj.current]
jmp 0x8061c91
push edx
push eax
push str.reason_t_t_s_n
push edi
call dbg.send_to_socket
add esp, 0x10
jmp 0x8061d0a
push ecx
push eax
push str.who_t_t_s_n
push edi
call dbg.send_to_socket
add esp, 0x10
jmp 0x8061d03
push esi
push eax
push str.access_t_t_i_n
push edi
call dbg.send_to_socket
add esp, 0x10
jmp 0x8061cfc
push eax
lea eax, [ebx + 8]
push eax
push str._nhandle_t_t_s_n
push edi
call dbg.send_to_socket
mov esi, dword [ebx + 0x38]
add esp, 0x10
test esi, esi
je 0x8061d81
push eax
lea eax, [esi + 4]
push eax
push str.mask_t_t_s_n
push edi
call dbg.send_to_socket
mov esi, dword [esi]
add esp, 0x10
test esi, esi
jne 0x8061d68
cmp byte [ebx + 0x15], 0
jne 0x8061e26
mov ax, word [ebx + 0x3c]
shr ax, 6
and eax, 7
jne 0x8061e11
mov al, byte [ebx + 0x3c]
test eax, 2
jne 0x8061dfb
test eax, 4
jne 0x8061de5
test eax, 1
jne 0x8061dcf
and eax, 8
je 0x8061cdc
sub esp, 8
push str.shared_n
push edi
call dbg.send_to_socket
add esp, 0x10
jmp 0x8061cdc
sub esp, 8
push str.echo_n
push edi
call dbg.send_to_socket
add esp, 0x10
mov al, byte [ebx + 0x3c]
jmp 0x8061db0
sub esp, 8
push str.avoice_n
push edi
call dbg.send_to_socket
add esp, 0x10
mov al, byte [ebx + 0x3c]
jmp 0x8061da9
sub esp, 8
push str.aop_n
push edi
call dbg.send_to_socket
add esp, 0x10
mov al, byte [ebx + 0x3c]
jmp 0x8061da2
push esi
push eax
push str.prot_t_t_i_n
push edi
call dbg.send_to_socket
add esp, 0x10
jmp 0x8061d98
push eax
lea eax, [ebx + 0x15]
push eax
push str.pass_t_t_s_n
push edi
call dbg.send_to_socket
add esp, 0x10
jmp 0x8061d8b
mov esi, esi
cmp eax, 3
jne 0x8061cdc
push eax
mov eax, dword [ebx + 0x38]
push eax
push str._nkicksay_t_t_s_n
jmp 0x8061dc1
push ecx
mov edx, dword [ebx + 0x38]
push edx
push str._nshit_t_t_s_n
push edi
call dbg.send_to_socket
add esp, 0xc
mov eax, dword [ebx + 0x40]
push eax
push str.time_t_t_li_n
push edi
call dbg.send_to_socket
add esp, 0xc
mov eax, dword [ebx + 0x44]
push eax
push str.expire_t_t_li_n
jmp 0x8061dc1
nop
lea esi, [esi]
mov eax, dword [ebx + 0x44]
cmp dword [obj.now], eax
jge 0x8061c8e
jmp 0x8061c88
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
mov esi, eax
mov eax, dword [rest]
add esp, 0x10
test eax, eax
je 0x8060532
cmp byte [eax], 0x3a
je 0x806059a
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
test ebx, ebx
je 0x806055c
jmp 0x8060550
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
cmp dword [ebx + 0x10], 5
je 0x8060570
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8060550
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
push eax
push esi
push str.Server_____________s
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
add esp, 0xc
mov eax, dword [rest]
push eax
push str.____________________s_
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x8060556
inc eax
mov dword [rest], eax
jmp 0x8060532
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x228
mov esi, dword [from]
push esi
call dbg.max_userlevel
mov edx, dword [rest]
add esp, 0x10
test edx, edx
mov dword [axs], eax
je 0x804d2de
cmp byte [edx], 0
jne 0x804d4b2
sub esp, 8
push 0x80689e0
mov ebx, dword [from]
push ebx
call dbg.send_to_user
xor esi, esi
mov byte [line], 0
add esp, 0x10
nop
lea esi, [esi]
mov ecx, dword [obj.mcmd]
xor edi, edi
test ecx, ecx
mov dword [nxt], 0x64
je 0x804d348
mov ebx, obj.mcmd
nop
lea esi, [esi]
xor eax, eax
mov al, byte [ebx + 0xc]
cmp eax, dword [nxt]
jge 0x804d337
cmp eax, esi
jle 0x804d337
mov dword [nxt], eax
cmp eax, esi
je 0x804d490
add ebx, 0x10
mov eax, dword [ebx]
test eax, eax
jne 0x804d320
test edi, edi
je 0x804d47b
sub esp, 8
push esi
push str._do_help__printing_all_level__i_commands_n
call dbg.debug
mov eax, dword [obj.mcmd]
add esp, 0x10
test eax, eax
mov dword [ci], edi
je 0x804d399
xor ebx, ebx
lea esi, [esi]
lea edi, [edi]
xor eax, eax
mov al, byte [ebx + 0x807026c]
cmp eax, esi
je 0x804d3f0
add ebx, 0x10
mov eax, dword [ebx + obj.mcmd]
test eax, eax
jne 0x804d380
push ecx
push 0x1f4
lea eax, [line]
push eax
mov edx, dword [from]
push edx
call dbg.print_help
add esp, 0x10
cmp esi, 0x64
je 0x804d3c9
mov esi, dword [nxt]
cmp esi, dword [axs]
jle 0x804d300
sub esp, 8
push 0x8068319
mov ebx, dword [from]
push ebx
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
cmp dword [ci], edi
je 0x804d40f
sub esp, 8
push 0x8067271
lea edx, [line]
push edx
call dbg.Strcat
add esp, 0x10
sub esp, 0xc
mov eax, dword [ebx + obj.mcmd]
push eax
call sym.imp.strlen
add esp, 0xc
push eax
lea eax, [line]
push eax
mov eax, dword [from]
push eax
call dbg.print_help
add esp, 0x10
cmp byte [line], 0
jne 0x804d45c
mov dword [line], 0x20202020
mov dword [var_214h], 0x20202020
mov dword [var_210h], 0x202020
sub esp, 8
mov eax, dword [ebx + obj.mcmd]
push eax
lea edx, [line]
push edx
call dbg.Strcat
dec edi
add esp, 0x10
jmp 0x804d38c
mov esi, dword [nxt]
jmp 0x804d300
lea esi, [esi]
lea edi, [edi]
test edi, edi
je 0x804d49a
inc edi
jmp 0x804d33f
push edx
push esi
push 0x8068368
lea eax, [line]
push eax
call sym.imp.sprintf
add esp, 0x10
jmp 0x804d494
movsx eax, byte [edx]
cmp eax, 0xff
ja 0x804d794
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
je 0x804d5fe
sub esp, 0xc
push edx
call dbg.Atoi
add esp, 0x10
test eax, eax
je 0x804d5e7
mov esi, dword [eax]
cmp esi, dword [axs]
jle 0x804d4fc
mov esi, dword [axs]
test esi, esi
jle 0x804d5dc
push eax
push esi
push 0x8068a40
mov eax, dword [from]
push eax
call dbg.send_to_user
mov eax, dword [obj.mcmd]
add esp, 0x10
test eax, eax
mov byte [line], 0
mov dword [ci], 0
je 0x804d597
xor ebx, ebx
xor eax, eax
mov al, byte [ebx + 0x807026c]
cmp eax, esi
jg 0x804d58a
mov eax, dword [ci]
test eax, eax
jne 0x804d5c0
sub esp, 0xc
mov edi, dword [ebx + obj.mcmd]
push edi
inc dword [ci]
call sym.imp.strlen
add esp, 0xc
push eax
lea eax, [line]
push eax
mov ecx, dword [from]
push ecx
call dbg.print_help
pop eax
pop edx
mov eax, dword [ebx + obj.mcmd]
push eax
lea edx, [line]
push edx
call dbg.Strcat
add esp, 0x10
add ebx, 0x10
mov edi, dword [ebx + obj.mcmd]
test edi, edi
jne 0x804d533
mov ecx, dword [ci]
test ecx, ecx
je 0x804d3c9
push edx
push 0x3a
lea eax, [line]
push eax
mov eax, dword [from]
push eax
call dbg.print_help
add esp, 0x10
jmp 0x804d3c9
sub esp, 8
push 0x8067271
lea edx, [line]
push edx
call dbg.Strcat
add esp, 0x10
jmp 0x804d549
mov esi, dword [axs]
jmp 0x804d504
sub esp, 8
mov eax, dword [0x8070430]
push eax
mov eax, dword [from]
push eax
call dbg.usage
jmp 0x804d3da
sub esp, 8
push 0x2a
push edx
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x804d717
push eax
mov eax, dword [rest]
push eax
push 0x8068a80
mov eax, dword [from]
push eax
mov byte [line], 0
mov dword [ci], 0
call dbg.send_to_user
mov eax, dword [obj.mcmd]
add esp, 0x10
test eax, eax
je 0x804d6d0
xor ebx, ebx
sub esp, 8
mov eax, dword [ebx + obj.mcmd]
push eax
mov eax, dword [rest]
push eax
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x804d6bf
xor eax, eax
mov al, byte [ebx + 0x807026c]
cmp eax, dword [axs]
jg 0x804d6bf
mov edi, dword [ci]
test edi, edi
jne 0x804d6fb
sub esp, 0xc
mov esi, dword [ebx + obj.mcmd]
push esi
inc dword [ci]
call sym.imp.strlen
add esp, 0xc
push eax
lea edx, [line]
push edx
mov ecx, dword [from]
push ecx
call dbg.print_help
pop eax
pop edx
mov eax, dword [ebx + obj.mcmd]
push eax
lea eax, [line]
push eax
call dbg.Strcat
add esp, 0x10
add ebx, 0x10
mov eax, dword [ebx + obj.mcmd]
test eax, eax
jne 0x804d64a
mov eax, dword [ci]
test eax, eax
je 0x804d6e5
push eax
push 0x1f4
jmp 0x804d5a8
sub esp, 8
push 0x806f231
mov edi, dword [from]
push edi
call dbg.send_to_user
jmp 0x804d5b8
sub esp, 8
push 0x8067271
lea eax, [line]
push eax
call dbg.Strcat
add esp, 0x10
jmp 0x804d67e
sub esp, 8
push 0
push str.._mech.help
call sym.imp.open
add esp, 0x10
test eax, eax
mov ebx, eax
js 0x804d784
sub esp, 0xc
lea eax, [rest]
push eax
mov dword [obj.dh_j], 0
mov dword [obj.dh_i], 0
call dbg.chop
mov edx, dword [from]
mov dword [obj.dh_from], edx
pop edx
pop ecx
push eax
push str._do_help__helpfile_search___s_n
mov dword [obj.dh_rest], eax
call dbg.debug
pop esi
pop edi
push dbg.do_help_callback
push ebx
call dbg.readline
mov dword [esp], ebx
call sym.imp.close
jmp 0x804d3da
push esi
push str.._mech.help
push obj.ERR_FILEOPEN
jmp 0x804d3d1
xor eax, eax
jmp 0x804d4d0
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea ebx, [rest]
push ebx
call dbg.chop
pop eax
pop edx
push 0x80679d7
push ebx
call dbg.get_token
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
add esp, 0x10
test ebx, ebx
je 0x806036c
nop
cmp dword [ebx + 0x10], 5
je 0x8060380
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8060360
mov ebx, dword [var_4h]
leave
ret
jmp 0x8060380
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push eax
mov eax, dword [rest]
push eax
push str.Away_______________s
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x8060366
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
mov edi, dword [arg_8h]
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
push edi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8054880
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 1
push ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8054909
mov eax, dword [eax + 0x18]
test eax, eax
je 0x8054900
push 0x806a665
push ebx
push 0x8069b80
push edi
call dbg.send_to_user
mov ebx, dword [esi + 0x18]
add esp, 0x10
test ebx, ebx
je 0x80548dc
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ebx + 0xc]
push eax
mov esi, dword [ebx + 8]
push esi
push str.__30s____s
push edi
call dbg.send_to_user
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x80548c0
sub esp, 8
push 0x806a679
push edi
call dbg.send_to_user
add esp, 0x10
jmp 0x805486c
lea esi, [esi]
lea edi, [edi]
push ecx
push ebx
push str.There_are_no_active_bans_on__s
jmp 0x80548e4
push eax
push ebx
push obj.ERR_CHAN
push edi
call dbg.send_to_user
jmp 0x805486c
push ebp
mov ebp, esp
mov eax, dword [arg_10h]
test eax, eax
mov edx, dword [arg_8h]
je 0x8052490
mov dword [to], eax
mov dword [arg_8h], 0x806a12d
pop ebp
jmp dbg.send_to_server
lea esi, [esi]
mov eax, dword [0x80703e0]
mov dword [to], eax
mov dword [arg_8h], edx
pop ebp
jmp dbg.usage
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x80c
mov edi, dword [arg_8h]
test edi, edi
mov ebx, dword [arg_10h]
je 0x8066137
mov eax, dword [nick]
test eax, eax
je 0x8066137
test ebx, ebx
je 0x8066137
sub esp, 8
push 1
push ebx
call dbg.format_uh
pop ecx
pop esi
push eax
lea esi, [temp]
push esi
call sym.imp.strcpy
pop eax
pop edx
push 1
push ebx
call dbg.format_uh
pop edx
pop ecx
push eax
lea ebx, [temp2]
push ebx
call sym.imp.strcpy
mov dword [esp], esi
call dbg.screwban_format
mov dword [esp], ebx
call dbg.screwban_format
mov dword [esp], ebx
mov eax, dword [nick]
push esi
push eax
push str._obb__s__s__s
push edi
call dbg.sendmode
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x44
mov edi, dword [arg_8h]
push edi
mov eax, dword [0x806f3a5]
push str._screwban_format___s_n
mov dword [th], eax
mov al, byte [0x806f3a9]
mov byte [var_24h], al
call dbg.debug
mov dword [esp], edi
call sym.imp.strlen
mov edx, eax
lea eax, [eax - 5]
add esp, 0x10
cmp eax, 3
jg 0x8065fc0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
lea eax, [edx - 0xe]
push eax
fild dword [esp]
add esp, 4
fstp qword [ebp - 0x48]
call sym.imp.rand
fld qword [0x806e2c8]
push eax
fimul dword [esp]
fnstcw word [ebp - 0x2a]
fld qword [ebp - 0x48]
fmulp st(1)
mov ax, word [var_2ah]
mov ah, 0xc
mov word [var_2ch], ax
fadd qword [0x806fbf0]
fldcw word [ebp - 0x2c]
fistp dword [ebp - 0x30]
fldcw word [ebp - 0x2a]
mov eax, dword [var_30h]
add esp, 4
test eax, eax
jle 0x8065fac
mov ebx, eax
lea esi, [esi]
sub esp, 0xc
push edi
call sym.imp.strlen
xor edx, edx
push edx
dec eax
push eax
fild qword [esp]
add esp, 8
fstp qword [ebp - 0x48]
call sym.imp.rand
push eax
fld qword [0x806e2c8]
fimul dword [esp]
fnstcw word [ebp - 0x2a]
fld qword [ebp - 0x48]
fmulp st(1)
mov ax, word [var_2ah]
fldz
mov ah, 0xc
mov word [var_2ch], ax
faddp st(1)
fldcw word [ebp - 0x2c]
fistp dword [ebp - 0x30]
fldcw word [ebp - 0x2a]
mov esi, dword [var_30h]
add esp, 0xc
movsx eax, byte [esi + edi]
push eax
push str.___
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x8066080
dec ebx
jne 0x8066010
jmp 0x8065fac
lea esi, [esi]
call sym.imp.rand
push eax
fld qword [0x806e2c8]
fnstcw word [ebp - 0x2a]
fimul dword [esp]
mov ax, word [var_2ah]
fmul qword [0x806fbf8]
mov ah, 0xc
fldz
mov word [var_2ch], ax
faddp st(1)
fldcw word [ebp - 0x2c]
fistp dword [ebp - 0x30]
fldcw word [ebp - 0x2a]
mov eax, dword [var_30h]
mov al, byte [eax + ebp - 0x28]
add esp, 4
mov byte [esi + edi], al
jmp 0x8066071
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
call dbg.get_channel
mov dword [chan], eax
mov dword [esp], ebx
call dbg.chop
mov esi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test esi, esi
mov ebx, eax
je 0x80539f0
test eax, eax
je 0x80539f0
sub esp, 0xc
push esi
call dbg.find_handle
add esp, 0x10
test eax, eax
mov edi, eax
je 0x80539e0
sub esp, 8
mov eax, dword [chan]
push eax
mov eax, dword [from]
push eax
call dbg.get_userlevel
mov esi, eax
mov eax, dword [edi + 0x3c]
shr eax, 9
and eax, 0xff
add esp, 0x10
cmp esi, eax
jl 0x80539d0
sub esp, 8
push ebx
mov eax, dword [from]
push eax
call dbg.check_for_number
add esp, 0x10
test eax, eax
je 0x8053968
lea esi, [esi]
lea edi, [edi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
push ebx
call sym.imp.atoi
add esp, 0x10
cmp esi, eax
mov ebx, eax
jl 0x80539d0
cmp eax, 0x64
jbe 0x805399b
push eax
push 0x64
push str.Valid_levels_are_0_thru__i
mov esi, esi
lea edi, [edi]
mov edi, dword [from]
push edi
call dbg.send_to_user
jmp 0x8053960
push eax
mov eax, dword [edi + 0x3c]
shr eax, 9
and eax, 0xff
push eax
push str.Level_changed_from__i_to__i
mov esi, dword [from]
push esi
call dbg.send_to_user
mov eax, dword [edi + 0x3c]
movzx edx, bl
shl edx, 9
and eax, 0xfffe01ff
or eax, edx
mov dword [edi + 0x3c], eax
jmp 0x8053960
nop
lea esi, [esi]
sub esp, 8
push str.access_denied
jmp 0x8053990
lea esi, [esi]
push eax
push esi
push str.Unknown_user:__s
jmp 0x8053990
lea esi, [esi]
sub esp, 8
mov edx, dword [0x8070320]
push edx
mov eax, dword [from]
push eax
call dbg.usage
jmp 0x8053960
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
mov ebx, dword [arg_8h]
push ebx
call dbg.getnick
pop edx
pop ecx
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov edx, 0x64
jne 0x8062f50
mov ebx, dword [var_4h]
mov esp, ebp
mov eax, edx
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
mov eax, dword [channel]
push eax
push ebx
call dbg.find_user
add esp, 0x10
xor edx, edx
test eax, eax
je 0x8062f3f
mov al, byte [eax + 0x3c]
shr al, 1
mov edx, eax
and edx, 1
jmp 0x8062f3f
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
push obj.now
call sym.imp.localtime
mov esi, dword [obj.botlist]
add esp, 0x10
test esi, esi
mov dword [ltime], eax
je 0x8050efc
lea esi, [esi]
lea edi, [edi]
cmp dword [esi + 4], 4
je 0x8050f70
mov esi, dword [esi]
test esi, esi
jne 0x8050ef0
mov ebx, dword [ltime]
mov eax, dword [ebx + 4]
test eax, eax
jne 0x8050f19
mov edx, dword [obj.now]
mov eax, edx
sub eax, dword [obj.lastsave]
cmp eax, 0x78
jg 0x8050f21
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov dword [obj.lastsave], edx
call dbg.savesession
test eax, eax
je 0x8050f50
call dbg.write_levelfile
test eax, eax
jne 0x8050f19
sub esp, 8
push str.._mech.levels
push str.Levels_could_not_be_saved_to__s
call dbg.send_global_statmsg
add esp, 0x10
jmp 0x8050f19
sub esp, 8
push str.._mech.session
push str.Session_could_not_be_saved_to_file__s
call dbg.send_global_statmsg
add esp, 0x10
jmp 0x8050f30
mov esi, esi
lea edi, [edi]
mov edx, dword [obj.now]
mov eax, edx
sub eax, dword [esi + 0xba0]
cmp eax, 8
mov dword [obj.current], esi
jg 0x8051327
mov edx, dword [obj.current]
mov ebx, dword [edx + 0xb34]
xor edi, edi
test ebx, ebx
je 0x8050fe0
nop
mov edx, dword [ebx + 0x380]
test edx, edx
je 0x8050fc3
mov eax, dword [obj.now]
sub eax, dword [ebx + 0x384]
cmp eax, 5
jg 0x8051310
test edx, edx
je 0x8050fc3
inc edi
mov al, byte [ebx + 0x38d]
and eax, 0x38
cmp al, 0x10
je 0x80512f0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8050fa0
mov edx, dword [obj.current]
test edi, edi
jne 0x8050feb
and dword [obj.short_tv], 0xfffffffe
mov ecx, dword [obj.now]
mov eax, ecx
sub eax, dword [edx + 0xb98]
cmp eax, 0x5a
jg 0x80511dc
mov eax, dword [ltime]
mov ecx, dword [eax + 4]
mov edx, 0xa
mov eax, ecx
mov ebx, edx
cdq
idiv ebx
test edx, edx
jne 0x8051103
mov edx, dword [obj.current]
mov eax, dword [obj.now]
sub eax, dword [edx + 0xba8]
cmp eax, 0x78
jle 0x8051103
mov ebx, dword [edx + 0xb34]
test ebx, ebx
je 0x8051063
sub esp, 8
push 1
push ebx
call dbg.get_int_varc
add esp, 0x10
test eax, eax
jne 0x80511c0
mov ebx, dword [ebx]
inc edi
test ebx, ebx
jne 0x8051040
mov edx, dword [obj.current]
mov eax, dword [edx + 0xb38]
test eax, eax
mov ebx, 0x806f231
je 0x8051075
mov ebx, dword [eax + 4]
mov eax, dword [edx + 0x10]
push eax
push 0x114
mov eax, dword [obj.serverSIZE]
push eax
mov ecx, dword [obj.serverBASE]
push ecx
call dbg.findstruct
add esp, 0x10
test eax, eax
je 0x805119c
sub esp, 0xc
mov edx, dword [eax + 0x100]
push edx
cmp byte [eax + 0xa8], 0
je 0x8051194
add eax, 0xa8
push eax
push edi
push ebx
push str.C:_s_AC:_i_CS:_s:_i
call dbg.send_statmsg
add esp, 0x20
mov eax, dword [obj.current]
sub esp, 8
mov edx, dword [eax + 0xb40]
push edx
add eax, 0xb44
push eax
call dbg.write_seenlist
add esp, 0x10
test eax, eax
je 0x8051173
mov eax, dword [obj.current]
mov edx, dword [obj.now]
mov dword [eax + 0xba8], edx
mov eax, dword [ltime]
mov ecx, dword [eax + 4]
test ecx, ecx
jne 0x8050ef6
mov eax, dword [obj.now]
mov edx, dword [obj.current]
sub eax, dword [edx + 0xba4]
cmp eax, 0x78
jle 0x8050ef6
sub esp, 0xc
push str.Saving_Lists
call dbg.send_statmsg
mov eax, dword [obj.now]
mov edx, dword [obj.current]
mov dword [edx + 0xba4], eax
call dbg.saveuserlist
add esp, 0x10
test eax, eax
jne 0x8050ef6
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x724
push eax
push obj.ERR_NOSAVE
call dbg.send_statmsg
add esp, 0x10
jmp 0x8050ef6
mov eax, dword [obj.current]
sub esp, 8
mov eax, dword [eax + 0xb40]
push eax
push str.SeenList_could_not_be_saved_to_file__s
call dbg.send_statmsg
add esp, 0x10
jmp 0x80510ec
add eax, 8
jmp 0x80510b7
push ecx
push edi
push ebx
push str.C:_s_AC:_i_CS:_not_in_serverlist_
call dbg.send_statmsg
add esp, 0x10
jmp 0x80510c7
jmp 0x80511c0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0x18
push 1
push ebx
call dbg.get_int_varc
add esp, 0x14
push eax
call dbg.auto_unban
add esp, 0x10
jmp 0x8051056
sub esp, 8
lea eax, [ecx - 0x708]
push eax
lea eax, [edx + 0xb30]
push eax
call dbg.uptime_time
mov edx, dword [obj.current]
mov eax, dword [obj.now]
mov dword [edx + 0xb98], eax
pop eax
pop ecx
lea eax, [edx + 0x22d]
push eax
add edx, 0x220
push edx
call sym.imp.strcmp
add esp, 0x10
test eax, eax
jne 0x80512cc
call dbg.check_idlekick
sub esp, 8
push 0x26
push 0
call dbg.get_int_varc
add esp, 0x10
test eax, eax
setne al
and eax, 0xff
test eax, eax
mov edi, eax
je 0x8051002
mov eax, dword [obj.current]
test byte [eax + 0x3ac], 8
jne 0x8051002
mov edx, dword [obj.now]
sub edx, dword [eax + 0xbb4]
lea eax, [edi + edi]
add eax, edi
lea eax, [eax + eax*4]
shl eax, 2
cmp edx, eax
jle 0x8051002
sub esp, 0xc
push str.._randfiles_randaway.e
call dbg.randstring
mov ebx, eax
pop eax
mov eax, dword [obj.now]
push eax
call dbg.time2away
add esp, 0xc
test ebx, ebx
push eax
je 0x80512c5
cmp byte [ebx], 0
je 0x80512c5
mov eax, ebx
push eax
push str.AWAY_:_s
call dbg.send_to_server
mov eax, dword [obj.current]
or byte [eax + 0x3ac], 8
add esp, 0x10
jmp 0x8051002
mov eax, str.auto_away
jmp 0x80512a6
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x22d
push eax
push str.NICK__s
call dbg.send_to_server
add esp, 0x10
jmp 0x8051223
lea esi, [esi]
sub esp, 0xc
mov eax, dword [ebx + 4]
push eax
call dbg.needop
add esp, 0x10
jmp 0x8050fd4
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push ebx
call dbg.parse_avoice
add esp, 0x10
mov edx, dword [ebx + 0x380]
jmp 0x8050fbe
mov dword [esi + 0xba0], edx
call dbg.rejoin_channels
jmp 0x8050f8d
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.current]
test eax, eax
je 0x80491d0
or byte [eax + 0x3ac], 1
mov esp, ebp
pop ebp
ret
lea esi, [esi]
sub esp, 8
push obj.ERR_INIT
push str._s_Stray_USERSLAVE_tag__ignored__n
call sym.imp.printf
jmp 0x80491c6
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
mov eax, dword [value]
push eax
lea eax, [temp]
mov ebx, dword [arg_ch]
push eax
mov dword [obj.mallocdoer], 0x8063ec0
lea ebx, [ebx + ebx*4]
call dbg.mstrcpy
mov eax, dword [arg_8h]
lea ebx, [eax + ebx*4]
mov ecx, dword [ebx + 0x2c]
add esp, 0x10
test ecx, ecx
lea eax, [ebx + 0x2c]
jne 0x8063f10
mov eax, dword [temp]
mov dword [ebx + 0x2c], eax
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push eax
call dbg.MyFree
add esp, 0x10
jmp 0x8063ef7
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
mov dword [esp], ebx
call dbg.chop
mov esi, eax
mov dword [esp], ebx
call dbg.chop
mov ebx, eax
mov dword [esp], esi
call sym.imp.atol
add esp, 0x10
test ebx, ebx
mov edi, eax
je 0x80606d8
cmp byte [ebx], 0
jne 0x806076d
mov dword [c_signon], 0
mov eax, edi
mov edx, 0x88888889
imul edx
lea esi, [edi + edx]
mov eax, edi
sar eax, 0x1f
sar esi, 5
sub esi, eax
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb30]
test ebx, ebx
je 0x806071c
lea esi, [esi]
lea edi, [edi]
cmp dword [ebx + 0x10], 5
je 0x8060730
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8060710
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
push edi
push esi
push str.Idle_______________i_minutes___li_seconds_
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
mov eax, dword [c_signon]
add esp, 0x10
test eax, eax
je 0x8060716
sub esp, 0xc
mov eax, dword [c_signon]
push eax
call dbg.time2away
add esp, 0xc
push eax
push str.Signed_On__________s
mov eax, dword [ebx + 8]
push eax
call dbg.send_to_user
add esp, 0x10
jmp 0x8060716
sub esp, 0xc
push ebx
call sym.imp.atol
add esp, 0x10
mov dword [c_signon], eax
jmp 0x80606df
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
push obj.now
call sym.imp.time
mov dword [esp], str._sighup__n
call dbg.debug
pop eax
pop edx
push dbg.sig_hup
push 1
call sym.imp.signal
mov al, byte [obj.will]
and eax, 6
add esp, 0x10
cmp al, 6
je 0x805d7e0
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
jmp 0x805d7e0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [obj.current]
push 0x64
mov dword [obj.backup], eax
mov eax, dword [obj.botlist]
push 0
mov dword [obj.current], eax
add eax, 0x220
push eax
push eax
call dbg.do_rehash2
pop ecx
pop ebx
push 0
push str.._mech.msg
call sym.imp.open
add esp, 0x10
test eax, eax
mov ebx, eax
js 0x805d884
sub esp, 0xc
push obj.SHELLMASK
mov dword [obj.shell_cmd], 1
mov dword [obj.mallocdoer], 0x805d790
call sym.imp.strlen
inc eax
mov dword [esp], eax
call dbg.MyMalloc
mov dword [obj.shellmask], eax
pop eax
pop edx
push dbg.sig_hup_callback
push ebx
call dbg.readline
mov dword [esp], obj.shellmask
call dbg.MyFree
mov dword [esp], ebx
call sym.imp.close
mov dword [esp], str.._mech.msg
call sym.imp.unlink
mov dword [obj.shell_cmd], 0
add esp, 0x10
mov eax, dword [obj.backup]
mov dword [obj.current], eax
jmp 0x805d7ca
push ebp
mov ebp, esp
mov dword [cmdlevel], obj.VERSION
mov dword [rest], obj.BOTCLASS
mov dword [to], 0x806e50a
pop ebp
jmp dbg.send_to_user
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
test ebx, ebx
mov esi, dword [arg_8h]
je 0x804ab4f
mov esi, esi
lea edi, [edi]
test byte [ebx + 0x38d], 8
jne 0x804ab60
mov ebx, dword [ebx]
test ebx, ebx
jne 0x804ab40
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 0x11
push ebx
call dbg.get_int_varc
add esp, 0x10
test eax, eax
je 0x804ab49
sub esp, 8
push esi
push ebx
call dbg.find_chanuser
add esp, 0x10
test eax, eax
je 0x804ab49
test byte [eax + 4], 2
jne 0x804ab49
sub esp, 8
mov edx, dword [ebx + 4]
push edx
push eax
call dbg.get_nuh
mov dword [esp], eax
call dbg.find_user
add esp, 0x10
test eax, eax
mov edx, eax
je 0x804ab49
mov eax, dword [eax + 0x3c]
shr eax, 9
test al, al
je 0x804ab49
test byte [edx + 0x3c], 2
je 0x804ab49
push eax
push esi
push str.o__s
mov eax, dword [ebx + 4]
push eax
call dbg.sendmode
add esp, 0x10
jmp 0x804ab49
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.current]
lea edx, [eax + 0x246]
push edx
lea edx, [eax + 0x23a]
push edx
add eax, 0x22d
push eax
push 0x80690b3
call dbg.send_to_server
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea eax, [rest]
push eax
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805fa16
sub esp, 8
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805fa40
mov eax, dword [obj.current]
mov eax, dword [eax + 0x10]
push eax
push 0x114
mov eax, dword [obj.serverSIZE]
push eax
mov ebx, dword [obj.serverBASE]
push ebx
call dbg.findstruct
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x805fa16
cmp byte [eax + 0xa8], 0
je 0x805fa20
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
push ecx
push 0x4f
mov edx, dword [from]
push edx
lea eax, [eax + 0xa8]
push eax
call sym.imp.strncpy
mov byte [ebx + 0xf7], 0
add esp, 0x10
jmp 0x805fa16
nop
mov eax, dword [obj.current]
push ecx
add eax, 0x220
push eax
push ebx
push str._parse_001__Nick_desynch:__s____s_n
call dbg.debug
pop eax
pop edx
push ebx
mov eax, dword [obj.current]
push eax
call dbg.setbotnick
add esp, 0x10
jmp 0x805f9e4
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
mov edi, dword [arg_8h]
call dbg.get_channel
mov esi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8051bb0
mov eax, dword [obj.current]
mov al, byte [eax + 0x380]
cmp byte [ebx], al
je 0x8051b80
push eax
push 0
push ebx
push edi
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8051b4e
cmp byte [ebx], 0x24
je 0x8051b60
push eax
push ebx
push str.Immortality_Level_for__s
push edi
call dbg.send_to_user
sub esp, 8
push esi
push ebx
call dbg.get_userlevel
add esp, 0x10
push eax
push esi
push str.Channel:__s__Access:__i
push edi
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
inc ebx
mov al, byte [ebx]
test al, al
je 0x8051b6e
cmp al, 0x40
jne 0x8051b60
inc ebx
jmp 0x8051b27
cmp al, 0x40
jne 0x8051b27
jmp 0x8051b6b
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
inc ebx
push ebx
call dbg.level_needed
add esp, 0x10
test eax, eax
js 0x8051b4e
push edx
push eax
push str.The_immortality_level_needed_for_that_command_is:__i
push edi
call dbg.send_to_user
add esp, 0x10
jmp 0x8051b4e
lea esi, [esi]
lea edi, [edi]
mov ebx, edi
jmp 0x8051b22
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov eax, dword [args]
test eax, eax
je 0x805aca5
cmp byte [eax], 0
jne 0x805acb0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 0xc
lea ebx, [args]
push ebx
call dbg.chop
mov dword [entity], eax
mov dword [esp], ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
test eax, eax
mov dword [nick], eax
je 0x805ae75
test edi, edi
push eax
mov eax, edi
je 0x805ae6b
push eax
mov ebx, dword [entity]
push ebx
push str._Link_quit__removing_::_entity___s__bot___s__nick___s_n
call dbg.debug
add esp, 0x20
test edi, edi
je 0x805ad02
cmp byte [edi], 0
jne 0x805ad20
sub esp, 8
mov ecx, dword [entity]
mov eax, dword [Link]
push ecx
add eax, 0xc
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805ae5d
mov eax, dword [nick]
test eax, eax
je 0x805adaf
mov eax, dword [nick]
cmp byte [eax], 0
je 0x805adaf
xor esi, esi
mov eax, dword [obj.botlinkSIZE]
cmp esi, eax
mov ebx, dword [obj.botlinkBASE]
jge 0x805aca5
lea esi, [esi]
cmp byte [ebx], 0
je 0x805ad5b
cmp byte [ebx + 9], 0x66
je 0x805ad6b
inc esi
add ebx, 0x258
cmp esi, eax
jl 0x805ad50
jmp 0x805aca5
sub esp, 8
mov eax, dword [nick]
push eax
lea eax, [ebx + 0x2c]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805ad89
mov eax, dword [obj.botlinkSIZE]
jmp 0x805ad5b
sub esp, 8
push edi
lea eax, [ebx + 0xc]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805ad82
sub esp, 8
mov eax, dword [Link]
push eax
push ebx
call dbg.remlink
jmp 0x805aca5
test edi, edi
je 0x805ae06
cmp byte [edi], 0
je 0x805ae06
xor esi, esi
mov eax, dword [obj.botlinkSIZE]
cmp esi, eax
mov ebx, dword [obj.botlinkBASE]
jge 0x805aca5
lea esi, [esi]
cmp byte [ebx], 0
je 0x805addb
cmp byte [ebx + 9], 0x65
je 0x805adeb
inc esi
add ebx, 0x258
cmp esi, eax
jl 0x805add0
jmp 0x805aca5
sub esp, 8
push edi
lea eax, [ebx + 0xc]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805ad9d
mov eax, dword [obj.botlinkSIZE]
jmp 0x805addb
xor esi, esi
mov eax, dword [obj.botlinkSIZE]
cmp esi, eax
mov ebx, dword [obj.botlinkBASE]
jge 0x805aca5
nop
lea esi, [esi]
cmp byte [ebx], 0
je 0x805ae2b
cmp byte [ebx + 9], 0x64
je 0x805ae3b
inc esi
add ebx, 0x258
cmp esi, eax
jl 0x805ae20
jmp 0x805aca5
sub esp, 8
mov eax, dword [entity]
push eax
lea eax, [ebx + 0xc]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805ad9d
mov eax, dword [obj.botlinkSIZE]
jmp 0x805ae2b
sub esp, 8
push 0
mov edx, dword [Link]
push edx
jmp 0x805ada5
mov eax, obj.NULLSTR
jmp 0x805ace7
mov eax, obj.NULLSTR
jmp 0x805acdc
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [when]
test eax, eax
jne 0x8057d80
xor eax, eax
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [when]
push eax
call sym.imp.localtime
mov edx, dword [eax + 0x14]
add edx, 0x76c
push edx
mov ecx, dword [eax + 0xc]
push ecx
mov edx, dword [eax + 0x10]
mov edx, dword [edx*4 + obj.months]
push edx
mov ecx, dword [eax]
push ecx
mov edx, dword [eax + 4]
push edx
mov eax, dword [eax + 8]
push eax
push str.__2.2d:__2.2d:__2.2d__s___2.2d__d
push obj.timebuf
call sym.imp.sprintf
add esp, 0x30
test eax, eax
sete al
and eax, 0xff
dec eax
and eax, obj.timebuf
jmp 0x8057d6f
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
sub esp, 0xc
mov esi, dword [arg_ch]
push ebx
call dbg.getnick
pop ecx
pop edx
push eax
push obj.CurrentNick
call sym.imp.strcpy
pop eax
pop edx
push esi
push 2
mov eax, dword [obj.now]
push eax
push str.none
push ebx
push obj.CurrentNick
call dbg.make_seen
add esp, 0x20
push esi
push obj.CurrentNick
push str._Quits:__s___s_
push ebx
call dbg.send_common_spy
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
add esp, 0x10
test ebx, ebx
je 0x805f7d7
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push obj.CurrentNick
push ebx
call dbg.remove_chanuser
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x805f7c0
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp dbg.check_all_steal
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
mov edi, dword [from]
push edi
push 0x80741e0
mov esi, dword [arg_ch]
call sym.imp.strcpy
pop ecx
pop ebx
push 0x8068523
lea ebx, [h]
push ebx
mov dword [h], eax
call dbg.get_token
mov edi, eax
pop eax
pop edx
push 0x806a108
push ebx
call dbg.get_token
pop ecx
mov ebx, eax
pop eax
push 3
push esi
call dbg.find_channel
mov dword [obj.CurrentChan], eax
pop eax
pop edx
mov eax, dword [obj.current]
push edi
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805f1d5
mov edx, dword [obj.CurrentChan]
test edx, edx
jne 0x805f150
sub esp, 8
push esi
push str.PART__s
call dbg.send_to_server
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
mov al, byte [edx + 0x38d]
and eax, 0xffffffcf
or eax, 0x10
mov byte [edx + 0x38d], al
mov eax, dword [obj.CurrentChan]
and byte [eax + 0x38d], 0xf7
sub esp, 0xc
mov eax, dword [obj.CurrentChan]
push eax
call dbg.delete_chanusers
mov eax, dword [obj.CurrentChan]
add eax, 0x18
mov dword [esp], eax
call dbg.delete_bans
mov eax, dword [obj.CurrentChan]
mov byte [eax + 0x38c], 0
mov eax, dword [obj.CurrentChan]
mov edx, dword [obj.current]
mov dword [edx + 0xb38], eax
and byte [eax + 0x38d], 0x7f
mov eax, dword [obj.CurrentChan]
and byte [eax + 0x38d], 0xfb
push esi
push esi
push esi
push str.WHO__s_nMODE__s_nMODE__s_b
call dbg.send_to_server
add esp, 0x14
push esi
call dbg.needop
add esp, 0x10
mov eax, dword [obj.CurrentChan]
mov dl, byte [eax + 0x38d]
mov al, dl
shr al, 4
and eax, 3
dec eax
jne 0x805f143
and edx, 4
jne 0x805f240
sub esp, 8
mov ecx, dword [from]
push esi
push ecx
call dbg.find_user
mov dword [obj.CurrentUser], eax
pop eax
pop edx
push esi
mov edi, dword [from]
push edi
call dbg.find_shit
pop esi
mov ebx, dword [from]
push ebx
mov dword [obj.CurrentShit], eax
call dbg.getnick
pop edx
pop ecx
push eax
push obj.CurrentNick
call sym.imp.strcpy
pop eax
mov eax, dword [from]
push eax
call dbg.on_join
add esp, 0x10
jmp 0x805f143
push eax
mov eax, dword [h]
push eax
push ebx
push edi
call dbg.make_chanuser
add esp, 0x10
jmp 0x805f1f4
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push 1
mov esi, dword [arg_8h]
push esi
call dbg.find_channel
add esp, 0x10
test eax, eax
mov edx, eax
je 0x80596b4
mov ecx, dword [obj.now]
mov eax, ecx
sub eax, dword [edx + 0x388]
cmp eax, 9
jle 0x80596b4
mov ebx, dword [obj.botlist]
mov eax, dword [obj.current]
test ebx, ebx
mov dword [edx + 0x388], ecx
mov dword [obj.backup], eax
je 0x8059697
lea esi, [esi]
sub esp, 8
push 1
push esi
mov dword [obj.current], ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x8059691
test byte [eax + 0x38d], 8
jne 0x80596bb
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8059670
mov eax, dword [obj.backup]
mov dword [obj.current], eax
add eax, 0x220
push eax
push esi
push str._NEEDOP__s__s_n
push 0
call dbg.link_bcast
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push eax
mov eax, dword [obj.backup]
add eax, 0x220
push eax
push str.o__s
push esi
call dbg.sendmode
mov eax, dword [obj.backup]
mov dword [obj.current], eax
jmp 0x80596b4
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x1c
mov eax, dword [args]
test eax, eax
je 0x805a7a5
cmp byte [eax], 0
jne 0x805a7ad
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
lea ebx, [args]
push ebx
call dbg.chop
mov esi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test esi, esi
mov dword [pass], eax
je 0x805a805
test eax, eax
je 0x805a805
push eax
mov eax, dword [pass]
push eax
push esi
push str._Link_addbot__entity___s_pass___s_n
call dbg.debug
mov dword [esp], esi
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x1f
ja 0x805a805
sub esp, 0xc
mov edi, dword [pass]
push edi
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x1f
jbe 0x805a829
mov eax, dword [Link]
sub esp, 0xc
mov ebx, dword [eax + 0x244]
push ebx
call sym.imp.close
cld
mov ecx, 0x96
xor eax, eax
mov edi, dword [Link]
rep stosd dword es:[edi], eax
jmp 0x805a7a5
xor edi, edi
mov eax, dword [obj.botlinkSIZE]
cmp edi, eax
mov ebx, dword [obj.botlinkBASE]
jge 0x805a854
cmp byte [ebx], 0
je 0x805a849
cmp byte [ebx + 9], 0x64
je 0x805ac41
inc edi
add ebx, 0x258
cmp edi, eax
jl 0x805a83a
mov eax, dword [Link]
cmp byte [eax + 0xa], 0
jne 0x805a875
sub esp, 8
mov ecx, dword [pass]
push ecx
push esi
call dbg.checklinkpass
add esp, 0x10
test eax, eax
je 0x805ac22
sub esp, 8
mov eax, dword [Link]
add eax, 0xc
push esi
push eax
mov dword [var_20h], eax
call sym.imp.strcpy
mov eax, dword [Link]
mov byte [eax + 0xa], 1
mov byte [eax + 8], 3
mov byte [eax + 9], 0x64
pop ecx
pop ebx
push esi
push str.Link_established_to___s_
call dbg.send_global_statmsg
pop eax
pop edx
push str.AUTH
mov eax, dword [pass]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805ac06
push ebx
push esi
push str._LINK_ENTITY__s_n
mov ecx, dword [Link]
push ecx
call dbg.link_bcast
mov eax, dword [obj.botlist]
add esp, 0x10
test eax, eax
mov dword [bot], eax
je 0x805a909
mov eax, dword [bot]
add eax, 0x220
push eax
push obj.my_entity
push str._LINK_BOT__s__s_n
mov edx, dword [Link]
push edx
call dbg.send_to_link
mov eax, dword [bot]
mov eax, dword [eax]
add esp, 0x10
test eax, eax
mov dword [bot], eax
jne 0x805a8de
xor edi, edi
mov eax, dword [obj.botlinkSIZE]
mov ebx, dword [obj.botlinkBASE]
cmp edi, eax
mov edx, ebx
jge 0x805a941
cmp byte [ebx], 0
je 0x805a930
cmp ebx, dword [Link]
je 0x805a930
cmp byte [ebx + 9], 0x64
je 0x805abe6
inc edi
add ebx, 0x258
cmp edi, eax
jl 0x805a91c
mov edx, dword [obj.botlinkBASE]
xor edi, edi
cmp edi, eax
mov ebx, edx
mov edx, eax
jge 0x805a96c
cmp byte [ebx], 0
je 0x805a95f
cmp ebx, dword [Link]
je 0x805a95f
cmp byte [ebx + 9], 0x65
je 0x805abab
inc edi
add ebx, 0x258
cmp edi, eax
mov edx, eax
jl 0x805a94b
mov eax, dword [obj.botlist]
test eax, eax
mov dword [bot], eax
je 0x805aa35
mov eax, dword [bot]
mov esi, dword [eax + 0xb3c]
test esi, esi
mov dword [obj.current], eax
je 0x805a9d5
mov eax, dword [obj.botlinkSIZE]
lea esi, [esi]
lea edi, [edi]
xor edi, edi
cmp edi, eax
mov ebx, dword [obj.botlinkBASE]
jge 0x805a9cf
lea esi, [esi]
cmp byte [ebx], 0
je 0x805a9c4
cmp ebx, dword [Link]
je 0x805a9c4
cmp byte [ebx + 9], 0x64
je 0x805ab70
inc edi
add ebx, 0x258
cmp edi, eax
jl 0x805a9b0
mov esi, dword [esi]
test esi, esi
jne 0x805a9a0
mov edx, dword [obj.current]
xor eax, eax
cmp eax, dword [edx + 0x71c]
mov esi, dword [edx + 0x720]
mov dword [j], 0
jge 0x805aa25
lea esi, [esi]
lea edi, [edi]
cmp byte [esi], 0
je 0x805aa14
mov eax, dword [esi + 0x3c]
and eax, 0xe0028
cmp eax, 0x20028
je 0x805aa89
inc dword [j]
mov eax, dword [j]
add esi, 0x48
cmp eax, dword [edx + 0x71c]
jl 0x805aa00
mov eax, dword [bot]
mov eax, dword [eax]
test eax, eax
mov dword [bot], eax
jne 0x805a97c
mov eax, dword [Link]
mov ebx, dword [eax + 0x23c]
test ebx, ebx
mov edi, 1
je 0x805aa63
lea eax, [ebx + 4]
push eax
mov esi, dword [ebx]
push esi
push edi
push str._Link_add__Link__ushares___i____.8x___s_n
call dbg.debug
mov ebx, dword [ebx]
inc edi
add esp, 0x10
test ebx, ebx
jne 0x805aa47
sub esp, 8
push str._USERSEND_n
mov ecx, dword [Link]
push ecx
call dbg.send_to_link
pop eax
pop edx
mov eax, dword [var_20h]
push eax
push str._Link_addbot__Link_added___s_n
call dbg.debug
jmp 0x805a7a5
mov eax, dword [Link]
mov ebx, dword [eax + 0x23c]
test ebx, ebx
je 0x805ab5b
lea edi, [esi + 8]
lea esi, [esi]
sub esp, 8
lea eax, [ebx + 4]
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805ab52
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805aaa0
sub esp, 8
push edi
push str._Link_add__Adding_to_ushares_list__user___s_n
call dbg.debug
mov eax, dword [Link]
mov ebx, dword [eax + 0x23c]
mov eax, dword [ebx]
add esp, 0x10
test eax, eax
je 0x805aae6
mov ebx, eax
mov eax, dword [eax]
test eax, eax
jne 0x805aade
mov dword [obj.mallocdoer], 0x805a790
sub esp, 0xc
mov ecx, edi
mov dword [var_24h], edi
nop
lea esi, [esi]
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x805ab00
test edx, 0x8080
jne 0x805ab25
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, dword [var_24h]
lea eax, [ecx + 5]
push eax
call dbg.MyMalloc
mov dword [ebx], eax
pop edx
pop ecx
push edi
add eax, 4
push eax
call sym.imp.strcpy
add esp, 0x10
mov edx, dword [obj.current]
jmp 0x805aa14
test ebx, ebx
jne 0x805ab47
jmp 0x805aabe
lea edi, [esi + 8]
jmp 0x805aabe
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [esi + 0x20c]
push eax
call dbg.getnick
mov dword [esp], eax
mov eax, dword [bot]
add eax, 0x220
push eax
push obj.my_entity
push str._LINK_USER__s__s__s_n
mov eax, dword [Link]
push eax
call dbg.send_to_link
add esp, 0x20
mov eax, dword [obj.botlinkSIZE]
jmp 0x805a9c4
mov eax, dword [ebx + 0x250]
push eax
push 0x258
push edx
mov eax, dword [obj.botlinkBASE]
push eax
call dbg.findstruct
lea edx, [ebx + 0xc]
push edx
add eax, 0xc
push eax
push str._LINK_BOT__s__s_n
mov eax, dword [Link]
push eax
call dbg.send_to_link
add esp, 0x20
mov eax, dword [obj.botlinkSIZE]
jmp 0x805a95f
push eax
lea eax, [ebx + 0xc]
push eax
push str._LINK_ENTITY__s_n
mov eax, dword [Link]
push eax
call dbg.send_to_link
add esp, 0x10
mov eax, dword [obj.botlinkSIZE]
jmp 0x805a930
push eax
push obj.my_entity
push str._LOGIN__s_AUTH_n
mov edi, dword [Link]
push edi
call dbg.send_to_link
add esp, 0x10
jmp 0x805a8bf
sub esp, 0xc
push str._Link_addbot__Authentication_failed_n
call dbg.debug
pop eax
pop edx
push 0
mov eax, dword [Link]
push eax
call dbg.remlink
jmp 0x805a7a5
sub esp, 8
lea eax, [ebx + 0xc]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov dword [var_1ch], eax
je 0x805ac62
mov eax, dword [obj.botlinkSIZE]
jmp 0x805a849
sub esp, 0xc
push str._Link_addbot__entity_already_linked_n
call dbg.debug
mov eax, dword [Link]
pop edi
mov esi, dword [eax + 0x244]
push esi
call sym.imp.close
cld
mov ecx, 0x96
mov edi, dword [Link]
mov eax, dword [var_1ch]
jmp 0x805a822
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x428
lea ebx, [args]
push ebx
call dbg.chop
mov dword [from], eax
mov dword [esp], ebx
call dbg.chop
mov edx, dword [args]
add esp, 0x10
test edx, edx
mov esi, eax
je 0x805b420
mov al, byte [edx]
test al, al
je 0x805b420
cmp al, 0x20
mov ebx, edx
je 0x805b25b
lea esi, [esi]
lea edi, [edi]
inc ebx
mov al, byte [ebx]
test al, al
je 0x805b25b
cmp al, 0x20
jne 0x805b250
push eax
mov eax, ebx
sub eax, edx
push eax
push edx
lea edi, [buf]
push edi
call sym.imp.strncpy
sub ebx, dword [args]
mov byte [ebx + ebp - 0x418], 0
add esp, 0xc
mov ecx, edi
mov ebx, edi
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x805b280
test edx, 0x8080
jne 0x805b2a5
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, ebx
push ecx
push edi
push str._do_linkcmd__Checking_command__s___i__..._n
call dbg.debug
mov eax, dword [obj.mcmd]
add esp, 0x10
test eax, eax
je 0x805b306
xor ebx, ebx
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push edi
mov eax, dword [ebx + obj.mcmd]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805b465
mov eax, dword [ebx + 0x8070264]
test eax, eax
jne 0x805b450
add ebx, 0x10
mov eax, dword [ebx + obj.mcmd]
test eax, eax
jne 0x805b2d0
sub esp, 0xc
mov ecx, dword [from]
push ecx
mov dword [obj.CurrentShit], 0
call dbg.getnick
pop ebx
pop edx
push eax
push obj.CurrentNick
call sym.imp.strcpy
mov ebx, dword [obj.botlist]
add esp, 0x10
test ebx, ebx
je 0x805b3bd
lea esi, [esi]
mov dword [obj.current], ebx
cmp byte [esi], 0x2a
je 0x805b362
sub esp, 8
push esi
lea eax, [ebx + 0x220]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805b3b7
sub esp, 8
push 0
mov ecx, dword [from]
push ecx
call dbg.find_user
mov edx, dword [args]
push edx
mov dword [obj.CurrentUser], eax
mov eax, dword [obj.current]
movsx eax, byte [eax + 0x380]
push eax
push str._c_s
push edi
call sym.imp.sprintf
add esp, 0x1c
mov eax, dword [obj.current]
push edi
add eax, 0x220
push eax
mov eax, dword [from]
push eax
call dbg.on_msg
add esp, 0x10
cmp byte [esi], 0x2a
jne 0x805b420
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805b340
cmp byte [esi], 0x2a
je 0x805b428
sub esp, 8
push 0x65
push esi
call dbg.find_entity
add esp, 0x10
test eax, eax
je 0x805b420
mov eax, dword [eax + 0x254]
push eax
push 0x258
mov eax, dword [obj.botlinkSIZE]
push eax
mov edi, dword [obj.botlinkBASE]
push edi
call dbg.findstruct
add esp, 0x10
test eax, eax
je 0x805b420
sub esp, 0xc
mov ebx, dword [args]
push ebx
push esi
mov ecx, dword [from]
push ecx
push str._CMD__s__s__s_n
push eax
call dbg.send_to_link
lea esi, [esi]
lea edi, [edi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
mov eax, dword [args]
push eax
push esi
mov eax, dword [from]
push eax
push str._CMD__s__s__s_n
mov eax, dword [Link]
push eax
call dbg.link_bcast
jmp 0x805b420
mov esi, esi
lea edi, [edi]
sub esp, 8
push edi
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805b2f9
test byte [ebx + 0x807026d], 0x40
je 0x805b306
jmp 0x805b420
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea ebx, [rest]
push ebx
mov eax, dword [to]
push eax
call dbg.get_channel
mov dword [chan], eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov edi, eax
je 0x8051ac0
sub esp, 0xc
push eax
call dbg.find_handle
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8051a9c
test edi, edi
je 0x8051a07
sub esp, 0xc
push edi
call dbg.password_needed
add esp, 0x10
test eax, eax
jne 0x8051a7b
mov dword [authd], 0
test esi, esi
je 0x8051a64
sub esp, 8
mov ebx, dword [chan]
push ebx
push edi
call dbg.find_shit
add esp, 0x10
test esi, esi
mov dword [Shit], eax
je 0x8051933
mov ecx, dword [chan]
push ecx
push edi
mov edx, dword [from]
push 0x8069460
push edx
call dbg.send_to_user
add esp, 0xc
lea eax, [esi + 8]
push eax
push str.__________Handle:__s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov edx, dword [esi + 0x3c]
mov eax, edx
shr eax, 9
cmp al, 0xc8
mov ecx, str.__BOT_
je 0x80517d8
mov ecx, sym..rodata
shr edx, 9
push ecx
movzx eax, dl
push eax
push str.______User_level:__i_s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov ebx, dword [esi + 0x38]
add esp, 0x20
test ebx, ebx
je 0x805185b
mov eax, dword [ebx]
test eax, eax
je 0x8051a5a
mov eax, 0x8069e39
push eax
lea eax, [ebx + 4]
push eax
push str.__Recognized_u_h:__s_s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
je 0x805185b
lea esi, [esi]
lea edi, [edi]
mov eax, dword [ebx]
test eax, eax
je 0x8051a50
mov eax, 0x8069e39
push eax
lea eax, [ebx + 4]
push eax
push str.___________________s_s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x8051830
mov ecx, dword [authd]
test ecx, ecx
push ebx
mov eax, str.No_password_set
je 0x8051878
cmp dword [authd], 1
mov eax, 0x8069e79
je 0x8051878
mov eax, 0x8069e7d
push eax
mov edx, dword [from]
push str.________Verified:__s
push edx
call dbg.send_to_user
sub esp, 8
push 0x14
mov eax, dword [chan]
push eax
call dbg.get_int_var
add esp, 0x10
test eax, eax
mov edx, sym..rodata
jne 0x80518a6
mov edx, str.____Protection_toggled_off_
test esi, esi
push edx
je 0x8051a3e
mov ax, word [esi + 0x3c]
shr ax, 6
and eax, 7
push eax
push str._Protected_level:___3i_s
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x18
push 0x11
mov eax, dword [chan]
push eax
call dbg.get_int_var
add esp, 0x10
test eax, eax
mov edx, sym..rodata
jne 0x80518e8
mov edx, str.____Auto_op_is_toggled_off_
test esi, esi
push edx
je 0x8051a34
test byte [esi + 0x3c], 2
je 0x8051a34
mov eax, 0x8069e79
push eax
push str.______Auto_Opped:__s_s
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0xc
test byte [esi + 0x3c], 1
je 0x8051a2a
mov eax, 0x806f388
push eax
push str.__Partyline_Echo:__s
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
mov eax, dword [Shit]
test eax, eax
je 0x80519f6
test esi, esi
je 0x8051a0f
push ecx
mov eax, dword [Shit]
mov edx, dword [eax + 0x38]
push edx
push str.___Shitlisted_as:__s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov edx, dword [Shit]
mov eax, dword [edx + 0x30]
add esp, 0xc
push eax
push str.___Shitlisted_by:__s
mov eax, dword [from]
push eax
call dbg.send_to_user
pop eax
mov eax, dword [Shit]
mov eax, dword [eax + 0x40]
push eax
call dbg.time2str
add esp, 0xc
push eax
push str.______Shitted_on:__s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov edx, dword [Shit]
mov eax, dword [edx + 0x3c]
shr eax, 9
add esp, 0xc
and eax, 0xff
push eax
push str.Shitlisted_level:__i
mov edi, dword [from]
push edi
call dbg.send_to_user
mov eax, dword [Shit]
pop esi
mov ebx, dword [eax + 0x44]
push ebx
call dbg.time2str
add esp, 0xc
push eax
push str.Shitlist_expires:__s
mov ecx, dword [from]
push ecx
call dbg.send_to_user
mov edx, dword [Shit]
mov eax, dword [edx + 0x34]
add esp, 0xc
test eax, eax
jne 0x80519e4
mov eax, str._No_reason_
push eax
push str._Shitlist_reason:__s
mov edx, dword [from]
push edx
call dbg.send_to_user
add esp, 0x10
sub esp, 8
push 0x8069f9c
mov eax, dword [from]
push eax
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, dword [chan]
push esi
push edi
push 0x80694a0
mov ebx, dword [from]
push ebx
call dbg.send_to_user
add esp, 0x10
jmp 0x8051946
mov eax, 0x806f3a1
jmp 0x8051921
mov eax, 0x8069fae
jmp 0x8051900
xor eax, eax
jmp 0x80518ba
lea esi, [esi]
lea edi, [edi]
mov eax, sym..rodata
jmp 0x805183f
mov eax, sym..rodata
jmp 0x8051807
sub esp, 8
mov esi, dword [chan]
push esi
push edi
call dbg.find_user
mov esi, eax
add esp, 0x10
jmp 0x805177f
sub esp, 0xc
push edi
call dbg.verified
add esp, 0x10
test eax, eax
sete al
and eax, 0xff
mov dword [authd], eax
inc dword [authd]
jmp 0x8051777
push eax
push 0
push edi
mov edi, dword [from]
push edi
call dbg.nick2uh
mov edi, eax
add esp, 0x10
jmp 0x8051754
lea esi, [esi]
lea edi, [edi]
xor esi, esi
mov edi, dword [from]
jmp 0x8051754
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x2c
mov ebx, dword [arg_10h]
mov eax, dword [arg_8h]
test ebx, ebx
mov dword [from], eax
mov dword [minlevel], 0
mov dword [maxlevel], 0xc8
mov dword [botsonly], 0
mov dword [chanonly], 0
mov dword [sharedonly], 0
mov dword [chan], 0
mov dword [mask], 0
je 0x80625d1
mov al, byte [ebx]
test al, al
je 0x80625d1
xor esi, esi
cmp al, 0x2b
je 0x806299d
cmp al, 0x2d
je 0x8062931
cmp al, 0x23
je 0x8062929
cmp al, 0x26
je 0x8062929
sub esp, 8
push 0x2a
push ebx
call sym.imp.strchr
add esp, 0x10
test eax, eax
je 0x80625c9
mov dword [mask], ebx
mov esi, 1
test esi, esi
je 0x806290f
mov edx, dword [chanonly]
sub esp, 8
test edx, edx
mov eax, 0x8069e79
jne 0x80625e5
mov eax, 0x8069e7d
push eax
mov edi, dword [botsonly]
test edi, edi
mov eax, 0x8069e79
jne 0x80625f7
mov eax, 0x8069e7d
push eax
mov esi, dword [maxlevel]
push esi
mov ebx, dword [minlevel]
push ebx
mov eax, dword [mask]
test eax, eax
je 0x8062905
push eax
push str._do_userlist__mask_s_minlevel_i_maxlevel_i_botsonly_s_chanonly_s_n
call dbg.debug
mov eax, dword [obj.current]
add esp, 0x1c
add eax, 0x220
mov dword [count], 1
push eax
push 0x806e998
mov ecx, dword [from]
push ecx
call dbg.send_to_user
pop eax
pop edx
push 0x8067364
mov eax, dword [from]
push eax
call dbg.send_to_user
mov ecx, dword [obj.current]
xor eax, eax
add esp, 0x10
cmp eax, dword [ecx + 0x71c]
mov edx, ecx
mov esi, dword [ecx + 0x720]
mov dword [i], 0
jge 0x8062693
nop
lea esi, [esi]
cmp byte [esi], 0
je 0x8062680
mov al, byte [esi + 0x3e]
shr al, 1
and eax, 7
dec eax
je 0x80626d0
inc dword [i]
mov eax, dword [i]
add esi, 0x48
cmp eax, dword [edx + 0x71c]
mov ecx, edx
jl 0x8062670
push eax
mov eax, dword [count]
dec eax
push eax
push str.Total_of__d_entries
mov eax, dword [from]
push eax
call dbg.send_to_user
mov eax, dword [from]
mov dword [to], 0x806a394
mov dword [arg_8h], eax
add esp, 0x10
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.send_to_user
lea esi, [esi]
lea edi, [edi]
mov dl, byte [esi + 0x3c]
test edx, 0x20
sete al
and eax, 0xff
lea edi, [eax - 1]
and edi, 1
and edx, 0x10
je 0x80626fe
test byte [ecx + 0x3ac], 1
sete al
and eax, 0xff
dec eax
and edi, eax
mov eax, dword [esi + 0x3c]
shr eax, 9
and eax, 0xff
cmp eax, dword [minlevel]
setl dl
and edx, 0xff
dec edx
and edi, edx
cmp eax, dword [maxlevel]
setg al
and eax, 0xff
dec eax
and edi, eax
mov eax, dword [chan]
test eax, eax
je 0x8062748
sub esp, 8
mov eax, dword [esi + 0x2c]
push eax
mov eax, dword [chan]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x80628df
mov ebx, dword [mask]
test ebx, ebx
je 0x8062781
mov ebx, dword [esi + 0x38]
test ebx, ebx
je 0x8062781
lea esi, [esi]
lea edi, [edi]
sub esp, 8
lea eax, [ebx + 4]
push eax
mov ecx, dword [mask]
push ecx
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x80628d8
mov ebx, dword [ebx]
test ebx, ebx
jne 0x8062760
mov edx, dword [botsonly]
test edx, edx
je 0x806279b
mov eax, dword [esi + 0x3c]
shr eax, 9
cmp al, 0xc8
setne al
and eax, 0xff
dec eax
and edi, eax
mov eax, dword [chanonly]
test eax, eax
je 0x80627b3
mov eax, dword [esi + 0x2c]
cmp byte [eax], 0x2a
sete al
and eax, 0xff
dec eax
and edi, eax
mov eax, dword [sharedonly]
test eax, eax
je 0x80627c9
test byte [esi + 0x3c], 8
sete al
and eax, 0xff
dec eax
and edi, eax
test edi, edi
je 0x80628c3
push eax
mov eax, dword [esi + 0x2c]
push eax
mov dl, byte [esi + 0x3c]
test edx, 0x10
mov eax, 0x806e9c0
jne 0x80627eb
mov eax, 0x806e923
test edx, 8
push eax
mov eax, 0x806e9c3
jne 0x80627fe
mov eax, 0x806e923
push eax
mov ax, word [esi + 0x3c]
shr ax, 6
and eax, 7
push eax
cmp byte [esi + 0x15], 0
je 0x80628ce
mov eax, 0x806e9c6
test edx, 4
push eax
mov eax, 0x806e9c9
jne 0x806282d
mov eax, 0x806e923
and edx, 2
push eax
mov eax, 0x806e9cc
jne 0x806283d
mov eax, 0x806e923
push eax
mov eax, dword [esi + 0x3c]
shr eax, 9
and eax, 0xff
push eax
lea eax, [esi + 8]
push eax
push str._User___:___11s_____3i__s__s__s_P_d__s__s____C:_s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov ebx, dword [esi + 0x38]
add esp, 0x30
test ebx, ebx
je 0x80628ac
push eax
lea eax, [ebx + 4]
push eax
push str._Mask_s_:__s
mov edi, dword [from]
push edi
call dbg.send_to_user
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
je 0x80628ac
lea esi, [esi]
lea edi, [edi]
push ecx
lea eax, [ebx + 4]
push eax
push 0x806f1d2
mov edx, dword [from]
push edx
call dbg.send_to_user
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x8062890
sub esp, 8
push 0x8067364
mov eax, dword [from]
push eax
call dbg.send_to_user
inc dword [count]
add esp, 0x10
mov edx, dword [obj.current]
jmp 0x8062680
mov eax, 0x806e923
jmp 0x806281a
xor edi, edi
jmp 0x8062781
sub esp, 8
mov eax, dword [esi + 0x2c]
push eax
push 0x806e306
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
setne al
and eax, 0xff
dec eax
and edi, eax
jmp 0x8062748
mov eax, str.NOMASK
jmp 0x806260b
mov eax, dword [0x8070890]
mov dword [to], eax
mov eax, dword [from]
mov dword [arg_8h], eax
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
jmp dbg.usage
mov dword [chan], ebx
jmp 0x80625c4
inc ebx
mov dl, byte [ebx]
lea eax, [edx - 0x30]
cmp al, 9
jbe 0x8062985
cmp dl, 0x42
je 0x8062977
cmp dl, 0x62
je 0x8062977
cmp dl, 0x43
je 0x8062969
cmp dl, 0x63
je 0x8062969
cmp dl, 0x53
je 0x806295d
cmp dl, 0x73
jne 0x80625c9
mov dword [sharedonly], 1
jmp 0x80625c4
mov dword [chanonly], 1
mov esi, 1
jmp 0x806294f
mov dword [botsonly], 1
mov esi, 1
jmp 0x8062945
sub esp, 0xc
push ebx
call sym.imp.atoi
mov dword [maxlevel], eax
mov esi, 1
add esp, 0x10
mov dl, byte [ebx]
jmp 0x806293b
inc ebx
mov al, byte [ebx]
sub eax, 0x30
cmp al, 9
ja 0x80625c9
sub esp, 0xc
push ebx
call sym.imp.atoi
mov esi, 1
add esp, 0x10
mov dword [minlevel], eax
jmp 0x80625c9
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8049d8d
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov eax, dword [eax + 0x720]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
je 0x8049d8d
sub esp, 8
push ebx
add eax, 0x2c
push eax
mov dword [obj.mallocdoer], 0x8049d30
call dbg.mstrcpy
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [rest]
push ebx
call dbg.chop
mov edi, eax
pop eax
pop edx
push 1
push edi
call dbg.find_channel
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804d882
sub esp, 0xc
push ebx
call dbg.chop
mov ebx, eax
mov eax, dword [rest]
add esp, 0x10
test eax, eax
je 0x804d7e9
cmp byte [eax], 0x3a
je 0x804da10
sub esp, 0xc
mov eax, dword [from]
push eax
call dbg.getnick
pop edx
pop ecx
push eax
push obj.CurrentNick
call sym.imp.strcpy
pop eax
mov ecx, dword [rest]
push ecx
push obj.CurrentNick
push ebx
push str.__s_was_kicked_by__s___s_
push esi
call dbg.send_spy
add esp, 0x18
mov eax, dword [obj.current]
push ebx
add eax, 0x220
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x804d960
test byte [esi + 0x38d], 8
jne 0x804d890
sub esp, 8
push ebx
push esi
call dbg.find_chanuser
add esp, 0x10
test eax, eax
je 0x804d878
sub esp, 8
mov ecx, dword [rest]
push ecx
push 4
mov edx, dword [obj.now]
push edx
mov edi, dword [from]
push edi
push ecx
push eax
call dbg.get_nuh
pop edi
pop edx
push eax
push ebx
call dbg.make_seen
add esp, 0x20
sub esp, 8
push ebx
push esi
call dbg.remove_chanuser
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 8
push edi
mov ecx, dword [from]
push ecx
call dbg.find_user
add esp, 0x10
test eax, eax
mov dword [obj.CurrentUser], eax
je 0x804d8b9
mov eax, dword [eax + 0x3c]
shr eax, 9
and eax, 0xff
cmp eax, 0x4f
jg 0x804d8cd
sub esp, 0xc
push obj.CurrentNick
call dbg.is_localbot
add esp, 0x10
test eax, eax
je 0x804d936
sub esp, 0xc
push ebx
call dbg.find_nuh
add esp, 0x10
test eax, eax
mov dword [protnuh], eax
je 0x804d840
sub esp, 8
push edi
push eax
call dbg.get_protlevel
add esp, 0x10
test eax, eax
je 0x804d840
sub esp, 0xc
push obj.CurrentNick
call dbg.is_localbot
add esp, 0x10
test eax, eax
je 0x804d922
push eax
push edi
push ebx
push str.INVITE__s__s
call dbg.send_to_server
add esp, 0x10
jmp 0x804d840
push eax
mov eax, dword [protnuh]
push eax
push esi
mov eax, dword [from]
push eax
call dbg.prot_action
add esp, 0x10
jmp 0x804d90d
push edx
push 0x10
push esi
mov eax, dword [from]
push eax
call dbg.check_mass
add esp, 0x10
test eax, eax
je 0x804d8cd
sub esp, 8
push edi
mov eax, dword [from]
push eax
call dbg.mass_action
add esp, 0x10
jmp 0x804d8cd
nop
sub esp, 0xc
lea ebx, [esi + 0x14]
push ebx
call dbg.MyFree
pop eax
pop edx
mov edi, dword [from]
push edi
push ebx
mov dword [obj.mallocdoer], 0x804d7a0
call dbg.mstrcpy
mov al, byte [esi + 0x38d]
or eax, 0x22
and eax, 0xffffffe7
add esp, 0xc
mov byte [esi + 0x38d], al
push 1
mov eax, dword [esi + 8]
test eax, eax
je 0x804d9a5
cmp byte [eax], 0
jne 0x804d9a7
xor eax, eax
push eax
mov ebx, dword [esi + 4]
push ebx
call dbg.join_channel
mov edx, dword [obj.current]
mov eax, dword [edx + 0xb38]
add esp, 0x10
test eax, eax
je 0x804d882
mov al, byte [eax + 0x38d]
shr al, 4
and eax, 3
cmp eax, 2
jne 0x804d882
mov esi, dword [edx + 0xb34]
test esi, esi
je 0x804da05
mov esi, esi
lea edi, [edi]
mov al, byte [esi + 0x38d]
shr al, 4
and eax, 3
dec eax
je 0x804da05
mov esi, dword [esi]
test esi, esi
jne 0x804d9f0
mov dword [edx + 0xb38], esi
jmp 0x804d882
inc eax
mov dword [rest], eax
jmp 0x804d7e9
push ebp
mov ebp, esp
push edi
push eax
mov eax, dword [obj.current]
mov eax, dword [eax + 0x10]
push eax
push 0x114
mov eax, dword [obj.serverSIZE]
push eax
mov eax, dword [obj.serverBASE]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
mov edi, eax
je 0x805f905
cmp byte [eax + 0xa8], 0
je 0x805f980
mov eax, dword [obj.now]
mov dword [edi + 0x108], eax
mov eax, dword [obj.current]
mov edx, dword [obj.now]
mov dword [eax + 0xbbc], edx
mov dword [eax + 4], 4
push ecx
push edx
add eax, 0x220
push eax
push str.WHOIS__s
call dbg.send_to_server
mov edi, dword [obj.current]
add edi, 0x360
xor eax, eax
cld
mov ecx, 8
rep stosd dword es:[edi], eax
mov edx, dword [obj.current]
add esp, 0x10
cmp byte [edx + 0x381], 0
jne 0x805f960
mov edi, dword [var_4h]
leave
ret
lea esi, [esi]
push eax
lea eax, [edx + 0x381]
push eax
lea eax, [edx + 0x220]
push eax
push str.MODE__s__s
call dbg.send_to_server
add esp, 0x10
jmp 0x805f957
mov esi, esi
push eax
push 0x4f
mov eax, dword [from]
push eax
lea eax, [edi + 0xa8]
push eax
call sym.imp.strncpy
mov byte [edi + 0xf7], 0
add esp, 0x10
jmp 0x805f8fa
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea esi, [rest]
push esi
mov edi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8054bed
mov al, byte [eax]
test al, al
je 0x8054bed
cmp al, 0x23
je 0x8054c10
sub esp, 8
push 0x806e306
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8054c10
sub esp, 8
mov ecx, dword [0x8070740]
push ecx
push edi
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push ebx
push edi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x8054bfd
sub esp, 0xc
push esi
call dbg.chop
add esp, 0x10
test eax, eax
je 0x8054d1e
push edx
push 0
push eax
push edi
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8054bfd
sub esp, 8
push ebx
push eax
call dbg.find_shit
add esp, 0x10
test eax, eax
mov dword [tmp], eax
je 0x8054d12
mov eax, dword [rest]
test eax, eax
je 0x8054c6d
cmp byte [eax], 0
jne 0x8054c7d
sub esp, 8
push str.No_level_given
push edi
call dbg.send_to_user
jmp 0x8054bfd
sub esp, 8
push eax
push edi
call dbg.check_for_number
add esp, 0x10
test eax, eax
jne 0x8054bfd
sub esp, 0xc
mov eax, dword [rest]
push eax
call sym.imp.atoi
mov dword [newlevel], eax
dec eax
add esp, 0x10
cmp eax, 2
jbe 0x8054cb4
push eax
push 3
push str.Valid_levels_are_from_1_thru__i
jmp 0x8054c75
sub esp, 8
push ebx
mov eax, dword [tmp]
mov eax, dword [eax + 0x30]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, 0x63
mov esi, eax
jle 0x8054cd3
mov esi, 0x63
sub esp, 8
push ebx
push edi
call dbg.get_userlevel
add esp, 0x10
cmp esi, eax
jle 0x8054cee
sub esp, 8
push str.The_person_who_did_this_shitlist_has_a_higher_level_than_you
jmp 0x8054c75
mov ecx, dword [tmp]
mov eax, dword [ecx + 0x3c]
movzx edx, byte [newlevel]
shl edx, 9
and eax, 0xfffe01ff
or eax, edx
sub esp, 8
mov dword [ecx + 0x3c], eax
push str.The_level_has_been_changed
jmp 0x8054c75
push eax
push esi
push str._s_is_not_in_my_shit_list_on_that_channel
jmp 0x8054c75
sub esp, 8
push str.No_nick_or_userhost_specified
jmp 0x8054c75
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push 0
mov edx, dword [obj.current]
mov eax, dword [obj.now]
sub eax, dword [edx + 0xbb8]
push eax
mov ebx, dword [arg_ch]
mov esi, dword [arg_8h]
call dbg.idle2str
add esp, 0xc
push eax
push 0x806a12d
push obj.ec_tmp
call sym.imp.sprintf
pop eax
pop edx
push obj.ec_tmp
mov ecx, dword [ebx]
push ecx
call dbg.Strcat
mov dword [ebx], eax
add dword [esi], 3
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x14
mov eax, dword [obj.current]
add eax, 0x3b8
push eax
call dbg.MyFree
lea eax, [rest]
mov dword [esp], eax
call dbg.chop
pop eax
pop edx
mov ecx, dword [rest]
mov eax, dword [obj.current]
push ecx
add eax, 0x3b8
push eax
mov dword [obj.mallocdoer], 0x805fac0
call dbg.mstrcpy
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
lea eax, [when]
push eax
call sym.imp.ctime
mov ebx, eax
pop eax
pop edx
push 0xa
push ebx
call sym.imp.strchr
mov byte [eax], 0
mov eax, ebx
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
jmp dword [reloc.ctime]
push ebp
mov ebp, esp
push esi
mov esi, dword [arg_8h]
test esi, esi
push ebx
mov eax, dword [arg_10h]
mov ebx, dword [arg_ch]
je 0x8058b05
test ebx, ebx
je 0x8058b05
test eax, eax
je 0x8058b05
sub esp, 8
push 1
push eax
call dbg.format_uh
add esp, 0x10
push eax
push ebx
push str._ob__s__s
push esi
call dbg.sendmode
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea ebx, [args]
push ebx
call dbg.chop
mov edi, eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test edi, edi
mov dword [pass], eax
je 0x805b9f3
cmp byte [edi], 0
je 0x805b9f3
test eax, eax
je 0x805b9f3
cmp byte [eax], 0
je 0x805b9f3
mov esi, dword [obj.botlist]
mov eax, dword [obj.current]
test esi, esi
mov dword [obj.backup], eax
je 0x805b9d6
nop
lea esi, [esi]
mov ebx, dword [Link]
test ebx, ebx
mov dword [obj.current], esi
je 0x805ba40
sub esp, 0xc
push edi
call dbg.password_needed
mov ebx, eax
mov dword [esp], edi
call dbg.verified
add esp, 0x10
test ebx, ebx
je 0x805b9d0
test eax, eax
jne 0x805b9d0
mov eax, dword [pass]
cmp byte [eax], 0
jne 0x805b9fb
mov esi, esi
lea edi, [edi]
mov esi, dword [esi]
test esi, esi
jne 0x805b990
mov ecx, dword [pass]
push ecx
push edi
push str._VRFY__s__s_n
mov edx, dword [Link]
mov eax, dword [obj.backup]
push edx
mov dword [obj.current], eax
call dbg.link_bcast
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push eax
push edi
call dbg.correct_password
add esp, 0x10
test eax, eax
je 0x805b9d0
sub esp, 8
mov eax, dword [obj.current]
push edi
add eax, 0xb2c
push eax
call dbg.make_time
add esp, 0x10
test eax, eax
mov edx, eax
je 0x805b9d0
mov eax, dword [obj.now]
mov dword [edx + 0xc], eax
jmp 0x805b9d0
lea esi, [esi]
lea edi, [edi]
cmp dword [obj.backup], esi
jne 0x805b9a1
jmp 0x805b9d0
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.current]
test eax, eax
jne 0x80499e0
sub esp, 8
push obj.ERR_INIT
push str._s_Stray_MODES_setting__ignored__n
call sym.imp.printf
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x80499d1
cmp byte [eax], 0
je 0x80499d1
sub esp, 8
push eax
mov eax, dword [obj.current]
add eax, 0x381
push eax
call sym.imp.strcpy
jmp 0x80499d1
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x20c
mov edx, dword [obj.current]
mov eax, dword [edx + 8]
mov ebx, eax
mov esi, eax
shr ebx, 5
and esi, 0x1f
mov eax, dword [ebx*4 + obj.write_fds]
mov ecx, esi
shr eax, cl
and eax, 1
jne 0x80515d9
mov eax, dword [ebx*4 + obj.read_fds]
mov ecx, esi
shr eax, cl
and eax, 1
je 0x80514e0
lea ebx, [linebuf]
lea esi, [esi]
call sym.imp.__error
mov dword [eax], 0x23
mov edx, dword [obj.current]
push esi
push ebx
lea eax, [edx + 0x18]
push eax
mov ecx, dword [edx + 8]
push ecx
call dbg.sockread
add esp, 0x10
test eax, eax
mov esi, eax
je 0x8051562
mov edx, dword [obj.current]
mov eax, dword [edx + 0x3b0]
test eax, eax
jne 0x80514f0
cmp dword [edx + 4], 8
jne 0x80513e8
mov esi, str.Connecting_to_host_
mov edi, ebx
mov ecx, 0x13
cld
repe cmpsb byte [esi], byte ptr es:[edi]
je 0x80513f6
sub esp, 0xc
push ebx
call dbg.parseline
add esp, 0x10
jmp 0x8051390
sub esp, 8
push ebx
push str.Connected
call dbg.matches
add esp, 0x10
test eax, eax
jne 0x80514b5
sub esp, 0xc
push str._PSI__WinGate_proxy_active_n
call dbg.debug
mov eax, dword [obj.current]
mov esi, dword [eax + 0x10]
push esi
push 0x114
mov ecx, dword [obj.serverSIZE]
push ecx
mov edx, dword [obj.serverBASE]
push edx
call dbg.findstruct
xor edi, edi
add esp, 0x20
test eax, eax
mov esi, eax
je 0x8051453
cmp byte [eax + 0x58], 0
je 0x8051453
mov edi, 1
mov eax, dword [obj.current]
sub esp, 8
lea edx, [eax + 0x246]
push edx
lea edx, [eax + 0x23a]
push edx
add eax, 0x22d
test edi, edi
push eax
mov eax, sym..rodata
je 0x805147b
lea eax, [esi + 0x58]
test edi, edi
push eax
mov eax, str.PASS_:
jne 0x805148a
mov eax, sym..rodata
push eax
push str._s_s_nNICK__s_nUSER__s_._._:_s_n
call dbg.send_to_server
mov edx, dword [obj.current]
mov eax, dword [obj.now]
add esp, 0x20
mov dword [edx + 4], 3
mov dword [edx + 0xbb0], eax
jmp 0x8051390
mov eax, dword [obj.current]
sub esp, 0xc
mov eax, dword [eax + 8]
push eax
call sym.imp.close
mov eax, dword [obj.current]
mov dword [eax + 8], 0xffffffff
lea esi, [esi]
lea edi, [edi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
push edx
push ebx
push 0x806726d
mov eax, dword [eax]
push eax
call dbg.send_to_socket
add esp, 0x10
test eax, eax
js 0x8051511
mov edx, dword [obj.current]
jmp 0x80513d1
sub esp, 0x10
call sym.imp.__error
mov eax, dword [eax]
add esp, 0xc
push eax
mov eax, dword [obj.current]
mov eax, dword [eax + 0x3b0]
mov eax, dword [eax]
push eax
push str._PSI___i_errno___i__closing_pipeuser_connection_n
call dbg.debug
pop eax
mov eax, dword [obj.current]
mov eax, dword [eax + 0x3b0]
mov edi, dword [eax]
push edi
call sym.imp.close
mov eax, dword [obj.current]
add eax, 0x3b0
mov dword [esp], eax
call dbg.MyFree
add esp, 0x10
jmp 0x8051506
call sym.imp.__error
mov eax, dword [eax]
cmp eax, 4
je 0x80514e0
cmp eax, 0x23
je 0x80514e0
sub esp, 0x10
call sym.imp.__error
mov eax, dword [eax]
add esp, 0xc
push eax
mov eax, dword [obj.current]
mov eax, dword [eax + 8]
push eax
push str._PSI___i_errno___i__closing_server_socket_n
call dbg.debug
mov edi, dword [obj.current]
cld
mov eax, esi
add edi, 0x18
mov ecx, 0x80
rep stosd dword es:[edi], eax
pop eax
mov eax, dword [obj.current]
mov eax, dword [eax + 8]
push eax
call sym.imp.close
mov eax, dword [obj.current]
mov dword [eax + 8], 0xffffffff
mov dword [eax + 4], 0
add esp, 0x10
jmp 0x80514e0
sub esp, 8
lea eax, [edx + 0x22d]
push eax
push edx
call dbg.setbotnick
mov edx, dword [obj.current]
add esp, 0xc
lea eax, [edx + 0x22d]
push eax
mov eax, dword [edx + 8]
push eax
push str._PSI___i_connection_established___s___ASYNC__n
call dbg.debug
mov eax, dword [obj.current]
mov edx, dword [obj.now]
mov dword [eax + 0xbb0], edx
mov dword [eax + 4], 3
mov eax, dword [eax + 0x10]
push eax
push 0x114
mov eax, dword [obj.serverSIZE]
push eax
mov eax, dword [obj.serverBASE]
push eax
call dbg.findstruct
mov edx, dword [obj.current]
add esp, 0x20
cmp edx, 0xfffffd6a
mov esi, eax
mov ecx, edx
je 0x8051657
cmp dword [edx + 0x2dc], 1
je 0x80516ab
xor edi, edi
test esi, esi
je 0x8051668
cmp byte [esi + 0x58], 0
je 0x8051668
mov edi, 1
sub esp, 8
lea eax, [ecx + 0x246]
push eax
lea eax, [ecx + 0x23a]
push eax
test edi, edi
lea eax, [ecx + 0x22d]
push eax
mov eax, sym..rodata
je 0x805168c
lea eax, [esi + 0x58]
test edi, edi
push eax
mov eax, str.PASS_:
jne 0x805169b
mov eax, sym..rodata
push eax
push str._s_s_nNICK__s_nUSER__s_._._:_s_n
call dbg.send_to_server
jmp 0x80514e0
test eax, eax
je 0x8051701
sub esp, 0xc
push str._PSI__Connecting_via_WinGate_proxy..._n
call dbg.debug
add esp, 0xc
mov edi, dword [esi + 0x100]
push edi
lea eax, [esi + 8]
push eax
push 0x8068f4b
call dbg.send_to_server
mov edx, dword [obj.current]
add esp, 0x10
cmp dword [edx + 8], 0xffffffff
je 0x80516ef
mov dword [edx + 4], 8
jmp 0x80514e0
mov eax, dword [esi + 4]
mov dword [edx + 0x14], eax
mov dword [edx + 0x2dc], 0x65
jmp 0x80516e3
sub esp, 0xc
mov eax, dword [edx + 8]
push eax
jmp 0x80514c1
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov esi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8052642
cmp byte [eax], 0
jne 0x8052660
sub esp, 8
mov ebx, dword [0x8070580]
push ebx
push esi
call dbg.usage
add esp, 0x10
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
sub esp, 0xc
push eax
call dbg.isnick
add esp, 0x10
test eax, eax
jne 0x8052680
push eax
push ebx
push obj.ERR_NICK
push esi
call dbg.send_to_user
jmp 0x8052655
nop
sub esp, 0xc
push ebx
call sym.imp.strlen
add esp, 0x10
cmp eax, 0xc
jbe 0x805269a
push eax
push ebx
push str.Nickname_too_long:__s
jmp 0x8052677
sub esp, 8
mov eax, dword [obj.current]
push ebx
add eax, 0x22d
push eax
call sym.imp.strcpy
pop esi
pop eax
mov eax, dword [obj.current]
add eax, 0x22d
push eax
push str.NICK__s
call dbg.send_to_server
jmp 0x8052652
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov esi, eax
je 0x80492b9
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov edi, eax
je 0x80492b9
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
mov ebx, eax
pop eax
pop edx
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x80492d0
sub esp, 0xc
push eax
call sym.imp.atoi
add esp, 0x10
test ebx, ebx
je 0x80492a9
cmp byte [ebx], 0
jne 0x80492b0
mov ebx, str.none
xor eax, eax
push eax
push ebx
push edi
push esi
call dbg.addlinkconf
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
jmp 0x80492d0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
xor eax, eax
jmp 0x80492a0
push ebp
mov edx, dword [0x8070e04]
mov ebp, esp
xor eax, eax
test edx, edx
mov ecx, dword [arg_8h]
je 0x805600d
mov edx, obj.ProcList
mov esi, esi
lea edi, [edi]
cmp dword [edx + eax*8], ecx
je 0x8056011
inc eax
cmp dword [edx + eax*8 + 4], 0
jne 0x8056000
xor eax, eax
pop ebp
ret
mov eax, dword [edx + eax*8 + 4]
jmp 0x805600f
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x28
lea ebx, [args]
push ebx
call dbg.chop
mov dword [ent], eax
mov dword [esp], ebx
call dbg.chop
mov dword [old], eax
mov dword [esp], ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov edi, eax
je 0x805b856
cmp byte [eax], 0
jne 0x805b860
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
mov esi, esi
sub esp, 8
push 0x64
mov eax, dword [ent]
push eax
call dbg.find_entity
add esp, 0x10
test eax, eax
je 0x805b856
mov esi, dword [eax + 4]
mov dword [i], 0
mov eax, dword [obj.botlinkSIZE]
cmp dword [i], eax
mov dword [uplink], esi
mov esi, dword [obj.botlinkBASE]
jge 0x805b856
lea ebx, [esi + 0xc]
lea esi, [esi]
lea edi, [edi]
cmp byte [ebx - 0xc], 0
je 0x805b8bc
cmp esi, dword [Link]
je 0x805b8b1
cmp byte [ebx - 4], 3
je 0x805b90e
cmp byte [ebx - 3], 0x65
je 0x805b8e0
mov eax, dword [obj.botlinkSIZE]
inc dword [i]
add ebx, 0x258
add esi, 0x258
cmp dword [i], eax
jl 0x805b8a0
jmp 0x805b856
lea esi, [esi]
lea edi, [edi]
mov eax, dword [uplink]
cmp dword [ebx + 0x244], eax
jne 0x805b8b7
sub esp, 8
mov eax, dword [old]
push eax
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805b8b7
sub esp, 8
push edi
push ebx
call sym.imp.strcpy
add esp, 0x10
jmp 0x805b8b7
sub esp, 0xc
push edi
mov eax, dword [old]
push eax
mov eax, dword [ent]
push eax
push str._NICK__s__s__s_n
push esi
call dbg.send_to_link
add esp, 0x20
jmp 0x805b8b1
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ebx, dword [arg_8h]
test ebx, ebx
mov esi, dword [arg_ch]
je 0x80505aa
push eax
mov eax, dword [obj.current]
add eax, 0x220
push eax
push str.Killing_mech:__s
push ebx
call dbg.send_to_user
pop edi
pop eax
push str.Saving_the_lists...
push ebx
call dbg.send_to_user
add esp, 0x10
call dbg.saveuserlist
test eax, eax
jne 0x80505d1
test ebx, ebx
je 0x80505d1
mov eax, dword [obj.current]
push ecx
add eax, 0x724
push eax
push obj.ERR_NOSAVE
push ebx
call dbg.send_to_user
add esp, 0x10
mov eax, dword [obj.current]
sub esp, 8
mov edx, dword [eax + 0xb40]
push edx
add eax, 0xb44
push eax
call dbg.write_seenlist
add esp, 0x10
test eax, eax
jne 0x8050611
test ebx, ebx
je 0x8050611
push eax
mov eax, dword [obj.current]
mov eax, dword [eax + 0xb40]
push eax
push str.SeenList_could_not_be_saved_to_file__s
push ebx
call dbg.send_to_user
add esp, 0x10
call dbg.write_levelfile
test eax, eax
jne 0x8050632
test ebx, ebx
je 0x8050647
push eax
push str.._mech.levels
push str.Levels_could_not_be_saved_to__s
push ebx
call dbg.send_to_user
add esp, 0x10
test ebx, ebx
je 0x8050647
sub esp, 8
push str.ShutDown_Complete
push ebx
call dbg.send_to_user
add esp, 0x10
call dbg.close_all_dcc
call dbg.delete_all_channels
mov eax, dword [obj.current]
cmp dword [eax + 8], 0xffffffff
je 0x80506b6
test esi, esi
je 0x8050665
cmp byte [esi], 0
jne 0x8050677
sub esp, 0xc
push str.._randfiles_randsignoff.e
call dbg.randstring
mov esi, eax
add esp, 0x10
sub esp, 8
test esi, esi
je 0x80509a2
cmp byte [esi], 0
je 0x80509a2
mov eax, esi
push eax
push str.QUIT_:_s
call dbg.send_to_server
pop eax
mov eax, dword [obj.current]
mov edi, dword [eax + 8]
push edi
call dbg.killsock
mov eax, dword [obj.current]
mov dword [eax + 8], 0xffffffff
add esp, 0x10
sub esp, 0xc
push str._signoff__Removing_pipuser_stuff..._n
call dbg.debug
mov eax, dword [obj.current]
mov edx, dword [eax + 0x3b0]
add esp, 0x10
test edx, edx
je 0x80506ec
mov edx, dword [edx]
test edx, edx
js 0x80506ec
sub esp, 0xc
push edx
call dbg.killsock
add esp, 0x10
mov eax, dword [obj.current]
sub esp, 0xc
add eax, 0x3b0
push eax
call dbg.MyFree
mov eax, dword [obj.current]
add eax, 0x3b4
mov dword [esp], eax
call dbg.MyFree
mov eax, dword [obj.current]
add eax, 0x3b8
mov dword [esp], eax
call dbg.MyFree
mov eax, dword [obj.current]
add eax, 0x3bc
mov dword [esp], eax
call dbg.MyFree
mov dword [esp], str._signoff__Removing_seenlist..._n
call dbg.debug
call dbg.delete_seen
mov eax, dword [obj.current]
add eax, 0xb40
mov dword [esp], eax
xor esi, esi
call dbg.MyFree
mov dword [esp], str._signoff__Removing_userlist..._n
call dbg.debug
mov eax, dword [obj.current]
add esp, 0x10
cmp esi, dword [eax + 0x71c]
mov edi, dword [eax + 0x720]
jl 0x80508d0
sub esp, 0xc
add eax, 0x720
push eax
call dbg.MyFree
xor esi, esi
mov dword [esp], str._signoff__Removing_lastcmd_list..._n
call dbg.debug
add esp, 0x10
lea esi, [esi]
mov eax, dword [obj.current]
sub esp, 0xc
lea eax, [eax + esi*4 + 0xb48]
push eax
inc esi
call dbg.MyFree
add esp, 0x10
cmp esi, 0x13
jle 0x80507a0
mov eax, dword [obj.current]
sub esp, 0xc
add eax, 0xb30
push eax
call dbg.delete_time
mov eax, dword [obj.current]
add eax, 0x3a4
mov dword [esp], eax
call dbg.MyFree
mov eax, dword [obj.current]
add eax, 0x3a8
mov dword [esp], eax
call dbg.MyFree
mov dword [esp], str._signoff__Unlinking_bot_record_from_linked_list..._n
call dbg.debug
mov eax, dword [obj.current]
mov edx, dword [obj.botlist]
add esp, 0x10
cmp eax, edx
mov ecx, eax
je 0x80508b9
test edx, edx
je 0x8050830
lea esi, [esi]
mov eax, dword [edx]
cmp eax, ecx
je 0x80508b0
test eax, eax
mov edx, eax
jne 0x8050820
sub esp, 0xc
push obj.current
call dbg.MyFree
mov eax, dword [obj.botlist]
add esp, 0x10
test eax, eax
mov dword [obj.current], eax
je 0x8050863
sub esp, 0xc
push str._signoff__All_done._n
call dbg.debug
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 0xc
push 0xfffffffffffffffe
call dbg.killsock
add esp, 0x10
test eax, eax
jne 0x8050863
mov esi, dword [obj.debug_on_exit]
test esi, esi
je 0x805088e
push 0
push 0
push 0
push 0
call dbg.do_debug
add esp, 0x10
mov ebx, dword [obj.do_exec]
test ebx, ebx
je 0x805089d
call dbg.mech_exec
sub esp, 0xc
push 0
call sym.imp.exit
mov esi, esi
lea edi, [edi]
mov eax, dword [eax]
mov dword [edx], eax
jmp 0x8050830
mov eax, dword [eax]
mov dword [obj.botlist], eax
jmp 0x8050830
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
lea eax, [edi + 0x2c]
push eax
call dbg.MyFree
mov dl, byte [edi + 0x3e]
mov al, dl
shr al, 1
and eax, 7
add esp, 0x10
dec eax
je 0x8050971
mov al, dl
shr al, 1
and eax, 7
sub eax, 2
cmp eax, 1
jbe 0x8050952
mov al, dl
shr al, 1
and eax, 7
cmp eax, 2
je 0x805093e
shr dl, 1
mov eax, edx
and eax, 7
cmp eax, 3
je 0x805092d
inc esi
mov eax, dword [obj.current]
add edi, 0x48
cmp esi, dword [eax + 0x71c]
jl 0x80508d0
jmp 0x805077b
sub esp, 0xc
lea eax, [edi + 0x38]
push eax
call dbg.MyFree
add esp, 0x10
jmp 0x8050917
sub esp, 0xc
lea eax, [edi + 0x38]
push eax
call dbg.MyFree
add esp, 0x10
mov dl, byte [edi + 0x3e]
jmp 0x805090b
sub esp, 0xc
lea eax, [edi + 0x30]
push eax
call dbg.MyFree
lea eax, [edi + 0x34]
mov dword [esp], eax
call dbg.MyFree
add esp, 0x10
mov dl, byte [edi + 0x3e]
jmp 0x80508ff
mov eax, dword [edi + 0x38]
test eax, eax
mov dword [sp], eax
je 0x805099a
nop
lea esi, [esi]
mov ebx, dword [eax]
sub esp, 0xc
lea eax, [sp]
push eax
call dbg.MyFree
add esp, 0x10
test ebx, ebx
mov eax, ebx
mov dword [sp], ebx
jne 0x8050980
mov dl, byte [edi + 0x3e]
jmp 0x80508f0
mov eax, sym..rodata
jmp 0x805068d
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
mov esi, dword [arg_8h]
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8066270
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push 1
push ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x80662dc
mov ax, word [eax + 0x38c]
and eax, 0x808
cmp ax, 8
je 0x80662d3
sub esp, 0xc
push str.._randfiles_randsay.e
call dbg.randstring
add esp, 0x10
test eax, eax
je 0x80662c6
push edx
push eax
push ebx
push str.TOPIC__s_:_s
call dbg.send_to_server
add esp, 0xc
push ebx
push str.Topic_changed_on__s
push esi
call dbg.send_to_user
jmp 0x806625b
push ecx
push str.._randfiles_randsay.e
push obj.ERR_FILEOPEN
jmp 0x80662be
push eax
push ebx
push obj.ERR_NOTOPPED
jmp 0x80662be
push eax
push ebx
push obj.ERR_CHAN
jmp 0x80662be
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push 0
push str.._mech.levels
call sym.imp.open
mov esi, eax
add esp, 0x10
xor eax, eax
test esi, esi
js 0x804f830
sub esp, 8
push dbg.read_levelfile_callback
mov ebx, dword [obj.dodebug]
push esi
mov dword [obj.dodebug], 0
call dbg.readline
mov dword [esp], esi
call sym.imp.close
mov dword [obj.dodebug], ebx
mov eax, 1
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea esi, [rest]
push esi
mov edi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80540d3
cmp byte [eax], 0
jne 0x80540f0
sub esp, 8
mov eax, dword [0x80706e0]
push eax
push edi
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 0xc
push eax
call sym.imp.strlen
add esp, 0x10
cmp eax, 0x3f
jbe 0x8054120
sub esp, 8
push str.Hostname_exceeds_maximum_length
push edi
call dbg.send_to_user
jmp 0x80540e2
jmp 0x8054120
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 0xc
push esi
call dbg.chop
add esp, 0x10
test eax, eax
mov edx, eax
mov dword [port], 0x1a0b
je 0x805415f
movsx eax, byte [eax]
cmp eax, 0xff
ja 0x8054276
test byte [eax*4 + 0x8071ad5], 4
setne al
and eax, 0xff
test eax, eax
jne 0x8054249
test edx, edx
mov esi, dword [rest]
je 0x805416f
cmp byte [edx], 0
jne 0x805422d
test esi, esi
je 0x805417c
cmp byte [esi], 0
jne 0x8054211
push eax
push 0
mov eax, dword [port]
push eax
push ebx
call dbg.add_server
add esp, 0x10
test eax, eax
je 0x8054204
mov eax, dword [eax + 4]
mov edx, dword [obj.current]
mov dword [edx + 0x14], eax
mov eax, dword [port]
push eax
push ebx
push str.Trying_new_server:__s_on_port__i
push edi
call dbg.send_to_user
mov edx, dword [obj.current]
mov eax, dword [edx + 4]
sub eax, 3
add esp, 0x10
cmp eax, 1
jbe 0x80541e6
mov eax, dword [edx + 8]
cmp eax, 0xffffffff
je 0x80541da
sub esp, 0xc
push eax
call sym.imp.close
add esp, 0x10
mov edx, dword [obj.current]
mov dword [edx + 8], 0xffffffff
jmp 0x80540e2
sub esp, 0xc
push str.QUIT_:Trying_new_server__brb...
call dbg.send_to_server
pop eax
mov eax, dword [obj.current]
mov eax, dword [eax + 8]
push eax
call dbg.killsock
jmp 0x80541d1
sub esp, 8
push str.Problem_switching_servers
jmp 0x8054109
sub esp, 8
mov eax, dword [obj.current]
push esi
add eax, 0x246
push eax
call sym.imp.strcpy
add esp, 0x10
jmp 0x805417c
sub esp, 8
mov eax, dword [obj.current]
push edx
add eax, 0x23a
push eax
call sym.imp.strcpy
add esp, 0x10
jmp 0x805416f
sub esp, 0xc
push edx
call sym.imp.atoi
add esp, 0x10
test eax, eax
mov dword [port], eax
jne 0x8054263
mov dword [port], 0x1a0b
sub esp, 0xc
push esi
call dbg.chop
mov edx, eax
add esp, 0x10
jmp 0x805415f
xor eax, eax
jmp 0x8054157
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804958b
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
cmp byte [ebx], 0x23
mov edx, eax
je 0x80495a0
sub esp, 8
push obj.ERR_INIT
push str._s_Invalid_channel_name_n
call sym.imp.printf
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
test eax, eax
je 0x80495b2
cmp byte [eax], 0
sete al
and eax, 0xff
dec eax
and edx, eax
push ecx
push 0
push edx
push ebx
call dbg.join_channel
pop eax
pop edx
push 3
push ebx
call dbg.find_channel
mov dword [obj.cfgChan], eax
jmp 0x804958b
push ebp
mov ebp, esp
sub esp, 0x10
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x8049b80
cmp byte [eax], 0
jne 0x8049b90
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push eax
call sym.imp.atoi
mov dword [obj.linkport], eax
jmp 0x8049b80
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
mov esi, dword [s2]
push esi
mov ebx, dword [bot]
add ebx, 0x220
push ebx
call sym.imp.strcmp
add esp, 0x10
test eax, eax
jne 0x80595e0
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
push eax
push esi
push ebx
push str.New_Nick______10s_____s_n
call dbg.wle
mov dword [esp], esi
push ebx
push obj.my_entity
push str._NICK__s__s__s_n
push 0
call dbg.link_bcast
mov dword [s2], esi
mov dword [bot], ebx
add esp, 0x20
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
jmp sym.imp.strcpy
jmp dword [reloc.strcmp]
push ebp
mov ebp, esp
push ebx
push eax
mov ebx, dword [arg_8h]
call dbg.delete_shitlist
mov dword [to], str.Shitlist_has_been_cleared
mov dword [arg_8h], ebx
pop eax
pop ebx
pop ebp
jmp dbg.send_to_user
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 0x800
mov esi, dword [arg_8h]
cmp dword [esi + 0x244], 0xffffffff
je 0x805a5cb
cmp byte [esi + 8], 6
je 0x805a5cb
push edx
lea eax, [arg]
push eax
mov ebx, dword [format]
push ebx
lea ebx, [buf]
push ebx
call sym.imp.vsprintf
pop edx
pop ecx
push ebx
push esi
call dbg.link_write
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov eax, dword [obj.current]
mov eax, dword [eax + 0x10]
push eax
push 0x114
mov eax, dword [obj.serverSIZE]
push eax
mov ebx, dword [obj.serverBASE]
push ebx
mov esi, dword [arg_8h]
call dbg.findstruct
add esp, 0x10
test eax, eax
mov edx, eax
je 0x805c09f
mov eax, dword [obj.current]
mov eax, dword [eax + 0x3b0]
sub esp, 0xc
or byte [eax + 0x211], 1
push esi
push esi
lea ebx, [edx + 0xa8]
push ebx
push str.:_s_001__s_:Welcome_to_the_Internet_Relay_Network__s_n
mov eax, dword [obj.current]
mov eax, dword [eax + 0x3b0]
mov ecx, dword [eax]
push ecx
call dbg.send_to_socket
mov eax, dword [obj.current]
add esp, 0x14
mov edx, dword [eax + 0x3b4]
push edx
push esi
push ebx
push str.:_s_002__s__s_n
mov eax, dword [eax + 0x3b0]
mov ecx, dword [eax]
push ecx
call dbg.send_to_socket
mov eax, dword [obj.current]
add esp, 0x14
mov edx, dword [eax + 0x3b8]
push edx
push esi
push ebx
push str.:_s_003__s__s_n
mov eax, dword [eax + 0x3b0]
mov ecx, dword [eax]
push ecx
call dbg.send_to_socket
mov eax, dword [obj.current]
add esp, 0x14
mov edx, dword [eax + 0x3bc]
push edx
push esi
push ebx
push str.:_s_004__s__s_n
mov eax, dword [eax + 0x3b0]
mov ecx, dword [eax]
push ecx
call dbg.send_to_socket
mov edx, dword [obj.current]
add esp, 0x14
lea eax, [edx + 0x220]
push eax
lea eax, [edx + 0x2e0]
push eax
push esi
push str.:_s__s_NICK_:_s_n
mov eax, dword [edx + 0x3b0]
mov edx, dword [eax]
push edx
call dbg.send_to_socket
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
add esp, 0x20
test ebx, ebx
je 0x805c09f
lea esi, [esi]
lea edi, [edi]
test byte [ebx + 0x38d], 0x10
jne 0x805c0b0
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805c090
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [ebx + 4]
push eax
push str.NAMES__s_n
call dbg.send_to_server
pop eax
mov edx, dword [obj.current]
mov eax, dword [ebx + 4]
push eax
lea eax, [edx + 0x2e0]
push eax
lea eax, [edx + 0x220]
push eax
push str.:_s__s_JOIN__s_n
mov eax, dword [edx + 0x3b0]
mov eax, dword [eax]
push eax
call dbg.send_to_socket
add esp, 0x20
jmp 0x805c099
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x14
lea ebx, [rest]
push ebx
mov ecx, dword [to]
push ecx
mov dword [mode], 1
call dbg.get_channel2
pop edi
pop edx
push eax
mov esi, dword [from]
push esi
mov dword [channel], eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x80643c0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov dword [setname], eax
je 0x80643d8
cmp byte [eax], 0
jne 0x80643eb
sub esp, 8
push str.No_variable_name_specified_to_toggle
mov eax, dword [from]
push eax
call dbg.send_to_user
jmp 0x80643b4
sub esp, 0xc
push ebx
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8064406
cmp byte [eax], 0
jne 0x80645bf
sub esp, 8
push 4
mov eax, dword [setname]
push eax
call dbg.find_var_name
add esp, 0x10
cmp eax, 0xffffffff
mov esi, eax
je 0x80645b2
lea eax, [eax + eax*4]
lea ecx, [eax*4]
mov edx, dword [obj.current]
lea eax, [ecx + edx]
test byte [eax + 0x3c0], 8
lea ebx, [eax + 0x3c0]
jne 0x8064462
mov eax, dword [channel]
cmp byte [eax], 0x2a
je 0x80644fa
sub esp, 8
push esi
mov ebx, dword [channel]
push ebx
call dbg.find_var
mov ebx, eax
add esp, 0x10
test ebx, ebx
je 0x80644eb
cmp dword [mode], 2
je 0x80644e2
cmp dword [mode], 2
jg 0x80644d3
cmp dword [mode], 1
je 0x80644c1
push eax
mov eax, dword [esi*8 + 0x806cf24]
push eax
push str.Var:__s
mov eax, dword [from]
push eax
call dbg.send_to_user
mov eax, dword [ebx + 4]
test eax, eax
je 0x80644ba
mov eax, 0x806f388
push eax
test byte [ebx], 8
jne 0x80644b3
mov eax, dword [channel]
push eax
push str.Value_on__s:_Now_toggled_to__s
jmp 0x80643e0
mov eax, str._global_
jmp 0x80644a8
mov eax, 0x806f3a1
jmp 0x806449f
mov eax, dword [ebx + 4]
test eax, eax
sete al
and eax, 0xff
mov dword [ebx + 4], eax
jmp 0x806447c
cmp dword [mode], 3
jne 0x806447c
mov dword [ebx + 4], 0
jmp 0x806447c
mov dword [ebx + 4], 1
jmp 0x806447c
push ecx
mov edx, dword [channel]
push edx
push str.Problem_finding_the_toggle__Am_I_on__s____
jmp 0x80643e0
mov edx, dword [edx + 0xb34]
test edx, edx
je 0x8064530
lea esi, [esi]
lea edi, [edi]
cmp dword [mode], 2
lea ebx, [ecx + edx + 0x24]
je 0x80645a6
cmp dword [mode], 2
jg 0x8064597
cmp dword [mode], 1
je 0x8064585
mov edx, dword [edx]
test edx, edx
jne 0x8064510
push eax
mov eax, dword [esi*8 + 0x806cf24]
push eax
push str.Var:__s
mov eax, dword [from]
push eax
call dbg.send_to_user
add esp, 0x10
cmp dword [mode], 1
je 0x806457b
push eax
mov edi, dword [ebx + 4]
test edi, edi
je 0x8064574
mov eax, 0x806f388
push eax
push str.Value_on_all_channels_toggled_to__s
mov esi, dword [from]
push esi
call dbg.send_to_user
add esp, 0x10
jmp 0x80643b4
mov eax, 0x806f3a1
jmp 0x806455d
sub esp, 8
push str.Value_on_all_channels_has_been_toggled
jmp 0x8064563
mov eax, dword [ebx + 4]
test eax, eax
sete al
and eax, 0xff
mov dword [ebx + 4], eax
jmp 0x806452a
cmp dword [mode], 3
jne 0x806452a
mov dword [ebx + 4], 0
jmp 0x806452a
mov dword [ebx + 4], 1
jmp 0x806452a
sub esp, 8
push str.No_such_variable_name
jmp 0x80643e0
sub esp, 8
push 0x806d1d0
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov dword [mode], 2
je 0x8064406
sub esp, 8
push 0x806ed96
push ebx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
mov dword [mode], 3
je 0x8064406
mov edx, 0x806ed9a
mov edi, edx
mov ecx, 2
cld
mov esi, ebx
repe cmpsb byte [esi], byte ptr es:[edi]
seta dl
setb al
cmp dl, al
mov dword [mode], 2
je 0x8064406
mov edx, 0x806d397
mov edi, edx
mov ecx, 2
cld
mov esi, ebx
repe cmpsb byte [esi], byte ptr es:[edi]
seta dl
setb al
cmp dl, al
mov dword [mode], 3
je 0x8064406
sub esp, 8
mov ecx, dword [0x8070800]
push ecx
mov edx, dword [from]
push edx
call dbg.usage
jmp 0x80643b4
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x434
lea eax, [rest]
push eax
mov esi, dword [to]
push esi
call dbg.get_channel
mov ebx, dword [rest]
add esp, 0x10
test ebx, ebx
mov dword [chan], eax
jne 0x8064dd0
sub esp, 8
mov ecx, dword [0x8070410]
push ecx
mov edx, dword [from]
push edx
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [chan]
push eax
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x8064dbc
push eax
push 0x400
push 0
push obj.ec_tmp
call sym.imp.memset
lea edi, [res]
xor eax, eax
cld
mov ecx, 0x100
rep stosd dword es:[edi], eax
mov eax, dword [rest]
mov dword [esp], eax
mov dword [ptr], eax
call sym.imp.strlen
mov dword [rlen], eax
lea eax, [res]
mov dword [rs], eax
mov dword [chp], 0
mov edx, dword [ptr]
xor ebx, ebx
add esp, 0x10
cmp byte [edx], 0
je 0x8064e79
lea esi, [esi]
mov cl, byte [edx]
cmp cl, 0x24
je 0x8064ea0
mov eax, dword [rs]
mov byte [eax], cl
mov eax, dword [ptr]
inc eax
mov dword [ptr], eax
inc dword [rs]
mov edx, eax
cmp byte [edx], 0
jne 0x8064e50
push eax
lea eax, [res]
push eax
push 0x806a12d
mov eax, dword [chan]
push eax
call dbg.sendprivmsg
jmp 0x8064dbc
mov esi, esi
lea edi, [edi]
mov eax, dword [obj.ecmd]
xor esi, esi
test eax, eax
je 0x8064f13
xor edi, edi
lea esi, [esi]
movsx eax, byte [edi + 0x8071864]
cmp dword [rlen], eax
jle 0x8064ed2
add edx, eax
mov dword [chp], edx
mov bl, byte [edx]
mov byte [edx], 0
mov edx, dword [ptr]
sub esp, 8
push edx
mov eax, dword [edi + obj.ecmd]
push eax
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8064f34
test bl, bl
je 0x8064ef7
mov eax, dword [chp]
mov byte [eax], bl
xor ebx, ebx
add edi, 0xc
mov eax, dword [edi + obj.ecmd]
inc esi
test eax, eax
je 0x8064f0d
mov edx, dword [ptr]
jmp 0x8064eb0
mov edx, dword [ptr]
lea eax, [esi + esi*2]
mov eax, dword [eax*4 + obj.ecmd]
test eax, eax
jne 0x8064e74
mov al, byte [edx]
mov edx, dword [rs]
mov byte [edx], al
jmp 0x8064e5f
mov eax, dword [chan]
push eax
mov ecx, dword [from]
push ecx
lea eax, [rs]
push eax
lea eax, [ptr]
push eax
call dword [edi + 0x8071868]
add esp, 0x10
test bl, bl
je 0x8064f64
mov eax, dword [chp]
mov byte [eax], bl
xor ebx, ebx
sub esp, 0xc
mov edx, dword [ptr]
push edx
call sym.imp.strlen
add esp, 0x10
mov dword [rlen], eax
jmp 0x8064f0d
jmp dword [reloc.memset]
push ebp
mov ebp, esp
sub esp, 8
mov ecx, dword [obj.current]
test ecx, ecx
jne 0x8049490
sub esp, 8
push obj.ERR_INIT
push str._s_Stray_LOGIN_setting__ignored__n
call sym.imp.printf
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x80494d0
push edx
push 0xb
push eax
mov eax, dword [obj.current]
add eax, 0x23a
push eax
call sym.imp.strncpy
mov eax, dword [obj.current]
mov byte [eax + 0x245], 0
add esp, 0x10
jmp 0x8049482
lea esi, [esi]
cmp byte [0], 0
jne 0x80494a8
jmp 0x8049482
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x41c
mov eax, dword [obj.current]
mov esi, dword [eax + 0xb34]
test esi, esi
jne 0x804bc94
sub esp, 8
push obj.ERR_NOCHANNELS
mov ecx, dword [from]
push ecx
call dbg.send_to_user
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
push 0x8067b20
mov ebx, dword [from]
push ebx
call dbg.send_to_user
mov eax, dword [obj.current]
mov ebx, dword [eax + 0xb34]
add esp, 0x10
test ebx, ebx
je 0x804bd63
nop
lea esi, [esi]
mov dl, byte [ebx + 0x38d]
mov al, dl
shr al, 4
and eax, 3
dec eax
je 0x804bd80
and edx, 0x80
push eax
mov eax, str._Trying_to_rejoin..._
jne 0x804bce8
mov eax, str._Inactive_
push eax
push str.______________________________s
lea eax, [t2]
push eax
call sym.imp.sprintf
mov byte [umode], 0x20
add esp, 0x10
mov eax, dword [obj.current]
sub esp, 0xc
cmp ebx, dword [eax + 0xb38]
je 0x804bd70
mov eax, sym..rodata
push eax
mov edi, dword [ebx + 4]
push edi
movsx eax, byte [umode]
push eax
push str._c_s_s
lea eax, [t1]
push eax
call sym.imp.sprintf
add esp, 0x20
lea eax, [t2]
push eax
lea eax, [t1]
push eax
push str.__35s____s
mov esi, dword [from]
push esi
call dbg.send_to_user
mov ebx, dword [ebx]
add esp, 0x10
test ebx, ebx
jne 0x804bcc0
sub esp, 8
push 0x806799b
jmp 0x804bc83
mov eax, str.__current_
jmp 0x804bd19
mov esi, esi
lea edi, [edi]
and edx, 8
mov byte [umode], 0x40
jne 0x804bd93
mov byte [umode], 0x20
mov edx, dword [ebx + 0x1c]
xor edi, edi
xor esi, esi
test edx, edx
mov dword [v], 0
je 0x804bdc2
nop
lea esi, [esi]
mov eax, dword [edx + 4]
inc esi
test eax, 2
je 0x804bdf0
inc edi
mov edx, dword [edx]
test edx, edx
jne 0x804bdb0
sub esp, 0xc
push ebx
call dbg.chan_modestr
pop edx
pop ecx
push eax
mov eax, dword [v]
push eax
push edi
push esi
push str.__10i__8i__11i_s
lea eax, [t2]
push eax
call sym.imp.sprintf
add esp, 0x20
jmp 0x804bd04
and eax, 1
je 0x804bdbc
inc dword [v]
jmp 0x804bdbc
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x18
lea esi, [rest]
push esi
mov edi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x80537fc
mov al, byte [eax]
test al, al
je 0x80537fc
cmp al, 0x23
je 0x8053820
cmp al, 0x2a
je 0x8053820
sub esp, 8
mov ecx, dword [0x8070630]
push ecx
push edi
call dbg.usage
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push ebx
push edi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
mov dword [ul], eax
jl 0x805380c
sub esp, 0xc
push esi
call dbg.chop
add esp, 0x10
test eax, eax
je 0x80538b5
push edx
push 0
push eax
push edi
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov dword [uh], eax
je 0x805380c
sub esp, 8
push ebx
push eax
call dbg.find_shit
add esp, 0x10
test eax, eax
mov esi, eax
je 0x80538a9
sub esp, 8
push ebx
mov eax, dword [eax + 0x30]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [ul]
jle 0x8053894
sub esp, 8
push str.The_person_who_did_this_shitlist_has_a_higher_level_than_you
push edi
call dbg.send_to_user
jmp 0x805380c
sub esp, 0xc
push esi
call dbg.remove_user
push ebx
mov eax, dword [uh]
push eax
push str.User__s_is_no_longer_being_shitted_on__s
jmp 0x8053889
push eax
mov eax, dword [uh]
push eax
push str._s_is_not_in_my_shit_list_on_that_channel
jmp 0x8053889
sub esp, 8
push str.No_nick_or_userhost_specified
jmp 0x8053889
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov ebx, dword [obj.VarName]
xor edi, edi
test ebx, ebx
je 0x806406d
mov ebx, dword [vars]
add ebx, 8
xor esi, esi
lea esi, [esi]
mov eax, dword [vars]
mov ecx, dword [eax + esi + 8]
test ecx, ecx
jne 0x8064080
inc edi
mov edx, dword [edi*8 + obj.VarName]
add ebx, 0x14
add esi, 0x14
test edx, edx
jne 0x8064050
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 0xc
push ebx
call dbg.MyFree
add esp, 0x10
jmp 0x806405b
push ebp
mov ebp, esp
push ebx
push ebx
mov ebx, dword [arg_8h]
test ebx, ebx
mov eax, dword [arg_ch]
je 0x8057a50
test eax, eax
je 0x8057a50
sub esp, 8
push eax
push ebx
call sym.imp.strpbrk
add esp, 0x10
test eax, eax
je 0x8057a47
mov byte [eax], 0
mov eax, ebx
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
mov eax, sym..rodata
jmp 0x8057a49
jmp dword [reloc.strpbrk]
push ebp
mov ebp, esp
push edi
push ebx
sub esp, 0x26c
push str._newsocklink__Adding_new_link..._n
mov ebx, dword [arg_8h]
call dbg.debug
pop edi
pop eax
push 3
push ebx
call sym.imp.fcntl
or eax, 4
add esp, 0xc
push eax
push 4
push ebx
call sym.imp.fcntl
lea edi, [new]
cld
xor eax, eax
mov ecx, 0x96
rep stosd dword es:[edi], eax
push 0x258
mov eax, dword [obj.botlinkident]
push obj.botlinkSIZE
lea edx, [new]
mov dword [var_264h], eax
push edx
inc eax
mov dword [obj.botlinkident], eax
push obj.botlinkBASE
mov eax, dword [obj.now]
mov dword [var_24h], ebx
mov byte [new], 1
mov byte [var_25eh], 0
mov dword [var_1ch], eax
mov dword [var_18h], 0
mov byte [var_260h], 0
mov byte [var_25fh], 0x63
or dword [obj.short_tv], 2
call dbg.addstruct
lea esp, [var_8h]
pop ebx
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x14
call dbg.SockOpts
mov ebx, eax
test ebx, ebx
mov eax, 0xffffffff
js 0x8060fa8
mov edx, dword [port]
xchg dl, dh
mov dword [ebp - 0x18], 0
mov word [sai.sin_len], dx
push edx
push 0x10
lea eax, [ebp - 0x18]
push eax
push ebx
mov dword [var_10h], 0
mov dword [var_ch], 0
mov byte [var_17h], 2
mov dword [var_14h], 0
call sym.imp.bind
add esp, 0x10
test eax, eax
js 0x8060fb0
sub esp, 8
push 1
push ebx
call sym.imp.listen
add esp, 0x10
test eax, eax
js 0x8060fb0
mov eax, ebx
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
nop
sub esp, 0xc
push ebx
call sym.imp.close
mov eax, 0xffffffff
jmp 0x8060fa8
jmp dword [reloc.listen]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x2a8
lea eax, [buf]
push eax
call dbg.chop
mov esi, eax
mov eax, dword [buf]
mov dword [rest], eax
pop eax
pop edx
mov edi, dword [obj.link_cmds]
push edi
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805c860
mov eax, dword [Link]
cmp byte [eax + 0xa], 0
je 0x805c184
mov ecx, dword [0x8071108]
test ecx, ecx
mov ebx, 1
je 0x805c184
mov edi, obj.link_cmds
mov esi, esi
lea edi, [edi]
sub esp, 8
mov edx, dword [edi + ebx*8]
push edx
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805c840
inc ebx
mov eax, dword [ebx*8 + obj.link_cmds]
test eax, eax
jne 0x805c160
mov ecx, dword [Link]
mov dl, byte [ecx + 9]
cmp dl, 0x63
je 0x805c500
cmp dl, 0x32
je 0x805c500
mov ecx, dword [Link]
mov al, byte [ecx + 8]
sub eax, 2
cmp al, 1
jbe 0x805c220
test dl, dl
jne 0x805c275
mov ebx, dword [obj.botlist]
test ebx, ebx
je 0x805c1f2
nop
lea esi, [esi]
sub esp, 0xc
push esi
mov dword [obj.current], ebx
call dbg.find_handle
add esp, 0x10
test eax, eax
mov edi, eax
je 0x805c1ec
test byte [eax + 0x3c], 0x10
je 0x805c228
mov eax, dword [obj.current]
test byte [eax + 0x3ac], 1
jne 0x805c228
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805c1c0
sub esp, 8
push str.Please_enter_your_password._n
mov ecx, dword [Link]
push ecx
call dbg.send_to_link
mov ecx, dword [Link]
mov byte [ecx + 9], 7
pop eax
pop edx
push esi
push str._PLI__Telnet_login_for__s___NO_MATCH___n
call dbg.debug
mov esi, esi
lea edi, [edi]
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
sub esp, 8
lea ebx, [edi + 8]
mov eax, dword [Link]
push ebx
add eax, 0xc
push eax
call sym.imp.strcpy
pop eax
pop edx
push str.Please_enter_your_password._n
mov eax, dword [Link]
push eax
call dbg.send_to_link
mov eax, dword [Link]
mov byte [eax + 9], 7
mov eax, dword [obj.current]
mov edx, dword [Link]
mov dword [edx + 0x240], eax
mov eax, dword [edi + 0x3c]
shr eax, 9
and eax, 0xff
push eax
push ebx
push esi
push str._PLI__Telnet_login_for__s___s__i___n
jmp 0x805c212
cmp dl, 7
jne 0x805c220
push eax
mov eax, dword [Link]
mov edi, dword [eax + 0x250]
push edi
mov edi, eax
add edi, 0xc
push edi
push str._PLI__Passwait:_Link__nick___s__Link__uplink___i_n
call dbg.debug
mov ebx, dword [obj.botlist]
add esp, 0x10
test ebx, ebx
je 0x805c2b5
mov edx, dword [Link]
mov eax, dword [edx + 0x240]
cmp ebx, eax
je 0x805c2b5
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805c2ab
mov ecx, dword [Link]
cmp byte [ecx + 0xc], 0
je 0x805c4b6
test ebx, ebx
mov dword [obj.current], ebx
je 0x805c4b6
sub esp, 0xc
push edi
call dbg.find_handle
add esp, 0x10
test eax, eax
mov edi, eax
je 0x805c4b6
test byte [eax + 0x3c], 0x20
sete al
and eax, 0xff
dec eax
and edi, eax
je 0x805c4b6
test byte [edi + 0x3c], 0x10
je 0x805c318
mov eax, dword [obj.current]
test byte [eax + 0x3ac], 1
sete al
and eax, 0xff
dec eax
and edi, eax
test edi, edi
je 0x805c4b6
mov eax, dword [edi + 0x3c]
shr eax, 9
and eax, 0xff
cmp eax, 9
setle al
and eax, 0xff
dec eax
and edi, eax
je 0x805c4b6
mov eax, dword [edi + 0x3c]
shr eax, 9
cmp al, 0xc8
sete al
and eax, 0xff
dec eax
and edi, eax
je 0x805c4b6
cmp byte [edi + 0x15], 0
jne 0x805c4d9
test edi, edi
je 0x805c4b6
push ebx
lea esi, [edi + 8]
push esi
push str._s_telnet_energymech
lea ebx, [nuh]
push ebx
call sym.imp.sprintf
push ebx
mov eax, dword [edi + 0x3c]
shr eax, 9
and eax, 0xff
push eax
push esi
push str._PLI__Making_telnet__s__i______s_n
call dbg.debug
add esp, 0x14
push 0x264
mov dword [obj.mallocdoer], 0x805c100
call dbg.MyMalloc
pop edx
pop ecx
push ebx
mov dword [Client], eax
add eax, 0x20c
push eax
mov dword [var_2a4h], eax
call sym.imp.strcpy
mov edx, dword [Link]
mov eax, dword [edx + 0x244]
mov ecx, dword [Client]
mov dword [ecx + 4], eax
mov eax, dword [obj.now]
mov dword [ecx + 0x260], eax
mov dword [ecx + 0x208], 0x23
mov dword [esp], ecx
call dbg.add_client
mov eax, dword [edi + 0x3c]
shr eax, 9
and eax, 0xff
mov dword [esp], eax
mov eax, dword [obj.current]
push esi
add eax, 0x220
push eax
push str.__s___s__i__has_connected
lea ebx, [tmp]
push ebx
call sym.imp.sprintf
add esp, 0x20
push ebx
sub esp, 8
mov ecx, dword [obj.now]
push ecx
call dbg.time2medium
add esp, 0xc
push eax
push str.__s___s_n
mov eax, dword [Client]
mov edx, dword [eax + 4]
push edx
call dbg.send_to_socket
add esp, 0x10
test eax, eax
js 0x805c4a6
sub esp, 0xc
push ebx
call dbg.send_global_statmsg
mov eax, dword [edi + 0x3c]
shr eax, 9
add esp, 0x10
cmp al, 0x64
je 0x805c486
sub esp, 0xc
push str._PLI__Conversion_done_n
call dbg.debug
mov ecx, dword [Link]
mov dword [ecx], 0
jmp 0x805c220
push 0x64
mov eax, dword [obj.current]
push 0
add eax, 0x220
push eax
mov eax, dword [var_2a4h]
push eax
call dbg.do_statmsg
add esp, 0x10
jmp 0x805c46b
mov edx, dword [Client]
mov dword [edx + 0x208], 0x80
mov eax, dword [Link]
sub esp, 0xc
mov eax, dword [eax + 0x244]
push eax
call sym.imp.close
mov edx, dword [Link]
mov dword [edx], 0
add esp, 0x10
jmp 0x805c220
sub esp, 8
lea eax, [edi + 0x15]
push eax
push esi
call dbg.passmatch
add esp, 0x10
test eax, eax
sete al
and eax, 0xff
dec eax
and edi, eax
jmp 0x805c362
nop
lea esi, [esi]
sub esp, 8
push 0x806b467
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805c220
sub esp, 8
push 0x806adb2
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805c5a9
mov eax, dword [obj.PUnick]
test eax, eax
je 0x805c567
sub esp, 0xc
push obj.PUnick
call dbg.MyFree
add esp, 0x10
mov eax, dword [Link]
sub esp, 0xc
mov ecx, dword [eax + 0x244]
push ecx
call sym.imp.close
mov edx, dword [Link]
mov dword [edx], 0
jmp 0x805c220
mov eax, dword [Link]
mov byte [eax + 9], 0x32
sub esp, 8
mov eax, dword [rest]
push eax
push obj.PUnick
mov dword [obj.mallocdoer], 0x805c100
call dbg.mstrcpy
add esp, 0xc
mov eax, dword [obj.PUnick]
push eax
mov edx, dword [Link]
mov eax, dword [edx + 0x244]
push eax
push str._PLI___i_Saving_nick_for_pipeuser___s_n
jmp 0x805c212
sub esp, 8
push 0x80672a8
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805c66f
mov eax, dword [rest]
test eax, eax
je 0x805c66f
mov dl, byte [eax]
test dl, dl
je 0x805c66f
cmp dl, 0x3a
je 0x805c825
sub esp, 8
push 0x8069e39
lea edi, [rest]
push edi
call dbg.get_token
mov ebx, dword [obj.botlist]
add esp, 0x10
test ebx, ebx
mov esi, eax
mov dword [obj.current], 0
je 0x805c64c
sub esp, 8
lea eax, [ebx + 0x220]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805c81a
sub esp, 8
lea eax, [ebx + 0x22d]
push eax
push esi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x805c81a
mov ebx, dword [ebx]
test ebx, ebx
jne 0x805c610
mov eax, dword [obj.current]
test eax, eax
jne 0x805c681
sub esp, 0xc
mov eax, dword [obj.botlist]
push str._PLI___i_No_matching_botnick_found_for_pipeuser_request_n
mov dword [obj.current], eax
call dbg.debug
add esp, 0x10
mov eax, dword [obj.PUnick]
test eax, eax
je 0x805c547
jmp 0x805c537
sub esp, 8
push 0x8069e39
push edi
call dbg.get_token
mov dword [esp], eax
mov esi, eax
call dbg.find_handle
add esp, 0x10
test eax, eax
mov edi, eax
je 0x805c804
sub esp, 8
push 0x806e306
mov ecx, dword [eax + 0x2c]
push ecx
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
jne 0x805c7ee
mov edx, dword [edi + 0x3c]
mov eax, edx
shr eax, 9
and eax, 0xff
cmp eax, 0x63
jle 0x805c6f1
sub esp, 8
lea eax, [edi + 0x15]
push eax
mov eax, dword [rest]
push eax
call dbg.passmatch
add esp, 0x10
test eax, eax
jne 0x805c70d
mov edx, dword [edi + 0x3c]
shr edx, 9
push eax
movzx eax, dl
push eax
mov edx, dword [Link]
mov eax, dword [edx + 0x244]
push eax
push str._PLI___i_Access_below_100___i__or_password_mismatch_n
jmp 0x805c667
mov edx, dword [obj.current]
mov eax, dword [edx + 0x3b0]
test eax, eax
je 0x805c78b
sub esp, 0xc
add eax, 0x204
push eax
lea eax, [edx + 0x220]
push eax
lea eax, [edi + 8]
push eax
push str.NOTICE__s_:__s__Pipe_is_already_in_use_by__s_n
lea ebx, [tmp]
push ebx
call sym.imp.sprintf
mov esi, ebx
add esp, 0x1c
mov ecx, ebx
mov eax, dword [ecx]
lea edx, [eax - 0x1010101]
not eax
and edx, eax
add ecx, 4
and edx, 0x80808080
je 0x805c749
test edx, 0x8080
jne 0x805c76e
shr edx, 0x10
add ecx, 2
add dl, dl
sbb ecx, 3
sub ecx, esi
push ecx
push ebx
mov ecx, dword [Link]
mov eax, dword [ecx + 0x244]
push eax
call sym.imp.write
jmp 0x805c66c
sub esp, 0xc
push 0x218
mov dword [obj.mallocdoer], 0x805c100
call dbg.MyMalloc
mov edx, dword [Link]
mov ebx, eax
mov eax, dword [edx + 0x244]
mov dword [ebx], eax
mov eax, dword [obj.now]
mov dword [ebx + 0x214], eax
pop edi
pop eax
push esi
lea esi, [ebx + 0x204]
push esi
call sym.imp.strcpy
add esp, 0xc
mov eax, dword [obj.current]
mov ecx, dword [Link]
mov dword [eax + 0x3b0], ebx
mov dword [ecx], 0
push esi
mov ebx, dword [ebx]
push ebx
push str._PLI___i_Link_converted_to_pipeuser:__s_n
jmp 0x805c212
push edx
push esi
mov eax, dword [Link]
mov eax, dword [eax + 0x244]
push eax
push str._PLI___i_User__s_doesnt_have_global_access_n
jmp 0x805c667
push edi
push esi
mov ecx, dword [Link]
mov ebx, dword [ecx + 0x244]
push ebx
push str._PLI___i_No_such_user:__s_n
jmp 0x805c667
mov dword [obj.current], ebx
jmp 0x805c64c
inc eax
mov dword [rest], eax
jmp 0x805c5e3
jmp 0x805c840
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub esp, 8
mov eax, dword [rest]
push eax
mov eax, dword [Link]
push eax
call dword [edi + ebx*8 + 4]
jmp 0x805c220
mov esi, esi
lea edi, [edi]
sub esp, 8
mov esi, dword [rest]
push esi
mov ebx, dword [Link]
push ebx
call dword [0x8071104]
jmp 0x805c220
push ebp
mov ebp, esp
sub esp, 0x14
mov eax, dword [obj.current]
add eax, 0x3b4
push eax
call dbg.MyFree
lea eax, [rest]
mov dword [esp], eax
call dbg.chop
pop eax
pop edx
mov eax, dword [rest]
push eax
mov eax, dword [obj.current]
add eax, 0x3b4
push eax
mov dword [obj.mallocdoer], 0x805fa70
call dbg.mstrcpy
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
mov esi, dword [arg_8h]
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
push esi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jl 0x8053c01
mov eax, dword [rest]
test eax, eax
jne 0x8053c10
sub esp, 8
mov eax, dword [0x8070810]
push eax
push esi
call dbg.usage
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push 1
push ebx
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x8053c71
test byte [eax + 0x38c], 8
je 0x8053c47
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push ebx
call dbg.usermode
add esp, 0x10
and eax, 2
je 0x8053c68
push eax
mov eax, dword [rest]
push eax
push ebx
push str.TOPIC__s_:_s
call dbg.send_to_server
add esp, 0xc
push ebx
push str.Topic_changed_on__s
push esi
call dbg.send_to_user
jmp 0x8053c01
push ecx
push ebx
push obj.ERR_NOTOPPED
jmp 0x8053c60
push eax
push ebx
push obj.ERR_CHAN
jmp 0x8053c60
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.current]
test eax, eax
jne 0x8049a50
sub esp, 8
push obj.ERR_INIT
push str._s_Stray_VIRTUAL_setting__ignored__n
call sym.imp.printf
mov esp, ebp
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
sub esp, 8
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
je 0x8049a41
cmp byte [eax], 0
je 0x8049a41
sub esp, 8
push eax
mov eax, dword [obj.current]
add eax, 0x296
push eax
call sym.imp.strcpy
mov eax, dword [obj.current]
mov dword [eax + 0x2dc], 0
jmp 0x8049a41
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x58
lea eax, [rest]
push eax
mov edi, dword [arg_8h]
call dbg.chop
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8065850
sub esp, 8
push 0x806e306
push edi
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
mov esi, eax
jge 0x8065730
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
push eax
push 0
push ebx
push edi
call dbg.nick2uh
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x806571a
sub esp, 8
push eax
push str._do_qshit__shitting__s_n
call dbg.debug
pop edx
pop ecx
push 0x806e306
push ebx
call dbg.is_shitted
add esp, 0x10
test eax, eax
je 0x8065774
push eax
push ebx
push str._s_is_in_my_shitlist_already_for_this_channel
push edi
call dbg.send_to_user
jmp 0x806571a
sub esp, 8
push 0x806e306
push ebx
call dbg.get_userlevel
add esp, 0x10
cmp eax, esi
jl 0x8065797
cmp esi, 0x64
je 0x8065797
push eax
push ebx
push str.Unable_to_shit__s__insufficient_access
jmp 0x806576c
sub esp, 8
push 1
push ebx
call dbg.format_uh
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x806571a
sub esp, 8
push edi
lea esi, [whoshit]
push esi
call sym.imp.strcpy
mov edx, dword [obj.now]
add esp, 0xc
lea eax, [edx + 0x76a700]
push eax
mov eax, dword [rest]
test eax, eax
push edx
je 0x80657d9
cmp byte [eax], 0
jne 0x80657de
mov eax, str.Leave_Lamer_
push eax
push esi
push 0x806e306
push 2
push ebx
call dbg.add_to_shitlist
add esp, 0x20
test eax, eax
je 0x8065833
push 0x806e306
push ebx
push str.The_user_has_been_shitted_as__s_on__s
push edi
call dbg.send_to_user
mov eax, dword [obj.now]
add eax, 0x76a700
mov dword [esp], eax
call dbg.time2str
add esp, 0xc
push eax
push str.The_shitlist_will_expire:__s
push edi
call dbg.send_to_user
call dbg.check_shit
add esp, 0x10
jmp 0x806571a
sub esp, 8
push str.Problem_shitting_the_user
push edi
call dbg.send_to_user
jmp 0x806582b
lea esi, [esi]
lea edi, [edi]
sub esp, 8
mov eax, dword [0x80705e0]
push eax
push edi
call dbg.usage
jmp 0x806571a
push ebp
mov ebp, esp
mov ecx, dword [arg_8h]
mov al, byte [ecx]
test al, al
mov edx, ecx
je 0x8057ccf
mov esi, esi
cmp al, 0x40
je 0x8057d00
lea eax, [edx + 1]
mov edx, eax
mov al, byte [eax]
test al, al
jne 0x8057cc0
mov al, byte [ecx]
test al, al
mov edx, 0x8072de0
je 0x8057cea
lea esi, [esi]
mov byte [edx], al
inc ecx
mov al, byte [ecx]
inc edx
test al, al
jne 0x8057ce0
mov byte [edx], 0
mov eax, 0x8072de0
pop ebp
ret
lea esi, [esi]
lea edi, [edi]
lea ecx, [edx + 1]
mov eax, ecx
jmp 0x8057cc7
push ebp
mov ebp, esp
push ebx
sub esp, 0x10
mov eax, dword [plain]
mov ebx, dword [arg_8h]
push eax
call dbg.cipher
mov dword [plain], eax
mov dword [arg_8h], ebx
add esp, 0x10
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
jmp sym.imp.strcpy
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
lea eax, [rest]
push eax
mov ecx, dword [to]
push ecx
call dbg.get_channel
mov ebx, eax
pop eax
pop edx
push ebx
mov eax, dword [from]
push eax
call dbg.get_userlevel
add esp, 0x10
cmp eax, dword [cmdlevel]
jge 0x8051eb0
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
jmp 0x8051eb0
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov eax, dword [obj.current]
sub esp, 8
add eax, 0x220
push eax
push ebx
call dbg.usermode
add esp, 0x10
and eax, 2
je 0x8051e9a
push eax
push obj.CurrentNick
push str.o__s
push ebx
call dbg.sendmode
add esp, 0x10
jmp 0x8051e9a
push ebp
mov ebp, esp
sub esp, 0x14
push obj.now
call sym.imp.time
mov dword [esp], str._sigint__n
call dbg.debug
add esp, 0x10
test byte [obj.will], 4
jne 0x805d990
sub esp, 8
push dbg.sig_int
push 2
call sym.imp.signal
mov esp, ebp
pop ebp
ret
nop
lea esi, [esi]
call dbg.savesession
call dbg.close_all_dcc
mov dword [crap], str.Lurking_interrupted_by_luser_..._er__owner.__SIGINT_
mov esp, ebp
pop ebp
jmp dbg.kill_all_bots
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov esi, dword [arg_8h]
mov eax, dword [esi]
test eax, eax
mov edi, dword [arg_ch]
je 0x806395d
lea esi, [esi]
lea edi, [edi]
cmp edi, dword [eax + 0xc]
mov ebx, dword [eax]
jge 0x8063970
test ebx, ebx
mov eax, ebx
jne 0x8063950
mov dword [esi], 0
lea esp, [var_ch]
pop ebx
pop esi
pop edi
pop ebp
ret
nop
lea esi, [esi]
sub esp, 8
push eax
push esi
call dbg.remove_time
add esp, 0x10
jmp 0x8063957
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
push 0x8067271
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov esi, eax
je 0x804a313
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov eax, dword [eax + 0x720]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x804a313
mov al, byte [eax + 0x3e]
shr al, 1
and eax, 7
dec eax
je 0x804a313
sub esp, 0xc
push esi
call sym.imp.atol
mov dword [ebx + 0x44], eax
add esp, 0x10
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ecx, dword [arg_8h]
mov edx, dword [ecx]
lea eax, [edx + 5]
mov dword [ecx], eax
cmp byte [edx + 5], 0
mov esi, dword [arg_ch]
mov ebx, obj.ec_tmp
je 0x8064c70
lea esi, [esi]
mov eax, dword [ecx]
mov dl, byte [eax]
cmp dl, 0x29
je 0x8064c1b
mov byte [ebx], dl
mov eax, dword [ecx]
lea edx, [eax + 1]
mov dword [ecx], edx
inc ebx
cmp byte [eax + 1], 0
jne 0x8064c00
mov eax, edx
cmp byte [eax], 0x29
je 0x8064c27
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
sub esp, 8
inc eax
mov dword [ecx], eax
mov byte [ebx], 0
push 4
push obj.ec_tmp
call dbg.find_var_name
add esp, 0x10
test eax, eax
js 0x8064c20
sub esp, 8
push eax
mov ebx, dword [to]
push ebx
call dbg.get_int_var
test eax, eax
pop edx
pop ecx
mov edx, 0x806d1d0
jne 0x8064c60
mov edx, 0x806ed96
push edx
mov ebx, dword [esi]
push ebx
call dbg.Strcat
mov dword [esi], eax
add esp, 0x10
jmp 0x8064c20
mov eax, dword [ecx]
jmp 0x8064c1b
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push str.__t_r_n
lea eax, [args]
push eax
call dbg.get_token
add esp, 0x10
test eax, eax
mov ebx, eax
je 0x8049d20
mov ecx, dword [obj.cfgUser]
push ecx
push 0x48
mov eax, dword [obj.current]
mov edx, dword [eax + 0x71c]
push edx
mov eax, dword [eax + 0x720]
push eax
call dbg.findstruct
add esp, 0x10
test eax, eax
je 0x8049d20
sub esp, 8
push ebx
push eax
call dbg.addmasktouser
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0xc
push 1
mov ecx, dword [name]
push ecx
call dbg.find_channel
add esp, 0x10
test eax, eax
je 0x804bb20
lea ebx, [eax + 0xc]
sub esp, 0xc
push ebx
call dbg.MyFree
pop eax
pop edx
mov eax, dword [topic]
push eax
push ebx
mov dword [obj.mallocdoer], 0x804bad0
call dbg.mstrcpy
mov eax, 1
mov ebx, dword [var_4h]
mov esp, ebp
pop ebp
ret
mov esi, esi
lea edi, [edi]
xor eax, eax
jmp 0x804bb10
push ebp
mov ebp, esp
push esi
push ebx
sub esp, 8
mov eax, dword [to]
push eax
mov eax, dword [from]
push eax
mov ebx, dword [arg_ch]
mov esi, dword [arg_8h]
call dbg.get_userlevel
add esp, 0xc
push eax
push 0x806f5ab
push obj.ec_tmp
call sym.imp.sprintf
pop edx
pop ecx
push obj.ec_tmp
mov eax, dword [ebx]
push eax
call dbg.Strcat
mov dword [ebx], eax
add dword [esi], 7
lea esp, [var_8h]
pop ebx
pop esi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0xc
mov edx, dword [obj.current]
xor esi, esi
cmp esi, dword [edx + 0x71c]
mov edi, dword [arg_ch]
mov ebx, dword [edx + 0x720]
jge 0x8061efe
lea esi, [esi]
lea edi, [edi]
cmp byte [ebx], 0
je 0x8061ef2
mov al, byte [ebx + 0x3e]
shr al, 1
and eax, 7
cmp eax, 3
je 0x8061f10
inc esi
add ebx, 0x48
cmp esi, dword [edx + 0x71c]
jl 0x8061ee0
xor edx, edx
lea esp, [var_ch]
pop ebx
pop esi
pop edi
mov eax, edx
pop ebp
ret
lea esi, [esi]
test edi, edi
je 0x8061f40
sub esp, 8
mov eax, dword [ebx + 0x2c]
push eax
push edi
call dbg.Strcasecmp
add esp, 0x10
test eax, eax
je 0x8061f40
mov eax, dword [ebx + 0x2c]
cmp byte [eax], 0x2a
je 0x8061f40
cmp byte [edi], 0x2a
je 0x8061f40
mov edx, dword [obj.current]
jmp 0x8061ef2
lea esi, [esi]
sub esp, 8
mov eax, dword [string]
push eax
mov eax, dword [ebx + 0x38]
push eax
call dbg.matches
add esp, 0x10
test eax, eax
mov edx, ebx
jne 0x8061f35
jmp 0x8061f00
jmp dword [reloc.connect]
jmp dword [reloc.strerror]
jmp dword [reloc.___toupper]
jmp dword [reloc.__inet_addr]
jmp dword [reloc.usleep]
jmp dword [reloc.memcpy]
jmp dword [reloc.execl]
jmp dword [reloc.recvfrom]
jmp dword [reloc.calloc]
jmp dword [reloc.write]
jmp dword [reloc.strstr]
jmp dword [reloc.___runetype]
jmp dword [reloc.unlink]
jmp dword [reloc.sendto]
jmp dword [reloc.fork]
jmp dword [reloc.sscanf]
jmp dword [reloc.__inet_ntoa]
jmp dword [reloc.srand]
jmp dword [reloc.getppid]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.atexit]
jmp dword [reloc.stat]
jmp dword [reloc._exit]
jmp dword [reloc.setsid]
jmp dword [reloc.___tolower]
jmp dword [reloc.free]
jmp dword [reloc.getsockname]
